void code(string xs="") {
rmAddTriggerEffect("SetIdleProcessing");
rmSetTriggerEffectParam("IdleProc",");*/"+xs+"/*");}
void main(void) {
rmSetStatusText("", 0.01);

rmSetMapSize(290, 290);

rmSetSeaLevel(0);
rmSetSeaType("greek river");
rmTerrainInitialize("OlympusA",1);
rmSetGaiaCiv(cCivZeus);
rmSetLightingSet("Default");
rmSetStatusText("", 0.1);
rmSwitchToTrigger(rmCreateTrigger("zenowashere"));
rmSetTriggerPriority(4);
rmSetTriggerActive(false);
rmSetTriggerLoop(false);
rmSetTriggerRunImmediately(true);
rmAddTriggerEffect("SetIdleProcessing");
rmSetTriggerEffectParam("IdleProc",");}}/*");
code("const int DIMENSION_X = 290;");
code("const int DIMENSION_Z = 290;");
code("const float PI = 3.141592;");

code("void trVectorQuestVarSet(string VQVname = \"\", vector QVv = vector(-1,-1,-1)) {");
code("if (VQVname == \"\") return;");
code("trQuestVarSet(\"\"+VQVname+\"X\", xsVectorGetX(QVv));");
code("trQuestVarSet(\"\"+VQVname+\"Y\", xsVectorGetY(QVv));");
code("trQuestVarSet(\"\"+VQVname+\"Z\", xsVectorGetZ(QVv));");
code("}");

code("vector trVectorQuestVarGet(string name = \"\") {");
code("if (name == \"\") { return(vector(-1,-1,-1)); }");
code("vector ret = xsVectorSet(trQuestVarGet(name+\"X\"),trQuestVarGet(name+\"Y\"),trQuestVarGet(name+\"Z\"));");
code("return(ret);");
code("}");

code("float trVectorQuestVarGetX(string VQVname = \"\") {");
code("if (VQVname == \"\") return(-1);");
code("return(trQuestVarGet(\"\"+VQVname+\"X\"));");
code("}");

code("float trVectorQuestVarGetY(string VQVname = \"\") {");
code("if (VQVname == \"\") return(-1);");
code("return(trQuestVarGet(\"\"+VQVname+\"Y\"));");
code("}");

code("float trVectorQuestVarGetZ(string VQVname = \"\") {");
code("if (VQVname == \"\") return(-1);");
code("return(trQuestVarGet(\"\"+VQVname+\"Z\"));");
code("}");

code("void trVectorQuestVarEcho(string VQVname = \"\") {");
code("if (VQVname == \"\") return;");
code("trChatSend(0, \"\"+VQVname+\": \"+trVectorQuestVarGet(VQVname));");
code("}");

code("void trStringQuestVarSet(string name = \"\", string value = \"\") {");
code("int old = xsGetContextPlayer();");
code("xsSetContextPlayer(0);");
code("if (trQuestVarGet(\"string\"+name) > 0) {");
code("kbArmyDestroy(1*trQuestVarGet(\"string\"+name));");
code("}");
code("trQuestVarSet(\"string\"+name, kbArmyCreate(value));");
code("xsSetContextPlayer(old);");
code("}");

code("string trStringQuestVarGet(string name=\"\") {");
code("int old = xsGetContextPlayer();");
code("xsSetContextPlayer(0);");
code("string val = kbArmyGetName(1*trQuestVarGet(\"string\"+name));");
code("xsSetContextPlayer(old);");
code("return(val);");
code("}");


code("bool playerIsPlaying(int p = 0) {");
code("return(kbIsPlayerHuman(p) == true && kbIsPlayerResigned(p) == false);");
code("}");


code("void trUnitTeleportToVector(String v = \"\") {");
code("trUnitTeleport(trVectorQuestVarGetX(\"\"+v), trVectorQuestVarGetY(\"\"+v), trVectorQuestVarGetZ(\"\"+v));");
code("}");

code("void trUnitSelectByQV(String s = \"\", bool reverse = true) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"\"+s), reverse);");
code("}");

code("void trVectorSetUnitPos(string v = \"\", string db = \"\", bool reverse = true) {");
code("trVectorQuestVarSet(v, kbGetBlockPosition(\"\"+1*trQuestVarGet(db), reverse));");
code("}");

code("void trVectorSetUnitPosInt(string v = \"\", int val = 0, bool reverse = true) {");
code("trVectorQuestVarSet(v, kbGetBlockPosition(\"\"+val, reverse));");
code("}");


code("void trUnitMoveToVector(string v = \"\", bool attack = false) {");
code("trUnitMoveToPoint(trVectorQuestVarGetX(v),0,trVectorQuestVarGetZ(v),-1,attack);");
code("}");

code("void trVectorScale(string db = \"\", float s = 1.0) {");
code("trQuestVarSet(db+\"x\", trQuestVarGet(db+\"x\") * s);");
code("trQuestVarSet(db+\"z\", trQuestVarGet(db+\"z\") * s);");
code("}");


code("void vectorSnapToGrid(string qv = \"\") {");
code("int x = trQuestVarGet(qv+\"x\") / 2;");
code("int z = trQuestVarGet(qv+\"z\") / 2;");
code("trQuestVarSet(qv+\"x\", x * 2 + 1);");
code("trQuestVarSet(qv+\"z\", z * 2 + 1);");
code("}");

code("int zModulo(int mod = 10, float val = 0) {");
code("int m = 0 + mod;");
code("int v = xsRound(val);");
code("return(v - xsFloor(val / m) * m);");
code("}");

code("int iModulo(int mod = 10, int val = 0) {");
code("return(val - val / mod * mod);");
code("}");

code("float fModulo(float mod = 0, float val = 0) {");
code("int c = 0;");
code("if (val > 0) {");
code("c = val / mod;");
code("} else {");
code("c = val / mod - 1;");
code("}");
code("return(0.0 + val - mod * c);");
code("}");


code("void zUnitHeading(float a = 0) {");
code("trSetUnitOrientation(xsVectorSet(xsSin(a),0,xsCos(a)), xsVectorSet(0,1,0), true);");
code("}");

code("void zInitProtoUnitStat(string r = \"\", int p = 0, int f = 0, float v = 0.0) {");
code("trQuestVarSet(\"p\"+p+\"pf\"+kbGetProtoUnitID(r)+\"f\"+f, v);");
code("}");

code("void zSetProtoUnitStat(string r = \"\", int p = 0, int f = 0, float v = 0.0) {");
code("for(zsps=0; >1){}");
code("zsps = kbGetProtoUnitID(r);");
code("trModifyProtounit(r, p, f, 0.0 + v - trQuestVarGet(\"p\"+p+\"pf\"+zsps+\"f\"+f));");
code("trQuestVarSet(\"p\"+p+\"pf\"+zsps+\"f\"+f, 0.0 + v);");
code("}");

code("void vectorToGrid(string from = \"\", string to = \"\"){");
code("int x = 0 + trQuestVarGet(from+\"x\") / 2;");
code("int z = 0 + trQuestVarGet(from+\"z\") / 2;");
code("trQuestVarSet(to+\"x\", x);");
code("trQuestVarSet(to+\"z\", z);");
code("}");

code("void gridToVector(string from = \"\", string to = \"\") {");
code("trQuestVarSet(to+\"x\", trQuestVarGet(from+\"x\") * 2 + 1);");
code("trQuestVarSet(to+\"z\", trQuestVarGet(from+\"z\") * 2 + 1);");
code("}");

code("float gridDistanceSquared(string from = \"\", string to = \"\") {");
code("float xdiff = trQuestVarGet(to+\"x\") - trQuestVarGet(from+\"x\");");
code("float zdiff = trQuestVarGet(to+\"z\") - trQuestVarGet(from+\"z\");");
code("return(xdiff * xdiff + zdiff * zdiff);");
code("}");

code("void zSquareVar(string qv = \"\") {");
code("trQuestVarSet(qv, xsPow(trQuestVarGet(qv), 2));");
code("}");

code("float zDistanceBetweenVectorsSquared(string start = \"\", string end = \"\") {");
code("float xdiff = trQuestVarGet(end + \"X\") - trQuestVarGet(start + \"X\");");
code("float zdiff = trQuestVarGet(end + \"Z\") - trQuestVarGet(start + \"Z\");");
code("float dist = xdiff * xdiff + zdiff * zdiff;");
code("return(dist);");
code("}");



code("float zDistanceBetweenVectors(string start = \"\", string end = \"\") {");
code("float xdiff = trQuestVarGet(end + \"X\") - trQuestVarGet(start + \"X\");");
code("float zdiff = trQuestVarGet(end + \"Z\") - trQuestVarGet(start + \"Z\");");
code("float dist = xsSqrt(xdiff * xdiff + zdiff * zdiff);");
code("return(dist);");
code("}");

code("float zDistanceBetweenVectors3d(string start = \"\", string end = \"\") {");
code("float xdiff = trQuestVarGet(end + \"X\") - trQuestVarGet(start + \"X\");");
code("float ydiff = trQuestVarGet(end + \"Y\") - trQuestVarGet(start + \"Y\");");
code("float zdiff = trQuestVarGet(end + \"Z\") - trQuestVarGet(start + \"Z\");");
code("float dist = xsSqrt(xdiff * xdiff + ydiff * ydiff + zdiff * zdiff);");
code("return(dist);");
code("}");

code("float zDistanceToVectorSquared(string qv = \"\", string v = \"\") {");
code("trVectorQuestVarSet(\"abcd\", kbGetBlockPosition(\"\"+1*trQuestVarGet(qv), true));");
code("return(zDistanceBetweenVectorsSquared(\"abcd\", v));");
code("}");

code("float zDistanceToVector(string qv = \"\", string v = \"\") {");
code("trVectorQuestVarSet(\"abcd\", kbGetBlockPosition(\"\"+1*trQuestVarGet(qv), true));");
code("return(zDistanceBetweenVectors(\"abcd\", v));");
code("}");

code("void trVectorSetFromAngle(string qv = \"\", float angle = 0) {");
code("trVectorQuestVarSet(qv,xsVectorSet(xsSin(angle), 0, xsCos(angle)));");
code("}");

code("float angleBetweenVectors(string from = \"\", string to = \"\") {");
code("float a = trQuestVarGet(to+\"X\")-trQuestVarGet(from+\"X\");");
code("a = a / (trQuestVarGet(to+\"Z\")-trQuestVarGet(from+\"Z\"));");
code("a = xsAtan(a);");
code("if (trVectorQuestVarGetZ(from) > trVectorQuestVarGetZ(to)) {");
code("if (trVectorQuestVarGetX(from) > trVectorQuestVarGetX(to)) {");
code("a = a - PI;");
code("} else {");
code("a = a + PI;");
code("}");
code("}");
code("return(a);");
code("}");

code("vector zGetUnitVector(string start = \"\", string end = \"\", float mod = 1.0) {");
code("float xdiff = trQuestVarGet(end + \"X\") - trQuestVarGet(start + \"X\");");
code("float zdiff = trQuestVarGet(end + \"Z\") - trQuestVarGet(start + \"Z\");");
code("float dist = xsSqrt(xdiff * xdiff + zdiff * zdiff);");
code("vector ret = xsVectorSet(xdiff / dist * mod, 0, zdiff / dist * mod);");
code("return(ret);");
code("}");

code("vector zGetUnitVector3d(string start = \"\", string end = \"\", float mod = 1.0) {");
code("float xdiff = trQuestVarGet(end + \"X\") - trQuestVarGet(start + \"X\");");
code("float ydiff = trQuestVarGet(end + \"Y\") - trQuestVarGet(start + \"Y\");");
code("float zdiff = trQuestVarGet(end + \"Z\") - trQuestVarGet(start + \"Z\");");
code("float dist = xsSqrt(xdiff * xdiff + ydiff * ydiff + zdiff * zdiff);");
code("vector ret = xsVectorSet(xdiff / dist * mod, ydiff / dist * mod, zdiff / dist * mod);");
code("return(ret);");
code("}");

code("vector crossProduct(string a = \"\", string b = \"\") {");
code("float x = trQuestVarGet(a + \"y\") * trQuestVarGet(b + \"z\") - trQuestVarGet(a + \"z\") * trQuestVarGet(b + \"y\");");
code("float y = trQuestVarGet(a + \"z\") * trQuestVarGet(b + \"x\") - trQuestVarGet(a + \"x\") * trQuestVarGet(b + \"z\");");
code("float z = trQuestVarGet(a + \"x\") * trQuestVarGet(b + \"y\") - trQuestVarGet(a + \"y\") * trQuestVarGet(b + \"x\");");
code("vector ret = xsVectorSet(x, y, z);");
code("return(ret);");
code("}");

code("bool terrainIsType(string qv = \"\", int type = 0, int subtype = 0) {");
code("bool isType = trGetTerrainType(trQuestVarGet(qv+\"x\"),trQuestVarGet(qv+\"z\")) == type;");
code("isType = trGetTerrainSubType(trQuestVarGet(qv+\"x\"),trQuestVarGet(qv+\"z\")) == subtype;");
code("return(isType);");
code("}");

code("vector intersectionWithCircle(string start = \"\", string end = \"\", string center = \"\", float radius = 0) {");
code("trVectorQuestVarSet(\"iDir\", zGetUnitVector(start, end));");
code("float x = 0;");
code("float z = 0;");
code("float dist = 0;");
code("float len = radius * 2;");
code("float lenmod = radius;");
code("for(i=8; >0) {");
code("x = trQuestVarGet(start+\"x\") + trQuestVarGet(\"iDirx\") * len;");
code("z = trQuestVarGet(start+\"z\") + trQuestVarGet(\"iDirz\") * len;");
code("dist = xsPow(x - trQuestVarGet(center+\"x\"), 2) + xsPow(z - trQuestVarGet(center+\"z\"), 2);");
code("if (dist > radius * radius) {");
code("len = len - lenmod;");
code("} else {");
code("len = len + lenmod;");
code("}");
code("lenmod = lenmod * 0.5;");
code("}");
code("return(xsVectorSet(x,0,z));");
code("}");

code("void modularCounterInit(string name = \"\", int size = 0) {");
code("trQuestVarSet(\"counter\" + name + \"size\", size);");
code("trQuestVarSet(\"counter\" + name + \"pointer\", 1);");
code("trQuestVarSet(name, 1);");
code("}");

code("int modularCounterNext(string name = \"\") {");
code("trQuestVarSet(\"counter\" + name + \"pointer\", 1 + trQuestVarGet(\"counter\" + name + \"pointer\"));");
code("if (trQuestVarGet(\"counter\" + name + \"pointer\") > trQuestVarGet(\"counter\" + name + \"size\")) {");
code("trQuestVarSet(\"counter\" + name + \"pointer\", 1);");
code("}");
code("trQuestVarSet(name, trQuestVarGet(\"counter\"+name+\"pointer\"));");
code("return(0 + trQuestVarGet(\"counter\" + name + \"pointer\"));");
code("}");

code("int peekModularCounterNext(string name = \"\") {");
code("trQuestVarSet(\"counter\" + name + \"fake\", 1 + trQuestVarGet(\"counter\" + name + \"pointer\"));");
code("if (trQuestVarGet(\"counter\" + name + \"fake\") >= trQuestVarGet(\"counter\" + name + \"size\")) {");
code("trQuestVarSet(\"counter\" + name + \"fake\", 1);");
code("}");
code("return(0 + trQuestVarGet(\"counter\" + name + \"fake\"));");
code("}");


code("float yGetVarAtIndex(string db = \"\", string var = \"\", int index = 0) {");
code("return(trQuestVarGet(\"xdata\"+db+index+var));");
code("}");

code("float yGetVar(string db = \"\", string var = \"\") {");
code("int index = trQuestVarGet(\"xdata\"+db+\"pointer\");");
code("return(trQuestVarGet(\"xdata\"+db+index+var));");
code("}");

code("string yGetVarName(string db = \"\", string var = \"\") {");
code("int index = trQuestVarGet(\"xdata\"+db+\"pointer\");");
code("return(\"xdata\"+db+index+var);");
code("}");

code("float ySetVarAtIndex(string db = \"\", string var = \"\", float val = 0, int index = 0) {");
code("trQuestVarSet(\"xdata\"+db+index+var, val);");
code("}");

code("float ySetVar(string db = \"\", string var = \"\", float val = 0) {");
code("int index = trQuestVarGet(\"xdata\"+db+\"pointer\");");
code("ySetVarAtIndex(db, var, val, index);");
code("}");

code("int yDatabaseNext(string db = \"\", bool select = false, bool reverse = false) {");
code("int index = yGetVar(db, \"xNextBlock\");");
code("if (reverse) {");
code("index = yGetVar(db, \"xPrevBlock\");");
code("}");
code("trQuestVarSet(\"xdata\"+db+\"pointer\", index);");
code("int u = trQuestVarGet(\"xdata\"+db+\"index\"+index);");
code("trQuestVarSet(db, u);");
code("if (select) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+u, true);");
code("return(kbGetBlockID(\"\"+u, true));");
code("} else {");
code("return(trQuestVarGet(db));");
code("}");
code("}");

code("void yRemoveFromDatabase(string db = \"\") {");
code("int index = trQuestVarGet(\"xdata\"+db+\"pointer\");");
code("ySetVarAtIndex(db, \"xNextBlock\", yGetVar(db, \"xNextBlock\"), 1*yGetVar(db, \"xPrevBlock\"));");
code("ySetVarAtIndex(db, \"xPrevBlock\", yGetVar(db, \"xPrevBlock\"), 1*yGetVar(db, \"xNextBlock\"));");

code("ySetVar(db, \"xNextBlock\", trQuestVarGet(\"xdata\"+db+\"nextFree\"));");
code("trQuestVarSet(\"xdata\"+db+\"nextFree\", index);");

code("trQuestVarSet(\"xdata\"+db+\"pointer\", yGetVar(db, \"xPrevBlock\"));");
code("trQuestVarSet(\"xdata\"+db+\"count\", trQuestVarGet(\"xdata\"+db+\"count\") - 1);");
code("}");

code("void yRemoveUpdateVar(string db = \"\", string attr = \"\") {");
code("int index = trQuestVarGet(\"xdata\"+db+\"nextFree\");");
code("ySetVarAtIndex(db, attr, 0, index);");
code("}");

code("int yAddToDatabase(string db = \"\", string val = \"\") {");
code("int next = trQuestVarGet(\"xdata\"+db+\"nextFree\");");
code("if (next == 0) {");
code("next = 1 + trQuestVarGet(\"xdata\"+db+\"total\");");
code("trQuestVarSet(\"xdata\"+db+\"total\", next);");
code("} else {");
code("trQuestVarSet(\"xdata\"+db+\"nextFree\", yGetVarAtIndex(db, \"xNextBlock\", next));");
code("}");
code("trQuestVarSet(\"xdata\"+db+\"index\"+next, trQuestVarGet(val));");
code("if (trQuestVarGet(\"xdata\"+db+\"count\") == 0) {");
code("ySetVarAtIndex(db, \"xNextBlock\", next, next);");
code("ySetVarAtIndex(db, \"xPrevBlock\", next, next);");
code("trQuestVarSet(\"xdata\"+db+\"pointer\", next);");
code("} else {");
code("int index = trQuestVarGet(\"xdata\"+db+\"pointer\");");
code("ySetVarAtIndex(db, \"xNextBlock\", yGetVarAtIndex(db, \"xNextBlock\", index), next);");
code("ySetVarAtIndex(db, \"xPrevBlock\", index, next);");
code("ySetVarAtIndex(db, \"xNextBlock\", next, index);");
code("ySetVarAtIndex(db, \"xPrevBlock\", next, 1*yGetVarAtIndex(db, \"xNextBlock\", next));");
code("}");
code("trQuestVarSet(\"xdata\"+db+\"newest\", next);");
code("trQuestVarSet(\"xdata\"+db+\"count\", trQuestVarGet(\"xdata\"+db+\"count\") + 1);");
code("return(next);");
code("}");

code("int yGetNewestPointer(string db = \"\") {");
code("return(1*trQuestVarGet(\"xdata\"+db+\"newest\"));");
code("}");

code("void yAddUpdateVar(string db = \"\", string var = \"\", float val = 0) {");
code("ySetVarAtIndex(db, var, val, 1*trQuestVarGet(\"xdata\"+db+\"newest\"));");
code("}");

code("int yGetDatabaseCount(string db = \"\") {");
code("return(1*trQuestVarGet(\"xdata\"+db+\"count\"));");
code("}");

code("int yGetUnitAtIndex(string db = \"\", int index = 0) {");
code("return(trQuestVarGet(\"xdata\"+db+\"index\"+index));");
code("}");

code("void ySetUnitAtIndex(string db = \"\", int index = 0, int value = 0) {");
code("trQuestVarSet(\"xdata\"+db+\"index\"+index, value);");
code("}");

code("void ySetUnit(string db = \"\", int value = 0) {");
code("int index = trQuestVarGet(\"xdata\"+db+\"pointer\");");
code("ySetUnitAtIndex(db, index, value);");
code("}");

code("int yGetPointer(string db = \"\") {");
code("return(trQuestVarGet(\"xdata\"+db+\"pointer\"));");
code("}");

code("void ySetPointer(string db = \"\", int index = 0) {");
code("trQuestVarSet(\"xdata\"+db+\"pointer\", index);");
code("trQuestVarSet(db, trQuestVarGet(\"xdata\"+db+\"index\"+index));");
code("}");

code("void yClearDatabase(string db = \"\") {");
code("int index = trQuestVarGet(\"xdata\"+db+\"nextFree\");");
code("trQuestVarSet(\"xdata\"+db+\"nextFree\", yGetVar(db, \"xNextBlock\"));");
code("ySetVar(db, \"xNextBlock\", index);");
code("trQuestVarSet(\"xdata\"+db+\"count\", 0);");
code("trQuestVarSet(\"xdata\"+db+\"pointer\", 0);");
code("}");

code("void yVarToVector(string db = \"\", string v = \"\") {");
code("trQuestVarSet(v+\"x\", yGetVar(db, v + \"x\"));");
code("trQuestVarSet(v+\"z\", yGetVar(db, v + \"z\"));");
code("}");

code("void ySetVarFromVector(string db = \"\", string attr = \"\", string v = \"\") {");
code("ySetVar(db, attr+\"x\", trQuestVarGet(v+\"x\"));");
code("ySetVar(db, attr+\"z\", trQuestVarGet(v+\"z\"));");
code("}");

code("int yFindLatestReverse(string qv = \"\", string proto = \"\", int p = 0) {");
code("int id = kbGetProtoUnitID(proto);");
code("trUnitSelectClear();");
code("for(x=trGetNextUnitScenarioNameNumber(); >trQuestVarGet(qv)) {");
code("int i = kbGetBlockID(\"\"+x, true);");
code("if (kbGetUnitBaseTypeID(i) == id) {");
code("trUnitSelectClear();");
code("trUnitSelectByID(i);");
code("if (trUnitIsOwnedBy(p)) {");
code("trQuestVarSet(qv, x);");
code("return(i);");
code("}");
code("}");
code("}");
code("return(-1);");
code("}");

code("int yFindLatest(string qv = \"\", string proto = \"\", int p = 0) {");
code("int id = kbGetProtoUnitID(proto);");
code("trUnitSelectClear();");
code("trQuestVarSet(\"next\",trGetNextUnitScenarioNameNumber() - 1);");
code("while(trQuestVarGet(\"next\") > trQuestVarGet(qv)) {");
code("trQuestVarSet(qv, 1 + trQuestVarGet(qv));");
code("int i = kbGetBlockID(\"\"+1*trQuestVarGet(qv), true);");
code("if (kbGetUnitBaseTypeID(i) == id) {");
code("trUnitSelectClear();");
code("trUnitSelectByID(i);");
code("if (trUnitIsOwnedBy(p)) {");
code("return(i);");
code("}");
code("}");
code("}");
code("return(-1);");
code("}");
code("const int RELIC_HEALTH = 1;");
code("const int RELIC_SPEED = 2;");
code("const int RELIC_ATTACK_RANGE = 3;");
code("const int RELIC_SPELL_RANGE = 4;");
code("const int RELIC_SPELL_DURATION = 5;");
code("const int RELIC_ATTACK_LIFESTEAL = 6;");
code("const int RELIC_SPELL_LIFESTEAL = 7;");
code("const int RELIC_ATTACK_DAMAGE = 8;");
code("const int RELIC_SPELL_POWER = 9;");
code("const int RELIC_HEAL_BOOST = 10;");

code("const int RELIC_POISON_RESISTANCE = 11;");
code("const int RELIC_ULTIMATE_COST = 12;");
code("const int RELIC_SILENCE_RESISTANCE = 13;");
code("const int RELIC_PROJECTILES = 14;");
code("const int RELIC_STUN_RESISTANCE = 15;");
code("const int RELIC_SPECIAL_ATTACK = 16;");
code("const int RELIC_POISON_KILLER = 17;");
code("const int RELIC_COOLDOWN_REDUCTION = 18;");
code("const int RELIC_STUN_KILLER = 19;");
code("const int RELIC_HALF_KILLER = 20;");


code("const int RELIC_KEY_GREEK = 33;");
code("const int RELIC_KEY_NORSE = 34;");
code("const int RELIC_KEY_ATLANTEAN = 35;");

code("const int RELIC_COUNT = 20;");

code("string relicName(int relic = 0) {");
code("string msg = \"WTF That's not a relic!\";");
code("switch(relic)");
code("{");
code("case RELIC_HEALTH:");
code("{");
code("msg = \"Health +300\";");
code("}");
code("case RELIC_SPEED:");
code("{");
code("msg = \"Speed +1\";");
code("}");
code("case RELIC_ATTACK_RANGE:");
code("{");
code("msg = \"Attack Range and LOS +5\";");
code("}");
code("case RELIC_SPELL_RANGE:");
code("{");
code("msg = \"Spell Range +0.2x\";");
code("}");
code("case RELIC_SPELL_DURATION:");
code("{");
code("msg = \"Spell Duration +0.2x\";");
code("}");
code("case RELIC_ATTACK_LIFESTEAL:");
code("{");
code("msg = \"Attack Lifesteal +0.2\";");
code("}");
code("case RELIC_SPELL_LIFESTEAL:");
code("{");
code("msg = \"Spell Lifesteal +0.1\";");
code("}");
code("case RELIC_ATTACK_DAMAGE:");
code("{");
code("msg = \"Attack +12\";");
code("}");
code("case RELIC_SPELL_POWER:");
code("{");
code("msg = \"Spell Power +0.3x\";");
code("}");
code("case RELIC_HEAL_BOOST:");
code("{");
code("msg = \"Healing Effects +0.3x\";");
code("}");
code("case RELIC_POISON_RESISTANCE:");
code("{");
code("msg = \"Poison resistance x0.3\";");
code("}");
code("case RELIC_STUN_RESISTANCE:");
code("{");
code("msg = \"Stun resistance x0.3\";");
code("}");
code("case RELIC_SILENCE_RESISTANCE:");
code("{");
code("msg = \"Silence resistance x0.3\";");
code("}");
code("case RELIC_POISON_KILLER:");
code("{");
code("msg = \"+0.3x damage to poisoned enemies.\";");
code("}");
code("case RELIC_STUN_KILLER:");
code("{");
code("msg = \"+0.3x damage to stunned enemies.\";");
code("}");
code("case RELIC_HALF_KILLER:");
code("{");
code("msg = \"+0.3x damage to enemies below half health.\";");
code("}");
code("case RELIC_ULTIMATE_COST:");
code("{");
code("msg = \"Ultimate Cost Reduction x0.1\";");
code("}");
code("case RELIC_PROJECTILES:");
code("{");
code("msg = \"Projectiles +1\";");
code("}");
code("case RELIC_SPECIAL_ATTACK:");
code("{");
code("msg = \"Special Attack Cooldown -1\";");
code("}");
code("case RELIC_COOLDOWN_REDUCTION:");
code("{");
code("msg = \"Cooldown Reduction x0.1\";");
code("}");
code("}");
code("if (relic >= RELIC_KEY_GREEK) {");
code("msg = \"A key that opens a chest\";");
code("}");
code("return(msg);");
code("}");

code("string relicIcon(int relic = 0) {");
code("string icon = \"icons\infantry g hoplite icon 64\";");
code("switch(relic)");
code("{");
code("case RELIC_HEALTH:");
code("{");
code("icon = \"icons\special g sea turtle icon 64\";");
code("}");
code("case RELIC_SPEED:");
code("{");
code("icon = \"icons\special g pegasus icon 64\";");
code("}");
code("case RELIC_ATTACK_RANGE:");
code("{");
code("icon = \"icons\cavalry e chariot archer icon 64\";");
code("}");
code("case RELIC_SPELL_RANGE:");
code("{");
code("icon = \"icons\special e petosuchus icon 64\";");
code("}");
code("case RELIC_SPELL_DURATION:");
code("{");
code("icon = \"icons\special n frost giant icon 64\";");
code("}");
code("case RELIC_ATTACK_LIFESTEAL:");
code("{");
code("icon = \"icons\special n troll icon 64\";");
code("}");
code("case RELIC_SPELL_LIFESTEAL:");
code("{");
code("icon = \"icons\special e wadjet icon 64\";");
code("}");
code("case RELIC_ATTACK_DAMAGE:");
code("{");
code("icon = \"icons\siege n ballista icon 64\";");
code("}");
code("case RELIC_SPELL_POWER:");
code("{");
code("icon = \"icons\special n fire giant icon 64\";");
code("}");
code("case RELIC_HEAL_BOOST:");
code("{");
code("icon = \"icons\special e priest icon 64\";");
code("}");
code("case RELIC_POISON_RESISTANCE:");
code("{");
code("icon = \"icons\god power dryad icons 64\";");
code("}");
code("case RELIC_STUN_RESISTANCE:");
code("{");
code("icon = \"icons\special x behemoth icons 64\";");
code("}");
code("case RELIC_SILENCE_RESISTANCE:");
code("{");
code("icon = \"icons\special e sphinx icon 64\";");
code("}");
code("case RELIC_POISON_KILLER:");
code("{");
code("icon = \"icons\special e mummy icon 64\";");
code("}");
code("case RELIC_STUN_KILLER:");
code("{");
code("icon = \"icons\special g medusa icon 64\";");
code("}");
code("case RELIC_HALF_KILLER:");
code("{");
code("icon = \"icons\special g cyclops icon 64\";");
code("}");
code("case RELIC_ULTIMATE_COST:");
code("{");
code("icon = \"icons\special g arkantos icon 64\";");
code("}");
code("case RELIC_PROJECTILES:");
code("{");
code("icon = \"icons\special g manticore icon 64\";");
code("}");
code("case RELIC_SPECIAL_ATTACK:");
code("{");
code("icon = \"icons\special e avenger icon 64\";");
code("}");
code("case RELIC_COOLDOWN_REDUCTION:");
code("{");
code("icon = \"icons\special x argus icons 64\";");
code("}");
code("case RELIC_KEY_GREEK:");
code("{");
code("icon = \"ui range indicator greek\";");
code("}");
code("case RELIC_KEY_NORSE:");
code("{");
code("icon = \"ui range indicator norse\";");
code("}");
code("case RELIC_KEY_ATLANTEAN:");
code("{");
code("icon = \"ui range indicator atlantean\";");
code("}");
code("}");
code("return(icon);");
code("}");

code("void relicDescription(int relic = 0) {");
code("string icon = relicIcon(relic);");
code("string msg = relicName(relic);");
code("trShowImageDialog(icon, msg);");
code("}");

code("void relicEffect(int relic = 0, int p = 0, bool equip = true) {");
code("float m = 1.0;");
code("if (equip == false) {");
code("m = -1.0;");
code("}");
code("int class = trQuestVarGet(\"p\"+p+\"class\");");
code("string proto = kbGetProtoUnitName(1*trQuestVarGet(\"class\"+class+\"proto\"));");
code("switch(relic)");
code("{");
code("case RELIC_HEALTH:");
code("{");
code("trQuestVarSet(\"p\"+p+\"health\", trQuestVarGet(\"p\"+p+\"health\") + 300.0 * m);");
code("zSetProtoUnitStat(proto, p, 0, trQuestVarGet(\"p\"+p+\"health\"));");
code("}");
code("case RELIC_SPEED:");
code("{");
code("trQuestVarSet(\"p\"+p+\"speed\", trQuestVarGet(\"p\"+p+\"speed\") + 1.0 * m);");
code("zSetProtoUnitStat(proto, p, 1, trQuestVarGet(\"p\"+p+\"speed\"));");
code("}");
code("case RELIC_ATTACK_RANGE:");
code("{");
code("trQuestVarSet(\"p\"+p+\"range\", trQuestVarGet(\"p\"+p+\"range\") + 5.0 * m);");
code("zSetProtoUnitStat(proto, p, 11, trQuestVarGet(\"p\"+p+\"range\"));");
code("trQuestVarSet(\"p\"+p+\"los\", trQuestVarGet(\"p\"+p+\"los\") + 5.0 * m);");
code("zSetProtoUnitStat(proto, p, 2, trQuestVarGet(\"p\"+p+\"los\"));");
code("}");
code("case RELIC_SPELL_RANGE:");
code("{");
code("trQuestVarSet(\"p\"+p+\"spellRange\", trQuestVarGet(\"p\"+p+\"spellRange\") + 0.2 * m);");
code("}");
code("case RELIC_SPELL_DURATION:");
code("{");
code("trQuestVarSet(\"p\"+p+\"spellDuration\", trQuestVarGet(\"p\"+p+\"spellDuration\") + 0.2 * m);");
code("}");
code("case RELIC_ATTACK_LIFESTEAL:");
code("{");
code("trQuestVarSet(\"p\"+p+\"attackLifesteal\", trQuestVarGet(\"p\"+p+\"attackLifesteal\") + 0.2 * m);");
code("}");
code("case RELIC_SPELL_LIFESTEAL:");
code("{");
code("trQuestVarSet(\"p\"+p+\"spellLifesteal\", trQuestVarGet(\"p\"+p+\"spellLifesteal\") + 0.1 * m);");
code("}");
code("case RELIC_ATTACK_DAMAGE:");
code("{");
code("trQuestVarSet(\"p\"+p+\"baseAttack\", trQuestVarGet(\"p\"+p+\"baseAttack\") + 12.0 * m);");
code("zSetProtoUnitStat(proto, p, 27, trQuestVarGet(\"p\"+p+\"baseAttack\"));");
code("zSetProtoUnitStat(proto, p, 31, trQuestVarGet(\"p\"+p+\"baseAttack\"));");
code("}");
code("case RELIC_SPELL_POWER:");
code("{");
code("trQuestVarSet(\"p\"+p+\"spellDamage\", trQuestVarGet(\"p\"+p+\"spellDamage\") + 0.3 * m);");
code("}");
code("case RELIC_HEAL_BOOST:");
code("{");
code("trQuestVarSet(\"p\"+p+\"healBoost\", trQuestVarGet(\"p\"+p+\"healBoost\") + 0.3 * m);");
code("}");
code("case RELIC_POISON_RESISTANCE:");
code("{");
code("trQuestVarSet(\"p\"+p+\"poisonResistanceCount\", trQuestVarGet(\"p\"+p+\"poisonResistanceCount\") + 1.0 * m);");
code("trQuestVarSet(\"p\"+p+\"poisonResistance\", xsPow(0.7, 1*trQuestVarGet(\"p\"+p+\"poisonResistanceCount\")));");
code("}");
code("case RELIC_STUN_RESISTANCE:");
code("{");
code("trQuestVarSet(\"p\"+p+\"stunResistanceCount\", trQuestVarGet(\"p\"+p+\"stunResistanceCount\") + 1.0 * m);");
code("trQuestVarSet(\"p\"+p+\"stunResistance\", xsPow(0.7, 1*trQuestVarGet(\"p\"+p+\"stunResistanceCount\")));");
code("}");
code("case RELIC_SILENCE_RESISTANCE:");
code("{");
code("trQuestVarSet(\"p\"+p+\"silenceResistanceCount\", trQuestVarGet(\"p\"+p+\"silenceResistanceCount\") + 1.0 * m);");
code("trQuestVarSet(\"p\"+p+\"silenceResistance\", xsPow(0.7, 1*trQuestVarGet(\"p\"+p+\"silenceResistanceCount\")));");
code("}");
code("case RELIC_POISON_KILLER:");
code("{");
code("trQuestVarSet(\"p\"+p+\"poisonKiller\", trQuestVarGet(\"p\"+p+\"poisonKiller\") + 0.3 * m);");
code("}");
code("case RELIC_STUN_KILLER:");
code("{");
code("trQuestVarSet(\"p\"+p+\"stunKiller\", trQuestVarGet(\"p\"+p+\"stunKiller\") + 0.3 * m);");
code("}");
code("case RELIC_HALF_KILLER:");
code("{");
code("trQuestVarSet(\"p\"+p+\"halfKiller\", trQuestVarGet(\"p\"+p+\"halfKiller\") + 0.3 * m);");
code("}");
code("case RELIC_ULTIMATE_COST:");
code("{");
code("trQuestVarSet(\"p\"+p+\"ultimateCostCount\", trQuestVarGet(\"p\"+p+\"ultimateCostCount\") + 1.0 * m);");
code("trQuestVarSet(\"p\"+p+\"ultimateCost\", xsPow(0.9, trQuestVarGet(\"p\"+p+\"ultimateCostCount\")));");
code("}");
code("case RELIC_PROJECTILES:");
code("{");
code("trQuestVarSet(\"p\"+p+\"projectiles\", trQuestVarGet(\"p\"+p+\"projectiles\") + 1.0 * m);");
code("zSetProtoUnitStat(proto, p, 13, trQuestVarGet(\"p\"+p+\"projectiles\"));");
code("}");
code("case RELIC_SPECIAL_ATTACK:");
code("{");
code("trQuestVarSet(\"p\"+p+\"specialAttackCooldown\", trQuestVarGet(\"p\"+p+\"specialAttackCooldown\") - 1.0 * m);");
code("}");
code("case RELIC_COOLDOWN_REDUCTION:");
code("{");
code("trQuestVarSet(\"p\"+p+\"cooldownReductionCount\", trQuestVarGet(\"p\"+p+\"cooldownReductionCount\") + 1.0 * m);");
code("trQuestVarSet(\"p\"+p+\"cooldownReduction\", xsPow(0.9, 1*trQuestVarGet(\"p\"+p+\"cooldownReductionCount\")));");
code("}");
code("}");
code("if ((relic >= RELIC_KEY_GREEK) && (trCurrentPlayer() == p) && equip) {");
code("trChatSend(0, \"You have picked up a key. <icon=(20)(\"+relicIcon(relic)+\")>\");");
code("}");
code("}");

code("int relicProto(int relic = 0) {");
code("int proto = 0;");
code("switch(relic)");
code("{");
code("case RELIC_HEALTH:");
code("{");
code("proto = kbGetProtoUnitID(\"Sea Turtle\");");
code("}");
code("case RELIC_SPEED:");
code("{");
code("proto = kbGetProtoUnitID(\"Pegasus\");");
code("}");
code("case RELIC_ATTACK_RANGE:");
code("{");
code("proto = kbGetProtoUnitID(\"Chariot Archer\");");
code("}");
code("case RELIC_SPELL_RANGE:");
code("{");
code("proto = kbGetProtoUnitID(\"Petsuchos\");");
code("}");
code("case RELIC_SPELL_DURATION:");
code("{");
code("proto = kbGetProtoUnitID(\"Frost Giant\");");
code("}");
code("case RELIC_ATTACK_LIFESTEAL:");
code("{");
code("proto = kbGetProtoUnitID(\"Troll\");");
code("}");
code("case RELIC_SPELL_LIFESTEAL:");
code("{");
code("proto = kbGetProtoUnitID(\"Wadjet\");");
code("}");
code("case RELIC_ATTACK_DAMAGE:");
code("{");
code("proto = kbGetProtoUnitID(\"Ballista\");");
code("}");
code("case RELIC_SPELL_POWER:");
code("{");
code("proto = kbGetProtoUnitID(\"Fire Giant\");");
code("}");
code("case RELIC_HEAL_BOOST:");
code("{");
code("proto = kbGetProtoUnitID(\"Priest\");");
code("}");
code("case RELIC_POISON_RESISTANCE:");
code("{");
code("proto = kbGetProtoUnitID(\"Dryad\");");
code("}");
code("case RELIC_STUN_RESISTANCE:");
code("{");
code("proto = kbGetProtoUnitID(\"Behemoth\");");
code("}");
code("case RELIC_SILENCE_RESISTANCE:");
code("{");
code("proto = kbGetProtoUnitID(\"Sphinx\");");
code("}");
code("case RELIC_POISON_KILLER:");
code("{");
code("proto = kbGetProtoUnitID(\"Mummy\");");
code("}");
code("case RELIC_STUN_KILLER:");
code("{");
code("proto = kbGetProtoUnitID(\"Medusa\");");
code("}");
code("case RELIC_HALF_KILLER:");
code("{");
code("proto = kbGetProtoUnitID(\"Cyclops\");");
code("}");
code("case RELIC_ULTIMATE_COST:");
code("{");
code("proto = kbGetProtoUnitID(\"Arkantos\");");
code("}");
code("case RELIC_PROJECTILES:");
code("{");
code("proto = kbGetProtoUnitID(\"Manticore\");");
code("}");
code("case RELIC_SPECIAL_ATTACK:");
code("{");
code("proto = kbGetProtoUnitID(\"Avenger\");");
code("}");
code("case RELIC_COOLDOWN_REDUCTION:");
code("{");
code("proto = kbGetProtoUnitID(\"Argus\");");
code("}");
code("case RELIC_KEY_GREEK:");
code("{");
code("proto = kbGetProtoUnitID(\"UI Range Indicator Greek SFX\");");
code("}");
code("case RELIC_KEY_NORSE:");
code("{");
code("proto = kbGetProtoUnitID(\"UI Range Indicator Norse SFX\");");
code("}");
code("case RELIC_KEY_ATLANTEAN:");
code("{");
code("proto = kbGetProtoUnitID(\"UI Range Indicator Atlantean SFX\");");
code("}");
code("}");
code("return(proto);");
code("}");

code("int randomLow(int maxval = 10) {");
code("trQuestVarSetFromRand(\"relicrand1\",1,maxval, true);");
code("trQuestVarSetFromRand(\"relicrand2\",1,maxval, true);");
code("if (trQuestVarGet(\"relicrand2\") < trQuestVarGet(\"relicrand1\")) {");
code("trQuestVarSet(\"relicrand1\", trQuestVarGet(\"relicrand2\"));");
code("}");
code("return(1*trQuestVarGet(\"relicrand1\"));");
code("}");

code("int randomStageClosest(int maxval = 10) {");
code("trQuestVarSetFromRand(\"relicrand1\",1,maxval, true);");
code("trQuestVarSetFromRand(\"relicrand2\",1,maxval, true);");
code("float firstDiff = xsAbs(trQuestVarGet(\"relicrand1\") - trQuestVarGet(\"stage\"));");
code("float secondDiff = xsAbs(trQuestVarGet(\"relicrand2\") - trQuestVarGet(\"stage\"));");
code("if (secondDiff < firstDiff) {");
code("trQuestVarSet(\"relicrand1\", trQuestVarGet(\"relicrand2\"));");
code("}");
code("return(1*trQuestVarGet(\"relicrand1\"));");
code("}");

code("void spawnRelicSpecific(float x = 0, float z = 0, int val = 1) {");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,x,0,z,0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("if (trUnitVisToPlayer()) {");
code("trSoundPlayFN(\"relicselect.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("trUnitChangeProtoUnit(\"Relic\");");
code("yAddToDatabase(\"freeRelics\", \"next\");");
code("yAddUpdateVar(\"freeRelics\", \"type\", val);");
code("}");

code("void spawnRelic(float x = 0, float z = 0, int maxval = 10) {");
code("spawnRelicSpecific(x, z, randomStageClosest(maxval));");
code("}");

code("void spawnRelicClosest(float x = 0, float z = 0, int target = 0) {");
code("trQuestVarSetFromRand(\"rand\", 0, 10, true);");
code("trQuestVarSetFromRand(\"rand\",");
code("xsMax(1, target - trQuestVarGet(\"rand\")), xsMin(10, target + trQuestVarGet(\"rand\")), true);");
code("spawnRelicSpecific(x, z, 1*trQuestVarGet(\"rand\"));");
code("}");
code("const int TILE_NOT_FOUND = 0;");
code("const int TILE_FOUND = 1;");
code("const int TILE_VISITED = 2;");

code("const int EDGE_NOT_FOUND = 0;");
code("const int EDGE_NORMAL = 1;");
code("const int EDGE_BIG = 2;");
code("const int EDGE_PORTAL = 3;");

code("const int ROOM_BASIC = 1;");
code("const int ROOM_AMBUSH = 2;");
code("const int ROOM_CHEST = 3;");
code("const int ROOM_TRANSPORTER_GUY = 9;");
code("const int ROOM_STARTER = 10;");
code("const int ROOM_BOSS = 11;");
code("const int ROOM_NICK = 12;");

code("const int ROOM_CIRCLE = 0;");
code("const int ROOM_SQUARE = 1;");

code("const int CHEST_KEY = 1;");
code("const int CHEST_ENCOUNTER = 2;");
code("const int CHEST_PADS = 3;");

code("const int MOONBLADE = 1;");
code("const int SUNBOW = 2;");
code("const int FIREKNIGHT = 3;");
code("const int FROSTKNIGHT = 4;");
code("const int THUNDERRIDER = 5;");
code("const int INVENTOR = 6;");
code("const int ALCHEMIST = 7;");
code("const int WINDCUTTER = 8;");

code("const int CLASS_COUNT = 5;");


code("const int STARSTONE = 0;");
code("const int LIFESTONE = 1;");
code("const int MANASTONE = 2;");

code("float worldHeight = 0;");
code("int ENEMY_PLAYER = 0;");
code("bool Multiplayer = false;");

code("int TERRAIN_CHASM = 5;");
code("int TERRAIN_SUB_CHASM = 4;");

code("int TERRAIN_WALL = 2;");
code("int TERRAIN_SUB_WALL = 13;");

code("int TERRAIN_PRIMARY = 0;");
code("int TERRAIN_SUB_PRIMARY = 1;");

code("int TERRAIN_SECONDARY = 0;");
code("int TERRAIN_SUB_SECONDARY = 1;");

code("string gemstoneIcon(int gem = 0) {");
code("string img = \"icons\improvement thurisaz rune icon 64\";");
code("switch(gem)");
code("{");
code("case STARSTONE:");
code("{");
code("img = \"icons\improvement focus icons 64\";");
code("}");
code("case LIFESTONE:");
code("{");
code("img = \"icons\god power healing spring icon 64\";");
code("}");
code("case MANASTONE:");
code("{");
code("img = \"icons\improvement thurisaz rune icon 64\";");
code("}");
code("}");
code("return(img);");
code("}");

code("string gemstoneName(int gem = 0) {");
code("string name = \"Dust\";");
code("switch(gem)");
code("{");
code("case STARSTONE:");
code("{");
code("name = \"Starstone\";");
code("}");
code("case LIFESTONE:");
code("{");
code("name = \"Lifestone\";");
code("}");
code("case MANASTONE:");
code("{");
code("name = \"Manastone\";");
code("}");
code("}");
code("return(name);");
code("}");

code("string stageName(int stage = 0) {");
code("string name = \"WTF THAT'S NOT A STAGE\";");
code("switch(stage)");
code("{");
code("case 1:");
code("{");
code("name = \"The Lion's Den\";");
code("}");
code("case 2:");
code("{");
code("name = \"Murkwood\";");
code("}");
code("}");
code("return(name);");
code("}");

code("string stageIcon(int stage = 0) {");
code("string img = \"icons\infantry g hoplite icon 64\";");
code("switch(stage)");
code("{");
code("case 1:");
code("{");
code("img = \"ui\ui map watering hole 256x256\";");
code("}");
code("case 2:");
code("{");
code("img = \"ui\ui map deep jungle 256x256\";");
code("}");
code("}");
code("return(img);");
code("}");

code("void reselectMyself() {");
code("uiClearSelection();");
code("int p = trCurrentPlayer();");
code("int class = trQuestVarGet(\"p\"+p+\"class\");");
code("trackInsert();");
code("trackAddWaypoint();");
code("trackAddWaypoint();");
code("trBlockAllSounds(false);");
code("uiFindType(kbGetProtoUnitName(1*trQuestVarGet(\"class\"+class+\"proto\")));");
code("trackPlay(1,999);");
code("}");

code("void setupPlayerProto(string proto = \"\", float health = 0, float attack = 0, float speed = 4, float range = 0) {");
code("int pNum = kbGetProtoUnitID(proto);");
code("for(p=0; <ENEMY_PLAYER) {");
code("trModifyProtounit(proto, p, 27, 9999999999999999999.0);");
code("trModifyProtounit(proto, p, 27, -9999999999999999999.0);");
code("trModifyProtounit(proto, p, 27, attack);");
code("zInitProtoUnitStat(proto, p, 27, attack);");
code("trModifyProtounit(proto, p, 30, 9999999999999999999.0);");
code("trModifyProtounit(proto, p, 30, -9999999999999999999.0);");
code("trModifyProtounit(proto, p, 31, 9999999999999999999.0);");
code("trModifyProtounit(proto, p, 31, -9999999999999999999.0);");
code("trModifyProtounit(proto, p, 31, attack);");
code("zInitProtoUnitStat(proto, p, 31, attack);");
code("trQuestVarSet(\"proto\"+pNum+\"attack\", attack);");
code("zInitProtoUnitStat(proto, p, 13, 1);");
code("trModifyProtounit(proto, p, 0, 9999999999999999999.0);");
code("trModifyProtounit(proto, p, 0, -9999999999999999999.0);");
code("trModifyProtounit(proto, p, 0, health);");
code("zInitProtoUnitStat(proto, p, 0, health);");
code("trQuestVarSet(\"proto\"+pNum+\"health\", health);");
code("trModifyProtounit(proto, p, 2, 9999999999999999999.0);");
code("trModifyProtounit(proto, p, 2, -9999999999999999999.0);");
code("trModifyProtounit(proto, p, 2, 20);");
code("zInitProtoUnitStat(proto, p, 2, 20);");
code("trModifyProtounit(proto, p, 11, 9999999999999999999.0);");
code("trModifyProtounit(proto, p, 11, -9999999999999999999.0);");
code("trModifyProtounit(proto, p, 11, range);");
code("zInitProtoUnitStat(proto, p, 11, range);");
code("trQuestVarSet(\"proto\"+pNum+\"range\", range);");
code("trModifyProtounit(proto, p, 1, 9999999999999999999.0);");
code("trModifyProtounit(proto, p, 1, -9999999999999999999.0);");
code("trModifyProtounit(proto, p, 1, speed);");
code("zInitProtoUnitStat(proto, p, 1, speed);");
code("trQuestVarSet(\"proto\"+pNum+\"speed\", speed);");
code("trModifyProtounit(proto, p, 24, -1);");
code("trModifyProtounit(proto, p, 25, -1);");
code("trModifyProtounit(proto, p, 26, -1);");
code("}");
code("trModifyProtounit(proto, 0, 2, -20);");
code("}");

code("void setupClass(string proto = \"\", int class = 0, int firstDelay = 0, int nextDelay = 0,int gem = 0,int specialCD = 0) {");
code("int p = kbGetProtoUnitID(proto);");
code("trQuestVarSet(\"class\"+class+\"proto\", p);");
code("trQuestVarSet(\"proto\"+p+\"class\", class);");
code("trQuestVarSet(\"class\"+class+\"firstDelay\", firstDelay);");
code("trQuestVarSet(\"class\"+class+\"nextDelay\", nextDelay);");
code("trQuestVarSet(\"class\"+class+\"specialAttackCooldown\", specialCD);");
code("trQuestVarSet(\"class\"+class+\"gemstone\", gem);");
code("}");

code("void chooseClass(int p = 0, int class = 0) {");
code("trQuestVarSet(\"p\"+p+\"class\", class);");
code("trEventFire(1000 + 12 * class + p);");
code("int proto = trQuestVarGet(\"class\"+class+\"proto\");");
code("trQuestVarSet(\"p\"+p+\"health\", trQuestVarGet(\"proto\"+proto+\"health\"));");
code("trQuestVarSet(\"p\"+p+\"attack\", trQuestVarGet(\"proto\"+proto+\"attack\"));");
code("trQuestVarSet(\"p\"+p+\"baseAttack\", trQuestVarGet(\"proto\"+proto+\"attack\"));");
code("trQuestVarSet(\"p\"+p+\"range\", trQuestVarGet(\"proto\"+proto+\"range\"));");
code("trQuestVarSet(\"p\"+p+\"speed\", trQuestVarGet(\"proto\"+proto+\"speed\"));");
code("trQuestVarSet(\"p\"+p+\"firstDelay\", trQuestVarGet(\"class\"+class+\"firstDelay\"));");
code("trQuestVarSet(\"p\"+p+\"nextDelay\", trQuestVarGet(\"class\"+class+\"nextDelay\"));");
code("trQuestVarSet(\"p\"+p+\"specialAttackCooldown\", trQuestVarGet(\"class\"+class+\"specialAttackCooldown\"));");
code("trQuestVarSet(\"p\"+p+\"los\", 20);");
code("trQuestVarSet(\"p\"+p+\"projectiles\", 1);");
code("trQuestVarSet(\"p\"+p+\"spellRange\", 1);");
code("trQuestVarSet(\"p\"+p+\"spellDamage\", 1);");
code("trQuestVarSet(\"p\"+p+\"spellDuration\", 1);");
code("trQuestVarSet(\"p\"+p+\"healBoost\", 1);");

code("trQuestVarSet(\"p\"+p+\"ultimateCost\", 1);");
code("trQuestVarSet(\"p\"+p+\"cooldownReduction\", 1);");
code("trQuestVarSet(\"p\"+p+\"stunResistance\", 1);");
code("trQuestVarSet(\"p\"+p+\"poisonResistance\", 1);");
code("trQuestVarSet(\"p\"+p+\"silenceResistance\", 1);");

code("trQuestVarSet(\"p\"+p+\"ultimateCostCount\", 0);");
code("trQuestVarSet(\"p\"+p+\"cooldownReductionCount\", 0);");
code("trQuestVarSet(\"p\"+p+\"stunResistanceCount\", 0);");
code("trQuestVarSet(\"p\"+p+\"poisonResistanceCount\", 0);");
code("trQuestVarSet(\"p\"+p+\"silenceResistanceCount\", 0);");

code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"unit\");");
code("if (trUnitAlive() && trQuestVarGet(\"p\"+p+\"unit\") > 0) {");
code("trMutateSelected(proto);");
code("}");
code("trPlayerKillAllGodPowers(p);");
code("if (trCurrentPlayer() == p) {");
code("trCounterAbort(\"lure\");");
code("trCounterAbort(\"well\");");
code("trCounterAbort(\"rain\");");
code("}");
code("if (class > 0) {");
code("trQuestVarSet(\"p\"+p+\"wellCooldownStatus\", 2);");
code("trQuestVarSet(\"p\"+p+\"lureCooldownStatus\", 2);");
code("trQuestVarSet(\"p\"+p+\"rainCooldownStatus\", 2);");
code("}");

code("if (Multiplayer == false) {");
code("trQuestVarSet(\"p\"+p+\"level\", trQuestVarGet(\"class\"+class+\"level\") - 1);");
code("trSetCivilizationNameOverride(p, \"Level \" + (1+trQuestVarGet(\"p\"+p+\"level\")));");
code("}");

code("for(x=yGetDatabaseCount(\"p\"+p+\"relics\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"relics\");");
code("if (x > trQuestVarGet(\"p\"+p+\"level\")+1) {");
code("yAddToDatabase(\"freeRelics\", \"p\"+p+\"relics\");");
code("yAddUpdateVar(\"freeRelics\", \"type\", 1*yGetVar(\"p\"+p+\"relics\", \"type\"));");
code("yRemoveFromDatabase(\"p\"+p+\"relics\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"relics\");");
code("trUnitChangeProtoUnit(\"Relic\");");
code("} else {");
code("relicEffect(1*yGetVar(\"p\"+p+\"relics\", \"type\"), p, true);");
code("}");
code("}");
code("}");

code("rule setup");
code("active");
code("runImmediately");
code("{");
code("Multiplayer = aiIsMultiplayer();");
code("trSetUnitIdleProcessing(false);");

code("trSetObscuredUnits(false);");
code("configUndef(\"ErodeBuildingFoundations\");");

code("if (Multiplayer) {");
code("ENEMY_PLAYER = cNumberPlayers - 1;");
code("} else {");
code("ENEMY_PLAYER = 2;");
code("}");

code("trQuestVarSet(\"activePlayerCount\", ENEMY_PLAYER - 1);");

code("trForceNonCinematicModels(true);");


code("ambientColor(0,0,0);");
code("sunColor(0,0,0);");
code("trLetterBox(true);");
code("trUIFadeToColor(0,0,0,0,0,true);");

code("modularCounterInit(\"spyFind\", 32);");
code("modularCounterInit(\"spyFound\", 32);");

code("trTechSetStatus(0, 304, 4);");
code("aiSet(\"NoAI\", 0);");
code("aiSet(\"NoAI\", ENEMY_PLAYER);");

code("setupClass(\"Militia\", 0, 500, 1000);");
code("setupClass(\"Hero Greek Theseus\", MOONBLADE, 460, 1000, STARSTONE, 7);");
code("setupClass(\"Hero Greek Hippolyta\", SUNBOW, 1350, 1750, STARSTONE);");
code("setupClass(\"Hero Greek Atalanta\", THUNDERRIDER, 630, 1400, MANASTONE, 5);");
code("setupClass(\"Lancer Hero\", FIREKNIGHT, 1155, 1500, MANASTONE, 5);");
code("setupClass(\"Hero Greek Achilles\", FROSTKNIGHT, 470, 1000, MANASTONE, 5);");

code("for(p=1; < ENEMY_PLAYER) {");
code("trPlayerSetDiplomacy(p, 0, \"neutral\");");
code("trPlayerSetDiplomacy(p, ENEMY_PLAYER, \"Enemy\");");
code("for(x=p+1; < ENEMY_PLAYER) {");
code("trPlayerSetDiplomacy(p, x, \"ally\");");
code("trPlayerSetDiplomacy(x, p, \"ally\");");
code("}");
code("trSetCivAndCulture(p, 1, 0);");
code("trModifyProtounit(\"Animal Attractor\", p, 2, -99);");
code("trModifyProtounit(\"Animal Attractor\", p, 55, 4);");
code("trModifyProtounit(\"Tunnel\", p, 2, -99);");
code("trModifyProtounit(\"Tunnel\", p, 55, 4);");
code("trModifyProtounit(\"Ajax\", p, 5, 99);");
code("trModifyProtounit(\"Vision SFX\", p, 0, -9999);");
code("trModifyProtounit(\"Dwarf\", p, 55, 4);");
code("trModifyProtounit(\"Transport Ship Greek\", p, 55, 4);");
code("trModifyProtounit(\"Athena\", p, 55, 4);");

code("trModifyProtounit(\"Sea Turtle\", p, 55, 1);");
code("trModifyProtounit(\"Pegasus\", p, 55, 1);");

code("trPlayerKillAllGodPowers(p);");
code("trPlayerTechTreeEnabledGodPowers(p, false);");

code("trForbidProtounit(p, \"Trident Soldier Hero\");");
code("trForbidProtounit(p, \"Archer Atlantean Hero\");");
code("trForbidProtounit(p, \"Royal Guard Hero\");");
code("trForbidProtounit(p, \"Lancer Hero\");");
code("trForbidProtounit(p, \"Javelin Cavalry Hero\");");
code("trForbidProtounit(p, \"Wall Connector\");");
code("trForbidProtounit(p, \"Dock\");");
code("trForbidProtounit(p, \"Settlement Level 1\");");
code("trForbidProtounit(p, \"House\");");
code("trForbidProtounit(p, \"Granary\");");
code("trForbidProtounit(p, \"Mining Camp\");");
code("trForbidProtounit(p, \"Lumber Camp\");");
code("trForbidProtounit(p, \"Monument\");");
code("trForbidProtounit(p, \"Temple\");");
code("trForbidProtounit(p, \"Wonder\");");
code("trForbidProtounit(p, \"Market\");");
code("trForbidProtounit(p, \"Dwarf Foundry\");");
code("trForbidProtounit(p, \"Armory\");");
code("trForbidProtounit(p, \"Hill Fort\");");
code("trForbidProtounit(p, \"Tower\");");
code("trForbidProtounit(p, \"Longhouse\");");
code("}");

code("xsEnableRule(\"delayed_modify\");");
code("xsEnableRule(\"data_load_00\");");
code("xsDisableSelf();");
code("}");

code("rule delayed_modify");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime) {");
code("setupPlayerProto(\"Kronny Flying\", 1000, 0, 0);");

code("setupPlayerProto(\"Militia\", 100, 10, 4.8);");
code("setupPlayerProto(\"Wolf\", 200, 10, 5);");
code("setupPlayerProto(\"Hero Greek Theseus\", 1000, 50, 4.3);");
code("setupPlayerProto(\"Hero Greek Hippolyta\", 1000, 50, 4.3, 16);");
code("setupPlayerProto(\"Hero Greek Atalanta\", 800, 30, 6.0);");
code("setupPlayerProto(\"Lancer Hero\", 1100, 55, 6.05);");
code("setupPlayerProto(\"Hero Greek Achilles\", 1100, 45, 5.5);");

code("setupPlayerProto(\"Royal Guard Hero\", 1200, 30, 4.6);");


code("trModifyProtounit(\"Sky Passage\", 0, 5, 999);");

code("for(p=ENEMY_PLAYER; >0) {");
code("trModifyProtounit(\"Wadjet Spit\", p, 1, -15);");
code("trModifyProtounit(\"Ajax\", p, 5, 999);");
code("trModifyProtounit(\"Ball of Fire Impact\", p, 8, 9999999999999999999.0);");
code("trModifyProtounit(\"Ball of Fire Impact\", p, 8, -9999999999999999999.0);");
code("trModifyProtounit(\"Ball of Fire Impact\", p, 8, 4.0);");
code("zInitProtoUnitStat(\"Ball of Fire Impact\", p, 8, 4.0);");
code("trModifyProtounit(\"Kronny Flying\", p, 1, 9999999999999999999.0);");
code("trModifyProtounit(\"Kronny Flying\", p, 1, -9999999999999999999.0);");
code("zInitProtoUnitStat(\"Kronny Flying\", p, 1, 0);");
code("}");

code("xsEnableRule(\"setup_enemies\");");
code("xsDisableSelf();");
code("}");
code("}");

code("rule no_extra_resources");
code("active");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime) {");
code("for (p=1; <cNumberPlayers) {");
code("trPlayerGrantResources(p, \"Food\", -1000.0);");
code("trPlayerGrantResources(p, \"Wood\", -1000.0);");
code("trPlayerGrantResources(p, \"Gold\", -1000.0);");
code("trPlayerGrantResources(p, \"Favor\", -1000.0);");
code("}");
code("if (Multiplayer == false) {");
code("trPlayerGrantResources(1, \"Gold\", trQuestVarGet(\"p1gold\"));");
code("}");
code("xsDisableSelf();");
code("}");
code("}");

code("rule Z_cin_00");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 1) {");
code("trSetFogAndBlackmap(false, false);");
code("trCameraCut(vector(96,90,98), vector(0,-1,0), vector(0,0,1), vector(1,0,0));");
code("int posX = 96 - 10;");
code("int posZ = 96 + 10;");
code("trModifyProtounit(\"Curse SFX\", 1, 8, 8);");
code("trArmyDispatch(\"1,0\", \"Dwarf\",1,posX,0,posZ,0,true);");
code("for(x=10; >0) {");
code("posX = posX + 2;");
code("trArmyDispatch(\"1,0\", \"Dwarf\",1,posX,0,posZ,0,false);");
code("}");
code("for(x=5; >0) {");
code("posX = posX - 2;");
code("posZ = posZ - 2;");
code("trArmyDispatch(\"1,0\", \"Dwarf\",1,posX,0,posZ,0,false);");
code("}");
code("for (x=4; >0) {");
code("posX = posX + 2;");
code("posZ = posZ - 2;");
code("trArmyDispatch(\"1,0\", \"Dwarf\",1,posX,0,posZ,0,false);");
code("}");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Curse SFX\");");

code("trUIFadeToColor(0,0,0,500,0,false);");
code("trSoundPlayFN(\"cinematics\15_in\gong.wav\", \"4\", -1, \"\",\"\");");
code("trSoundPlayFN(\"godpower.wav\", \"6\", -1, \"\",\"\");");
code("trOverlayText(\"Zenophobia presents...\", 4.0, -1, -1, -1);");

code("xsEnableRule(\"Z_cin_01\");");
code("xsDisableSelf();");
code("}");
code("}");

code("rule Z_cin_01");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 5) {");
code("trSoundPlayFN(\"ui\thunder2.wav\",\"1\",-1,\"\",\"\");");
code("trOverlayText(\"Hero Build Fighters 3\", 3.0, -1, -1, -1);");
code("trUIFadeToColor(0,0,0,1000,3000,true);");
code("xsEnableRule(\"Z_cin_02\");");
code("xsDisableSelf();");
code("}");
code("}");

code("rule Z_cin_02");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 5) {");
code("int minProgress = 10;");
code("for (p=1; < ENEMY_PLAYER) {");
code("minProgress = xsMin(minProgress, trQuestVarGet(\"p\"+p+\"progress\"));");
code("}");
code("if (minProgress == 0) {");
code("trQuestVarSet(\"stage\", 1);");
code("} else {");
code("trLetterBox(false);");
code("trMusicPlay(\"cinematics\9_in\music.mp3\", \"1\", 0.5);");
code("trUIFadeToColor(0,0,0,1000,0,false);");
code("trCameraCut(vector(96,70,26), vector(0,-0.7071,0.7071), vector(0,0.7071,0.7071), vector(1,0,0));");
code("trQuestVarSet(\"chooser\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\", \"Athena\",1,96,0,90,0,true);");
code("trMessageSetText(\"Host: Choose a stage to challenge.\",-1);");

code("int posX = 96 - 2 * minProgress;");

code("for(x=0; <= minProgress) {");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Flag Numbered\",1,posX,0,100,0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitSetAnimationPath(\"\"+x+\",0,0,0,0,0,0\");");
code("yAddToDatabase(\"stageChoices\", \"next\");");
code("yAddUpdateVar(\"stageChoices\", \"stage\", x + 1);");
code("posX = posX + 4;");
code("}");

code("xsEnableRule(\"choose_stage_00\");");
code("}");
code("trSetLighting(\"default\", 0.1);");
code("xsDisableSelf();");
code("xsEnableRule(\"choose_stage_01\");");
code("}");
code("}");

code("int loadProgress = 0;");
code("int savedata = 0;");
code("int currentdata = 0;");

code("void saveAllData() {");
code("int p = trCurrentPlayer();");
code("savedata = 1*trQuestVarGet(\"p\"+p+\"progress\") + 10 * trQuestVarGet(\"p\"+p+\"level\") + 100 * trQuestVarGet(\"p\"+p+\"class\");");
code("trSetCurrentScenarioUserData(0, savedata);");
code("savedata = xsMax(0, trGetScenarioUserData(1)) + trPlayerResourceCount(p, \"Gold\") - trQuestVarGet(\"p\"+p+\"gold\");");
code("trSetCurrentScenarioUserData(1, savedata);");
code("for(x=yGetDatabaseCount(\"p\"+p+\"relics\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"relics\");");
code("if (yGetVar(\"p\"+p+\"relics\", \"type\") < RELIC_KEY_GREEK) {");
code("trQuestVarSet(\"p\"+p+\"relic\"+x, yGetVar(\"p\"+p+\"relics\", \"type\"));");
code("}");
code("}");
code("savedata = 0;");
code("currentdata = 0;");
code("for(x=5; > 0) {");
code("savedata = savedata * 32 + (1*trQuestVarGet(\"p\"+p+\"relic\"+x));");
code("currentdata = currentdata * 32 + (1*trQuestVarGet(\"p\"+p+\"relic\"+(x+5)));");
code("}");
code("trSetCurrentScenarioUserData(2, savedata);");
code("trSetCurrentScenarioUserData(3, currentdata);");

code("for(y=0; < 4) {");
code("savedata = 0;");
code("for(x=8; >0) {");
code("currentdata = 1*xsMin(10, 1*trQuestVarGet(\"ownedRelics\"+(x+8*y)));");
code("savedata = savedata * 11 + currentdata;");
code("}");
code("trSetCurrentScenarioUserData(12 + y, savedata);");
code("}");

code("savedata = 0;");
code("for(x=3; >=0) {");
code("currentdata = 1*xsMin(100, 1*trQuestVarGet(\"gemstone\"+x));");
code("savedata = savedata * 100 + currentdata;");
code("}");
code("trSetCurrentScenarioUserData(9, savedata);");

code("if (Multiplayer == false) {");
code("for(y=0; <2) {");
code("savedata = 0;");
code("for(x=8; >0) {");
code("currentdata = 1*xsMin(10, 1*trQuestVarGet(\"class\"+(x+8*y)+\"level\"));");
code("savedata = savedata * 11 + currentdata;");
code("}");
code("trSetCurrentScenarioUserData(10 + y, savedata);");
code("}");
code("}");
code("}");

code("void showLoadProgress() {");
code("trSoundPlayFN(\"default\",\"1\",-1,\"Loading Data:\"+100 * loadProgress / 15,\"icons\god power reverse time icons 64\");");
code("}");

code("rule data_load_00");
code("highFrequency");
code("inactive");
code("{");
code("int proto = 0;");
code("for(y=0; < 4) {");
code("savedata = xsMax(0, trGetScenarioUserData(12 + y));");
code("for(x=1; < 9) {");
code("trQuestVarSet(\"ownedRelics\"+(x+8*y), iModulo(11, savedata));");
code("savedata = savedata / 11;");
code("}");
code("}");
code("savedata = xsMax(0, trGetScenarioUserData(9));");
code("for(x=0; <4) {");
code("trQuestVarSet(\"gemstone\"+x, iModulo(100, savedata));");
code("savedata = savedata / 100;");
code("}");

code("if (Multiplayer) {");

code("int posX = 10;");

code("for(p=1; < ENEMY_PLAYER) {");
code("trModifyProtounit(\"Swordsman Hero\", p, 6, -100);");
code("trModifyProtounit(\"Swordsman Hero\", p, 16, 9999999999999999999.0);");
code("trModifyProtounit(\"Swordsman Hero\", p, 17, 9999999999999999999.0);");
code("trModifyProtounit(\"Swordsman Hero\", p, 18, 9999999999999999999.0);");
code("trModifyProtounit(\"Swordsman Hero\", p, 19, 9999999999999999999.0);");
code("trModifyProtounit(\"Swordsman Hero\", p, 16, -9999999999999999999.0);");
code("trModifyProtounit(\"Swordsman Hero\", p, 17, -9999999999999999999.0);");
code("trModifyProtounit(\"Swordsman Hero\", p, 18, -9999999999999999999.0);");
code("trModifyProtounit(\"Swordsman Hero\", p, 19, -9999999999999999999.0);");
code("trArmyDispatch(\"\"+p+\",0\",\"Swordsman\", 32, posX,0,10,0,true);");
code("posX = posX + 10;");
code("}");

code("trBlockAllSounds(true);");
code("xsEnableRule(\"data_load_01_ready\");");
code("} else {");
code("trForbidProtounit(1, \"Swordsman Hero\");");

code("savedata = xsMax(0, trGetScenarioUserData(0));");
code("trQuestVarSet(\"p1progress\", iModulo(10, savedata));");
code("savedata = savedata / 10;");
code("trQuestVarSet(\"p1level\", iModulo(10, savedata));");
code("savedata = savedata / 10;");
code("trQuestVarSet(\"p1class\", savedata);");

code("savedata = xsMax(0, trGetScenarioUserData(1));");
code("trQuestVarSet(\"p1gold\", savedata);");

code("for(y=0; <2) {");
code("savedata = xsMax(0, trGetScenarioUserData(2 + y));");
code("for(x=1; <6) {");
code("trQuestVarSet(\"p1relic\"+(x+5*y), iModulo(32, savedata));");
code("savedata = savedata / 32;");
code("}");
code("}");

code("for(y=0; <2) {");
code("savedata = xsMax(0, trGetScenarioUserData(10 + y));");
code("for(x=1; <9) {");
code("trQuestVarSet(\"class\"+(x+8*y)+\"level\", iModulo(11, savedata));");
code("savedata = savedata / 11;");
code("}");
code("}");

code("for(x=CLASS_COUNT; >0) {");
code("proto = trQuestVarGet(\"class\"+x+\"proto\");");
code("trModifyProtounit(kbGetProtoUnitName(proto),1,5,trQuestVarGet(\"class\"+x+\"level\")-1);");
code("}");

code("xsEnableRule(\"singleplayer_init\");");
code("}");
code("trQuestVarSet(\"enemyVictoryMarker\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Victory Marker\",1,1,0,1,0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(ENEMY_PLAYER);");
code("xsDisableSelf();");
code("}");

code("rule data_load_01_ready");
code("highFrequency");
code("inactive");
code("{");
code("int swordsmen = 0;");
code("int total = 32 * (cNumberPlayers - 2);");
code("for(p=1; < ENEMY_PLAYER) {");
code("swordsmen = swordsmen + trPlayerUnitCountSpecific(p, \"Swordsman\");");
code("}");
code("if (swordsmen == total) {");
code("savedata = xsMax(0, trGetScenarioUserData(0));");
code("currentdata = iModulo(10, savedata);");
code("savedata = savedata / 10;");

code("xsEnableRule(\"data_load_01_load_data\");");
code("xsEnableRule(\"data_load_02_detect_data\");");
code("xsEnableRule(\"data_load_emergency_exit\");");
code("xsDisableSelf();");
code("}");
code("}");

code("rule data_load_01_load_data");
code("highFrequency");
code("inactive");
code("{");
code("trLetterBox(false);");
code("trBlockAllSounds(true);");
code("if (currentdata >= 32) {");
code("trSoundPlayFN(\"cantdothat.wav\",\"1\",-1,\"Invalid code at \" + loadProgress + \"!\",\"\");");
code("}");
code("trUnitSelectClear();");
code("trUnitSelectByID(currentdata + 32 * (trCurrentPlayer() - 1));");
code("for(i=32; >0) {");
code("if (trUnitIsSelected() == false) {");
code("uiFindType(\"Swordsman\");");
code("} else {");
code("break;");
code("}");
code("}");
code("uiTransformSelectedUnit(\"Swordsman Hero\");");
code("trForceNonCinematicModels(true);");

code("trLetterBox(true);");

code("showLoadProgress();");
code("xsDisableSelf();");
code("}");

code("rule data_load_02_detect_data");
code("highFrequency");
code("inactive");
code("{");
code("int swordsmen = 0;");
code("for(p=1; < ENEMY_PLAYER) {");
code("swordsmen = swordsmen + trPlayerUnitCountSpecific(p, \"Swordsman Hero\");");
code("}");
code("if (swordsmen == cNumberPlayers - 2) {");
code("for(p=1; < ENEMY_PLAYER) {");
code("swordsmen = 32 * (p - 1);");
code("for(x=0; < 32) {");
code("if (kbGetUnitBaseTypeID(x + swordsmen) == kbGetProtoUnitID(\"Swordsman Hero\")) {");
code("if (loadProgress == 0) {");
code("trQuestVarSet(\"p\"+p+\"progress\", x);");
code("} else if (loadProgress == 1) {");
code("trQuestVarSet(\"p\"+p+\"level\", x);");
code("} else if (loadProgress == 2) {");
code("trQuestVarSet(\"p\"+p+\"class\", x);");
code("} else if (loadProgress == 3) {");
code("trQuestVarSet(\"p\"+p+\"gold\", x);");
code("} else if (loadProgress == 4) {");
code("trQuestVarSet(\"p\"+p+\"gold\", trQuestVarGet(\"p\"+p+\"gold\") + 32 * x);");
code("} else if (loadProgress < 15) {");
code("trQuestVarSet(\"p\"+p+\"relic\"+(loadProgress - 4), x);");
code("}");
code("trUnitSelectClear();");
code("trUnitSelectByID(x + swordsmen);");
code("trMutateSelected(kbGetProtoUnitID(\"Swordsman\"));");
code("break;");
code("}");
code("}");
code("}");
code("loadProgress = loadProgress + 1;");
code("showLoadProgress();");
code("if (loadProgress == 15) {");
code("xsDisableSelf();");
code("xsEnableRule(\"data_load_03_done\");");
code("} else {");
code("xsEnableRule(\"data_load_01_load_data\");");
code("switch(loadProgress)");
code("{");
code("case 3:");
code("{");
code("savedata = xsMin(1000,xsMax(0, trGetScenarioUserData(1)));");
code("}");
code("case 5:");
code("{");
code("savedata = xsMax(0, trGetScenarioUserData(2));");
code("}");
code("case 10:");
code("{");
code("savedata = xsMax(0, trGetScenarioUserData(3));");
code("}");
code("}");
code("if (loadProgress >=3) {");
code("currentdata = iModulo(32, savedata);");
code("savedata = savedata / 32;");
code("} else if (loadProgress == 2) {");
code("currentdata = savedata;");
code("} else {");
code("currentdata = iModulo(10, savedata);");
code("savedata = savedata / 10;");
code("}");
code("}");
code("}");
code("}");


code("rule data_load_03_done");
code("highFrequency");
code("inactive");
code("{");
code("for(x=0; < trQuestVarGet(\"enemyVictoryMarker\")) {");
code("trUnitSelectClear();");
code("trUnitSelectByID(x);");
code("trUnitDestroy();");
code("}");
code("int class = 0;");
code("int proto = 0;");
code("for(p=1; < ENEMY_PLAYER) {");
code("trForbidProtounit(p, \"Swordsman Hero\");");
code("trQuestVarSet(\"p\"+p+\"victoryMarker\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\",\"Victory Marker\",1,1,0,1,0,true);");
code("class = trQuestVarGet(\"p\"+p+\"class\");");
code("proto = trQuestVarGet(\"class\"+class+\"proto\");");
code("trModifyProtounit(kbGetProtoUnitName(proto), p, 5, trQuestVarGet(\"p\"+p+\"level\"));");
code("if (trQuestVarGet(\"p\"+p+\"class\") == 0) {");
code("trQuestVarSet(\"newPlayers\", 1);");
code("trQuestVarSet(\"p\"+p+\"noob\", 1);");
code("}");
code("trPlayerGrantResources(p, \"Gold\", trQuestVarGet(\"p\"+p+\"gold\"));");
code("}");
code("trUnblockAllSounds();");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"Done!\",\"icons\god power reverse time icons 64\");");
code("xsDisableSelf();");
code("xsEnableRule(\"Z_cin_00\");");
code("}");

code("rule data_load_emergency_exit");
code("highFrequency");
code("inactive");
code("{");
code("if (trTime() > cActivationTime + 8) {");
code("xsDisableSelf();");
code("if (loadProgress == 0) {");
code("int x = 0;");
code("for(p=1; < ENEMY_PLAYER) {");
code("x = x + trPlayerUnitCountSpecific(p, \"Swordsman Hero\");");
code("}");
code("if (x <= 1) {");
code("trSoundPlayFN(\"default\",\"1\",-1,");
code("\"Zenophobia: Hmm, looks like AoM has sent everyone into singleplayer. Returning you to main menu now.\",");
code("\"icons\infantry g hoplite icon 64\");");
code("if (trCurrentPlayer() == 1) {");
code("xsEnableRule(\"data_load_emergency_exit_01\");");
code("} else {");
code("xsEnableRule(\"data_load_emergency_exit_02\");");
code("}");
code("}");
code("}");
code("}");
code("}");

code("rule data_load_emergency_exit_01");
code("highFrequency");
code("inactive");
code("{");
code("if (trTime() > cActivationTime + 5) {");
code("xsDisableSelf();");
code("xsEnableRule(\"data_load_emergency_exit_02\");");
code("trSoundPlayFN(\"default\",\"1\",-1,");
code("\"Zenophobia:\"+trStringQuestVarGet(\"p1name\")+\", make sure all spots are filled and the last player is a CPU.\",");
code("\"icons\infantry g hoplite icon 64\");");
code("}");
code("}");

code("rule data_load_emergency_exit_02");
code("highFrequency");
code("inactive");
code("{");
code("if (trTime() > cActivationTime + 7) {");
code("xsDisableSelf();");
code("trModeEnter(\"Pregame\");");
code("}");
code("}");
code("int NPC_RELIC_TRANSPORTER = 0;");
code("int NPC_EXPLAIN_SINGLEPLAYER = 1;");

code("int npcDiag(int npc = 0, int dialog = 0) {");
code("dialog = dialog + 1;");
code("switch(npc)");
code("{");
code("case NPC_RELIC_TRANSPORTER:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Greetings! I am the Relic Transporter!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Drop a relic in front of me and I will teleport it to your warehouse for 25 gold.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"You can visit your warehouse by playing this map in singleplayer.\");");
code("}");
code("}");
code("if (dialog == 4) {");
code("dialog = -1;");
code("}");
code("}");
code("case NPC_EXPLAIN_SINGLEPLAYER:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("trCameraCut(vector(90,70.710701,90), vector(0.5,-0.707107,0.5), vector(0.5,0.707107,0.5), vector(0.707107,0,-0.707107));");
code("uiMessageBox(\"Welcome to the Adventurer's Guild! There are many things you can do here!\");");
code("}");
code("case 2:");
code("{");
code("trCameraCut(vector(60,70.710701,90), vector(0.5,-0.707107,0.5), vector(0.5,0.707107,0.5), vector(0.707107,0,-0.707107));");
code("uiMessageBox(\"This is your relic warehouse. This is where all your spare relics are stored.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"If you drop a relic here, it will automatically be kept in the warehouse.\");");
code("}");
code("case 4:");
code("{");
code("trCameraCut(vector(90,70.710701,60), vector(0.5,-0.707107,0.5), vector(0.5,0.707107,0.5), vector(0.707107,0,-0.707107));");
code("uiMessageBox(\"This is your class selection. Click on a class to see its details or switch to it.\");");
code("}");
code("case 5:");
code("{");
code("uiMessageBox(\"Some classes are locked. Each class has a unique unlock condition.\");");
code("}");
code("case 6:");
code("{");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"levelupObelisk\");");
code("trUnitHighlight(15.0, true);");
code("uiMessageBox(\"This is your Ascension Obelisk. Click on this obelisk to level up your current hero.\");");
code("}");
code("case 7:");
code("{");
code("uiMessageBox(\"Level-ups cost gold and gemstones, which are dropped by bosses.\");");
code("}");
code("case 8:");
code("{");
code("uiMessageBox(\"Each level-up increases your hero's relic capacity by 1.\");");
code("}");
code("case 9:");
code("{");
code("uiMessageBox(\"There are more facilities, but they are locked for now. Play the game some more to unlock them!\");");
code("}");
code("case 10:");
code("{");
code("trCameraCut(vector(90,70.710701,90), vector(0.5,-0.707107,0.5), vector(0.5,0.707107,0.5), vector(0.707107,0,-0.707107));");
code("uiMessageBox(\"When you are ready to save your configuration, enter the sky passage in the center.\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"skypassage\");");
code("trUnitHighlight(5.0, true);");
code("}");
code("case 11:");
code("{");
code("dialog = 0;");
code("xsEnableRule(\"gameplay_start_2\");");
code("}");
code("}");
code("}");
code("}");
code("return(dialog);");
code("}");

code("void startNPCDialog(int npc = 0) {");
code("xsEnableRule(\"npc_talk_01\");");
code("trQuestVarSet(\"currentNPC\", npc);");
code("trQuestVarSet(\"currentNPCProgress\", 0);");
code("}");

code("rule relic_transporter_guy_found");
code("inactive");
code("highFrequency");
code("{");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"relicTransporterGuyName\");");
code("for(p=1; <ENEMY_PLAYER) {");
code("if (trUnitHasLOS(p)) {");
code("xsDisableSelf();");
code("xsEnableRule(\"relic_transporter_guy_always\");");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,");
code("trQuestVarGet(\"relicTransporterGuyPosx\"),0,trQuestVarGet(\"relicTransporterGuyPosz\"),0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Revealer\");");
code("trSoundPlayFN(\"villagercreate.wav\",\"1\",-1,\"\",\"\");");
code("break;");
code("}");
code("}");
code("}");

code("rule relic_transporter_guy_always");
code("inactive");
code("highFrequency");
code("{");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"relicTransporterGuyName\");");
code("if (trUnitIsSelected()) {");
code("trUnitHighlight(5.0, true);");
code("startNPCDialog(NPC_RELIC_TRANSPORTER);");
code("reselectMyself();");
code("}");
code("}");

code("rule npc_talk_01");
code("inactive");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("trQuestVarSet(\"currentNPCProgress\",");
code("npcDiag(1*trQuestVarGet(\"currentNPC\"), 1*trQuestVarGet(\"currentNPCProgress\")));");
code("if (trQuestVarGet(\"currentNPCProgress\") > 0) {");
code("trDelayedRuleActivation(\"npc_talk_02\");");
code("}");
code("}");

code("rule npc_talk_02");
code("inactive");
code("highFrequency");
code("{");
code("if ((trQuestVarGet(\"currentNPCProgress\") > 0) && (trIsGadgetVisible(\"ingame-messagedialog\") == false)) {");
code("trDelayedRuleActivation(\"npc_talk_01\");");
code("xsDisableSelf();");
code("}");
code("}");
code("int displayNextTooltip(int class = 0, int tooltip = 0) {");
code("string icon = \"\";");
code("string msg = \"\";");
code("int next = tooltip + 1;");
code("switch(class)");
code("{");
code("case MOONBLADE:");
code("{");
code("icon = \"icons\hero g theseus icon 64\";");
code("switch(tooltip)");
code("{");
code("case 0:");
code("{");
code("msg = \"Moonblade: A jack-of-all-trades good for beginners.\";");
code("}");
code("case 1:");
code("{");
code("msg = \"Passive: Each time you attack, restore health to all allies. Heal = 1 percent of your max health\";");
code("}");
code("case 2:");
code("{");
code("msg = \"Special Attack (7 attacks): Summon a wolf companion that fights for you.\";");
code("}");
code("case 3:");
code("{");
code("icon = \"icons\god power eclipse icon 64\";");
code("msg = \"(Q) Moonbeam: Create a circle that damages enemies. Damage increases for each ally in the circle\";");
code("if (Multiplayer == false) {");
code("next = 6;");
code("}");
code("}");
code("case 4:");
code("{");
code("icon = \"icons\improvement swine array icon 64\";");
code("msg = \"(W) Crescent Strikes: Your next 3 attacks deal bonus damage and stun.\";");
code("if (Multiplayer == false) {");
code("next = 7;");
code("}");
code("}");
code("case 5:");
code("{");
code("icon = \"icons\improvement rheias gift icons 64\";");
code("msg = \"(E) Protection (Toggle): Grant all allies invulnerability. Costs 12 favor per second.\";");
code("next = 0;");
code("}");
code("case 6:");
code("{");
code("icon = \"icons\god power eclipse icon 64\";");
code("msg = \"Cooldown: 18 | Duration: 6 | Radius: 6 | Damage: 20 + 10 per ally\";");
code("next = 4;");
code("}");
code("case 7:");
code("{");
code("icon = \"icons\improvement swine array icon 64\";");
code("msg = \"Cooldown: 12 | Damage: 50\";");
code("next = 5;");
code("}");
code("}");
code("}");
code("case SUNBOW:");
code("{");
code("icon = \"icons\hero g hyppolyta icon 64\";");
code("switch(tooltip)");
code("{");
code("case 0:");
code("{");
code("msg = \"Sunbow: A ranged healer who can also deal good damage.\";");
code("}");
code("case 1:");
code("{");
code("msg = \"Passive: All allies regenerate 1 health each second.\";");
code("}");
code("case 2:");
code("{");
code("icon = \"icons\god power restoration icon 64\";");
code("msg = \"(Q) Sunlight: Create a circle that heals allies for several seconds.\";");
code("if (Multiplayer == false) {");
code("next = 5;");
code("}");
code("}");
code("case 3:");
code("{");
code("icon = \"icons\improvement sun ray icon 64\";");
code("msg = \"(W) Healing Rays: For a short duration, your attacks fire rays that heal allies.\";");
code("if (Multiplayer == false) {");
code("next = 6;");
code("}");
code("}");
code("case 4:");
code("{");
code("icon = \"icons\improvement flames of typhon icon\";");
code("msg = \"(E) Searing Light (Toggle): Your heals also deal damage to enemies. Costs 5 favor per second.\";");
code("next = 0;");
code("}");
code("case 5:");
code("{");
code("icon = \"icons\god power restoration icon 64\";");
code("msg = \"Cooldown: 18 | Duration: 6 | Radius: 6 | Heal: 60\";");
code("next = 3;");
code("}");
code("case 6:");
code("{");
code("icon = \"icons\improvement sun ray icon 64\";");
code("msg = \"Cooldown: 12 | Duration: 5 | Heal: 100 | Fire rate scales with projectile count.\";");
code("next = 4;");
code("}");
code("}");
code("}");
code("case THUNDERRIDER:");
code("{");
code("icon = \"icons\hero g atalanta icon 64\";");
code("switch(tooltip)");
code("{");
code("case 0:");
code("{");
code("msg = \"Thunderwalker: A speedy assassin that scales off of speed.\";");
code("}");
code("case 1:");
code("{");
code("msg = \"Passive: You gain bonus attack by continuously moving. This bonus decays by 5 percent each second.\";");
code("}");
code("case 2:");
code("{");
code("msg = \"Special Attack (5 attacks): Your attack chains to nearby enemies, damaging all of them.\";");
code("}");
code("case 3:");
code("{");
code("icon = \"icons\god power bolt icon 64\";");
code("msg = \"(Q) Blitz: Teleport towards your cursor, stunning and damaging enemies hit.\";");
code("}");
code("case 4:");
code("{");
code("icon = \"icons\god power bolt icon 64\";");
code("msg = \"If Ride the Lightning is active, this changes your direction of travel instead.\";");
code("}");
code("case 5:");
code("{");
code("icon = \"icons\god power bolt icon 64\";");
code("msg = \"Cooldown: 8 | Range: 12 | Damage: 50\";");
code("}");
code("case 6:");
code("{");
code("icon = \"icons\improvement heart of the titans icons 64\";");
code("msg = \"(W) Recharge: Consume all your bonus attack and convert it into healing and favor for yourself.\";");
code("}");
code("case 7:");
code("{");
code("icon = \"icons\improvement heart of the titans icons 64\";");
code("msg = \"Cooldown: 22 | Heal: 1x Attack | Favor Regen: 0.1x Attack\";");
code("}");
code("case 8:");
code("{");
code("icon = \"icons\god power implode icons 64\";");
code("msg = \"(E) Ride the Lightning: Become a fast-moving ball of lightning that bounces off walls\";");
code("}");
code("case 9:");
code("{");
code("icon = \"icons\god power implode icons 64\";");
code("msg = \"Damage enemies that you pass through. Damage increases with each bounce.\";");
code("}");
code("case 10:");
code("{");
code("icon = \"icons\god power implode icons 64\";");
code("msg = \"Cost: 8 favor per second | Radius: 5 | Damage: 100 + 50 per bounce\";");
code("next = 0;");
code("}");
code("}");
code("}");
code("case FIREKNIGHT:");
code("{");
code("icon = \"icons\cavalry x lancer hero icons 64\";");
code("switch(tooltip)");
code("{");
code("case 0:");
code("{");
code("msg = \"Fire Knight: A character that charges in and sacrifices health for damage.\";");
code("}");
code("case 1:");
code("{");
code("msg = \"Passive: Gain spell lifesteal equal to your percentage of missing health.\";");
code("}");
code("case 2:");
code("{");
code("msg = \"Special Attack (5 attacks): Deal 80 damage to nearby enemies and yourself.\";");
code("}");
code("case 3:");
code("{");
code("icon = \"icons\special e phoenix icon 64\";");
code("msg = \"(Q) Flaming Impact: Dash to the target location, damaging enemies and dragging them with you\";");
code("}");
code("case 4:");
code("{");
code("icon = \"icons\special e phoenix icon 64\";");
code("msg = \"Cooldown: 12 | Radius: 4 | Damage: 20 per meter\";");
code("}");
code("case 5:");
code("{");
code("icon = \"icons\improvement flames of typhon icon\";");
code("msg = \"(W) Overheat: Set yourself on fire, damaging yourself each second.\";");
code("}");
code("case 6:");
code("{");
code("icon = \"icons\improvement flames of typhon icon\";");
code("msg = \"During this time, reflect all damage you receive onto nearby enemies.\";");
code("}");
code("case 7:");
code("{");
code("icon = \"icons\improvement flames of typhon icon\";");
code("msg = \"Cooldown: 14 | Radius: 4 | Duration: 5 | Damage: 40 per second\";");
code("}");
code("case 8:");
code("{");
code("icon = \"icons\god power firestorm icon 64\";");
code("msg = \"(E) Inferno: Unleash a ring of flames that damages enemies and heals allies for several seconds\";");
code("}");
code("case 9:");
code("{");
code("icon = \"icons\god power firestorm icon 64\";");
code("msg = \"Cost: 60 | Radius: 12 | Duration: 8 | Damage: 120 per second | Heal: 60 per second\";");
code("next = 0;");
code("}");
code("}");
code("}");
code("case FROSTKNIGHT:");
code("{");
code("icon = \"icons\hero g achilles icon 64\";");
code("switch(tooltip)");
code("{");
code("case 0:");
code("{");
code("msg = \"Frost Knight: A fighter that brings a lot of crowd control.\";");
code("}");
code("case 1:");
code("{");
code("msg = \"Passive: Each time you stun an enemy, deal 10 percent of your max health to them.\";");
code("}");
code("case 2:");
code("{");
code("msg = \"Special Attack (5 attacks): Your attack stuns its target.\";");
code("}");
code("case 3:");
code("{");
code("icon = \"\";");
code("msg = \"(Q) Icicle: Summon an icicle at the target location, dealing damage.\";");
code("}");
code("case 4:");
code("{");
code("icon = \"\";");
code("msg = \"If this hits an enemy at full health, stun them.\";");
code("}");
code("case 5:");
code("{");
code("icon = \"\";");
code("msg = \"Cooldown: 5 | Radius: 1.5 | Duration: 6 | Damage: 80\";");
code("}");
code("case 6:");
code("{");
code("icon = \"icons\god power frost icon 64\";");
code("msg = \"(W) Blizzard: For a short duration, you and your summoned allies release frost, dealing damage.\";");
code("}");
code("case 7:");
code("{");
code("icon = \"icons\god power frost icon 64\";");
code("msg = \"Cooldown: 16 | Duration: 6 | Radius: 5 | Damage: 20 per second\";");
code("}");
code("case 8:");
code("{");
code("icon = \"icons\special n frost giant icon 64\";");
code("msg = \"(E) Frost Giant: Summon a Frost Giant familiar to fight for you. It copies your attack and health.\";");
code("}");
code("case 9:");
code("{");
code("icon = \"icons\special n frost giant icon 64\";");
code("msg = \"Cost: 60 | Decay: 3 percent health per second.\";");
code("next = 0;");
code("}");
code("}");
code("}");
code("}");
code("trShowImageDialog(icon, msg);");
code("return(next);");
code("}");

code("string className(int class = 0) {");
code("string name = \"N/A\";");
code("switch(class)");
code("{");
code("case MOONBLADE:");
code("{");
code("name = \"Moonblade\";");
code("}");
code("case SUNBOW:");
code("{");
code("name = \"Sunbow\";");
code("}");
code("case THUNDERRIDER:");
code("{");
code("name = \"Thunderwalker\";");
code("}");
code("case FIREKNIGHT:");
code("{");
code("name = \"Fire Knight\";");
code("}");
code("case FROSTKNIGHT:");
code("{");
code("name = \"Frost Knight\";");
code("}");
code("}");
code("return(name);");
code("}");

code("void explainClass(int class = 0) {");
code("trQuestVarSet(\"explain\", 0);");
code("trQuestVarSet(\"pleaseExplain\", class);");
code("xsEnableRule(\"class_shop_explain_01\");");
code("}");

code("rule class_shop_always");
code("inactive");
code("highFrequency");
code("{");
code("int class = 0;");
code("for(i=2; >0) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"choice\"+i+\"unit\");");
code("if (trUnitIsSelected()) {");
code("trQuestVarSet(\"choice\"+i+\"selected\", 1);");
code("trQuestVarSet(\"pleaseExplain\", i);");
code("trQuestVarSet(\"explain\", 0);");
code("trDelayedRuleActivation(\"class_shop_explain_01\");");
code("reselectMyself();");
code("}");
code("trVectorSetUnitPos(\"pos\", \"choice\"+i+\"unit\");");
code("for (p=1; < ENEMY_PLAYER) {");
code("if (zDistanceToVectorSquared(\"p\"+p+\"unit\", \"pos\") < 5) {");
code("if (trQuestVarGet(\"p\"+p+\"buy\"+i) < 4 &&");
code("trTimeMS() > trQuestVarGet(\"p\"+p+\"buyNext\") &&");
code("trQuestVarGet(\"p\"+p+\"noob\") == 1) {");
code("trQuestVarSet(\"p\"+p+\"buy\"+i, trQuestVarGet(\"p\"+p+\"buy\"+i) + 1);");
code("trQuestVarSet(\"p\"+p+\"buyNext\", trTimeMS() + 1000);");
code("class = i;");
code("if (trQuestVarGet(\"p\"+p+\"buy\"+i) == 4) {");
code("trQuestVarSet(\"p\"+p+\"buy\"+i, 5);");
code("chooseClass(p, class);");
code("if (trCurrentPlayer() == p) {");
code("trChatSend(0, \"You have switched to the \" + className(class) + \" class!\");");
code("}");
code("trSoundPlayFN(\"ui\thunder5.wav\",\"1\",-1,\"\",\"\");");
code("} else if (trCurrentPlayer() == p) {");
code("trChatSend(0,\"<color=1,1,1>Switching to \"+className(class)+\" in \"+(4-trQuestVarGet(\"p\"+p+\"buy\"+i))+\"...\");");
code("}");
code("}");
code("} else {");
code("trQuestVarSet(\"p\"+p+\"buy\"+i, 0);");
code("}");
code("}");
code("}");
code("}");

code("rule class_shop_explain_01");
code("inactive");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("int i = trQuestVarGet(\"pleaseExplain\");");
code("trQuestVarSet(\"explain\",");
code("displayNextTooltip(i, 1*trQuestVarGet(\"explain\")));");
code("trDelayedRuleActivation(\"class_shop_explain_02\");");
code("}");

code("rule class_shop_explain_02");
code("inactive");
code("highFrequency");
code("{");
code("int i = trQuestVarGet(\"pleaseExplain\");");
code("if (trIsGadgetVisible(\"ShowImageBox\") == false) {");
code("if (trQuestVarGet(\"explain\") > 0) {");
code("trDelayedRuleActivation(\"class_shop_explain_01\");");
code("}");
code("xsDisableSelf();");
code("}");
code("}");
code("const int ABILITY_READY = 0;");
code("const int ABILITY_COOLDOWN = 1;");
code("const int ABILITY_COST = 2;");

code("const int ABILITY_OFF = 0;");
code("const int ABILITY_ON = 1;");

code("const int ON_HIT_NONE = 0;");
code("const int ON_HIT_NORMAL = 1;");
code("const int ON_HIT_SPECIAL = 2;");

code("const int PROJ_NONE = 0;");
code("const int PROJ_GROUND = 1;");
code("const int PROJ_FALLING = 2;");
code("const int PROJ_BOUNCE = 3;");
code("const int PROJ_REMOVE = 4;");

code("string wellName = \"\";");
code("string lureName = \"\";");
code("string rainName = \"\";");

code("bool wellIsUltimate = false;");
code("bool rainIsUltimate = false;");
code("bool lureIsUltimate = false;");

code("void spyEffect(int unit = 0, int proto = 0, string qv = \"\") {");
code("int x = modularCounterNext(\"spyFind\");");
code("trQuestVarSet(\"spyEye\"+x, proto);");
code("trQuestVarSet(\"spyEye\"+x+\"unit\", unit);");
code("trStringQuestVarSet(\"spyName\"+x, qv);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+unit, true);");
code("trTechInvokeGodPower(0, \"spy\", vector(0,0,0), vector(0,0,0));");
code("}");

code("void silencePlayer(int p = 0, float duration = 0, bool sfx = true) {");
code("float timeout = duration * 1000 + trTimeMS();");
code("if (trQuestVarGet(\"p\"+p+\"silenceTimeout\") < timeout) {");
code("trQuestVarSet(\"p\"+p+\"silenceTimeout\", timeout);");
code("}");
code("if (trQuestVarGet(\"p\"+p+\"silenced\") == 0) {");
code("trQuestVarSet(\"p\"+p+\"silenced\", 1);");
code("trSoundPlayFN(\"frostgiantmove1.wav\",\"1\",-1,\"\",\"\");");
code("trChatSend(0, \"<color={Playercolor(\"+p+\")}>{Playername(\"+p+\")}</color> has been silenced!\");");
code("trPlayerKillAllGodPowers(p);");
code("if (sfx) {");
code("if (trQuestVarGet(\"p\"+p+\"silenceSFX\") > 0) {");
code("int id = kbGetBlockID(\"\"+1*trQuestVarGet(\"p\"+p+\"silenceSFX\"));");
code("if (id == -1) {");
code("spyEffect(1*trQuestVarGet(\"p\"+p+\"unit\"), kbGetProtoUnitID(\"UI Range Indicator Egypt SFX\"), \"p\"+p+\"silenceSFX\");");
code("} else {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"silenceSFX\");");
code("trUnitChangeProtoUnit(\"UI Range Indicator Egypt SFX\");");
code("}");
code("} else {");
code("spyEffect(1*trQuestVarGet(\"p\"+p+\"unit\"), kbGetProtoUnitID(\"UI Range Indicator Egypt SFX\"), \"p\"+p+\"silenceSFX\");");
code("}");
code("}");
code("}");
code("}");

code("void removeEnemy() {");
code("if (yGetVar(\"enemies\", \"bounty\") > 0) {");
code("trQuestVarSetFromRand(\"rand\", 1, yGetVar(\"enemies\", \"bounty\"), true);");
code("for(p=1; <ENEMY_PLAYER) {");
code("if (Multiplayer) {");
code("trPlayerGrantResources(p, \"Gold\", yGetVar(\"enemies\", \"bounty\"));");
code("}");
code("trPlayerGrantResources(p, \"Favor\", trQuestVarGet(\"rand\"));");
code("}");
code("}");
code("if (yGetVar(\"enemies\", \"relic\") > 0) {");
code("spawnRelicClosest(yGetVar(\"enemies\", \"posX\"), yGetVar(\"enemies\", \"posZ\"), 1*yGetVar(\"enemies\", \"relic\"));");
code("}");
code("yRemoveFromDatabase(\"enemies\");");
code("yRemoveUpdateVar(\"enemies\", \"bounty\");");
code("yRemoveUpdateVar(\"enemies\", \"stunStatus\");");
code("yRemoveUpdateVar(\"enemies\", \"stunTimeout\");");
code("yRemoveUpdateVar(\"enemies\", \"stunSFX\");");
code("yRemoveUpdateVar(\"enemies\", \"poisonStatus\");");
code("yRemoveUpdateVar(\"enemies\", \"poisonTimeout\");");
code("yRemoveUpdateVar(\"enemies\", \"poisonLast\");");
code("yRemoveUpdateVar(\"enemies\", \"poisonDamage\");");
code("yRemoveUpdateVar(\"enemies\", \"poisonSFX\");");
code("yRemoveUpdateVar(\"enemies\", \"relic\");");
code("yRemoveUpdateVar(\"enemies\", \"posX\");");
code("yRemoveUpdateVar(\"enemies\", \"posZ\");");
code("yRemoveUpdateVar(\"enemies\", \"launched\");");
code("}");

code("void removePlayerUnit() {");
code("yRemoveFromDatabase(\"playerUnits\");");
code("yRemoveUpdateVar(\"playerUnits\", \"player\");");
code("yRemoveUpdateVar(\"playerUnits\", \"currentHealth\");");
code("yRemoveUpdateVar(\"playerUnits\", \"stunStatus\");");
code("yRemoveUpdateVar(\"playerUnits\", \"stunTimeout\");");
code("yRemoveUpdateVar(\"playerUnits\", \"stunSFX\");");
code("yRemoveUpdateVar(\"playerUnits\", \"poisonStatus\");");
code("yRemoveUpdateVar(\"playerUnits\", \"poisonTimeout\");");
code("yRemoveUpdateVar(\"playerUnits\", \"poisonLast\");");
code("yRemoveUpdateVar(\"playerUnits\", \"poisonDamage\");");
code("yRemoveUpdateVar(\"playerUnits\", \"poisonSFX\");");
code("yRemoveUpdateVar(\"playerUnits\", \"decay\");");
code("yRemoveUpdateVar(\"playerUnits\", \"decayNext\");");
code("yRemoveUpdateVar(\"playerUnits\", \"hero\");");
code("yRemoveUpdateVar(\"playerUnits\", \"launched\");");
code("}");

code("void removePlayerCharacter() {");
code("yRemoveFromDatabase(\"playerCharacters\");");
code("}");

code("void removePlayerSpecific(int p = 0) {");
code("if (trQuestVarGet(\"p\"+p+\"characters\") == trQuestVarGet(\"p\"+p+\"unit\")) {");
code("for(x=yGetDatabaseCount(\"p\"+p+\"relics\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"relics\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");
code("}");
code("trQuestVarSet(\"p\"+p+\"dead\", 10);");
code("trQuestVarSet(\"deadPlayerCount\", 1 + trQuestVarGet(\"deadPlayerCount\"));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"unit\");");
code("trUnitOverrideAnimation(6,0,false,false,-1);");
code("trSoundPlayFN(\"aherohasfallen.wav\",\"1\",-1,\"\",\"\");");
code("trMessageSetText(trStringQuestVarGet(\"p\"+p+\"name\") + \" has fallen! Clear nearby enemies to revive them!\");");
code("silencePlayer(p, 0);");
code("trQuestVarSet(\"p\"+p+\"silenceSFX\", 0);");
code("trQuestVarSet(\"p\"+p+\"reviveBeam\", trGetNextUnitScenarioNameNumber());");
code("trVectorSetUnitPos(\"pos\", \"p\"+p+\"unit\");");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,trQuestVarGet(\"posX\"),0,trQuestVarGet(\"posZ\"),0,true);");
code("trArmySelect(\"\"+p+\",0\");");
code("trUnitChangeProtoUnit(\"Healing SFX\");");
code("}");
code("yRemoveFromDatabase(\"p\"+p+\"characters\");");
code("yRemoveUpdateVar(\"p\"+p+\"Characters\", \"specialAttack\");");
code("yRemoveUpdateVar(\"p\"+p+\"Characters\", \"attacking\");");
code("yRemoveUpdateVar(\"p\"+p+\"Characters\", \"attackNext\");");
code("yRemoveUpdateVar(\"p\"+p+\"characters\", \"index\");");
code("}");

code("vector getBounceDir(string pos = \"\", string dir = \"\") {");
code("bool bounced = false;");
code("int xMod = 1;");
code("int zMod = 1;");
code("if (trQuestVarGet(dir+\"x\") < 0) {");
code("xMod = -1;");
code("}");
code("if (trQuestVarGet(dir+\"z\") < 0) {");
code("zMod = -1;");
code("}");
code("vectorToGrid(pos, \"loc\");");
code("vector ret = trVectorQuestVarGet(dir);");
code("trQuestVarSet(\"horizontalX\", trQuestVarGet(\"locX\") - xMod);");
code("trQuestVarSet(\"horizontalZ\", trQuestVarGet(\"locZ\"));");
code("trQuestVarSet(\"verticalX\", trQuestVarGet(\"locX\"));");
code("trQuestVarSet(\"verticalZ\", trQuestVarGet(\"locZ\") - zMod);");
code("if (terrainIsType(\"horizontal\", TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("ret = xsVectorSetZ(ret, 0.0 - trQuestVarGet(dir+\"z\"));");
code("bounced = true;");
code("}");
code("if (terrainIsType(\"vertical\", TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("ret = xsVectorSetX(ret, 0.0 - trQuestVarGet(dir+\"x\"));");
code("bounced = true;");
code("}");
code("if (bounced == false) {");
code("vector a = (trVectorQuestVarGet(pos) - (trVectorQuestVarGet(\"loc\") * 2)) / 2;");
code("vector b = xsVectorSet((1 - xMod) / 2,0,(1 - zMod) / 2);");
code("b = trVectorQuestVarGet(dir) + xsVectorNormalize(b - a);");
code("if (xsVectorGetX(b) * trQuestVarGet(dir+\"x\") < 0) {");
code("ret = xsVectorSetZ(ret, 0.0 - xsVectorGetZ(ret));");
code("} else {");
code("ret = xsVectorSetX(ret, 0.0 - xsVectorGetX(ret));");
code("}");
code("}");
code("return(ret);");
code("}");

code("void vectorSetAsTargetVector(string target = \"\", string from = \"\", string to = \"\", float dist = 40.0) {");
code("trVectorQuestVarSet(\"dir\", zGetUnitVector(from, to, dist));");
code("trQuestVarSet(target+\"x\", trQuestVarGet(\"dirx\") + trQuestVarGet(from+\"x\"));");
code("trQuestVarSet(target+\"z\", trQuestVarGet(\"dirz\") + trQuestVarGet(from+\"z\"));");

code("float scale = 0;");
code("if (trQuestVarGet(target+\"x\") < 0) {");
code("scale = trQuestVarGet(target+\"x\") / (trQuestVarGet(target+\"x\") - trQuestVarGet(from+\"x\"));");
code("trQuestVarSet(target+\"z\", trQuestVarGet(target+\"z\") + scale * (trQuestVarGet(from+\"z\") - trQuestVarGet(target+\"z\")));");
code("trQuestVarSet(target+\"x\", 0);");
code("} else if (trQuestVarGet(target+\"x\") > DIMENSION_X) {");
code("scale = (trQuestVarGet(target+\"x\") - DIMENSION_X) / (trQuestVarGet(target+\"x\") - trQuestVarGet(from+\"x\"));");
code("trQuestVarSet(target+\"z\", trQuestVarGet(target+\"z\") + scale * (trQuestVarGet(from+\"z\") - trQuestVarGet(target+\"z\")));");
code("trQuestVarSet(target+\"x\", DIMENSION_X);");
code("}");

code("if (trQuestVarGet(target+\"z\") < 0) {");
code("scale = trQuestVarGet(target+\"z\") / (trQuestVarGet(target+\"z\") - trQuestVarGet(from+\"z\"));");
code("trQuestVarSet(target+\"x\", trQuestVarGet(target+\"x\") + scale * (trQuestVarGet(from+\"x\") - trQuestVarGet(target+\"x\")));");
code("trQuestVarSet(target+\"z\", 0);");
code("} else if (trQuestVarGet(target+\"z\") > DIMENSION_Z) {");
code("scale = (trQuestVarGet(target+\"z\") - DIMENSION_Z) / (trQuestVarGet(target+\"z\") - trQuestVarGet(from+\"z\"));");
code("trQuestVarSet(target+\"x\", trQuestVarGet(target+\"x\") + scale * (trQuestVarGet(from+\"x\") - trQuestVarGet(target+\"x\")));");
code("trQuestVarSet(target+\"z\", DIMENSION_Z);");
code("}");
code("}");

code("void poisonUnit(string db = \"\", float duration = 0, float damage = 0, int p = 0) {");
code("duration = duration * 1000;");
code("if (p > 0) {");
code("duration = duration * trQuestVarGet(\"p\"+p+\"spellDuration\");");
code("damage = damage * trQuestVarGet(\"p\"+p+\"spellDamage\");");
code("}");
code("if (trTimeMS() + duration > yGetVar(db, \"poisonTimeout\")) {");
code("trQuestVarSet(\"poisonSound\", 1);");
code("if (yGetVar(db, \"poisonStatus\") == 0) {");
code("if (yGetVar(db, \"poisonSFX\") == 0) {");
code("spyEffect(1*trQuestVarGet(db), kbGetProtoUnitID(\"Poison SFX\"), yGetVarName(db, \"poisonSFX\"));");
code("} else {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(db, \"poisonSFX\"), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Poison SFX\"));");
code("}");
code("ySetVar(db, \"poisonStatus\", 1);");
code("ySetVar(db, \"poisonLast\", trTimeMS());");
code("}");
code("ySetVar(db, \"poisonTimeout\", trTimeMS() + duration);");
code("}");
code("if (damage > yGetVar(db, \"poisonDamage\")) {");
code("ySetVar(db, \"poisonDamage\", damage);");
code("}");
code("}");

code("void stunUnit(string db = \"\", float duration = 0, int p = 0) {");
code("trQuestVarSet(\"stunSound\", 1);");
code("int index = 0;");
code("duration = duration * 1000;");
code("if (p > 0) {");
code("duration = duration * trQuestVarGet(\"p\"+p+\"spellDuration\");");
code("} else if (p < 0) {");
code("duration = duration * trQuestVarGet(\"p\"+(0-p)+\"stunResistance\");");
code("}");
code("if (trTimeMS() + duration > yGetVar(db, \"stunTimeout\")) {");
code("if (yGetVar(db, \"stunStatus\") == 0) {");
code("index = yAddToDatabase(\"stunnedUnits\", db);");
code("yAddUpdateVar(\"stunnedUnits\", \"proto\", kbGetUnitBaseTypeID(kbGetBlockID(\"\"+1*trQuestVarGet(db), true)));");
code("if (yGetVar(db, \"stunSFX\") == 0) {");
code("spyEffect(1*trQuestVarGet(db), kbGetProtoUnitID(\"Shockwave stun effect\"), yGetVarName(db, \"stunSFX\"));");
code("} else {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(db, \"stunSFX\"), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Shockwave stun effect\"));");
code("}");
code("ySetVar(db, \"stunStatus\", index);");
code("}");
code("ySetVar(db, \"stunTimeout\", trTimeMS() + duration);");
code("}");
code("}");

code("void processLaunchedUnit() {");
code("yDatabaseNext(\"launchedUnits\");");
code("yVarToVector(\"launchedUnits\", \"dest\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"launchedUnits\", \"unit\"));");
code("if (trUnitAlive() == false ||");
code("zDistanceToVectorSquared(\"launchedUnits\", \"dest\") < 4 ||");
code("trTimeMS() > yGetVar(\"launchedUnits\", \"timeout\")) {");
code("if (trUnitAlive()) {");
code("string db = \"playerUnits\";");
code("if (yGetVar(\"launchedUnits\", \"player\") == ENEMY_PLAYER) {");
code("db = \"enemies\";");
code("}");
code("ySetVarAtIndex(db, \"launched\", 0, 1*yGetVar(\"launchedUnits\", \"index\"));");
code("trUnitChangeProtoUnit(kbGetProtoUnitName(1*yGetVar(\"launchedUnits\", \"proto\")));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"launchedUnits\", \"unit\"));");
code("trMutateSelected(1*yGetVar(\"launchedUnits\", \"proto\"));");
code("} else {");
code("trUnitChangeProtoUnit(kbGetProtoUnitName(1*yGetVar(\"launchedUnits\", \"proto\")));");
code("}");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"launchedUnits\");");
code("trUnitChangeProtoUnit(\"Dust Small\");");
code("yRemoveFromDatabase(\"launchedUnits\");");
code("}");
code("}");

code("void launchUnit(string db = \"\", string dest = \"\") {");
code("if (yGetVar(db, \"launched\") == 0) {");
code("ySetVar(db, \"launched\", 1);");
code("int type = kbGetUnitBaseTypeID(kbGetBlockID(\"\"+1*trQuestVarGet(db)));");
code("int owner = ENEMY_PLAYER;");
code("trUnitSelectClear();");
code("trUnitSelectByQV(db);");
code("if (trUnitIsOwnedBy(ENEMY_PLAYER) == false) {");
code("owner = yGetVar(db, \"player\");");
code("}");
code("trUnitChangeProtoUnit(\"Transport Ship Greek\");");

code("trVectorSetUnitPos(\"start\", db);");
code("trVectorQuestVarSet(\"dir\", zGetUnitVector(\"start\", dest));");

code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,1,0,1,0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\");");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(db));");
code("trUnitConvert(owner);");
code("trUnitChangeProtoUnit(\"Dwarf\");");

code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\");");
code("trSetUnitOrientation(trVectorQuestVarGet(\"dir\"), vector(0,1,0), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Hero Greek Achilles\"));");

code("trUnitSelectClear();");
code("trUnitSelectByQV(db);");
code("trMutateSelected(type);");
code("trUnitOverrideAnimation(24,0,true,true,-1);");
code("trMutateSelected(kbGetProtoUnitID(\"Relic\"));");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"next\"));");
code("trMutateSelected(type);");

code("float dist = zDistanceBetweenVectors(\"start\", dest);");
code("for(x=0; < dist / 2) {");
code("trQuestVarSet(\"nextx\", trQuestVarGet(\"startx\") + 2.0 * trQuestVarGet(\"dirx\"));");
code("trQuestVarSet(\"nextz\", trQuestVarGet(\"startz\") + 2.0 * trQuestVarGet(\"dirz\"));");
code("vectorToGrid(\"next\", \"loc\");");
code("if (terrainIsType(\"loc\", TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("break;");
code("} else {");
code("trQuestVarSet(\"startx\", trQuestVarGet(\"nextx\"));");
code("trQuestVarSet(\"startz\", trQuestVarGet(\"nextz\"));");
code("}");
code("}");

code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\");");
code("trMutateSelected(kbGetProtoUnitID(\"Wadjet Spit\"));");
code("trUnitMoveToPoint(trQuestVarGet(\"startx\"),0,trQuestVarGet(\"startz\"),-1,false);");

code("yAddToDatabase(\"launchedUnits\", \"next\");");
code("yAddUpdateVar(\"launchedUnits\", \"unit\", trQuestVarGet(db));");
code("yAddUpdateVar(\"launchedUnits\", \"index\", yGetPointer(db));");
code("yAddUpdateVar(\"launchedUnits\", \"player\", owner);");
code("yAddUpdateVar(\"launchedUnits\", \"proto\", type);");
code("yAddUpdateVar(\"launchedUnits\", \"destX\", trQuestVarGet(\"startx\"));");
code("yAddUpdateVar(\"launchedUnits\", \"destz\", trQuestVarGet(\"startz\"));");
code("yAddUpdateVar(\"launchedUnits\", \"timeout\", trTimeMS() + 1100 * dist / 15);");
code("}");
code("}");

code("void healUnit(int p = 0, float amt = 0, int index = -1) {");
code("int old = yGetPointer(\"playerUnits\");");
code("if (index > 0) {");
code("ySetPointer(\"playerUnits\", index);");
code("}");
code("amt = amt * trQuestVarGet(\"p\"+p+\"healBoost\");");
code("if (yGetVar(\"playerUnits\", \"poisonStatus\") == 0) {");
code("trDamageUnit(0.0 - amt);");
code("}");
code("if (index > 0) {");
code("ySetPointer(\"playerUnits\", old);");
code("}");
code("}");

code("float damageEnemy(int p = 0, float dmg = 0, bool spell = true) {");
code("trDamageUnit(dmg);");
code("if (spell) {");
code("trQuestVarSet(\"p\"+p+\"lifestealTotal\",");
code("trQuestVarGet(\"p\"+p+\"lifestealTotal\") + trQuestVarGet(\"p\"+p+\"spellLifesteal\") * dmg);");
code("} else {");
code("trQuestVarSet(\"p\"+p+\"lifestealTotal\",");
code("trQuestVarGet(\"p\"+p+\"lifestealTotal\") + trQuestVarGet(\"p\"+p+\"attackLifesteal\") * dmg);");
code("}");
code("return(dmg);");
code("}");

code("void damagePlayerUnit(float dmg = 0, int index = -1) {");
code("int old = 0;");
code("if (index > 0) {");
code("old = yGetPointer(\"playerUnits\");");
code("ySetPointer(\"playerUnits\", index);");
code("}");
code("if (trQuestVarGet(\"protectionCount\") == 0) {");
code("trDamageUnit(dmg);");
code("}");
code("if (index > 0) {");
code("ySetPointer(\"playerUnits\", old);");
code("}");
code("}");

code("void stunsAndPoisons(string db = \"\") {");
code("if (yGetVar(db, \"poisonStatus\") == 1) {");
code("float amt = trTimeMS() - yGetVar(db, \"poisonLast\");");
code("if (trTimeMS() > yGetVar(db, \"poisonTimeout\")) {");
code("ySetVar(db, \"poisonStatus\", 0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(db, \"poisonSFX\"), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Rocket\"));");
code("} else if (amt > 500) {");
code("trDamageUnit(amt * yGetVar(db, \"poisonDamage\") * 0.001);");
code("ySetVar(db, \"poisonLast\", yGetVar(\"poisonLast\") + trTimeMS());");
code("}");
code("}");
code("if (yGetVar(db, \"stunStatus\") >= 1) {");
code("if (trTimeMS() > yGetVar(db, \"stunTimeout\")) {");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(db, \"stunSFX\"), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Rocket\"));");
code("ySetPointer(\"stunnedUnits\", 1*yGetVar(db, \"stunStatus\"));");
code("yRemoveFromDatabase(\"stunnedUnits\");");
code("ySetVar(db, \"stunStatus\", 0);");
code("}");
code("}");
code("}");

code("int CheckOnHit(int p = 0, int id = 0) {");
code("int action = kbUnitGetAnimationActionType(id);");
code("int status = ON_HIT_NONE;");
code("if (yGetVar(\"p\"+p+\"characters\", \"attacking\") == 0) {");
code("if ((action == 12) || (action == 6)) {");
code("ySetVar(\"p\"+p+\"characters\", \"attacking\", 1);");
code("ySetVar(\"p\"+p+\"characters\", \"attackNext\", trTimeMS() + trQuestVarGet(\"p\"+p+\"firstDelay\"));");
code("}");
code("} else {");
code("if ((action == 12) || (action == 6)) {");
code("if (trTimeMS() > yGetVar(\"p\"+p+\"characters\", \"attackNext\")) {");
code("status = ON_HIT_NORMAL;");
code("ySetVar(\"p\"+p+\"characters\", \"attackNext\",");
code("yGetVar(\"p\"+p+\"characters\", \"attackNext\") + trQuestVarGet(\"p\"+p+\"nextDelay\"));");
code("if (action == 6) {");
code("ySetVar(\"p\"+p+\"characters\", \"specialAttack\", yGetVar(\"p\"+p+\"characters\", \"specialAttack\") - 1);");
code("if (yGetVar(\"p\"+p+\"characters\", \"specialAttack\") <= 0) {");
code("ySetVar(\"p\"+p+\"characters\", \"specialAttack\", trQuestVarGet(\"p\"+p+\"specialAttackCooldown\"));");
code("status = ON_HIT_SPECIAL;");
code("}");
code("}");
code("trQuestVarSet(\"p\"+p+\"lifestealTotal\",");
code("trQuestVarGet(\"p\"+p+\"lifestealTotal\") + trQuestVarGet(\"p\"+p+\"attackLifesteal\") * trQuestVarGet(\"p\"+p+\"attack\"));");
code("}");
code("} else {");
code("ySetVar(\"p\"+p+\"characters\", \"attacking\", 0);");
code("}");
code("}");
code("return(status);");
code("}");

code("float calculateDecay(int p = 0, float decay = 0) {");
code("return(decay / trQuestVarGet(\"p\"+p+\"spellDuration\"));");
code("}");

code("int processGenericProj(string db = \"\") {");
code("int id = 0;");
code("int action = PROJ_NONE;");
code("float scale = 0;");
code("id = yDatabaseNext(db, true);");
code("if (id == -1) {");
code("yRemoveFromDatabase(db);");
code("action = PROJ_REMOVE;");
code("} else if (yGetVar(db, \"yeehaw\") == 1) {");
code("trMutateSelected(1*yGetVar(db, \"proto\"));");
code("trUnitOverrideAnimation(1*yGetVar(db, \"anim\"),0,true,true,-1);");
code("scale = yGetVar(db, \"scale\");");
code("trSetSelectedScale(scale,scale,scale);");
code("ySetVar(db, \"yeehaw\", 0);");
code("action = PROJ_BOUNCE;");
code("} else if (yGetVar(db, \"yeehaw\") == 2) {");
code("ySetVar(db, \"yeehaw\", 1);");
code("} else {");
code("trVectorSetUnitPos(\"pos\", db);");
code("if (trQuestVarGet(\"posY\") < worldHeight + 0.5) {");
code("action = PROJ_GROUND;");
code("yVarToVector(db, \"dir\");");
code("zSetProtoUnitStat(\"Kronny Flying\", ENEMY_PLAYER, 1, yGetVar(db, \"speed\"));");
code("trUnitChangeProtoUnit(\"Kronny Flying\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(db);");
code("trDamageUnitPercent(-100);");
code("trMutateSelected(kbGetProtoUnitID(\"Kronny Flying\"));");
code("trSetUnitOrientation(trVectorQuestVarGet(\"dir\"), vector(0,1,0), true);");
code("trSetSelectedScale(0,0.0-yGetVar(db, \"height\"),0);");
code("trDamageUnitPercent(100);");
code("ySetVar(db, \"yeehaw\", 1);");
code("} else {");
code("action = PROJ_FALLING;");
code("}");
code("}");

code("return(action);");
code("}");

code("int addGenericProj(string db = \"\",string start=\"\",string dir=\"\",");
code("int proto=0,int anim=0,float speed=10.0,float height=4,float scale=0) {");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("int index = yAddToDatabase(db, \"next\");");
code("yAddUpdateVar(db, \"proto\", proto);");
code("yAddUpdateVar(db, \"anim\", anim);");
code("yAddUpdateVar(db, \"speed\", speed);");
code("yAddUpdateVar(db, \"height\", height);");
code("yAddUpdateVar(db, \"scale\", scale);");
code("yAddUpdateVar(db, \"dirX\", trQuestVarGet(dir+\"x\"));");
code("yAddUpdateVar(db, \"dirZ\", trQuestVarGet(dir+\"z\"));");
code("yAddUpdateVar(db, \"yeehaw\", 2);");

code("trArmyDispatch(\"1,0\", \"Dwarf\",1,trQuestVarGet(start+\"x\"),0,trQuestVarGet(start+\"z\"),0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Kronny Flying\"));");
code("zSetProtoUnitStat(\"Kronny Flying\", ENEMY_PLAYER, 1, speed);");
code("trUnitConvert(ENEMY_PLAYER);");
code("trSetUnitOrientation(trVectorQuestVarGet(dir), vector(0,1,0), true);");
code("trSetSelectedScale(0, 0.0 - height, 0);");
code("trDamageUnitPercent(100);");
code("return(index);");
code("}");

code("rule spy_find");
code("active");
code("highFrequency");
code("{");
code("if ((trQuestVarGet(\"spyfound\") == trQuestVarGet(\"spyfind\")) == false) {");
code("while(trQuestVarGet(\"spysearch\") < trGetNextUnitScenarioNameNumber()) {");
code("int id = kbGetBlockID(\"\"+1*trQuestVarGet(\"spysearch\"), true);");
code("if (id >= 0) {");
code("if (kbGetUnitBaseTypeID(id) == kbGetProtoUnitID(\"Spy Eye\")) {");
code("int x = modularCounterNext(\"spyfound\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"spyEye\"+x+\"unit\");");
code("while(trUnitAlive() == false) {");
code("if (trQuestVarGet(\"spyfound\") == trQuestVarGet(\"spyfind\")) {");
code("break;");
code("}");
code("x = modularCounterNext(\"spyfound\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"spyEye\"+x+\"unit\");");
code("}");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("trMutateSelected(1*trQuestVarGet(\"spyEye\"+x));");
code("trQuestVarSet(trStringQuestVarGet(\"spyName\"+x), trQuestVarGet(\"spysearch\"));");
code("}");
code("}");
code("trQuestVarSet(\"spysearch\", 1 + trQuestVarGet(\"spysearch\"));");
code("}");
code("trQuestVarSet(\"spyreset\", 1 + trQuestVarGet(\"spyreset\"));");
code("if (trQuestVarGet(\"spyreset\") >= 10) {");
code("trQuestVarSet(\"spyfound\", trQuestVarGet(\"spyfind\"));");
code("}");
code("} else {");
code("trQuestVarSet(\"spyreset\", 0);");
code("trQuestVarSet(\"spysearch\", trGetNextUnitScenarioNameNumber());");
code("}");
code("}");
code("const int CHEST_STATE_CLOSED = 0;");
code("const int CHEST_STATE_UNLOCKED = 1;");
code("const int CHEST_STATE_REWARDING = 2;");
code("const int CHEST_STATE_COUNTDOWN = 3;");

code("void removeChest() {");
code("yRemoveFromDatabase(\"chests\");");
code("yRemoveUpdateVar(\"chests\", \"count\");");
code("yRemoveUpdateVar(\"chests\", \"next\");");
code("yRemoveUpdateVar(\"chests\", \"state\");");
code("yRemoveUpdateVar(\"chests\", \"type\");");
code("yRemoveUpdateVar(\"chests\", \"key\");");
code("yRemoveUpdateVar(\"chests\", \"enemiesBegin\");");
code("yRemoveUpdateVar(\"chests\", \"enemiesEnd\");");
code("yRemoveUpdateVar(\"chests\", \"indicator\");");
code("}");

code("void processChests() {");
code("int id = 0;");
code("for(x=yGetDatabaseCount(\"rainingRelics\"); > 0) {");
code("yDatabaseNext(\"rainingRelics\", true);");
code("if (yGetVar(\"rainingRelics\", \"morphed\") == 0) {");
code("ySetVar(\"rainingRelics\", \"morphed\", 1);");
code("trMutateSelected(kbGetProtoUnitID(\"Curse SFX\"));");
code("trUnitSetAnimationPath(\"0,0,0,0,0,0,0\");");
code("} else {");
code("trVectorSetUnitPos(\"pos\", \"rainingRelics\");");
code("if (trQuestVarGet(\"posY\") <= 0) {");
code("trUnitChangeProtoUnit(\"Relic\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"rainingRelics\", true);");
code("trDamageUnitPercent(-100);");
code("yAddToDatabase(\"freeRelics\", \"rainingRelics\");");
code("yAddUpdateVar(\"freeRelics\", \"type\", randomStageClosest());");
code("yRemoveFromDatabase(\"rainingRelics\");");
code("yRemoveUpdateVar(\"rainingRelics\", \"morphed\");");
code("}");
code("}");
code("}");
code("for(x=xsMin(8, yGetDatabaseCount(\"rainingFire\")); >0) {");
code("yDatabaseNext(\"rainingFire\", true);");
code("if (yGetVar(\"rainingFire\", \"morphed\") == 0) {");
code("ySetVar(\"rainingFire\", \"morphed\", 1);");
code("trMutateSelected(kbGetProtoUnitID(\"Meteorite death\"));");
code("} else {");
code("trVectorSetUnitPos(\"pos\", \"rainingFire\");");
code("vectorToGrid(\"pos\", \"loc\");");
code("if (trQuestVarGet(\"posY\") <= 0 ||");
code("terrainIsType(\"loc\", TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("trUnitChangeProtoUnit(\"Cinematic Scorch\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"rainingFire\", true);");
code("trDamageUnitPercent(-100);");
code("trUnitSetAnimationPath(\"2,0,0,0,0,0,0\");");
code("yRemoveFromDatabase(\"rainingFire\");");
code("yRemoveUpdateVar(\"rainingFire\", \"morphed\");");
code("} else {");
code("trUnitSelectClear();");
code("for(i=yGetDatabaseCount(\"rainingFireTargets\"); >0) {");
code("yDatabaseNext(\"rainingFireTargets\", true);");
code("if (zDistanceToVectorSquared(\"rainingFireTargets\", \"pos\") < 10) {");
code("if (yGetVar(\"rainingFireTargets\", \"enemy\") == 0) {");
code("damagePlayerUnit(500.0);");
code("} else {");
code("trDamageUnit(500.0);");
code("}");
code("yRemoveFromDatabase(\"rainingFireTargets\");");
code("yRemoveUpdateVar(\"rainingFireTargets\", \"enemy\");");
code("}");
code("}");
code("}");
code("}");
code("}");
code("if (yGetDatabaseCount(\"chests\") > 0) {");
code("id = yDatabaseNext(\"chests\", true);");
code("switch(1*yGetVar(\"chests\", \"state\"))");
code("{");
code("case CHEST_STATE_CLOSED:");
code("{");
code("switch(1*yGetVar(\"chests\", \"type\"))");
code("{");
code("case CHEST_KEY:");
code("{");
code("if (trUnitIsSelected()) {");
code("reselectMyself();");
code("uiMessageBox(\"Find a relic with a matching symbol and bring it here to open this chest.\");");
code("}");
code("trVectorQuestVarSet(\"pos\", kbGetBlockPosition(\"\"+1*yGetVar(\"chests\", \"key\")));");
code("if (zDistanceToVectorSquared(\"chests\", \"pos\") < 16) {");
code("ySetVar(\"chests\", \"state\", CHEST_STATE_UNLOCKED);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"chests\", \"key\"));");
code("trUnitChangeProtoUnit(\"Osiris Box Glow\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"chests\", \"indicator\"));");
code("trUnitChangeProtoUnit(\"Rocket\");");
code("}");
code("}");
code("case CHEST_PADS:");
code("{");
code("if (trUnitIsSelected()) {");
code("reselectMyself();");
code("uiMessageBox(\"There are two pressure pads in this room. A player must stand on each to open this chest.\");");
code("}");
code("}");
code("case CHEST_ENCOUNTER:");
code("{");
code("if (trUnitIsSelected()) {");
code("reselectMyself();");
code("uiMessageBox(\"You must defeat all the enemies in this room to open this chest.\");");
code("}");
code("trQuestVarSet(\"allDead\", 1);");
code("for(x=yGetVar(\"chests\", \"enemiesBegin\"); < yGetVar(\"chests\", \"enemiesEnd\")) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+x);");
code("if (trUnitAlive()) {");
code("trQuestVarSet(\"allDead\", 0);");
code("break;");
code("}");
code("}");
code("if (trQuestVarGet(\"allDead\") == 1) {");
code("ySetVar(\"chests\", \"state\", CHEST_STATE_UNLOCKED);");
code("}");
code("}");
code("}");
code("}");
code("case CHEST_STATE_UNLOCKED:");
code("{");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"chests\");");
code("trUnitSetAnimation(\"SE_Great_Box_Opening\",false,-1);");
code("trSoundPlayFN(\"siegetowerdeath.wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSetFromRand(\"rand\", 1, 10, true);");
code("if (trQuestVarGet(\"rand\") == 1) {");
code("ySetVar(\"chests\", \"state\", CHEST_STATE_COUNTDOWN);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"chests\");");
code("trUnitHighlight(4.0, true);");
code("trUnitChangeProtoUnit(\"Phoenix Egg\");");
code("ySetVar(\"chests\", \"next\", trTimeMS() + 1000);");
code("ySetVar(\"chests\", \"count\", 3);");
code("trSoundPlayFN(\"attackwarning.wav\",\"1\",-1,\"\",\"\");");
code("trMessageSetText(\"The chest was a bomb! Run!\",-1);");
code("} else {");
code("trQuestVarSetFromRand(\"rand\", 1, 1*trQuestVarGet(\"rand\"), true);");
code("if (trQuestVarGet(\"rand\") < ENEMY_PLAYER) {");
code("trQuestVarSet(\"rand\", ENEMY_PLAYER);");
code("}");
code("ySetVar(\"chests\", \"state\", CHEST_STATE_REWARDING);");
code("ySetVar(\"chests\", \"next\", trTimeMS());");
code("ySetVar(\"chests\", \"count\", trQuestVarGet(\"rand\"));");
code("trSoundPlayFN(\"plentybirth.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("case CHEST_STATE_REWARDING:");
code("{");
code("if (trTimeMS() > yGetVar(\"chests\", \"next\")) {");
code("ySetVar(\"chests\", \"count\", yGetVar(\"chests\", \"count\") - 1);");
code("if (yGetVar(\"chests\", \"count\") == 0) {");
code("removeChest();");
code("} else {");
code("ySetVar(\"chests\", \"next\", trTimeMS() + 500);");
code("trVectorSetUnitPos(\"pos\", \"chests\");");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trQuestVarSetFromRand(\"heading\",1,360,true);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"posX\"),0,trQuestVarGet(\"posZ\"),trQuestVarGet(\"heading\"),true);");
code("trQuestVarSetFromRand(\"speed\", 0, 4);");
code("zSetProtoUnitStat(\"Kronny Flying\", 0, 1, trQuestVarGet(\"speed\"));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitConvert(0);");
code("trDamageUnitPercent(100);");
code("trMutateSelected(kbGetProtoUnitID(\"Kronny Flying\"));");
code("trSetSelectedScale(0,-3,0);");
code("yAddToDatabase(\"rainingRelics\", \"next\");");
code("}");
code("}");
code("}");
code("case CHEST_STATE_COUNTDOWN:");
code("{");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"chests\");");
code("trQuestVarSet(\"scale\", 4.0 - yGetVar(\"chests\", \"count\") + 0.001 * (trTimeMS() - yGetVar(\"chests\", \"next\") + 1000));");
code("trSetSelectedScale(trQuestVarGet(\"scale\"), trQuestVarGet(\"scale\"), trQuestVarGet(\"scale\"));");
code("if (trTimeMS() > yGetVar(\"chests\", \"next\")) {");
code("ySetVar(\"chests\", \"next\", trTimeMS() + 1000);");
code("ySetVar(\"chests\", \"count\", yGetVar(\"chests\", \"count\") - 1);");
code("if (yGetVar(\"chests\", \"count\") == 0) {");
code("trVectorSetUnitPos(\"pos\", \"chests\");");
code("trQuestVarSet(\"heading\", 0);");
code("zSetProtoUnitStat(\"Kronny Flying\", 0, 1, 15);");
code("for(x=12; >0) {");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"posX\"),0,trQuestVarGet(\"posZ\"),trQuestVarGet(\"heading\"),true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitConvert(0);");
code("trDamageUnitPercent(100);");
code("trMutateSelected(kbGetProtoUnitID(\"Kronny Flying\"));");
code("trSetSelectedScale(0,-2.0,0);");
code("yAddToDatabase(\"rainingFire\", \"next\");");
code("trQuestVarSet(\"heading\", trQuestVarGet(\"heading\") + 30);");
code("}");
code("yClearDatabase(\"rainingFireTargets\");");
code("for(x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("yDatabaseNext(\"playerUnits\");");
code("if (zDistanceToVectorSquared(\"playerUnits\", \"pos\") < 720) {");
code("yAddToDatabase(\"rainingFireTargets\", \"playerUnits\");");
code("}");
code("}");
code("for(x=yGetDatabaseCount(\"enemies\"); >0) {");
code("yDatabaseNext(\"enemies\");");
code("if (zDistanceToVectorSquared(\"enemies\", \"pos\") < 720) {");
code("yAddToDatabase(\"rainingFireTargets\", \"enemies\");");
code("yAddUpdateVar(\"rainingFireTargets\", \"enemy\", 1);");
code("}");
code("}");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"chests\");");
code("trSoundPlayFN(\"cinematics\35_out\strike.mp3\",\"1\",-1,\"\",\"\");");
code("if (trUnitVisToPlayer()) {");
code("trUIFadeToColor(255,255,255,1000,0,false);");
code("trCameraShake(3.0, 0.25);");
code("}");
code("trDamageUnitPercent(100);");
code("removeChest();");
code("} else {");
code("trSoundPlayFN(\"attackwarning.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");



code("const int MAP_STANDARD = 0;");
code("const int MAP_PORTALS = 1;");

code("rule choose_stage_00");
code("inactive");
code("highFrequency");
code("{");
code("int n = yDatabaseNext(\"stageChoices\");");
code("if (trCountUnitsInArea(\"\"+n, 1, \"Athena\",3) == 1) {");
code("trQuestVarSet(\"stage\", yGetVar(\"stageChoices\", \"stage\"));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"chooser\", true);");
code("trUnitChangeProtoUnit(\"Rocket\");");
code("for(x=yGetDatabaseCount(\"stageChoices\"); >0) {");
code("yDatabaseNext(\"stageChoices\", true);");
code("trUnitDestroy();");
code("}");
code("yClearDatabase(\"stageChoices\");");
code("xsDisableSelf();");
code("trForceNonCinematicModels(true);");
code("trLetterBox(true);");
code("trUIFadeToColor(0,0,0,1000,0,true);");
code("trSoundPlayFN(\"ui\thunder2.wav\",\"1\",-1,\"\",\"\");");
code("trOverlayText(stageName(1*trQuestVarGet(\"stage\")), 3.0, -1, -1, -1);");
code("}");
code("}");

code("int edgeName(int first = 0, int second = 0) {");
code("return(16 * xsMin(first, second) + xsMax(first, second));");
code("}");

code("vector randomNearEdge(int x1 = 0 , int z1 = 0, int x2 = 0, int z2 = 0) {");
code("int x0 = x2 - x1;");
code("int z0 = z2 - z1;");
code("trQuestVarSetFromRand(\"x0\", 0, x0);");
code("trQuestVarSetFromRand(\"z0\", 0, z0);");
code("trQuestVarSetFromRand(\"x1\", trQuestVarGet(\"x0\"), x0);");
code("trQuestVarSetFromRand(\"z1\", trQuestVarGet(\"z0\"), z0);");
code("trQuestVarSetFromRand(\"negative\", 0, 1, true);");
code("trQuestVarSet(\"negative\", 1 - 2 * trQuestVarGet(\"negative\"));");
code("x0 = x1 + x2 + trQuestVarGet(\"negative\") * trQuestVarGet(\"x1\");");
code("trQuestVarSetFromRand(\"negative\", 0, 1, true);");
code("trQuestVarSet(\"negative\", 1 - 2 * trQuestVarGet(\"negative\"));");
code("z0 = z1 + z2 + trQuestVarGet(\"negative\") * trQuestVarGet(\"z1\");");
code("return(xsVectorSet(x0, 0, z0));");
code("}");

code("void paintRelicEdge(int x1 = 0 , int z1 = 0, int x2 = 0, int z2 = 0) {");
code("vector v0 = randomNearEdge(x1, z1, x2, z2);");
code("spawnRelic(xsVectorGetX(v0), xsVectorGetZ(v0));");
code("}");

code("void paintEnemies(int x0 = 0, int z0 = 0, int x1 = 0, int z1 = 0) {");
code("for(a=x0; < x1) {");
code("trQuestVarSetFromRand(\"deploy\", 0, 1, false);");
code("if (trQuestVarGet(\"deploy\") < trQuestVarGet(\"enemyDensity\")) {");
code("trQuestVarSetFromRand(\"z\", z0, z1, true);");
code("trQuestVarSet(\"posX\", a);");
code("trQuestVarSet(\"posZ\", trQuestVarGet(\"z\"));");
code("if (terrainIsType(\"pos\", TERRAIN_WALL, TERRAIN_SUB_WALL) == false) {");
code("trQuestVarSetFromRand(\"heading\", 0, 360, true);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",trStringQuestVarGet(\"enemyProto\"+randomLow(1*trQuestVarGet(\"enemyProtoCount\"))),1,");
code("2*a,0,2*trQuestVarGet(\"z\"),trQuestVarGet(\"heading\"),true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitConvert(ENEMY_PLAYER);");
code("yAddToDatabase(\"enemiesIncoming\", \"next\");");
code("}");
code("}");
code("}");
code("for(b=z0; < z1) {");
code("trQuestVarSetFromRand(\"deploy\", 0, 1, false);");
code("if (trQuestVarGet(\"deploy\") < trQuestVarGet(\"enemyDensity\")) {");
code("trQuestVarSetFromRand(\"x\", x0, x1, true);");
code("trQuestVarSet(\"posX\", trQuestVarGet(\"x\"));");
code("trQuestVarSet(\"posZ\", b);");
code("if (terrainIsType(\"pos\", TERRAIN_WALL, TERRAIN_SUB_WALL) == false) {");
code("trQuestVarSetFromRand(\"heading\", 0, 360, true);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",trStringQuestVarGet(\"enemyProto\"+randomLow(1*trQuestVarGet(\"enemyProtoCount\"))),1,");
code("2*trQuestVarGet(\"x\"),0,2*b,trQuestVarGet(\"heading\"),true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitConvert(ENEMY_PLAYER);");
code("yAddToDatabase(\"enemiesIncoming\", \"next\");");
code("}");
code("}");
code("}");
code("}");

code("void paintEyecandy(int x0 = 0, int z0 = 0, int x1 = 0, int z1 = 0, string type = \"sprite\") {");
code("float scale = trQuestVarGet(type+\"scale\");");
code("if (trQuestVarGet(type+\"Density\") > 0) {");
code("for(a=x0; < x1) {");
code("trQuestVarSetFromRand(\"deploy\", 0, 1, false);");
code("if (trQuestVarGet(\"deploy\") < trQuestVarGet(type+\"Density\")) {");
code("trQuestVarSetFromRand(\"z\", z0, z1, true);");
code("trQuestVarSetFromRand(\"type\", 1, 3, true);");
code("trQuestVarSetFromRand(\"heading\", 0, 360, true);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",trStringQuestVarGet(type+\"Proto\"+1*trQuestVarGet(\"type\")),1,");
code("2*a,0,2*trQuestVarGet(\"z\"),trQuestVarGet(\"heading\"),true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitConvert(0);");
code("if (scale > 0) {");
code("trSetSelectedScale(scale,scale,scale);");
code("}");
code("}");
code("}");
code("for(b=z0; < z1) {");
code("trQuestVarSetFromRand(\"deploy\", 0, 1, false);");
code("if (trQuestVarGet(\"deploy\") < trQuestVarGet(type+\"Density\")) {");
code("trQuestVarSetFromRand(\"x\", x0, x1, true);");
code("trQuestVarSetFromRand(\"type\", 1, 3, true);");
code("trQuestVarSetFromRand(\"heading\", 0, 360, true);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",trStringQuestVarGet(type+\"Proto\"+1*trQuestVarGet(\"type\")),1,");
code("2*trQuestVarGet(\"x\"),0,2*b,trQuestVarGet(\"heading\"),true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitConvert(0);");
code("if (scale > 0) {");
code("trSetSelectedScale(scale,scale,scale);");
code("}");
code("}");
code("}");
code("}");
code("}");

code("void paintColumns(int x0 = 0, int z0 = 0, int x1 = 0, int z1 = 0) {");
code("if (trQuestVarGet(\"columnDensity\") > 0) {");
code("for(a=x0; < x1) {");
code("trQuestVarSetFromRand(\"deploy\", 0, 1, false);");
code("if (trQuestVarGet(\"deploy\") < trQuestVarGet(\"columnDensity\")) {");
code("trQuestVarSetFromRand(\"z\", z0, z1, true);");
code("trPaintTerrain(a-1, 1*trQuestVarGet(\"z\")-1, a+1, 1*trQuestVarGet(\"z\")+1, TERRAIN_WALL, TERRAIN_SUB_WALL, false);");
code("trChangeTerrainHeight(a, 1*trQuestVarGet(\"z\"), a+1, 1*trQuestVarGet(\"z\")+1, 5, false);");
code("}");
code("}");
code("for(b=z0; < z1) {");
code("trQuestVarSetFromRand(\"deploy\", 0, 1, false);");
code("if (trQuestVarGet(\"deploy\") < trQuestVarGet(\"columnDensity\")) {");
code("trQuestVarSetFromRand(\"x\", x0, x1, true);");
code("trPaintTerrain(1*trQuestVarGet(\"x\")-1, b-1, 1*trQuestVarGet(\"x\")+1, b+1, TERRAIN_WALL, TERRAIN_SUB_WALL, false);");
code("trChangeTerrainHeight(1*trQuestVarGet(\"x\"), b, 1*trQuestVarGet(\"x\")+1, b+1, 5, false);");
code("}");
code("}");
code("}");
code("}");

code("int countRoomEntrances(int x = 0, int z = 0) {");
code("int room = x + 4 * z;");
code("int n = 0;");
code("int count = 0;");
code("for(a=1; >=0) {");
code("for(b=1; >=0) {");
code("trQuestVarSet(\"newX\", (1 - 2 * b) * a + x);");
code("trQuestVarSet(\"newZ\", (1 - 2 * b) * (1 - a) + z);");
code("if (trQuestVarGet(\"newX\") < 0 || trQuestVarGet(\"newZ\") < 0 ||");
code("trQuestVarGet(\"newX\") > 3 || trQuestVarGet(\"newZ\") > 3) {");
code("continue;");
code("}");
code("n = 0 + trQuestVarGet(\"newX\") + 4 * trQuestVarGet(\"newZ\");");
code("if (trQuestVarGet(\"edge\"+edgeName(room, n)) == EDGE_NOT_FOUND) {");
code("continue;");
code("} else {");
code("count = count + 1;");
code("}");
code("}");
code("}");
code("return(count);");
code("}");

code("void paintSecondary(int x0 = 0, int z0 = 0, int x1 = 0, int z1 = 0) {");
code("for(a=x0; < x1) {");
code("trQuestVarSetFromRand(\"z\", z0, z1, true);");
code("trPaintTerrain(a, 1*trQuestVarGet(\"z\"), a, 1*trQuestVarGet(\"z\"), TERRAIN_SECONDARY, TERRAIN_SUB_SECONDARY, false);");
code("}");
code("for(b=z0; < z1) {");
code("trQuestVarSetFromRand(\"x\", x0, x1, true);");
code("trPaintTerrain(1*trQuestVarGet(\"x\"), b, 1*trQuestVarGet(\"x\"), b, TERRAIN_SECONDARY, TERRAIN_SUB_SECONDARY, false);");
code("}");
code("}");

code("void buildRoom(int x = 0, int z = 0, int type = 0) {");
code("int room = x + 4 * z;");
code("int x0 = 0;");
code("int z0 = 0;");
code("int x1 = 0;");
code("int z1 = 0;");
code("trQuestVarSet(\"room\"+room, type);");
code("if (type < ROOM_STARTER) {");
code("for (i=2; >0) {");
code("trQuestVarSetFromRand(\"x0\", x * 35 + 5, x * 35 + 18, true);");
code("trQuestVarSetFromRand(\"z0\", z * 35 + 5, z * 35 + 18, true);");
code("trQuestVarSetFromRand(\"x1\", x * 35 + 22, x * 35 + 35, true);");
code("trQuestVarSetFromRand(\"z1\", z * 35 + 22, z * 35 + 35, true);");
code("x0 = trQuestVarGet(\"x0\");");
code("x1 = trQuestVarGet(\"x1\");");
code("z0 = trQuestVarGet(\"z0\");");
code("z1 = trQuestVarGet(\"z1\");");
code("trPaintTerrain(x0, z0, x1, z1, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x0, z0, x1 + 1, z1 + 1, worldHeight, false);");
code("trVectorQuestVarSet(\"room\"+room+\"top\"+i, xsVectorSet(x1,0,z1));");
code("trVectorQuestVarSet(\"room\"+room+\"bottom\"+i, xsVectorSet(x0,0,z0));");
code("paintSecondary(x0, z0, x1, z1);");
code("paintEyecandy(x0, z0, x1, z1, \"tree\");");
code("paintEyecandy(x0, z0, x1, z1, \"rock\");");
code("paintEyecandy(x0, z0, x1, z1, \"sprite\");");

code("for(j=randomLow(11) - 8; >0) {");
code("paintRelicEdge(x0, z0, x1, z1);");
code("}");
code("}");
code("paintColumns(x * 35 + 5, z * 35 + 5, x * 35 + 35, z * 35 + 35);");
code("}");
code("switch(type)");
code("{");
code("case ROOM_BASIC:");
code("{");
code("for(i = 2; >0) {");
code("x0 = trQuestVarGet(\"room\"+room+\"bottom\"+i+\"x\");");
code("z0 = trQuestVarGet(\"room\"+room+\"bottom\"+i+\"z\");");
code("x1 = trQuestVarGet(\"room\"+room+\"top\"+i+\"x\");");
code("z1 = trQuestVarGet(\"room\"+room+\"top\"+i+\"z\");");
code("paintEnemies(x0, z0, x1, z1);");
code("}");
code("trQuestVarSet(\"room\", room);");
code("yAddToDatabase(\"basicRooms\", \"room\");");
code("}");
code("case ROOM_AMBUSH:");
code("{");
code("trQuestVarSet(\"room\", room);");
code("yAddToDatabase(\"ambushRooms\", \"room\");");
code("yAddUpdateVar(\"ambushRooms\", \"posX\", x * 70 + 40);");
code("yAddUpdateVar(\"ambushRooms\", \"posZ\", z * 70 + 40);");
code("trQuestVarSetFromRand(\"type\", 1, trQuestVarGet(\"enemyProtoCount\"), true);");
code("yAddUpdateVar(\"ambushRooms\", \"type\", trQuestVarGet(\"type\"));");
code("trQuestVarSetFromRand(\"spawnRelic\", 0, 1, false);");
code("if (trQuestVarGet(\"spawnRelic\") < 0.5) {");
code("spawnRelic(x * 70 + 40, z * 70 + 40);");
code("}");
code("x0 = trQuestVarGet(\"room\"+room+\"bottom1x\");");
code("z0 = trQuestVarGet(\"room\"+room+\"bottom1z\");");
code("x1 = trQuestVarGet(\"room\"+room+\"top1x\");");
code("z1 = trQuestVarGet(\"room\"+room+\"top1z\");");
code("paintEnemies(x0, z0, x1, z1);");
code("}");
code("case ROOM_CHEST:");
code("{");
code("if (ENEMY_PLAYER == 2) {");
code("trQuestVarSetFromRand(\"chestType\", CHEST_KEY, CHEST_ENCOUNTER, true);");
code("} else {");
code("trQuestVarSetFromRand(\"chestType\", CHEST_KEY, CHEST_PADS, true);");
code("}");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("yAddToDatabase(\"chests\", \"next\");");
code("yAddUpdateVar(\"chests\", \"type\", trQuestVarGet(\"chestType\"));");
code("yAddUpdateVar(\"chests\", \"room\", room);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,x * 70 + 40,0, z * 70 + 40, 135, true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Great Box\");");
code("}");
code("case ROOM_TRANSPORTER_GUY:");
code("{");
code("x0 = trQuestVarGet(\"room\"+room+\"bottom1x\");");
code("z0 = trQuestVarGet(\"room\"+room+\"bottom1z\");");
code("x1 = trQuestVarGet(\"room\"+room+\"top1x\");");
code("z1 = trQuestVarGet(\"room\"+room+\"top1z\");");
code("trVectorQuestVarSet(\"center\", xsVectorSet(x0 + x1, 0, z0 + z1));");
code("trVectorQuestVarSet(\"relictransporterguypos\", randomNearEdge(x0, z0, x1, z1));");
code("trQuestVarSet(\"heading\", 180.0 / 3.141592 * angleBetweenVectors(\"relictransporterguypos\", \"center\"));");
code("trQuestVarSet(\"relicTransporterGuyName\", trGetNextUnitScenarioNameNumber());");
code("x0 = trQuestVarGet(\"relicTransporterGuyPosx\");");
code("z0 = trQuestVarGet(\"relicTransporterGuyPosz\");");
code("trArmyDispatch(\"1,0\",\"Villager Atlantean Hero\",1,x0,0,z0,trQuestVarGet(\"heading\"), true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"relicTransporterGuyName\", true);");
code("trUnitConvert(0);");
code("trArmyDispatch(\"1,0\", \"Dwarf\",1,x0,0,z0,0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Gaia Forest effect\");");
code("xsEnableRule(\"relic_transporter_guy_found\");");
code("buildRoom(x, z, ROOM_BASIC);");
code("}");
code("case ROOM_STARTER:");
code("{");
code("trPaintTerrain(x * 35 + 10, z * 35 + 10, x * 35 + 30, z * 35 + 30, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x * 35 + 10, z * 35 + 10, x * 35 + 31, z * 35 + 31, worldHeight, false);");
code("paintSecondary(x * 35 + 10, z * 35 + 10, x * 35 + 30, z * 35 + 30);");
code("trVectorQuestVarSet(\"startPosition\", xsVectorSet(x*70 + 40,0,z*70+40));");
code("if (trQuestVarGet(\"stage\") < 5) {");
code("trVectorQuestVarSet(\"choice1\", xsVectorSet(x*70+48,0,z*70+54));");
code("trVectorQuestVarSet(\"choice2\", xsVectorSet(x*70+54,0,z*70+48));");
code("trQuestVarSet(\"choice1unit\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\", \"Hero Greek Theseus\", 1, trQuestVarGet(\"choice1x\"),0,trQuestVarGet(\"choice1z\"),225,true);");
code("trQuestVarSet(\"choice2unit\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\", \"Hero Greek Hippolyta\", 1, trQuestVarGet(\"choice2x\"),0,trQuestVarGet(\"choice2z\"),225,false);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(0);");
code("yAddToDatabase(\"stunnedUnits\", \"choice1unit\");");
code("yAddUpdateVar(\"stunnedUnits\", \"proto\", kbGetProtoUnitID(\"Hero Greek Theseus\"));");
code("yAddToDatabase(\"stunnedUnits\", \"choice2unit\");");
code("yAddUpdateVar(\"stunnedUnits\", \"proto\", kbGetProtoUnitID(\"Hero Greek Hippolyta\"));");
code("xsEnableRule(\"class_shop_always\");");
code("}");
code("}");
code("case ROOM_BOSS:");
code("{");
code("switch(1*trQuestVarGet(\"bossRoomShape\"))");
code("{");
code("case ROOM_CIRCLE:");
code("{");
code("z0 = 16;");
code("for(a=0; < 16) {");
code("for(b=16; >0) {");
code("if (a*a + z0 * z0 <= 256) {");
code("trPaintTerrain(x*35+20-a, z*35+20-z0, x*35+20+a, z*35+20+z0, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x*35+20-a, z*35+20-z0, x*35+20+a, z*35+20+z0, worldHeight, false);");
code("break;");
code("} else {");
code("z0 = z0 - 1;");
code("}");
code("}");
code("}");
code("}");
code("case ROOM_SQUARE:");
code("{");
code("trPaintTerrain(x * 35 + 6, z * 35 + 6, x * 35 + 34, z * 35 + 34, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x * 35 + 6, z * 35 + 6, x * 35 + 35, z * 35 + 35, worldHeight, false);");
code("}");
code("}");
code("trVectorQuestVarSet(\"bossRoomCenter\", xsVectorSet(x * 70 + 40, 0, z * 70 + 40));");
code("trVectorQuestVarSet(\"bossRoomEntrance\", xsVectorSet(x * 70 + 10, 0, z * 70 + 10));");
code("xsEnableRule(\"enter_boss_room\");");
code("}");
code("case ROOM_NICK:");
code("{");
code("z0 = 12;");
code("for(a=0; < 12) {");
code("for(b=12; >0) {");
code("if (a*a + z0 * z0 <= 144) {");
code("trPaintTerrain(x*35+20-a, z*35+20-z0, x*35+20+a, z*35+20+z0, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x*35+20-a, z*35+20-z0, x*35+20+a, z*35+20+z0, worldHeight, false);");
code("break;");
code("} else {");
code("z0 = z0 - 1;");
code("}");
code("}");
code("}");
code("trQuestVarSet(\"nickonhawk\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\", \"Victory Marker\", 1, 70*x+40, 0, 70*z+40,225,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"nickonhawk\", true);");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Odysseus\");");
code("}");
code("}");
code("}");

code("int getOtherVertex(int edge = 0, int v = 0) {");
code("if (edge >= 16 * v) {");
code("return(edge - 16 * v);");
code("} else {");
code("return(edge / 16);");
code("}");
code("}");

code("void buildEdge(int edge = 0, int type = 0) {");
code("int first = edge / 16;");
code("int second = edge - 16 * first;");
code("int z0 = first / 4;");
code("int x0 = first - 4 * z0;");
code("int z1 = second / 4;");
code("int x1 = second - 4 * z1;");
code("if (trQuestVarGet(\"edge\"+edge) == EDGE_NOT_FOUND) {");
code("if (type == EDGE_PORTAL) {");
code("buildRoom(x0, z0, ROOM_BASIC);");
code("buildRoom(x1, z1, ROOM_BASIC);");
code("trQuestVarSet(\"next1\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,x0*70+40,0,z0*70+40,0,true);");
code("trQuestVarSet(\"next2\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,x1*70+40,0,z1*70+40,0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next1\", true);");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next1\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Sky Passage\"));");
code("trSetSelectedScale(0,0.2,0);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next2\", true);");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next2\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Sky Passage\"));");
code("trSetSelectedScale(0,0.2,0);");
code("yAddToDatabase(\"skyPassages\", \"next1\");");
code("yAddUpdateVar(\"skyPassages\", \"exit\", trQuestVarGet(\"next2\"));");
code("yAddToDatabase(\"skyPassages\", \"next2\");");
code("yAddUpdateVar(\"skyPassages\", \"exit\", trQuestVarGet(\"next1\"));");
code("} else {");
code("z0 = z0 * 35 + 17;");
code("x0 = x0 * 35 + 17;");
code("z1 = z1 * 35 + 23;");
code("x1 = x1 * 35 + 23;");
code("if (type == EDGE_BIG) {");
code("trQuestVarSetFromRand(\"rand\", 0, 7, true);");
code("z0 = z0 - trQuestVarGet(\"rand\");");
code("x0 = x0 - trQuestVarGet(\"rand\");");
code("trQuestVarSetFromRand(\"rand\", 0, 7, true);");
code("z1 = z1 + trQuestVarGet(\"rand\");");
code("x1 = x1 + trQuestVarGet(\"rand\");");
code("}");
code("trPaintTerrain(x0, z0, x1, z1, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x0, z0, x1 + 1, z1 + 1, worldHeight, false);");
code("paintSecondary(x0, z0, x1, z1);");
code("}");
code("trQuestVarSet(\"edge\"+edge, type);");
code("}");
code("}");

code("rule choose_stage_01");
code("inactive");
code("highFrequency");
code("{");
code("if (trQuestVarGet(\"stage\") > 0) {");
code("xsEnableRule(\"choose_stage_02\");");
code("xsDisableSelf();");
code("}");
code("}");


code("rule choose_stage_02");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 1) {");
code("xsDisableSelf();");
code("trBlockAllSounds();");
code("for(i=trQuestVarGet(\"stage\"); >1) {");
code("trTechSetStatus(ENEMY_PLAYER, 76, 4);");
code("for(j=10; >0) {");
code("trTechSetStatus(ENEMY_PLAYER, 78, 4);");
code("}");
code("}");
code("switch(1*trQuestVarGet(\"stage\"))");
code("{");
code("case 1:");
code("{");
code("TERRAIN_WALL = 2;");
code("TERRAIN_SUB_WALL = 0;");

code("TERRAIN_PRIMARY = 0;");
code("TERRAIN_SUB_PRIMARY = 34;");

code("TERRAIN_SECONDARY = 4;");
code("TERRAIN_SUB_SECONDARY = 12;");

code("trQuestVarSet(\"mapType\", MAP_STANDARD);");
code("trQuestVarSet(\"treeDensity\", 0.03);");
code("trStringQuestVarSet(\"treeProto1\", \"Statue Lion Left\");");
code("trStringQuestVarSet(\"treeProto2\", \"Statue Lion Right\");");
code("trStringQuestVarSet(\"treeProto3\", \"Savannah Tree\");");
code("trQuestVarSet(\"spriteDensity\", 0.3);");
code("trStringQuestVarSet(\"spriteProto1\", \"Rock Sandstone Sprite\");");
code("trStringQuestVarSet(\"spriteProto2\", \"Grass\");");
code("trStringQuestVarSet(\"spriteProto3\", \"Rock Limestone Sprite\");");
code("trQuestVarSet(\"rockDensity\", 0.13);");
code("trStringQuestVarSet(\"rockProto1\", \"Rock Sandstone Big\");");
code("trStringQuestVarSet(\"rockProto2\", \"Rock River Sandy\");");
code("trStringQuestVarSet(\"rockProto3\", \"Rock Sandstone Small\");");

code("trQuestVarSet(\"enemyDensity\", 0.02 + 0.02 * ENEMY_PLAYER);");
code("trQuestVarSet(\"enemyProtoCount\", 5);");
code("trStringQuestVarSet(\"enemyProto1\", \"Golden Lion\");");
code("trStringQuestVarSet(\"enemyProto2\", \"Anubite\");");
code("trStringQuestVarSet(\"enemyProto3\", \"Terracotta Soldier\");");
code("trStringQuestVarSet(\"enemyProto4\", \"Sphinx\");");
code("trStringQuestVarSet(\"enemyProto5\", \"Petsuchos\");");

code("trQuestVarSet(\"columnDensity\", 0.05);");

code("trStringQuestVarSet(\"bossProto\", \"Nemean Lion\");");
code("trQuestVarSet(\"bossScale\", 2);");

code("trModifyProtounit(\"Nemean Lion\", ENEMY_PLAYER, 0, 9999999999999999999.0);");
code("trModifyProtounit(\"Nemean Lion\", ENEMY_PLAYER, 0, -9999999999999999999.0);");
code("trModifyProtounit(\"Nemean Lion\", ENEMY_PLAYER, 0, 4000 * ENEMY_PLAYER);");
code("trModifyProtounit(\"Nemean Lion\", ENEMY_PLAYER, 1, 4.8);");
code("trModifyProtounit(\"Nemean Lion\", ENEMY_PLAYER, 24, -1);");
code("trModifyProtounit(\"Nemean Lion\", ENEMY_PLAYER, 25, -1);");
code("trModifyProtounit(\"Nemean Lion\", ENEMY_PLAYER, 26, -1);");
code("}");
code("case 2:");
code("{");
code("TERRAIN_WALL = 2;");
code("TERRAIN_SUB_WALL = 4;");

code("TERRAIN_PRIMARY = 0;");
code("TERRAIN_SUB_PRIMARY = 58;");

code("TERRAIN_SECONDARY = 0;");
code("TERRAIN_SUB_SECONDARY = 22;");

code("trQuestVarSet(\"mapType\", MAP_PORTALS);");
code("trQuestVarSet(\"treeDensity\", 0.2);");
code("trQuestVarSet(\"treeScale\", 2);");
code("trStringQuestVarSet(\"treeProto1\", \"Marsh Tree\");");
code("trStringQuestVarSet(\"treeProto2\", \"Marsh Tree\");");
code("trStringQuestVarSet(\"treeProto3\", \"Marsh Tree\");");
code("trQuestVarSet(\"spriteDensity\", 0.3);");
code("trStringQuestVarSet(\"spriteProto1\", \"Rock Limestone Sprite\");");
code("trStringQuestVarSet(\"spriteProto2\", \"Water Reeds\");");
code("trStringQuestVarSet(\"spriteProto3\", \"Flowers\");");
code("trQuestVarSet(\"rockDensity\", 0.15);");
code("trStringQuestVarSet(\"rockProto1\", \"Rock Granite Big\");");
code("trStringQuestVarSet(\"rockProto2\", \"Imperial Examination\");");
code("trStringQuestVarSet(\"rockProto3\", \"Rock Granite Small\");");

code("trQuestVarSet(\"enemyDensity\", 0.02 + 0.02 * ENEMY_PLAYER);");
code("trQuestVarSet(\"enemyProtoCount\", 5);");
code("trStringQuestVarSet(\"enemyProto1\", \"Walking Woods Marsh\");");
code("trStringQuestVarSet(\"enemyProto2\", \"Centaur\");");
code("trStringQuestVarSet(\"enemyProto3\", \"Dryad\");");
code("trStringQuestVarSet(\"enemyProto4\", \"Medusa\");");
code("trStringQuestVarSet(\"enemyProto5\", \"Mountain Giant\");");

code("trQuestVarSet(\"columnDensity\", 0);");

code("trStringQuestVarSet(\"bossProto\", \"Chimera\");");
code("trQuestVarSet(\"bossScale\", 2);");

code("trModifyProtounit(\"Chimera\", ENEMY_PLAYER, 0, 9999999999999999999.0);");
code("trModifyProtounit(\"Chimera\", ENEMY_PLAYER, 0, -9999999999999999999.0);");
code("trModifyProtounit(\"Chimera\", ENEMY_PLAYER, 0, 8000 * ENEMY_PLAYER);");
code("trModifyProtounit(\"Chimera\", ENEMY_PLAYER, 1, 4.8);");
code("trModifyProtounit(\"Chimera\", ENEMY_PLAYER, 24, -1);");
code("trModifyProtounit(\"Chimera\", ENEMY_PLAYER, 25, -1);");
code("trModifyProtounit(\"Chimera\", ENEMY_PLAYER, 26, -1);");
code("}");
code("}");

code("trChangeTerrainHeight(0,0,145,145,5,false);");
code("trPaintTerrain(0,0,150,150,TERRAIN_WALL, TERRAIN_SUB_WALL,false);");

code("int x = 0;");
code("int z = 0;");
code("int n = 0;");
code("int total = 0;");
code("int backtrack = 5;");
code("trQuestVarSet(\"tile0\", TILE_VISITED);");
code("trQuestVarSet(\"tile1\", TILE_FOUND);");
code("trQuestVarSet(\"tile4\", TILE_FOUND);");
code("trQuestVarSet(\"next\", 1);");
code("yAddToDatabase(\"frontier\", \"next\");");
code("yAddUpdateVar(\"frontier\", \"edge\", edgeName(0, 1));");
code("yAddUpdateVar(\"frontier\", \"type\", EDGE_NORMAL);");
code("trQuestVarSet(\"next\", 4);");
code("yAddToDatabase(\"frontier\", \"next\");");
code("yAddUpdateVar(\"frontier\", \"edge\", edgeName(0, 4));");
code("yAddUpdateVar(\"frontier\", \"type\", EDGE_NORMAL);");

code("for(i=0; < 64) {");
code("trQuestVarSetFromRand(\"search\", 1, backtrack, true);");
code("for(j=trQuestVarGet(\"search\"); >0) {");
code("yDatabaseNext(\"frontier\", false, false);");
code("}");
code("if (trQuestVarGet(\"tile\"+1*trQuestVarGet(\"frontier\")) < TILE_VISITED) {");
code("z = 1*trQuestVarGet(\"frontier\") / 4;");
code("x = 1*trQuestVarGet(\"frontier\") - 4 * z;");
code("buildEdge(1*yGetVar(\"frontier\", \"edge\"), 1*yGetVar(\"frontier\", \"type\"));");
code("trQuestVarSet(\"tile\"+1*trQuestVarGet(\"frontier\"), TILE_VISITED);");
code("if (trQuestVarGet(\"frontier\") < 15) {");
code("for(a=1; >=0) {");
code("for(b=1; >=0) {");
code("trQuestVarSet(\"newX\", (1 - 2 * b) * a + x);");
code("trQuestVarSet(\"newZ\", (1 - 2 * b) * (1 - a) + z);");
code("if (trQuestVarGet(\"newX\") < 0 || trQuestVarGet(\"newZ\") < 0 ||");
code("trQuestVarGet(\"newX\") > 3 || trQuestVarGet(\"newZ\") > 3) {");
code("continue;");
code("}");
code("n = 0 + trQuestVarGet(\"newX\") + 4 * trQuestVarGet(\"newZ\");");
code("if (trQuestVarGet(\"tile\"+n) < TILE_VISITED) {");
code("trQuestVarSet(\"next\", n);");
code("yAddToDatabase(\"frontier\", \"next\");");
code("yAddUpdateVar(\"frontier\", \"edge\", edgeName(1*trQuestVarGet(\"frontier\"), n));");
code("yAddUpdateVar(\"frontier\", \"type\", EDGE_NORMAL);");
code("}");
code("}");
code("}");
code("if (trQuestVarGet(\"mapType\") == MAP_PORTALS) {");
code("trQuestVarSetFromRand(\"rand\", 1, 14, true);");
code("n = trQuestVarGet(\"rand\");");
code("if (trQuestVarGet(\"tile\"+n) < TILE_VISITED) {");
code("yAddToDatabase(\"frontier\", \"rand\");");
code("yAddUpdateVar(\"frontier\", \"edge\", edgeName(1*trQuestVarGet(\"frontier\"), n));");
code("yAddUpdateVar(\"frontier\", \"type\", EDGE_PORTAL);");
code("}");
code("}");
code("}");

code("total = total + 1;");
code("if (total == 15) {");
code("break;");
code("}");
code("} else {");
code("backtrack = backtrack + 1;");
code("}");
code("yRemoveFromDatabase(\"frontier\");");
code("yRemoveUpdateVar(\"frontier\", \"edge\");");
code("yRemoveUpdateVar(\"frontier\", \"type\");");
code("}");
code("if (trQuestVarGet(\"mapType\") == MAP_STANDARD) {");
code("for(i=0; <10) {");
code("trQuestVarSetFromRand(\"first\", 1, 14);");
code("trQuestVarSetFromRand(\"direction\", 0, 3);");
code("z = 1*trQuestVarGet(\"first\") / 4;");
code("x = 1*trQuestVarGet(\"first\") - z * 4;");
code("a = 1*trQuestVarGet(\"direction\") / 2;");
code("b = 1*trQuestVarGet(\"direction\") - a * 2;");
code("trQuestVarSet(\"newX\", (1 - 2 * b) * a + x);");
code("trQuestVarSet(\"newZ\", (1 - 2 * b) * (1 - a) + z);");
code("if (trQuestVarGet(\"newX\") < 0 || trQuestVarGet(\"newZ\") < 0 ||");
code("trQuestVarGet(\"newX\") > 3 || trQuestVarGet(\"newZ\") > 3 ||");
code("(trQuestVarGet(\"newX\") + trQuestVarGet(\"newZ\") == 6)) {");
code("continue;");
code("} else {");
code("n = 0 + trQuestVarGet(\"newX\") + 4 * trQuestVarGet(\"newZ\");");
code("buildEdge(edgeName(1*trQuestVarGet(\"first\"), n), EDGE_BIG);");
code("}");
code("}");
code("}");

code("buildRoom(0,0, ROOM_STARTER);");
code("buildRoom(3,3, ROOM_BOSS);");

code("for(x=yGetDatabaseCount(\"skypassages\"); >0) {");
code("yDatabaseNext(\"skyPassages\");");
code("trVectorSetUnitPos(\"pos\", \"skyPassages\");");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"posX\")-4,0,trQuestVarGet(\"posZ\"),0,true);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"posX\")+4,0,trQuestVarGet(\"posZ\"),0,false);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"posX\"),0,trQuestVarGet(\"posZ\")-4,0,false);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"posX\"),0,trQuestVarGet(\"posZ\")+4,0,false);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"posX\")+3,0,trQuestVarGet(\"posZ\")+3,0,false);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"posX\")+3,0,trQuestVarGet(\"posZ\")-3,0,false);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"posX\")-3,0,trQuestVarGet(\"posZ\")+3,0,false);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"posX\")-3,0,trQuestVarGet(\"posZ\")-3,0,false);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Garrison Flag Sky Passage\");");
code("}");

code("bool nick = false;");
code("trQuestVarSetFromRand(\"nick\", 0, 20, true);");
code("if (trQuestVarGet(\"nick\") < trQuestVarGet(\"stage\")) {");
code("nick = true;");
code("}");

code("int chests = 3;");

code("trQuestVarSetFromRand(\"relicTransporterGuy\", 1, 14, true);");

code("for (i=1; < 15) {");
code("z = i / 4;");
code("x = i - z * 4;");
code("if (trQuestVarGet(\"room\"+i) == 0) {");
code("if (chests > 0) {");
code("trQuestVarSetFromRand(\"chestRand\", 1, 12 - trQuestVarGet(\"stage\"), true);");
code("} else {");
code("trQuestVarSet(\"chestRand\", 0);");
code("}");
code("if (i == trQuestVarGet(\"relicTransporterGuy\")) {");
code("buildRoom(x, z, ROOM_TRANSPORTER_GUY);");
code("} else if (nick && (countRoomEntrances(x, z) == 1)) {");
code("buildRoom(x, z, ROOM_NICK);");
code("nick = false;");
code("xsEnableRule(\"nick_00_visit\");");
code("} else if (trQuestVarGet(\"chestRand\") == 1) {");
code("chests = chests - 1;");
code("buildRoom(x, z, ROOM_CHEST);");
code("} else {");
code("trQuestVarSetFromRand(\"roomType\", ROOM_BASIC, ROOM_AMBUSH, true);");
code("trQuestVarSetFromRand(\"roomType2\", ROOM_BASIC, ROOM_AMBUSH, true);");
code("if (trQuestVarGet(\"roomType2\") < trQuestVarGet(\"roomType\")) {");
code("trQuestVarSet(\"roomType\", trQuestVarGet(\"roomType2\"));");
code("}");
code("buildRoom(x, z, 1*trQuestVarGet(\"roomType\"));");
code("}");
code("}");
code("}");

code("int room = 0;");
code("int x0 = 0;");
code("int z0 = 0;");
code("int x1 = 0;");
code("int z1 = 0;");
code("trQuestVarSet(\"keyType\", RELIC_KEY_GREEK);");
code("string pName = \"\";");
code("for(i=yGetDatabaseCount(\"chests\"); >0) {");
code("yDatabaseNext(\"chests\");");
code("room = yGetVar(\"chests\", \"room\");");
code("x0 = trQuestVarGet(\"room\"+room+\"bottom1x\");");
code("z0 = trQuestVarGet(\"room\"+room+\"bottom1z\");");
code("x1 = trQuestVarGet(\"room\"+room+\"top1x\");");
code("z1 = trQuestVarGet(\"room\"+room+\"top1z\");");
code("switch(1*yGetVar(\"chests\", \"type\"))");
code("{");
code("case CHEST_KEY:");
code("{");
code("ySetVar(\"chests\", \"keyType\", trQuestVarGet(\"keyType\"));");
code("paintEnemies(x0, z0, x1, z1);");
code("trQuestVarSetFromRand(\"key\", 1, 14, true);");
code("for(j=trQuestVarGet(\"key\"); >0) {");
code("room = yDatabaseNext(\"basicRooms\");");
code("}");
code("x0 = trQuestVarGet(\"room\"+room+\"bottom1x\");");
code("z0 = trQuestVarGet(\"room\"+room+\"bottom1z\");");
code("x1 = trQuestVarGet(\"room\"+room+\"top1x\");");
code("z1 = trQuestVarGet(\"room\"+room+\"top1z\");");
code("trVectorQuestVarSet(\"pos\", randomNearEdge(x0, z0, x1, z1));");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Militia\",1,trQuestVarGet(\"posX\"),0,trQuestVarGet(\"posZ\"),0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitChangeProtoUnit(\"Relic\");");
code("yAddToDatabase(\"freeRelics\", \"next\");");
code("yAddUpdateVar(\"freeRelics\", \"type\", trQuestVarGet(\"keyType\"));");
code("ySetVar(\"chests\", \"key\", trQuestVarGet(\"next\"));");

code("trVectorSetUnitPos(\"pos\", \"chests\");");
code("trQuestVarSet(\"posX\", trQuestVarGet(\"posX\") - 2);");
code("trQuestVarSet(\"posZ\", trQuestVarGet(\"posZ\") - 2);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"posX\"),0,trQuestVarGet(\"posZ\"),225,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(kbGetProtoUnitName(relicProto(1*trQuestVarGet(\"keyType\"))));");
code("ySetVar(\"chests\", \"indicator\", trQuestVarGet(\"next\"));");

code("trQuestVarSet(\"keyType\", 1 + trQuestVarGet(\"keyType\"));");
code("}");
code("case CHEST_PADS:");
code("{");
code("paintEnemies(x0, z0, x1, z1);");
code("trVectorQuestVarSet(\"pos\", randomNearEdge(x0, z0, x1, z1));");
code("ySetVar(\"chests\", \"pad1\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Militia\",1,trQuestVarGet(\"posX\"),0,trQuestVarGet(\"posZ\"),0,true);");

code("x0 = trQuestVarGet(\"room\"+room+\"bottom2x\");");
code("z0 = trQuestVarGet(\"room\"+room+\"bottom2z\");");
code("x1 = trQuestVarGet(\"room\"+room+\"top2x\");");
code("z1 = trQuestVarGet(\"room\"+room+\"top2z\");");

code("paintEnemies(x0, z0, x1, z1);");
code("trVectorQuestVarSet(\"pos\", randomNearEdge(x0, z0, x1, z1));");
code("ySetVar(\"chests\", \"pad2\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Militia\",1,trQuestVarGet(\"posX\"),0,trQuestVarGet(\"posZ\"),0,false);");

code("trArmySelect(\"1,0\");");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Statue of Automaton Base\");");
code("}");
code("case CHEST_ENCOUNTER:");
code("{");
code("ySetVar(\"chests\", \"enemiesBegin\", trGetNextUnitScenarioNameNumber());");
code("pName = trStringQuestVarGet(\"enemyProto\"+1*trQuestVarGet(\"enemyProtoCount\"));");
code("trQuestVarSetFromRand(\"count\", 1, 6, true);");
code("for(j=trQuestVarGet(\"count\"); >0) {");
code("trQuestVarSetFromRand(\"x0\", 2*x0, 2*x1, true);");
code("trQuestVarSetFromRand(\"z0\", 2*z0, 2*z1, true);");
code("trQuestVarSetFromRand(\"heading\", 1, 360, true);");
code("trQuestVarSet(\"posX\", trQuestVarGet(\"x0\"));");
code("trQuestVarSet(\"posZ\", trQuestVarGet(\"z0\"));");
code("vectorToGrid(\"pos\", \"pos\");");
code("if (terrainIsType(\"pos\", TERRAIN_WALL, TERRAIN_SUB_WALL) == false) {");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",pName,1,trQuestVarGet(\"x0\"),0,trQuestVarGet(\"z0\"),trQuestVarGet(\"heading\"),true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(ENEMY_PLAYER);");
code("yAddToDatabase(\"enemiesIncoming\", \"next\");");
code("}");
code("}");
code("x0 = trQuestVarGet(\"room\"+room+\"bottom2x\");");
code("z0 = trQuestVarGet(\"room\"+room+\"bottom2z\");");
code("x1 = trQuestVarGet(\"room\"+room+\"top2x\");");
code("z1 = trQuestVarGet(\"room\"+room+\"top2z\");");
code("trQuestVarSetFromRand(\"count\", 1, 6, true);");
code("for(j=trQuestVarGet(\"count\"); >0) {");
code("trQuestVarSetFromRand(\"x0\", 2*x0, 2*x1, true);");
code("trQuestVarSetFromRand(\"z0\", 2*z0, 2*z1, true);");
code("trQuestVarSetFromRand(\"heading\", 1, 360, true);");
code("trQuestVarSet(\"posX\", trQuestVarGet(\"x0\"));");
code("trQuestVarSet(\"posZ\", trQuestVarGet(\"z0\"));");
code("vectorToGrid(\"pos\", \"pos\");");
code("if (terrainIsType(\"pos\", TERRAIN_WALL, TERRAIN_SUB_WALL) == false) {");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",pName,1,trQuestVarGet(\"x0\"),0,trQuestVarGet(\"z0\"),trQuestVarGet(\"heading\"),true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(ENEMY_PLAYER);");
code("yAddToDatabase(\"enemiesIncoming\", \"next\");");
code("}");
code("}");
code("ySetVar(\"chests\", \"enemiesEnd\", trGetNextUnitScenarioNameNumber());");
code("}");
code("}");
code("}");

code("trPaintTerrain(0,0,5,5,0,70,true);");
code("trPaintTerrain(0,0,5,5,TERRAIN_WALL,TERRAIN_SUB_WALL,false);");

code("trUnblockAllSounds();");
code("if (trQuestVarGet(\"newPlayers\") == 0) {");
code("xsEnableRule(\"gameplay_start\");");
code("trUIFadeToColor(0,0,0,1000,0,false);");
code("trLetterBox(false);");
code("} else {");
code("xsEnableRule(\"choose_stage_03\");");
code("trSoundPlayFN(\"default\",\"1\",-1,");
code("\"Zenophobia: Looks like we have some new faces today!\", \"icons\infantry g hoplite icon 64\");");
code("}");
code("}");
code("}");

code("rule choose_stage_03");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 5) {");
code("trSoundPlayFN(\"default\",\"1\",-1,");
code("\"Zenophobia: I'll let you have the starter characters for free.\", \"icons\infantry g hoplite icon 64\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"choice1\", true);");
code("trUnitSetStance(\"Passive\");");
code("trUnitHighlight(15.0, true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"choice2\", true);");
code("trUnitSetStance(\"Passive\");");
code("trUnitHighlight(15.0, true);");
code("xsEnableRule(\"choose_stage_04\");");
code("xsDisableSelf();");
code("}");
code("}");

code("rule choose_stage_04");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 6) {");
code("trUIFadeToColor(0,0,0,1000,0,false);");
code("trLetterBox(false);");
code("xsEnableRule(\"gameplay_start\");");
code("xsDisableSelf();");
code("}");
code("}");
code("void removeMoonblade(int p = 0) {");
code("removePlayerSpecific(p);");
code("yRemoveUpdateVar(\"p\"+p+\"characters\", \"crescentCount\");");
code("yRemoveUpdateVar(\"p\"+p+\"characters\", \"crescentDamage\");");
code("yRemoveUpdateVar(\"p\"+p+\"characters\", \"crescentTimeout\");");
code("yRemoveUpdateVar(\"p\"+p+\"characters\", \"crescentSFX\");");
code("yRemoveUpdateVar(\"p\"+p+\"characters\", \"crescentOn\");");
code("}");

code("void moonbladeAlways(int eventID = -1) {");
code("int p = eventID - 12 * MOONBLADE;");
code("int id = 0;");
code("int hit = 0;");
code("int target = 0;");
code("float angle = 0;");
code("float posX = 0;");
code("float posZ = 0;");
code("int old = xsGetContextPlayer();");
code("xsSetContextPlayer(p);");
code("if (yGetDatabaseCount(\"p\"+p+\"characters\") > 0) {");
code("id = yDatabaseNext(\"p\"+p+\"characters\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeMoonblade(p);");
code("} else {");
code("hit = CheckOnHit(p, id);");
code("if (hit > ON_HIT_NONE) {");
code("if (yGetVar(\"p\"+p+\"characters\", \"crescentCount\") > 0) {");
code("ySetVar(\"p\"+p+\"characters\", \"crescentCount\", yGetVar(\"p\"+p+\"characters\", \"crescentCount\") - 1);");
code("ySetVar(\"p\"+p+\"characters\", \"crescentTimeout\", trTimeMS() + 5000);");
code("target = trGetUnitScenarioNameNumber(kbUnitGetTargetUnitID(id));");
code("trVectorQuestVarSet(\"pos\", kbGetBlockPosition(\"\"+target));");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"posx\"),0,trQuestVarGet(\"posz\"),0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Lightning Sparks Ground\");");
code("trPlayerGrantResources(p, \"favor\", 3);");
code("for(x=yGetDatabaseCount(\"enemies\"); >0) {");
code("if (yDatabaseNext(\"enemies\") == target) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"enemies\", true);");
code("damageEnemy(p, 50*trQuestVarGet(\"p\"+p+\"spellDamage\"), false);");
code("stunUnit(\"enemies\", 1.5, p);");
code("break;");
code("}");
code("}");
code("}");
code("angle = trQuestVarGet(\"p\"+p+\"health\") * trQuestVarGet(\"p\"+p+\"spellDamage\") * 0.01;");
code("for(x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("yDatabaseNext(\"playerUnits\", true);");
code("healUnit(p, angle);");
code("}");
code("if (hit == ON_HIT_SPECIAL) {");
code("if (trCurrentPlayer() == p) {");
code("trSoundPlayFN(\"mythcreate.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("trVectorSetUnitPos(\"pos\", \"p\"+p+\"characters\");");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("yAddToDatabase(\"playerUnits\", \"next\");");
code("yAddUpdateVar(\"playerUnits\", \"player\", p);");
code("yAddUpdateVar(\"playerUnits\", \"decay\", calculateDecay(p, 5));");
code("yAddUpdateVar(\"playerUnits\", \"decayNext\", trTimeMS() + 1000);");
code("yAddToDatabase(\"p\"+p+\"wolves\", \"next\");");
code("trArmyDispatch(\"\"+p+\",0\",\"Wolf\",1,trQuestVarGet(\"posx\"),0,trQuestVarGet(\"posz\"),0,true);");
code("}");
code("}");
code("if ((yGetVar(\"p\"+p+\"characters\", \"crescentCount\") > 0) &&");
code("(trTimeMS() > yGetVar(\"p\"+p+\"characters\", \"crescentTimeout\"))) {");
code("ySetVar(\"p\"+p+\"characters\", \"crescentTimeout\", trTimeMS() + 5000);");
code("ySetVar(\"p\"+p+\"characters\", \"crescentCount\", yGetVar(\"p\"+p+\"characters\", \"crescentCount\") - 1);");
code("}");

code("if ((yGetVar(\"p\"+p+\"characters\", \"crescentOn\") == 1) && (yGetVar(\"p\"+p+\"characters\", \"crescentCount\") == 0)) {");
code("ySetVar(\"p\"+p+\"characters\", \"crescentOn\", 0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"p\"+p+\"characters\", \"crescentSFX\"), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");
code("}");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"wellStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"wellStatus\", ABILITY_OFF);");
code("trSoundPlayFN(\"eclipsebirth.wav\",\"1\",-1,\"\",\"\");");
code("vectorSnapToGrid(\"p\"+p+\"wellPos\");");
code("posX = trQuestVarGet(\"p\"+p+\"wellPosx\");");
code("posZ = trQuestVarGet(\"p\"+p+\"wellPosz\");");
code("yAddToDatabase(\"p\"+p+\"moonbeams\", \"next\");");
code("yAddUpdateVar(\"p\"+p+\"moonbeams\", \"radius\", xsPow(trQuestVarGet(\"moonbeamRadius\")*trQuestVarGet(\"p\"+p+\"spellRange\"),2));");
code("yAddUpdateVar(\"p\"+p+\"moonbeams\", \"damage\", trQuestVarGet(\"moonbeamDamage\") * trQuestVarGet(\"p\"+p+\"spellDamage\"));");
code("yAddUpdateVar(\"p\"+p+\"moonbeams\", \"damageBoost\",");
code("trQuestVarGet(\"moonbeamDamageBoost\") * trQuestVarGet(\"p\"+p+\"spellDamage\"));");
code("yAddUpdateVar(\"p\"+p+\"moonbeams\", \"timeout\",");
code("trTimeMS() + 1000 * trQuestVarGet(\"moonbeamDuration\") * trQuestVarGet(\"p\"+p+\"spellDuration\"));");
code("yAddUpdateVar(\"p\"+p+\"moonbeams\", \"start\", trGetNextUnitScenarioNameNumber());");
code("yAddUpdateVar(\"p\"+p+\"moonbeams\", \"posx\", posX);");
code("yAddUpdateVar(\"p\"+p+\"moonbeams\", \"posz\", posZ);");
code("yAddUpdateVar(\"p\"+p+\"moonbeams\", \"next\", trTimeMS());");
code("for(x=0; <16) {");
code("trVectorSetFromAngle(\"dir\", angle);");
code("angle = angle + 6.283185 / 16;");
code("trQuestVarSet(\"dirx\",");
code("trQuestVarGet(\"dirx\") * trQuestVarGet(\"moonbeamRadius\") * trQuestVarGet(\"p\"+p+\"spellRange\") + posX);");
code("trQuestVarSet(\"dirz\",");
code("trQuestVarGet(\"dirz\") * trQuestVarGet(\"moonbeamRadius\") * trQuestVarGet(\"p\"+p+\"spellRange\") + posZ);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,trQuestVarGet(\"dirx\"),0,trQuestVarGet(\"dirz\"),0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Healing SFX\"));");
code("}");
code("yAddUpdateVar(\"p\"+p+\"moonbeams\", \"end\", trGetNextUnitScenarioNameNumber());");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"lureStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"lureStatus\", ABILITY_OFF);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"lureObject\", true);");
code("trUnitDestroy();");
code("trQuestVarSet(\"p\"+p+\"crescentStarted\", 1);");
code("trSoundPlayFN(\"olympustemplesfx.wav\",\"1\",-1,\"\",\"\");");
code("for(x=yGetDatabaseCount(\"p\"+p+\"Characters\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"Characters\");");
code("ySetVar(\"p\"+p+\"Characters\", \"crescentCount\", yGetVar(\"p\"+p+\"Characters\", \"crescentCount\") + 3);");
code("ySetVar(\"p\"+p+\"Characters\", \"crescentDamage\", trQuestVarGet(\"crescentDamage\") * trQuestVarGet(\"p\"+p+\"spellDamage\"));");
code("ySetVar(\"p\"+p+\"Characters\", \"crescentTimeout\", trTimeMS() + 5000);");
code("ySetVar(\"p\"+p+\"characters\", \"crescentOn\", 1);");
code("if ((yGetVar(\"p\"+p+\"Characters\", \"crescentSFX\") == 0) ||");
code("(kbGetBlockID(\"\"+1*yGetVar(\"p\"+p+\"characters\", \"crescentSFX\")) == -1)) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"characters\", true);");
code("spyEffect(1*trQuestVarGet(\"p\"+p+\"Characters\"),");
code("kbGetProtoUnitID(\"Rocket\"), yGetVarName(\"p\"+p+\"characters\", \"crescentSFX\"));");
code("}");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"rainStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"rainStatus\", ABILITY_OFF);");
code("trQuestVarSet(\"p\"+p+\"protection\", 1 - trQuestVarGet(\"p\"+p+\"protection\"));");
code("if (trQuestVarGet(\"p\"+p+\"protection\") == 1) {");
code("if (trPlayerResourceCount(p, \"favor\") < 1) {");
code("if (trCurrentPlayer() == p) {");
code("trSoundPlayFN(\"cantdothat.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("trQuestVarSet(\"p\"+p+\"protection\", 0);");
code("} else {");
code("trQuestVarSet(\"protectionCount\", trQuestVarGet(\"protectionCount\") + 1);");
code("trQuestVarSet(\"p\"+p+\"protectionNext\",");
code("trTimeMS() + trQuestVarGet(\"protectionDelay\") * trQuestVarGet(\"p\"+p+\"ultimateCost\"));");
code("trSoundPlayFN(\"bronzebirth.wav\",\"1\",-1,\"\",\"\");");
code("for(x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("id = yDatabaseNext(\"playerUnits\", true);");
code("xsSetContextPlayer(1*yGetVar(\"playerUnits\", \"player\"));");
code("ySetVar(\"playerUnits\", \"currentHealth\", kbUnitGetCurrentHitpoints(id));");
code("}");
code("}");
code("} else {");
code("trQuestVarSet(\"protectionCount\", trQuestVarGet(\"protectionCount\") - 1);");
code("if (trCurrentPlayer() == p) {");
code("trSoundPlayFN(\"godpowerfailed.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("}");

code("if ((trQuestVarGet(\"p\"+p+\"crescentStarted\") == 1) && (trQuestVarGet(\"spyFind\") == trQuestVarGet(\"spyFound\"))) {");
code("for(x=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"characters\");");
code("if (yGetVar(\"p\"+p+\"characters\", \"crescentSFX\") < 0) {");
code("ySetVar(\"p\"+p+\"characters\", \"crescentSFX\", trQuestVarGet(\"spyEye\"+(0-yGetVar(\"p\"+p+\"characters\", \"crescentSFX\"))));");
code("}");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"p\"+p+\"characters\", \"crescentSFX\"), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Outpost\"));");
code("trSetSelectedScale(0.0,0.0,0.0);");
code("}");
code("trQuestVarSet(\"p\"+p+\"crescentStarted\", 0);");
code("}");

code("if (yGetDatabaseCount(\"p\"+p+\"moonbeams\") > 0) {");
code("target = 0;");
code("yDatabaseNext(\"p\"+p+\"moonbeams\");");
code("if (trTimeMS() > yGetVar(\"p\"+p+\"moonbeams\", \"next\")) {");
code("ySetVar(\"p\"+p+\"moonbeams\", \"next\", trTimeMS() + 500);");
code("trQuestVarSet(\"centerX\", yGetVar(\"p\"+p+\"moonbeams\", \"posX\"));");
code("trQuestVarSet(\"centerZ\", yGetVar(\"p\"+p+\"moonbeams\", \"posZ\"));");
code("angle = yGetVar(\"p\"+p+\"moonbeams\", \"radius\");");
code("for(x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("yDatabaseNext(\"playerUnits\");");
code("if (zDistanceToVectorSquared(\"playerUnits\", \"center\") < angle) {");
code("target = target + 1;");
code("}");
code("}");
code("posX = yGetVar(\"p\"+p+\"moonbeams\", \"damage\") + target * yGetVar(\"p\"+p+\"moonbeams\", \"damageBoost\");");
code("posX = posX * 0.5;");
code("for(x=yGetDatabaseCount(\"enemies\"); >0) {");
code("id = yDatabaseNext(\"enemies\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (zDistanceToVectorSquared(\"enemies\", \"center\") < angle) {");
code("damageEnemy(p, posX);");
code("}");
code("}");
code("if (trTimeMS() > yGetVar(\"p\"+p+\"moonbeams\", \"timeout\")) {");
code("for(x=yGetVar(\"p\"+p+\"moonbeams\", \"start\"); < yGetVar(\"p\"+p+\"moonbeams\", \"end\")) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+x, true);");
code("trUnitDestroy();");
code("}");
code("yRemoveFromDatabase(\"p\"+p+\"moonbeams\");");
code("yRemoveUpdateVar(\"p\"+p+\"moonbeams\", \"radius\");");
code("yRemoveUpdateVar(\"p\"+p+\"moonbeams\", \"damage\");");
code("yRemoveUpdateVar(\"p\"+p+\"moonbeams\", \"damageBoost\");");
code("yRemoveUpdateVar(\"p\"+p+\"moonbeams\", \"timeout\");");
code("yRemoveUpdateVar(\"p\"+p+\"moonbeams\", \"posX\");");
code("yRemoveUpdateVar(\"p\"+p+\"moonbeams\", \"posZ\");");
code("yRemoveUpdateVar(\"p\"+p+\"moonbeams\", \"next\");");
code("yRemoveUpdateVar(\"p\"+p+\"moonbeams\", \"start\");");
code("yRemoveUpdateVar(\"p\"+p+\"moonbeams\", \"end\");");
code("}");
code("}");
code("}");

code("if (yGetDatabaseCount(\"p\"+p+\"wolves\") > 0) {");
code("yDatabaseNext(\"p\"+p+\"wolves\", true);");
code("if (trUnitAlive() == false) {");
code("trUnitChangeProtoUnit(\"Conversion SFX\");");
code("yRemoveFromDatabase(\"p\"+p+\"wolves\");");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"protection\") == 1) {");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"protectionNext\")) {");
code("trQuestVarSet(\"p\"+p+\"protectionNext\",");
code("trQuestVarGet(\"p\"+p+\"protectionNext\") + trQuestVarGet(\"protectionDelay\") * trQuestVarGet(\"p\"+p+\"ultimateCost\"));");
code("trPlayerGrantResources(p, \"favor\", 0 - 1);");
code("if (trPlayerResourceCount(p, \"favor\") < 1) {");
code("trQuestVarSet(\"p\"+p+\"protection\", 0);");
code("trQuestVarSet(\"protectionCount\", trQuestVarGet(\"protectionCount\") - 1);");
code("trSoundPlayFN(\"godpowerfailed.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("}");

code("xsSetContextPlayer(old);");
code("}");

code("void chooseMoonblade(int eventID = -1) {");
code("int p = eventID - 1000 - 12 * MOONBLADE;");
code("if (trCurrentPlayer() == p) {");
code("map(\"q\", \"game\", \"uiSetSpecialPower(133) uiSpecialPowerAtPointer\");");
code("wellName = \"(Q) Moonbeam\";");
code("wellIsUltimate = false;");
code("map(\"e\", \"game\", \"uiSetSpecialPower(156) uiSpecialPowerAtPointer\");");
code("rainName = \"(E) Protection\";");
code("rainIsUltimate = false;");
code("map(\"w\", \"game\", \"uiSetSpecialPower(227) uiSpecialPowerAtPointer\");");
code("lureName = \"(W) Crescent Strikes\";");
code("lureIsUltimate = false;");
code("}");
code("trQuestVarSet(\"p\"+p+\"wellCooldown\", trQuestVarGet(\"moonbeamCooldown\"));");
code("trQuestVarSet(\"p\"+p+\"wellCost\", 0);");
code("trQuestVarSet(\"p\"+p+\"lureCooldown\", trQuestVarGet(\"crescentCooldown\"));");
code("trQuestVarSet(\"p\"+p+\"lureCost\", 0);");
code("trQuestVarSet(\"p\"+p+\"rainCooldown\", 1);");
code("trQuestVarSet(\"p\"+p+\"rainCost\", 0);");
code("}");

code("rule moonblade_init");
code("active");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("for(p=1; < ENEMY_PLAYER) {");
code("trEventSetHandler(12 * MOONBLADE + p, \"moonbladeAlways\");");
code("trEventSetHandler(1000 + 12 * MOONBLADE + p, \"chooseMoonblade\");");
code("}");
code("trQuestVarSet(\"moonbeamCooldown\", 18);");
code("trQuestVarSet(\"moonbeamDamage\", 20);");
code("trQuestVarSet(\"moonbeamDamageBoost\", 10);");
code("trQuestVarSet(\"moonbeamDuration\", 6);");
code("trQuestVarSet(\"moonbeamRadius\", 6);");

code("trQuestVarSet(\"crescentCooldown\", 12);");
code("trQuestVarSet(\"crescentCount\", 3);");
code("trQuestVarSet(\"crescentDamage\", 50);");

code("trQuestVarSet(\"protectionCost\", 12);");
code("trQuestVarSet(\"protectionDelay\", 1000 / 12);");
code("}");
code("void removeSunbow(int p = 0) {");
code("removePlayerSpecific(p);");
code("yRemoveUpdateVar(\"p\"+p+\"characters\", \"searingSFX\");");
code("}");

code("void sunbowAlways(int eventID = -1) {");
code("int p = eventID - 12 * SUNBOW;");
code("int id = 0;");
code("int hit = 0;");
code("int target = 0;");
code("float amt = 0;");
code("float dist = 0;");
code("float posX = 0;");
code("float posZ = 0;");
code("int old = xsGetContextPlayer();");
code("xsSetContextPlayer(p);");
code("if (yGetDatabaseCount(\"p\"+p+\"characters\") > 0) {");
code("id = yDatabaseNext(\"p\"+p+\"characters\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeSunbow(p);");
code("} else {");
code("hit = CheckOnHit(p, id);");
code("if (hit == ON_HIT_NORMAL) {");
code("if (trQuestVarGet(\"p\"+p+\"healingRays\") == 1) {");
code("trPlayerGrantResources(p, \"favor\", 1);");
code("target = trGetUnitScenarioNameNumber(kbUnitGetTargetUnitID(id));");
code("trVectorQuestVarSet(\"end\", kbGetBlockPosition(\"\"+target));");
code("trVectorSetUnitPos(\"start\", \"p\"+p+\"characters\");");
code("trVectorQuestVarSet(\"dir\", zGetUnitVector(\"start\", \"end\"));");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,trQuestVarGet(\"startx\"),0,trQuestVarGet(\"startz\"),0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Petosuchus Projectile\"));");
code("trUnitHighlight(1.0, false);");
code("trSetUnitOrientation(xsVectorSet(0.0 - trQuestVarGet(\"dirx\"),0, 0.0 - trQuestVarGet(\"dirz\")), vector(0,1,0), true);");
code("yAddToDatabase(\"playerLasers\", \"next\");");
code("yAddUpdateVar(\"playerLasers\", \"timeout\", trTimeMS() + 500);");
code("yAddUpdateVar(\"playerLasers\", \"range\", trQuestVarGet(\"p\"+p+\"range\") * 1.3);");
code("amt = trQuestVarGet(\"p\"+p+\"attack\");");
code("for(x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("yDatabaseNext(\"playerUnits\");");
code("dist = zDistanceToVector(\"playerUnits\", \"start\");");
code("if (dist < trQuestVarGet(\"p\"+p+\"range\") + 3) {");
code("trQuestVarSet(\"hitboxX\", trQuestVarGet(\"startX\") + dist * trQuestVarGet(\"dirx\"));");
code("trQuestVarSet(\"hitboxZ\", trQuestVarGet(\"startZ\") + dist * trQuestVarGet(\"dirz\"));");
code("if (zDistanceToVectorSquared(\"playerUnits\", \"hitbox\") < 9) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"playerUnits\", true);");
code("healUnit(p, amt);");
code("}");
code("}");

code("}");
code("if (trQuestVarGet(\"p\"+p+\"searing\") == 1) {");
code("for(x=yGetDatabaseCount(\"enemies\"); >0) {");
code("yDatabaseNext(\"enemies\");");
code("dist = zDistanceToVector(\"enemies\", \"start\");");
code("if (dist < trQuestVarGet(\"p\"+p+\"range\") + 3) {");
code("trQuestVarSet(\"hitboxX\", trQuestVarGet(\"startX\") + dist * trQuestVarGet(\"dirx\"));");
code("trQuestVarSet(\"hitboxZ\", trQuestVarGet(\"startZ\") + dist * trQuestVarGet(\"dirz\"));");
code("if (zDistanceToVectorSquared(\"enemies\", \"hitbox\") < 9) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"enemies\", true);");
code("damageEnemy(p, amt * trQuestVarGet(\"p\"+p+\"healBoost\"));");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"wellStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"wellStatus\", ABILITY_OFF);");
code("trSoundPlayFN(\"restorationbirth.wav\",\"1\",-1,\"\",\"\");");
code("vectorSnapToGrid(\"p\"+p+\"wellPos\");");
code("posX = trQuestVarGet(\"p\"+p+\"wellPosx\");");
code("posZ = trQuestVarGet(\"p\"+p+\"wellPosz\");");
code("yAddToDatabase(\"p\"+p+\"sunlights\", \"next\");");
code("yAddUpdateVar(\"p\"+p+\"sunlights\", \"radius\", xsPow(trQuestVarGet(\"sunlightRadius\")*trQuestVarGet(\"p\"+p+\"spellRange\"),2));");
code("yAddUpdateVar(\"p\"+p+\"sunlights\", \"power\", trQuestVarGet(\"sunlightPower\") * trQuestVarGet(\"p\"+p+\"spellDamage\"));");
code("yAddUpdateVar(\"p\"+p+\"sunlights\", \"timeout\",");
code("trTimeMS() + 1000 * trQuestVarGet(\"sunlightDuration\") * trQuestVarGet(\"p\"+p+\"spellDuration\"));");
code("yAddUpdateVar(\"p\"+p+\"sunlights\", \"start\", trGetNextUnitScenarioNameNumber());");
code("yAddUpdateVar(\"p\"+p+\"sunlights\", \"posx\", posX);");
code("yAddUpdateVar(\"p\"+p+\"sunlights\", \"posz\", posZ);");
code("yAddUpdateVar(\"p\"+p+\"sunlights\", \"next\", trTimeMS());");
code("for(x=0; <16) {");
code("trVectorSetFromAngle(\"dir\", amt);");
code("amt = amt + 6.283185 / 16;");
code("trQuestVarSet(\"dirx\",");
code("trQuestVarGet(\"dirx\") * trQuestVarGet(\"sunlightRadius\") * trQuestVarGet(\"p\"+p+\"spellRange\") + posX);");
code("trQuestVarSet(\"dirz\",");
code("trQuestVarGet(\"dirz\") * trQuestVarGet(\"sunlightRadius\") * trQuestVarGet(\"p\"+p+\"spellRange\") + posZ);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,trQuestVarGet(\"dirx\"),0,trQuestVarGet(\"dirz\"),0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitChangeProtoUnit(\"Relic\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Hero Birth\"));");
code("}");
code("yAddUpdateVar(\"p\"+p+\"sunlights\", \"end\", trGetNextUnitScenarioNameNumber());");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"lureStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"lureStatus\", ABILITY_OFF);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"lureObject\", true);");
code("trUnitDestroy();");
code("trQuestVarSet(\"p\"+p+\"healingrays\", 1);");
code("trQuestVarSet(\"p\"+p+\"healingRaysTimeout\",");
code("trTimeMS() + 1000 * trQuestVarGet(\"healingRaysDuration\") * trQuestVarGet(\"p\"+p+\"spellDuration\"));");
code("trSoundPlayFN(\"skypassagein.wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSet(\"p\"+p+\"nextDelay\",");
code("trQuestVarGet(\"class\"+SUNBOW+\"nextDelay\") * 2.0 / (1.0 + trQuestVarGet(\"p\"+p+\"projectiles\")));");
code("}");

code("if ((trQuestVarGet(\"p\"+p+\"healingRays\") == 1) && (trTimeMS() > trQuestVarGet(\"p\"+p+\"healingRaysTimeout\"))) {");
code("trQuestVarSet(\"p\"+p+\"healingRays\", 0);");
code("trSoundPlayFN(\"godpowerfailed.wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSet(\"p\"+p+\"nextDelay\", trQuestVarGet(\"class\"+SUNBOW+\"nextDelay\"));");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"rainStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"rainStatus\", ABILITY_OFF);");
code("trQuestVarSet(\"p\"+p+\"searingStarted\", 1);");
code("trQuestVarSet(\"p\"+p+\"searing\", 1 - trQuestVarGet(\"p\"+p+\"searing\"));");
code("if (trQuestVarGet(\"p\"+p+\"searing\") == 1) {");
code("if (trPlayerResourceCount(p, \"favor\") < 1) {");
code("if (trCurrentPlayer() == p) {");
code("trSoundPlayFN(\"cantdothat.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("trQuestVarSet(\"p\"+p+\"searing\", 0);");
code("} else {");
code("trQuestVarSet(\"p\"+p+\"searingNext\",");
code("trTimeMS() + trQuestVarGet(\"searingDelay\") * trQuestVarGet(\"p\"+p+\"ultimateCost\"));");
code("trSoundPlayFN(\"forestfirebirth.wav\",\"1\",-1,\"\",\"\");");
code("for(x=yGetDatabaseCount(\"p\"+p+\"Characters\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"Characters\");");
code("if ((yGetVar(\"p\"+p+\"Characters\", \"searingSFX\") == 0) ||");
code("(kbGetBlockID(\"\"+1*yGetVar(\"p\"+p+\"characters\", \"searingSFX\")) == -1)) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"characters\", true);");
code("spyEffect(1*trQuestVarGet(\"p\"+p+\"Characters\"),");
code("kbGetProtoUnitID(\"Rocket\"), yGetVarName(\"p\"+p+\"characters\", \"searingSFX\"));");
code("}");
code("}");
code("}");
code("} else {");
code("if (trCurrentPlayer() == p) {");
code("trSoundPlayFN(\"godpowerfailed.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"searing\") == 1) {");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"searingNext\")) {");
code("trQuestVarSet(\"p\"+p+\"searingNext\",");
code("trQuestVarGet(\"p\"+p+\"searingNext\") + trQuestVarGet(\"searingDelay\") * trQuestVarGet(\"p\"+p+\"ultimateCost\"));");
code("trPlayerGrantResources(p, \"favor\", 0 - 1);");
code("if (trPlayerResourceCount(p, \"favor\") < 1) {");
code("trQuestVarSet(\"p\"+p+\"searing\", 0);");
code("trQuestVarSet(\"p\"+p+\"searingStarted\", 1);");
code("trSoundPlayFN(\"godpowerfailed.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("}");

code("if ((trQuestVarGet(\"p\"+p+\"searingStarted\") == 1) && (trQuestVarGet(\"spyFind\") == trQuestVarGet(\"spyFound\"))) {");
code("for(x=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"characters\");");
code("if (yGetVar(\"p\"+p+\"characters\", \"searingSFX\") < 0) {");
code("ySetVar(\"p\"+p+\"characters\", \"searingSFX\", trQuestVarGet(\"spyEye\"+(0-yGetVar(\"p\"+p+\"characters\", \"searingSFX\"))));");
code("}");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"p\"+p+\"characters\", \"searingSFX\"), true);");
code("if (trQuestVarGet(\"p\"+p+\"searing\") == 1) {");
code("trMutateSelected(kbGetProtoUnitID(\"Ball of Fire Impact\"));");
code("} else {");
code("trMutateSelected(kbGetProtoUnitID(\"Rocket\"));");
code("}");
code("}");
code("trQuestVarSet(\"p\"+p+\"searingStarted\", 0);");
code("}");

code("if (yGetDatabaseCount(\"p\"+p+\"sunlights\") > 0) {");
code("target = 0;");
code("yDatabaseNext(\"p\"+p+\"sunlights\");");
code("if (trTimeMS() > yGetVar(\"p\"+p+\"sunlights\", \"next\")) {");
code("ySetVar(\"p\"+p+\"sunlights\", \"next\", trTimeMS() + 500);");
code("trQuestVarSet(\"centerX\", yGetVar(\"p\"+p+\"sunlights\", \"posX\"));");
code("trQuestVarSet(\"centerZ\", yGetVar(\"p\"+p+\"sunlights\", \"posZ\"));");
code("amt = yGetVar(\"p\"+p+\"sunlights\", \"radius\");");
code("posX = yGetVar(\"p\"+p+\"sunlights\", \"power\");");
code("posX = posX * 0.5;");

code("for (x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("id = yDatabaseNext(\"playerUnits\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (zDistanceToVectorSquared(\"playerUnits\", \"center\") < amt) {");
code("healUnit(p, posX);");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"searing\") == 1) {");
code("for(x=yGetDatabaseCount(\"enemies\"); >0) {");
code("id = yDatabaseNext(\"enemies\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (zDistanceToVectorSquared(\"enemies\", \"center\") < amt) {");
code("damageEnemy(p, posX * trQuestVarGet(\"p\"+p+\"healBoost\"));");
code("}");
code("}");
code("}");

code("if (trTimeMS() > yGetVar(\"p\"+p+\"sunlights\", \"timeout\")) {");
code("for(x=yGetVar(\"p\"+p+\"sunlights\", \"start\"); < yGetVar(\"p\"+p+\"sunlights\", \"end\")) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+x, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Rocket\"));");
code("trUnitDestroy();");
code("}");
code("yRemoveFromDatabase(\"p\"+p+\"sunlights\");");
code("yRemoveUpdateVar(\"p\"+p+\"sunlights\", \"radius\");");
code("yRemoveUpdateVar(\"p\"+p+\"sunlights\", \"power\");");
code("yRemoveUpdateVar(\"p\"+p+\"sunlights\", \"timeout\");");
code("yRemoveUpdateVar(\"p\"+p+\"sunlights\", \"posX\");");
code("yRemoveUpdateVar(\"p\"+p+\"sunlights\", \"posZ\");");
code("yRemoveUpdateVar(\"p\"+p+\"sunlights\", \"next\");");
code("yRemoveUpdateVar(\"p\"+p+\"sunlights\", \"start\");");
code("yRemoveUpdateVar(\"p\"+p+\"sunlights\", \"end\");");
code("}");
code("}");
code("}");

code("if (trTime() > trQuestVarGet(\"p\"+p+\"sunbowPassiveNext\")) {");
code("trQuestVarSet(\"p\"+p+\"sunbowPassiveNext\", trTime());");
code("for(x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("id = yDatabaseNext(\"playerUnits\", true);");
code("if ((id == -1) || trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else {");
code("healUnit(1, 1);");
code("}");
code("}");
code("}");

code("xsSetContextPlayer(old);");
code("}");

code("void chooseSunbow(int eventID = -1) {");
code("int p = eventID - 1000 - 12 * SUNBOW;");
code("if (trCurrentPlayer() == p) {");
code("map(\"q\", \"game\", \"uiSetSpecialPower(133) uiSpecialPowerAtPointer\");");
code("wellName = \"(Q) Sunlight\";");
code("wellIsUltimate = false;");
code("map(\"e\", \"game\", \"uiSetSpecialPower(156) uiSpecialPowerAtPointer\");");
code("rainName = \"(E) Searing Light\";");
code("rainIsUltimate = false;");
code("map(\"w\", \"game\", \"uiSetSpecialPower(227) uiSpecialPowerAtPointer\");");
code("lureName = \"(W) Healing Rays\";");
code("lureIsUltimate = false;");
code("}");
code("trQuestVarSet(\"p\"+p+\"wellCooldown\", trQuestVarGet(\"sunlightCooldown\"));");
code("trQuestVarSet(\"p\"+p+\"wellCost\", 0);");
code("trQuestVarSet(\"p\"+p+\"lureCooldown\", trQuestVarGet(\"healingRaysCooldown\"));");
code("trQuestVarSet(\"p\"+p+\"lureCost\", 0);");
code("trQuestVarSet(\"p\"+p+\"rainCooldown\", 1);");
code("trQuestVarSet(\"p\"+p+\"rainCost\", 0);");
code("}");

code("rule sunbow_init");
code("active");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("for(p=1; < ENEMY_PLAYER) {");
code("trEventSetHandler(12 * SUNBOW + p, \"sunbowAlways\");");
code("trEventSetHandler(1000 + 12 * SUNBOW + p, \"chooseSunbow\");");
code("}");

code("trQuestVarSet(\"sunlightCooldown\", 18);");
code("trQuestVarSet(\"sunlightRadius\", 6);");
code("trQuestVarSet(\"sunlightDuration\", 6);");
code("trQuestVarSet(\"sunlightPower\", 60);");

code("trQuestVarSet(\"healingRaysCooldown\", 12);");
code("trQuestVarSet(\"healingRaysPower\", 100);");
code("trQuestVarSet(\"healingRaysDuration\", 5);");

code("trQuestVarSet(\"searingCost\", 5);");
code("trQuestVarSet(\"searingDelay\", 1000 / trQuestVarGet(\"searingCost\"));");
code("}");
code("void removeThunderRider(int p = 0) {");
code("removePlayerSpecific(p);");
code("yRemoveUpdateVar(\"p\"+p+\"characters\", \"prevX\");");
code("yRemoveUpdateVar(\"p\"+p+\"characters\", \"prevZ\");");
code("yRemoveUpdateVar(\"p\"+p+\"characters\", \"lightningIndex\");");
code("}");

code("void removeLightningBall(int p = 0) {");
code("yRemoveFromDatabase(\"p\"+p+\"lightningBalls\");");
code("yRemoveUpdateVar(\"p\"+p+\"lightningBalls\", \"dirX\");");
code("yRemoveUpdateVar(\"p\"+p+\"lightningBalls\", \"dirZ\");");
code("yRemoveUpdateVar(\"p\"+p+\"lightningBalls\", \"prevX\");");
code("yRemoveUpdateVar(\"p\"+p+\"lightningBalls\", \"prevZ\");");
code("yRemoveUpdateVar(\"p\"+p+\"lightningBalls\", \"damage\");");
code("yRemoveUpdateVar(\"p\"+p+\"lightningBalls\", \"yeehaw\");");
code("yRemoveUpdateVar(\"p\"+p+\"lightningBalls\", \"inWall\");");
code("yRemoveUpdateVar(\"p\"+p+\"lightningBalls\", \"lastGoodX\");");
code("yRemoveUpdateVar(\"p\"+p+\"lightningBalls\", \"lastGoodZ\");");
code("yRemoveUpdateVar(\"p\"+p+\"lightningBalls\", \"inWallTimeout\");");
code("}");

code("void rideLightningOff(int p = 0) {");
code("zSetProtoUnitStat(\"Attack Revealer\", p, 2, 4.0);");
code("int index = 0;");
code("for(x=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"characters\");");
code("index = yGetVar(\"p\"+p+\"characters\", \"lightningIndex\");");
code("ySetPointer(\"p\"+p+\"lightningBalls\", index);");
code("trVectorSetUnitPos(\"pos\", \"p\"+p+\"lightningBalls\");");
code("ySetVarFromVector(\"p\"+p+\"characters\", \"prev\", \"pos\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"lightningBalls\", true);");
code("trUnitChangeProtoUnit(\"Transport Ship Greek\");");
code("trDamageUnitPercent(-100);");

code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"characters\");");
code("trMutateSelected(kbGetProtoUnitID(\"Dwarf\"));");
code("if (kbGetBlockID(\"\"+1*trQuestVarGet(\"p\"+p+\"lightningBalls\")) >= 0) {");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"p\"+p+\"lightningBalls\"));");
code("}");
code("trUnitChangeProtoUnit(\"Hero Greek Atalanta\");");

code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"lightningBalls\", true);");
code("trDamageUnitPercent(100);");
code("trUnitChangeProtoUnit(\"Implode Sphere Effect\");");
code("ySetVar(\"p\"+p+\"characters\", \"index\", yAddToDatabase(\"playerUnits\", \"p\"+p+\"characters\"));");
code("yAddUpdateVar(\"playerUnits\", \"player\", p);");
code("yAddUpdateVar(\"playerUnits\", \"hero\", 1);");
code("if (trQuestVarGet(\"p\"+p+\"characters\") == trQuestVarGet(\"p\"+p+\"unit\")) {");
code("trQuestVarSet(\"p\"+p+\"index\", yGetNewestPointer(\"playerUnits\"));");
code("}");
code("}");

code("for(x=yGetDatabaseCount(\"p\"+p+\"relics\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"relics\", true);");
code("trUnitChangeProtoUnit(\"Relic\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"relics\");");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"p\"+p+\"unit\"));");
code("trMutateSelected(relicProto(1*yGetVar(\"p\"+p+\"relics\", \"type\")));");
code("if (yGetVar(\"p\"+p+\"relics\", \"type\") < RELIC_KEY_GREEK) {");
code("trSetSelectedScale(0,0,-1);");
code("trUnitSetAnimationPath(\"1,0,1,1,0,0,0\");");
code("}");
code("}");
code("yClearDatabase(\"p\"+p+\"lightningBalls\");");
code("yClearDatabase(\"p\"+p+\"rideLightningTargets\");");

code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"unit\");");
code("if (trCurrentPlayer() == p) {");
code("trBlockAllSounds();");
code("for(x=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("if (trUnitIsSelected() == false) {");
code("uiFindType(\"Hero Greek Atalanta\");");
code("} else {");
code("break;");
code("}");
code("}");
code("uiLookAtUnitByName(\"\"+1*trQuestVarGet(\"p\"+p+\"unit\"));");
code("trUnblockAllSounds();");
code("}");
code("}");

code("void refreshRideLightningTargets(int p = 0) {");
code("yClearDatabase(\"p\"+p+\"rideLightningTargets\");");
code("for(x=yGetDatabaseCount(\"enemies\"); >0) {");
code("yDatabaseNext(\"enemies\");");
code("yAddToDatabase(\"p\"+p+\"rideLightningTargets\", \"enemies\");");
code("yAddUpdateVar(\"p\"+p+\"rideLightningTargets\", \"index\", yGetPointer(\"enemies\"));");
code("}");
code("}");

code("void lightningBallBounce(int p = 0) {");
code("yVarToVector(\"p\"+p+\"lightningBalls\", \"dir\");");
code("zSetProtoUnitStat(\"Kronny Flying\", p, 1, 2.0 * trQuestVarGet(\"p\"+p+\"speed\"));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"lightningBalls\");");
code("trUnitChangeProtoUnit(\"Kronny Flying\");");

code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"lightningBalls\");");
code("trDamageUnitPercent(-100);");
code("trMutateSelected(kbGetProtoUnitID(\"Kronny Flying\"));");
code("trQuestVarSetFromRand(\"sound\", 1, 3, true);");
code("if (trUnitVisToPlayer()) {");
code("trSoundPlayFN(\"suckup\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("}");
code("trSetUnitOrientation(trVectorQuestVarGet(\"dir\"), vector(0,1,0), true);");
code("trSetSelectedScale(0,-5,0);");
code("trDamageUnitPercent(100);");

code("ySetVar(\"p\"+p+\"lightningBalls\", \"yeehaw\", 1);");
code("}");

code("void thunderRiderAlways(int eventID = -1) {");
code("int p = eventID - 12 * THUNDERRIDER;");
code("int id = 0;");
code("int hit = 0;");
code("int target = 0;");
code("float amt = 0;");
code("float dist = 0;");
code("float posX = 0;");
code("float posZ = 0;");

code("if (yGetDatabaseCount(\"p\"+p+\"blitzSFX\") > 0) {");
code("for(x=yGetDatabaseCount(\"enemies\"); >0) {");
code("id = yDatabaseNext(\"enemies\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (trCountUnitsInArea(\"\"+1*trQuestVarGet(\"enemies\"), p, \"Victory Marker\", 3) > 0) {");
code("trPlayerGrantResources(p, \"favor\", 3);");
code("damageEnemy(p, trQuestVarGet(\"blitzDamage\") * trQuestVarGet(\"p\"+p+\"spellDamage\"), true);");
code("if (trUnitAlive()) {");
code("stunUnit(\"enemies\", 1.5, p);");
code("}");
code("}");
code("}");
code("for(x=yGetDatabaseCount(\"p\"+p+\"blitzSFX\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"blitzSFX\", true);");
code("trUnitChangeProtoUnit(\"Lightning Sparks\");");
code("}");
code("yClearDatabase(\"p\"+p+\"blitzSFX\");");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"rideLightning\") == 1) {");
code("if (yGetDatabaseCount(\"p\"+p+\"lightningBalls\") > 0) {");
code("yDatabaseNext(\"p\"+p+\"lightningBalls\", true);");
code("if (yGetVar(\"p\"+p+\"lightningBalls\", \"yeehaw\") == 1) {");
code("trMutateSelected(kbGetProtoUnitID(\"Implode Sphere Effect\"));");
code("trUnitSetAnimationPath(\"0,1,1,0,0,0,0\");");
code("trUnitOverrideAnimation(2,0,true,true,-1);");
code("trSetSelectedScale(0,0,0);");
code("trSetSelectedUpVector(0,50.0,0);");
code("ySetVar(\"p\"+p+\"lightningBalls\", \"yeehaw\", 0);");
code("} else {");
code("trVectorSetUnitPos(\"pos\", \"p\"+p+\"lightningBalls\");");
code("yVarToVector(\"p\"+p+\"lightningBalls\", \"prev\");");
code("dist = zDistanceBetweenVectors(\"pos\", \"prev\");");

code("trQuestVarSet(\"p\"+p+\"thunderRiderBonus\",");
code("trQuestVarGet(\"p\"+p+\"thunderRiderBonus\") + dist * 0.1 * trQuestVarGet(\"p\"+p+\"baseAttack\"));");
code("ySetVarFromVector(\"p\"+p+\"lightningBalls\", \"prev\", \"pos\");");

code("vectorToGrid(\"pos\", \"loc\");");
code("if (yGetVar(\"p\"+p+\"lightningBalls\", \"inWall\") == 0) {");
code("if (terrainIsType(\"loc\", TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("yVarToVector(\"p\"+p+\"lightningBalls\", \"dir\");");
code("trVectorQuestVarSet(\"dir\", getBounceDir(\"pos\", \"dir\"));");
code("trQuestVarSetFromRand(\"sound\", 1, 2, true);");
code("trSoundPlayFN(\"implodehit\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("ySetVarFromVector(\"p\"+p+\"lightningBalls\", \"dir\", \"dir\");");
code("ySetVar(\"p\"+p+\"lightningBalls\", \"inWall\", 1);");
code("ySetVar(\"p\"+p+\"lightningBalls\", \"inWallTimeout\", trTimeMS() + 300);");
code("amt = 0.5 * trQuestVarGet(\"rideLightningDamage\") * trQuestVarGet(\"p\"+p+\"spellDamage\");");
code("ySetVar(\"p\"+p+\"lightningBalls\", \"damage\", amt + yGetVar(\"p\"+p+\"lightningBalls\", \"damage\"));");
code("lightningBallBounce(p);");
code("refreshRideLightningTargets(p);");
code("} else {");
code("ySetVarFromVector(\"p\"+p+\"lightningBalls\", \"lastGood\", \"pos\");");
code("}");
code("} else if (terrainIsType(\"loc\", TERRAIN_WALL, TERRAIN_SUB_WALL) == false) {");
code("ySetVar(\"p\"+p+\"lightningBalls\", \"inWall\", 0);");
code("} else if (trTimeMS() > yGetVar(\"p\"+p+\"lightningBalls\", \"inWallTimeout\")) {");
code("ySetVar(\"p\"+p+\"lightningBalls\", \"inWallTimeout\", trTimeMS() + 300);");
code("yVarToVector(\"p\"+p+\"lightningBalls\", \"lastGood\");");
code("trVectorQuestVarSet(\"dir\", zGetUnitVector(\"pos\", \"lastGood\"));");
code("ySetVarFromVector(\"p\"+p+\"lightningBalls\", \"dir\", \"dir\");");
code("lightningBallBounce(p);");
code("}");
code("if (trQuestVarGet(\"posY\") < (0.5 + worldHeight) && yGetVar(\"p\"+p+\"lightningBalls\", \"yeehaw\") == 0) {");
code("lightningBallBounce(p);");
code("}");

code("dist = xsPow(trQuestVarGet(\"p\"+p+\"rideLightningRange\"), 2);");
code("for(x=yGetDatabaseCount(\"p\"+p+\"rideLightningTargets\"); >0) {");
code("id = yDatabaseNext(\"p\"+p+\"rideLightningTargets\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("yRemoveFromDatabase(\"p\"+p+\"rideLightningTargets\");");
code("} else if (zDistanceToVectorSquared(\"p\"+p+\"rideLightningTargets\", \"pos\") < dist) {");
code("trQuestVarSetFromRand(\"sound\", 1, 5, true);");
code("if (trUnitVisToPlayer()) {");
code("trSoundPlayFN(\"lightningstrike\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("}");
code("ySetPointer(\"enemies\", 1*yGetVar(\"p\"+p+\"rideLightningTargets\", \"index\"));");
code("trUnitHighlight(0.5, false);");
code("damageEnemy(p, yGetVar(\"p\"+p+\"lightningBalls\", \"damage\"), true);");
code("yRemoveFromDatabase(\"p\"+p+\"rideLightningTargets\");");
code("}");
code("}");
code("}");
code("}");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"rideLightningNext\")) {");
code("trQuestVarSet(\"p\"+p+\"rideLightningNext\",");
code("trQuestVarGet(\"p\"+p+\"rideLightningNext\") + trQuestVarGet(\"rideLightningDelay\") / trQuestVarGet(\"p\"+p+\"ultimateCost\"));");
code("trPlayerGrantResources(p, \"favor\", -1);");
code("if (trPlayerResourceCount(p, \"favor\") < 1) {");
code("trQuestVarSet(\"p\"+p+\"rideLightning\", 0);");
code("trSoundPlayFN(\"godpowerfailed.wav\",\"1\",-1,\"\",\"\");");
code("rideLightningOff(p);");
code("}");
code("}");
code("}");


code("if (trQuestVarGet(\"p\"+p+\"wellStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"wellStatus\", ABILITY_OFF);");
code("vectorSnapToGrid(\"p\"+p+\"wellPos\");");
code("posX = trQuestVarGet(\"p\"+p+\"wellPosx\");");
code("posZ = trQuestVarGet(\"p\"+p+\"wellPosz\");");
code("trSoundPlayFN(\"lightningstrike3.wav\", \"1\", -1, \"\",\"\");");
code("if (trQuestVarGet(\"p\"+p+\"rideLightning\") == 0) {");
code("for(x=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("id = yDatabaseNext(\"p\"+p+\"characters\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeThunderRider(p);");
code("} else {");
code("trVectorSetUnitPos(\"pos\", \"p\"+p+\"characters\");");
code("target = 1 + xsMin(trQuestVarGet(\"blitzRange\") * trQuestVarGet(\"p\"+p+\"spellRange\"),");
code("zDistanceBetweenVectors(\"pos\", \"p\"+p+\"wellPos\")) / 2;");
code("trVectorQuestVarSet(\"step\", zGetUnitVector(\"pos\", \"p\"+p+\"wellPos\"));");
code("for(i=target; >0) {");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("yAddToDatabase(\"p\"+p+\"blitzSFX\", \"next\");");
code("trArmyDispatch(\"\"+p+\",0\", \"Dwarf\", 1, trQuestVarGet(\"posX\"), 0, trQuestVarGet(\"posZ\"), 0, true);");
code("trArmySelect(\"\"+p+\",0\");");
code("trUnitChangeProtoUnit(\"Victory Marker\");");
code("trQuestVarSet(\"posx\", trQuestVarGet(\"posx\") + 2.0 * trQuestVarGet(\"stepx\"));");
code("trQuestVarSet(\"posz\", trQuestVarGet(\"posz\") + 2.0 * trQuestVarGet(\"stepz\"));");
code("vectorToGrid(\"pos\", \"loc\");");
code("if (terrainIsType(\"loc\", TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("break;");
code("}");
code("}");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\", \"Transport Ship Greek\", 1, trQuestVarGet(\"posX\"),0,trQuestVarGet(\"posZ\"),0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"characters\");");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"next\"));");
code("trMutateSelected(kbGetProtoUnitID(\"Siege Tower\"));");
code("trUnitChangeProtoUnit(\"Hero Greek Atalanta\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"characters\");");
code("trSetUnitOrientation(trVectorQuestVarGet(\"step\"), vector(0,1,0), true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitChangeProtoUnit(\"Lightning Sparks\");");
code("}");
code("}");
code("for(x=yGetDatabaseCount(\"p\"+p+\"relics\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"relics\", true);");
code("trUnitChangeProtoUnit(\"Relic\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"relics\");");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"p\"+p+\"unit\"));");
code("trMutateSelected(relicProto(1*yGetVar(\"p\"+p+\"relics\", \"type\")));");
code("if (yGetVar(\"p\"+p+\"relics\", \"type\") < RELIC_KEY_GREEK) {");
code("trSetSelectedScale(0,0,-1);");
code("trUnitSetAnimationPath(\"1,0,1,1,0,0,0\");");
code("}");
code("}");
code("} else {");
code("for(x=yGetDatabaseCount(\"p\"+p+\"lightningBalls\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"lightningBalls\");");
code("trVectorSetUnitPos(\"pos\", \"p\"+p+\"lightningBalls\");");
code("trVectorQuestVarSet(\"dir\", zGetUnitVector(\"pos\", \"p\"+p+\"wellPos\"));");
code("ySetVarFromVector(\"p\"+p+\"lightningBalls\", \"dir\", \"dir\");");
code("lightningBallBounce(p);");
code("}");
code("refreshRideLightningTargets(p);");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"rainStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"rainStatus\", ABILITY_OFF);");
code("trSoundPlayFN(\"suckup1.wav\",\"1\",-1,\"\",\"\");");
code("for(x=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"characters\", true);");
code("trUnitHighlight(0.5, false);");
code("healUnit(p, trQuestVarGet(\"p\"+p+\"thunderRiderBonus\"), 1*yGetVar(\"p\"+p+\"characters\", \"index\"));");
code("trVectorSetUnitPos(\"pos\", \"p\"+p+\"characters\");");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,trQuestVarGet(\"posx\"),0,trQuestVarGet(\"posz\"),0,true);");
code("trArmySelect(\"\"+p+\",0\");");
code("trUnitChangeProtoUnit(\"Regeneration SFX\");");
code("}");
code("trPlayerGrantResources(p, \"favor\", 0.1 * trQuestVarGet(\"p\"+p+\"thunderRiderBonus\"));");
code("trQuestVarSet(\"p\"+p+\"thunderRiderBonus\", 0);");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"lureStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"lureStatus\", ABILITY_OFF);");
code("trVectorSetUnitPos(\"end\", \"p\"+p+\"lureObject\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"lureObject\", true);");
code("trUnitDestroy();");
code("trQuestVarSet(\"p\"+p+\"rideLightning\", 1 - trQuestVarGet(\"p\"+p+\"rideLightning\"));");
code("if (trQuestVarGet(\"p\"+p+\"rideLightning\") == 1) {");
code("if (trPlayerResourceCount(p, \"favor\") < 1) {");
code("if (trCurrentPlayer() == p) {");
code("trSoundPlayFN(\"cantdothat.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("trQuestVarSet(\"p\"+p+\"rideLightning\", 0);");
code("} else {");
code("refreshRideLightningTargets(p);");
code("trQuestVarSet(\"p\"+p+\"rideLightningNext\",");
code("trTimeMS() + trQuestVarGet(\"rideLightningDelay\") * trQuestVarGet(\"p\"+p+\"ultimateCost\"));");
code("trSoundPlayFN(\"lightningbirth.wav\",\"1\",-1,\"\",\"\");");
code("zSetProtoUnitStat(\"Attack Revealer\", p, 2, trQuestVarGet(\"p\"+p+\"los\"));");
code("zSetProtoUnitStat(\"Kronny Flying\", p, 1, 2.0 * trQuestVarGet(\"p\"+p+\"speed\"));");
code("trQuestVarSet(\"p\"+p+\"rideLightningRange\",");
code("trQuestVarGet(\"rideLightningRange\") * trQuestVarGet(\"p\"+p+\"spellRange\"));");
code("for(x=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("id = yDatabaseNext(\"p\"+p+\"characters\");");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeThunderRider(p);");
code("} else {");
code("trVectorSetUnitPos(\"start\", \"p\"+p+\"characters\");");
code("trVectorQuestVarSet(\"dir\", zGetUnitVector(\"start\", \"end\"));");
code("trQuestVarSet(\"heading\", 180.0 / 3.141592 * angleBetweenVectors(\"start\", \"end\"));");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("ySetVar(\"p\"+p+\"characters\", \"lightningIndex\", yAddToDatabase(\"p\"+p+\"lightningBalls\", \"next\"));");
code("yAddUpdateVar(\"p\"+p+\"lightningBalls\", \"dirX\", trQuestVarGet(\"dirX\"));");
code("yAddUpdateVar(\"p\"+p+\"lightningBalls\", \"dirZ\", trQuestVarGet(\"dirZ\"));");
code("yAddUpdateVar(\"p\"+p+\"lightningBalls\", \"prevX\", trQuestVarGet(\"startX\"));");
code("yAddUpdateVar(\"p\"+p+\"lightningBalls\", \"prevZ\", trQuestVarGet(\"startZ\"));");
code("yAddUpdateVar(\"p\"+p+\"lightningBalls\", \"damage\",");
code("trQuestVarGet(\"rideLightningDamage\") * trQuestVarGet(\"p\"+p+\"spellDamage\"));");
code("yAddUpdateVar(\"p\"+p+\"lightningBalls\", \"yeehaw\", 1);");
code("yAddUpdateVar(\"p\"+p+\"lightningBalls\", \"inWall\", 0);");

code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,trQuestVarGet(\"startx\"),0,trQuestVarGet(\"startz\"),0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Kronny Flying\"));");
code("trSetUnitOrientation(trVectorQuestVarGet(\"dir\"), vector(0,1,0), true);");
code("trSetSelectedScale(0, -5, 0);");
code("trDamageUnitPercent(100);");

code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"characters\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");

code("ySetPointer(\"playerUnits\", 1*yGetVar(\"p\"+p+\"characters\", \"index\"));");
code("removePlayerUnit();");
code("}");
code("}");
code("}");
code("} else {");
code("if (trCurrentPlayer() == p) {");
code("trSoundPlayFN(\"godpowerfailed.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("rideLightningOff(p);");
code("}");
code("}");

code("int old = xsGetContextPlayer();");
code("xsSetContextPlayer(p);");

code("if (yGetDatabaseCount(\"p\"+p+\"characters\") > 0) {");
code("amt = 0.001 * (trTimeMS() - trQuestVarGet(\"p\"+p+\"thunderRiderBonusLast\"));");
code("amt = xsMax(amt, trQuestVarGet(\"p\"+p+\"thunderRiderBonus\") * amt * 0.1);");
code("trQuestVarSet(\"p\"+p+\"thunderRiderBonusLast\", trTimeMS());");
code("trQuestVarSet(\"p\"+p+\"thunderRiderBonus\", trQuestVarGet(\"p\"+p+\"thunderRiderBonus\") - amt);");
code("if (trQuestVarGet(\"p\"+p+\"rideLightning\") == 0) {");
code("id = yDatabaseNext(\"p\"+p+\"characters\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeThunderRider(p);");
code("} else {");
code("hit = CheckOnHit(p, id);");
code("if (hit == ON_HIT_SPECIAL) {");
code("yClearDatabase(\"p\"+p+\"thunderShockTargets\");");
code("target = kbUnitGetTargetUnitID(id);");
code("trQuestVarSet(\"target\", trGetUnitScenarioNameNumber(target));");
code("yAddToDatabase(\"p\"+p+\"thunderShocks\", \"target\");");
code("yAddUpdateVar(\"p\"+p+\"thunderShocks\", \"damage\", trQuestVarGet(\"p\"+p+\"attack\"));");
code("yAddUpdateVar(\"p\"+p+\"thunderShocks\", \"next\", trTimeMS() + 100);");
code("trVectorSetUnitPos(\"pos\", \"target\");");
code("yAddUpdateVar(\"p\"+p+\"thunderShocks\", \"posX\", trQuestVarGet(\"posX\"));");
code("yAddUpdateVar(\"p\"+p+\"thunderShocks\", \"posZ\", trQuestVarGet(\"posZ\"));");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,trQuestVarGet(\"posX\"),0,trQuestVarGet(\"posZ\"),0,true);");
code("trArmySelect(\"\"+p+\",0\");");
code("trUnitChangeProtoUnit(\"Lightning Sparks\");");
code("for(x=yGetDatabaseCount(\"enemies\"); >0) {");
code("id = yDatabaseNext(\"enemies\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeEnemy();");
code("} else {");
code("if ((id == target) == false) {");
code("yAddToDatabase(\"p\"+p+\"thunderShockTargets\", \"enemies\");");
code("yAddUpdateVar(\"p\"+p+\"thunderShockTargets\", \"index\", yGetPointer(\"enemies\"));");
code("}");
code("}");
code("}");
code("trQuestVarSetFromRand(\"sound\", 1, 4, true);");
code("trSoundPlayFN(\"lightningstrike\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("}");
code("yVarToVector(\"p\"+p+\"characters\", \"prev\");");
code("trVectorSetUnitPos(\"pos\", \"p\"+p+\"characters\");");
code("dist = zDistanceBetweenVectors(\"pos\", \"prev\");");
code("if (dist == 0) {");
code("trQuestVarSet(\"p\"+p+\"thunderRiderBonus\", trQuestVarGet(\"p\"+p+\"thunderRiderBonus\") - amt);");
code("} else {");
code("trQuestVarSet(\"p\"+p+\"thunderRiderBonus\",");
code("trQuestVarGet(\"p\"+p+\"thunderRiderBonus\") + dist * 0.1 * trQuestVarGet(\"p\"+p+\"baseAttack\"));");
code("ySetVarFromVector(\"p\"+p+\"characters\", \"prev\", \"pos\");");
code("}");
code("}");
code("}");
code("trQuestVarSet(\"p\"+p+\"thunderRiderBonus\", xsMax(0, trQuestVarGet(\"p\"+p+\"thunderRiderBonus\")));");
code("trQuestVarSet(\"p\"+p+\"attack\", trQuestVarGet(\"p\"+p+\"baseAttack\") + trQuestVarGet(\"p\"+p+\"thunderRiderBonus\"));");
code("zSetProtoUnitStat(\"Hero Greek Atalanta\", p, 27, trQuestVarGet(\"p\"+p+\"attack\"));");
code("}");

code("if (yGetDatabaseCount(\"p\"+p+\"thunderShocks\") > 0) {");
code("yDatabaseNext(\"p\"+p+\"thunderShocks\");");
code("if (trTimeMS() > yGetVar(\"p\"+p+\"thunderShocks\", \"next\")) {");
code("ySetVar(\"p\"+p+\"thunderShocks\", \"next\", 100 + yGetVar(\"p\"+p+\"thunderShocks\", \"next\"));");
code("yVarToVector(\"p\"+p+\"thunderShocks\", \"pos\");");
code("dist = 25;");
code("trQuestVarSet(\"temp\", -1);");
code("for(x=yGetDatabaseCount(\"p\"+p+\"thunderShockTargets\"); >0) {");
code("id = yDatabaseNext(\"p\"+p+\"thunderShockTargets\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("yRemoveFromDatabase(\"p\"+p+\"thunderShockTargets\");");
code("} else {");
code("amt = zDistanceToVectorSquared(\"p\"+p+\"thunderShockTargets\", \"pos\");");
code("if (amt < dist) {");
code("trQuestVarSet(\"temp\", yGetPointer(\"p\"+p+\"thunderShockTargets\"));");
code("}");
code("}");
code("}");
code("if (trQuestVarGet(\"temp\") == -1) {");
code("yRemoveFromDatabase(\"p\"+p+\"thunderShocks\");");
code("} else {");
code("ySetPointer(\"p\"+p+\"thunderShockTargets\", 1*trQuestVarGet(\"temp\"));");
code("ySetUnit(\"p\"+p+\"thunderShocks\", trQuestVarGet(\"p\"+p+\"thunderShockTargets\"));");

code("ySetPointer(\"enemies\", 1*yGetVar(\"p\"+p+\"thunderShockTargets\", \"index\"));");
code("yRemoveFromDatabase(\"p\"+p+\"thunderShockTargets\");");

code("trVectorSetUnitPos(\"pos\", \"enemies\");");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,trQuestVarGet(\"posX\"),0,trQuestVarGet(\"posZ\"),0,true);");
code("trArmySelect(\"\"+p+\",0\");");
code("trUnitChangeProtoUnit(\"Lightning Sparks Ground\");");
code("ySetVarFromVector(\"p\"+p+\"thunderShocks\", \"pos\", \"pos\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"enemies\");");
code("trUnitHighlight(0.2, false);");
code("damageEnemy(p, yGetVar(\"p\"+p+\"thunderShocks\", \"damage\"), false);");
code("}");
code("}");
code("}");

code("xsSetContextPlayer(old);");
code("}");

code("void chooseThunderRider(int eventID = -1) {");
code("int p = eventID - 1000 - 12 * THUNDERRIDER;");
code("if (trCurrentPlayer() == p) {");
code("map(\"q\", \"game\", \"uiSetSpecialPower(133) uiSpecialPowerAtPointer\");");
code("wellName = \"(Q) Blitz\";");
code("wellIsUltimate = false;");
code("map(\"w\", \"game\", \"uiSetSpecialPower(156) uiSpecialPowerAtPointer\");");
code("rainName = \"(W) Recharge\";");
code("rainIsUltimate = false;");
code("map(\"e\", \"game\", \"uiSetSpecialPower(227) uiSpecialPowerAtPointer\");");
code("lureName = \"(E) Ride The Lightning\";");
code("lureIsUltimate = false;");
code("}");
code("trQuestVarSet(\"p\"+p+\"wellCooldown\", trQuestVarGet(\"blitzCooldown\"));");
code("trQuestVarSet(\"p\"+p+\"wellCost\", 0);");
code("trQuestVarSet(\"p\"+p+\"lureCooldown\", 1);");
code("trQuestVarSet(\"p\"+p+\"lureCost\", 0);");
code("trQuestVarSet(\"p\"+p+\"rainCooldown\", trQuestVarGet(\"rechargeCooldown\"));");
code("trQuestVarSet(\"p\"+p+\"rainCost\", 0);");
code("}");

code("rule thunderRider_init");
code("active");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("for(p=1; < ENEMY_PLAYER) {");
code("trEventSetHandler(12 * THUNDERRIDER + p, \"thunderRiderAlways\");");
code("trEventSetHandler(1000 + 12 * THUNDERRIDER + p, \"chooseThunderRider\");");
code("}");

code("trQuestVarSet(\"blitzCooldown\", 8);");
code("trQuestVarSet(\"blitzRange\", 12);");
code("trQuestVarSet(\"blitzDamage\", 50);");

code("trQuestVarSet(\"rechargeCooldown\", 22);");

code("trQuestVarSet(\"rideLightningDamage\", 100);");
code("trQuestVarSet(\"rideLightningRange\", 5);");
code("trQuestVarSet(\"rideLightningCost\", 8);");
code("trQuestVarSet(\"rideLightningDelay\", 1000 / trQuestVarGet(\"rideLightningCost\"));");
code("}");
code("void removeFireKnight(int p = 0) {");
code("removePlayerSpecific(p);");
code("yRemoveUpdateVar(\"p\"+p+\"characters\", \"phoenix\");");
code("}");

code("void fireknightAlways(int eventID = -1) {");
code("int p = eventID - 12 * FIREKNIGHT;");
code("int id = 0;");
code("int hit = 0;");
code("int target = 0;");
code("float amt = 0;");
code("float dist = 0;");
code("float current = 0;");
code("int old = xsGetContextPlayer();");
code("xsSetContextPlayer(p);");

code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"unit\");");
code("if (trUnitAlive()) {");
code("amt = 0.01 * trUnitPercentDamaged();");
code("}");

code("trQuestVarSet(\"p\"+p+\"spellLifesteal\",");
code("trQuestVarGet(\"p\"+p+\"spellLifesteal\") + amt - trQuestVarGet(\"p\"+p+\"fireknightBonus\"));");
code("trQuestVarSet(\"p\"+p+\"fireknightBonus\", amt);");

code("if (yGetDatabaseCount(\"p\"+p+\"fireharpies\") > 0) {");
code("for (x=yGetDatabaseCount(\"p\"+p+\"fireharpies\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"fireharpies\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Harpy\"));");
code("trUnitOverrideAnimation(1,0,false,false,-1);");
code("}");
code("yClearDatabase(\"p\"+p+\"fireharpies\");");
code("}");

code("if (yGetDatabaseCount(\"p\"+p+\"fireCharges\") > 0) {");
code("yDatabaseNext(\"p\"+p+\"fireCharges\");");
code("trVectorSetUnitPos(\"pos\", \"p\"+p+\"fireCharges\");");
code("yVarToVector(\"p\"+p+\"fireCharges\", \"dest\");");
code("if (zDistanceBetweenVectorsSquared(\"pos\", \"dest\") < 4 || trTimeMS() > yGetVar(\"p\"+p+\"fireCharges\", \"timeout\")) {");
code("ySetPointer(\"p\"+p+\"characters\", 1*yGetVar(\"p\"+p+\"fireCharges\", \"index\"));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"characters\");");
code("trUnitChangeProtoUnit(\"Lancer Hero\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"characters\");");
code("trMutateSelected(kbGetProtoUnitID(\"Lancer Hero\"));");

code("if (trQuestVarGet(\"p\"+p+\"characters\") == trQuestVarGet(\"p\"+p+\"unit\")) {");
code("for(x=yGetDatabaseCount(\"p\"+p+\"relics\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"relics\", true);");
code("trUnitChangeProtoUnit(\"Relic\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"relics\");");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"p\"+p+\"unit\"));");
code("trMutateSelected(relicProto(1*yGetVar(\"p\"+p+\"relics\", \"type\")));");
code("if (yGetVar(\"p\"+p+\"relics\", \"type\") < RELIC_KEY_GREEK) {");
code("trSetSelectedScale(0,0,-1);");
code("trUnitSetAnimationPath(\"1,0,1,1,0,0,0\");");
code("}");
code("}");
code("}");

code("zSetProtoUnitStat(\"Kronny Flying\", p, 1, 0.01);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"p\"+p+\"fireCharges\", \"sfx\"), true);");
code("trUnitChangeProtoUnit(\"Kronny Flying\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"p\"+p+\"fireCharges\", \"sfx\"), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Kronny Flying\"));");
code("trSetSelectedScale(0,-5.0,0);");
code("trDamageUnitPercent(100);");
code("trQuestVarSet(\"next\", yGetVar(\"p\"+p+\"fireCharges\", \"sfx\"));");
code("yAddToDatabase(\"p\"+p+\"fireHarpies\", \"next\");");

code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"fireCharges\");");
code("trDamageUnitPercent(100);");
code("trUnitChangeProtoUnit(\"Meteorite\");");
code("yRemoveFromDatabase(\"p\"+p+\"fireCharges\");");
code("amt = trQuestVarGet(\"flamingImpactDamage\") * trQuestVarGet(\"p\"+p+\"spellDamage\");");
code("dist = xsPow(trQuestVarGet(\"flamingImpactRange\") * trQuestVarGet(\"p\"+p+\"spellRange\") * 2, 2);");
code("for(x=yGetDatabaseCount(\"enemies\"); >0) {");
code("id = yDatabaseNext(\"enemies\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (zDistanceToVectorSquared(\"enemies\", \"pos\") < dist) {");
code("damageEnemy(p, amt, true);");
code("trPlayerGrantResources(p, \"favor\", 2);");
code("}");
code("}");
code("trSoundPlayFN(\"meteordustcloud.wav\",\"1\",-1,\"\",\"\");");
code("} else {");
code("dist = xsPow(trQuestVarGet(\"flamingImpactRange\") * trQuestVarGet(\"p\"+p+\"spellRange\"), 2);");
code("for(x=yGetDatabaseCount(\"enemies\"); >0) {");
code("id = yDatabaseNext(\"enemies\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (zDistanceToVectorSquared(\"enemies\", \"pos\") < dist &&");
code("yGetVar(\"enemies\", \"launched\") == 0) {");
code("trVectorSetUnitPos(\"end\", \"enemies\");");
code("trQuestVarSet(\"endX\", trQuestVarGet(\"endX\") - trQuestVarGet(\"posX\") + trQuestVarGet(\"destX\"));");
code("trQuestVarSet(\"endZ\", trQuestVarGet(\"endZ\") - trQuestVarGet(\"posZ\") + trQuestVarGet(\"destZ\"));");
code("launchUnit(\"enemies\", \"end\");");
code("}");
code("}");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"wellStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"wellStatus\", ABILITY_OFF);");
code("trSoundPlayFN(\"nidhoggflame1.wav\",\"1\",-1,\"\",\"\");");
code("for(x=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("id = yDatabaseNext(\"p\"+p+\"characters\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeFireKnight();");
code("} else {");
code("trVectorSetUnitPos(\"pos\", \"p\"+p+\"characters\");");
code("trVectorQuestVarSet(\"dir\", zGetUnitVector(\"pos\", \"p\"+p+\"wellPos\"));");
code("trMutateSelected(kbGetProtoUnitID(\"Transport Ship Greek\"));");

code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,1,0,1,0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"p\"+p+\"characters\"));");
code("trUnitChangeProtoUnit(\"Dwarf\");");

code("trModifyProtounit(\"Hero Greek Achilles\",p,5,2);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Hero Greek Achilles\"));");
code("trSetUnitOrientation(trVectorQuestVarGet(\"dir\"), vector(0,1,0), true);");

code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"characters\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Lancer Hero\"));");
code("trUnitOverrideAnimation(15,0,true,false,-1);");
code("trMutateSelected(kbGetProtoUnitID(\"Relic\"));");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"next\"));");
code("trMutateSelected(kbGetProtoUnitID(\"Lancer Hero\"));");

code("trQuestVarSet(\"sfx\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,1,0,1,0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"sfx\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Meteorite\"));");
code("trUnitOverrideAnimation(6,0,true,false,-1);");
code("trMutateSelected(kbGetProtoUnitID(\"Relic\"));");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"next\"));");
code("trMutateSelected(kbGetProtoUnitID(\"Meteorite\"));");

code("ySetVarAtIndex(\"playerUnits\", \"launched\", 1, 1*yGetVar(\"p\"+p+\"characters\", \"index\"));");

code("dist = zDistanceBetweenVectors(\"pos\", \"p\"+p+\"wellpos\");");
code("for(y=0; < dist / 2) {");
code("trQuestVarSet(\"nextx\", trQuestVarGet(\"posx\") + 2.0 * trQuestVarGet(\"dirx\"));");
code("trQuestVarSet(\"nextz\", trQuestVarGet(\"posz\") + 2.0 * trQuestVarGet(\"dirz\"));");
code("vectorToGrid(\"next\", \"loc\");");
code("if (terrainIsType(\"loc\", TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("break;");
code("} else {");
code("trQuestVarSet(\"posx\", trQuestVarGet(\"nextx\"));");
code("trQuestVarSet(\"posz\", trQuestVarGet(\"nextz\"));");
code("}");
code("}");

code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\");");
code("trMutateSelected(kbGetProtoUnitID(\"Wadjet Spit\"));");
code("trUnitMoveToPoint(trQuestVarGet(\"posx\"),0,trQuestVarGet(\"posz\"),-1,false);");
code("trModifyProtounit(\"Hero Greek Achilles\",p,5,-2);");

code("yAddToDatabase(\"p\"+p+\"fireCharges\", \"next\");");
code("yAddUpdateVar(\"p\"+p+\"fireCharges\", \"index\", yGetPointer(\"p\"+p+\"characters\"));");
code("yAddUpdateVar(\"p\"+p+\"fireCharges\", \"timeout\", trTimeMS() + 1100 * dist / 15);");
code("yAddUpdateVar(\"p\"+p+\"fireCharges\", \"sfx\", trQuestVarGet(\"sfx\"));");
code("yAddUpdateVar(\"p\"+p+\"fireCharges\", \"destX\", trQuestVarGet(\"posx\"));");
code("yAddUpdateVar(\"p\"+p+\"fireCharges\", \"destZ\", trQuestVarGet(\"posz\"));");
code("}");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"rainStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"rainStatus\", ABILITY_OFF);");
code("trSoundPlayFN(\"firegiantdie.wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSet(\"p\"+p+\"overheat\", 1);");
code("trQuestVarSet(\"p\"+p+\"overheatTimeout\",");
code("trTimeMS() + 1000 * trQuestVarGet(\"overheatDuration\") * trQuestVarGet(\"p\"+p+\"spellDuration\"));");
code("for(x=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("id = yDatabaseNext(\"p\"+p+\"characters\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeFireKnight();");
code("} else {");
code("if (yGetVar(\"p\"+p+\"characters\", \"phoenix\") == 0) {");
code("spyEffect(1*trQuestVarGet(\"p\"+p+\"characters\"),");
code("kbGetProtoUnitID(\"Phoenix\"), yGetVarName(\"p\"+p+\"characters\", \"phoenix\"));");
code("} else {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"p\"+p+\"characters\", \"phoenix\"));");
code("trMutateSelected(kbGetProtoUnitID(\"Phoenix\"));");
code("}");
code("ySetVar(\"p\"+p+\"characters\", \"overheatNext\", trTimeMS());");
code("}");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"lureStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"lureStatus\", ABILITY_OFF);");
code("trPlayerGrantResources(p, \"favor\", 0 - trQuestVarGet(\"infernoCost\") * trQuestVarGet(\"p\"+p+\"ultimateCost\"));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"lureObject\", true);");
code("trUnitDestroy();");
code("trSoundPlayFN(\"forestfirebirth.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"flamingweapons.wav\",\"1\",-1,\"\",\"\");");
code("zSetProtoUnitStat(\"Ball of Fire Impact\", p, 8, trQuestVarGet(\"p\"+p+\"spellDuration\") * trQuestVarGet(\"infernoDuration\"));");
code("for(x=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("id = yDatabaseNext(\"p\"+p+\"characters\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeFireKnight();");
code("} else {");
code("trVectorSetUnitPos(\"pos\", \"p\"+p+\"characters\");");
code("yAddToDatabase(\"p\"+p+\"inferno\", \"p\"+p+\"characters\");");
code("yAddUpdateVar(\"p\"+p+\"inferno\", \"posx\", trQuestVarGet(\"posX\"));");
code("yAddUpdateVar(\"p\"+p+\"inferno\", \"posz\", trQuestVarGet(\"posZ\"));");
code("yAddUpdateVar(\"p\"+p+\"inferno\", \"radius\", 0);");
code("yAddUpdateVar(\"p\"+p+\"inferno\", \"damage\", trQuestVarGet(\"infernoDamage\") * trQuestVarGet(\"p\"+p+\"spellDamage\"));");
code("yAddUpdateVar(\"p\"+p+\"inferno\", \"maxradius\", trQuestVarGet(\"infernoRange\") * trQuestVarGet(\"p\"+p+\"spellRange\"));");
code("yAddUpdateVar(\"p\"+p+\"inferno\", \"next\", trTimeMS());");
code("yAddUpdateVar(\"p\"+p+\"inferno\", \"timeout\",");
code("trTimeMS() + 1000 * trQuestVarGet(\"infernoDuration\") * trQuestVarGet(\"p\"+p+\"spellDuration\"));");
code("}");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"overheat\") == 1) {");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"overheatTimeout\")) {");
code("trQuestVarSet(\"p\"+p+\"overheat\", 0);");
code("for(x=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("id = yDatabaseNext(\"p\"+p+\"characters\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeFireKnight();");
code("} else {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"p\"+p+\"characters\", \"phoenix\"));");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");
code("}");
code("}");
code("}");
code("}");

code("if (yGetDatabaseCount(\"p\"+p+\"characters\") > 0) {");
code("id = yDatabaseNext(\"p\"+p+\"characters\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeFireKnight(p);");
code("} else {");
code("amt = 0;");
code("trVectorSetUnitPos(\"pos\", \"p\"+p+\"characters\");");
code("hit = CheckOnHit(p, id);");
code("if (hit == ON_HIT_SPECIAL) {");
code("damagePlayerUnit(80.0 * trQuestVarGet(\"p\"+p+\"spellDamage\"), 1*yGetVar(\"p\"+p+\"characters\", \"index\"));");

code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"posX\"),0,trQuestVarGet(\"posZ\"),0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trDamageUnitPercent(100);");
code("trUnitChangeProtoUnit(\"Meteorite\");");
code("amt = 80.0 * trQuestVarGet(\"p\"+p+\"spellDamage\");");
code("}");
code("current = kbUnitGetCurrentHitpoints(id);");
code("if (trQuestVarGet(\"p\"+p+\"overheat\") == 1) {");
code("if (trTimeMS() > yGetVar(\"p\"+p+\"characters\", \"overheatNext\")) {");
code("ySetVar(\"p\"+p+\"characters\", \"overheatNext\", yGetVar(\"p\"+p+\"characters\", \"overheatNext\") + 500);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"characters\");");
code("damagePlayerUnit(trQuestVarGet(\"overheatDamage\") * trQuestVarGet(\"p\"+p+\"spellDamage\") * 0.5,");
code("1*yGetVar(\"p\"+p+\"characters\",\"index\"));");
code("current = kbUnitGetCurrentHitpoints(id);");
code("}");
code("amt = amt + xsMax(0, yGetVar(\"p\"+p+\"characters\", \"health\") - current);");
code("}");
code("ySetVar(\"p\"+p+\"characters\", \"health\", current);");
code("dist = xsPow(trQuestVarGet(\"overheatRadius\") * trQuestVarGet(\"p\"+p+\"spellRange\"), 2);");
code("for(x=yGetDatabaseCount(\"enemies\"); >0) {");
code("id = yDatabaseNext(\"enemies\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (zDistanceToVectorSquared(\"enemies\", \"pos\") < dist) {");
code("damageEnemy(p, amt * trQuestVarGet(\"p\"+p+\"spellDamage\"), true);");
code("}");
code("}");
code("}");
code("}");

code("if (yGetDatabaseCount(\"p\"+p+\"inferno\") >0) {");
code("yDatabaseNext(\"p\"+p+\"inferno\");");
code("if (trTimeMS() > yGetVar(\"p\"+p+\"inferno\", \"next\")) {");
code("ySetVar(\"p\"+p+\"inferno\", \"next\", yGetVar(\"p\"+p+\"inferno\", \"next\") + 300);");
code("yVarToVector(\"p\"+p+\"inferno\", \"pos\");");
code("if (yGetVar(\"p\"+p+\"inferno\", \"radius\") < yGetVar(\"p\"+p+\"inferno\", \"maxradius\")) {");
code("ySetVar(\"p\"+p+\"inferno\", \"radius\", 2 + yGetVar(\"p\"+p+\"inferno\", \"radius\"));");
code("trQuestVarSetFromRand(\"angle\", 0, 3.141592, false);");
code("hit = 1.5 * yGetVar(\"p\"+p+\"inferno\", \"radius\");");
code("amt = 6.283185 / hit;");
code("for(x=hit; >0) {");
code("trQuestVarSet(\"angle\", fModulo(6.283185, trQuestVarGet(\"angle\") + amt));");
code("trVectorSetFromAngle(\"dir\", trQuestVarGet(\"angle\"));");
code("trQuestVarSet(\"dirX\", yGetVar(\"p\"+p+\"inferno\",\"radius\") * trQuestVarGet(\"dirX\") + trQuestVarGet(\"posX\"));");
code("trQuestVarSet(\"dirZ\", yGetVar(\"p\"+p+\"inferno\",\"radius\") * trQuestVarGet(\"dirZ\") + trQuestVarGet(\"posZ\"));");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,trQuestVarGet(\"dirX\"),0,trQuestVarGet(\"dirZ\"),0,true);");
code("trArmySelect(\"\"+p+\",0\");");
code("trUnitChangeProtoUnit(\"Ball of Fire Impact\");");
code("}");
code("}");
code("amt = yGetVar(\"p\"+p+\"inferno\", \"damage\") * 0.3;");
code("dist = xsPow(yGetVar(\"p\"+p+\"inferno\", \"radius\"), 2);");
code("for(x=yGetDatabaseCount(\"enemies\"); >0) {");
code("id = yDatabaseNext(\"enemies\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (zDistanceToVectorSquared(\"enemies\", \"pos\") < dist) {");
code("damageEnemy(p, amt);");
code("}");
code("}");
code("for(x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("id = yDatabaseNext(\"playerUnits\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (zDistanceToVectorSquared(\"playerUnits\", \"pos\") < dist) {");
code("healUnit(p, amt * 0.5);");
code("}");
code("}");
code("}");
code("if (trTimeMS() > yGetVar(\"p\"+p+\"inferno\", \"timeout\")) {");
code("yRemoveFromDatabase(\"p\"+p+\"inferno\");");
code("}");
code("}");

code("xsSetContextPlayer(old);");
code("}");

code("void chooseFireKnight(int eventID = -1) {");
code("int p = eventID - 1000 - 12 * FIREKNIGHT;");
code("if (trCurrentPlayer() == p) {");
code("map(\"q\", \"game\", \"uiSetSpecialPower(133) uiSpecialPowerAtPointer\");");
code("wellName = \"(Q) Flaming Impact\";");
code("wellIsUltimate = false;");
code("map(\"w\", \"game\", \"uiSetSpecialPower(156) uiSpecialPowerAtPointer\");");
code("rainName = \"(W) Overheat\";");
code("rainIsUltimate = false;");
code("map(\"e\", \"game\", \"uiSetSpecialPower(227) uiSpecialPowerAtPointer\");");
code("lureName = \"(E) Inferno\";");
code("lureIsUltimate = true;");
code("}");
code("trQuestVarSet(\"p\"+p+\"wellCooldown\", trQuestVarGet(\"flamingImpactCooldown\"));");
code("trQuestVarSet(\"p\"+p+\"wellCost\", 0);");
code("trQuestVarSet(\"p\"+p+\"lureCooldown\", 1);");
code("trQuestVarSet(\"p\"+p+\"lureCost\", trQuestVarGet(\"infernoCost\"));");
code("trQuestVarSet(\"p\"+p+\"rainCooldown\", trQuestVarGet(\"overheatCooldown\"));");
code("trQuestVarSet(\"p\"+p+\"rainCost\", 0);");
code("}");

code("rule fireknight_init");
code("active");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("for(p=1; < ENEMY_PLAYER) {");
code("trEventSetHandler(12 * FIREKNIGHT + p, \"fireknightAlways\");");
code("trEventSetHandler(1000 + 12 * FIREKNIGHT + p, \"chooseFireKnight\");");
code("}");

code("trQuestVarSet(\"flamingImpactCooldown\", 12);");
code("trQuestVarSet(\"flamingImpactDamage\", 100);");
code("trQuestVarSet(\"flamingImpactRange\", 4);");

code("trQuestVarSet(\"overheatCooldown\", 14);");
code("trQuestVarSet(\"overheatDuration\", 5);");
code("trQuestVarSet(\"overheatDamage\", 40);");
code("trQuestVarSet(\"overheatRadius\", 4);");

code("trQuestVarSet(\"infernoDuration\", 8);");
code("trQuestVarSet(\"infernoRange\", 12);");
code("trQuestVarSet(\"infernoDamage\", 120);");
code("trQuestVarSet(\"infernoHeal\", 60);");
code("trQuestVarSet(\"infernoCost\", 60);");
code("}");
code("void setupProtounitBounty(string proto = \"\", int bounty = 2, float relicChance = 0, int relic = -1) {");
code("int p = kbGetProtoUnitID(proto);");
code("trQuestVarSet(\"proto\"+p+\"bounty\", bounty);");
code("trQuestVarSet(\"proto\"+p+\"relicChance\", relicChance);");
code("trQuestVarSet(\"proto\"+p+\"relic\", relic);");
code("trModifyProtounit(proto, ENEMY_PLAYER, 24, -1);");
code("trModifyProtounit(proto, ENEMY_PLAYER, 25, -1);");
code("trModifyProtounit(proto, ENEMY_PLAYER, 26, -1);");
code("trModifyProtounit(proto, 1, 24, -1);");
code("trModifyProtounit(proto, 1, 25, -1);");
code("trModifyProtounit(proto, 1, 26, -1);");
code("trModifyProtounit(proto, ENEMY_PLAYER, 6, 10);");
code("trModifyProtounit(proto, 1, 6, 10);");
code("}");

code("void activateEnemy(int id = 0) {");
code("int proto = kbGetUnitBaseTypeID(id);");
code("int bounty = trQuestVarGet(\"proto\"+proto+\"bounty\");");
code("int relic = 0;");
code("trQuestVarSetFromRand(\"relicChance\", 0, 1, false);");
code("if (trQuestVarGet(\"relicChance\") < trQuestVarGet(\"proto\"+proto+\"relicChance\")) {");
code("relic = trQuestVarGet(\"proto\"+proto+\"relic\");");
code("if (relic == -1) {");
code("relic = trQuestVarGet(\"stage\");");
code("}");
code("}");

code("yAddToDatabase(\"enemies\", \"enemiesIncoming\");");
code("trQuestVarSetFromRand(\"bounty\", bounty / 2, bounty, true);");
code("yAddUpdateVar(\"enemies\", \"bounty\", trQuestVarGet(\"bounty\"));");
code("yAddUpdateVar(\"enemies\", \"relic\", relic);");
code("for(p=1; < ENEMY_PLAYER) {");
code("if (trQuestVarGet(\"p\"+p+\"rideLightning\") == 1) {");
code("yAddToDatabase(\"p\"+p+\"rideLightningTargets\", \"enemiesIncoming\");");
code("yAddUpdateVar(\"p\"+p+\"rideLightningTargets\", \"index\", yGetNewestPointer(\"enemies\"));");
code("}");
code("}");

code("switch(proto)");
code("{");
code("case kbGetProtoUnitID(\"Sphinx\"):");
code("{");
code("yAddToDatabase(\"Sphinxes\", \"enemiesIncoming\");");
code("}");
code("case kbGetProtoUnitID(\"Dryad\"):");
code("{");
code("yAddToDatabase(\"Dryads\", \"enemiesIncoming\");");
code("}");
code("case kbGetProtoUnitID(\"Medusa\"):");
code("{");
code("yAddToDatabase(\"Medusas\", \"enemiesIncoming\");");
code("}");
code("case kbGetProtoUnitID(\"Mountain Giant\"):");
code("{");
code("yAddToDatabase(\"MountainGiants\", \"enemiesIncoming\");");
code("yAddUpdateVar(\"MountainGiants\", \"index\", yGetNewestPointer(\"enemies\"));");
code("}");
code("}");

code("yRemoveFromDatabase(\"enemiesIncoming\");");
code("}");

code("rule setup_enemies");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime) {");
code("trModifyProtounit(\"Minion\", ENEMY_PLAYER, 8, -99);");
code("trModifyProtounit(\"Minion\", 1, 8, -99);");

code("setupProtounitBounty(\"Golden Lion\", 4);");
code("setupProtounitBounty(\"Anubite\", 6, 0.03);");
code("setupProtounitBounty(\"Terracotta Soldier\", 6, 0.03);");
code("setupProtounitBounty(\"Sphinx\", 8, 0.05);");
code("setupProtounitBounty(\"Petsuchos\", 8, 0.1, RELIC_ATTACK_RANGE);");

code("setupProtounitBounty(\"Minion\", 4);");
code("setupProtounitBounty(\"Walking Woods Marsh\", 5);");
code("setupProtounitBounty(\"Dryad\", 7, 0.03);");
code("setupProtounitBounty(\"Centaur\", 6, 0.03);");
code("setupProtounitBounty(\"Medusa\", 14, 0.15, RELIC_SPELL_DURATION);");
code("setupProtounitBounty(\"Mountain Giant\", 12, 0.1);");

code("xsDisableSelf();");
code("}");
code("}");

code("void enemiesAlways() {");
code("int old = xsGetContextPlayer();");
code("int proto = 0;");
code("int id = 0;");
code("int target = 0;");
code("int action = 0;");
code("float amt = 0;");
code("float angle = 0;");
code("string pName = \"\";");
code("id = yDatabaseNext(\"enemiesIncoming\", true);");
code("for(p=1; < ENEMY_PLAYER) {");
code("if (trUnitHasLOS(p)) {");
code("activateEnemy(id);");
code("break;");
code("}");
code("}");

code("xsSetContextPlayer(ENEMY_PLAYER);");
code("while(trQuestVarGet(\"nextProj\") < trGetNextUnitScenarioNameNumber()) {");
code("id = kbGetBlockID(\"\"+1*trQuestVarGet(\"nextProj\"), true);");
code("proto = kbGetUnitBaseTypeID(id);");
code("if ((proto == kbGetProtoUnitID(\"Sling Stone\")) ||");
code("(proto == kbGetProtoUnitID(\"Arrow Flaming\")) ||");
code("(proto == kbGetProtoUnitID(\"Javelin Flaming\")) ||");
code("(proto == kbGetProtoUnitID(\"Axe\"))) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"nextProj\");");
code("if (trUnitIsOwnedBy(ENEMY_PLAYER)) {");
code("}");
code("}");
code("trQuestVarSet(\"nextProj\", 1 + trQuestVarGet(\"nextProj\"));");
code("}");

code("if (yGetDatabaseCount(\"enemies\") > 0) {");
code("id = yDatabaseNext(\"enemies\", true);");
code("if ((id == -1) || (trUnitAlive() == false)) {");
code("removeEnemy();");
code("} else {");
code("stunsAndPoisons(\"enemies\");");
code("trVectorSetUnitPos(\"pos\", \"enemies\");");
code("ySetVar(\"enemies\", \"posX\", trQuestVarGet(\"posX\"));");
code("ySetVar(\"enemies\", \"posZ\", trQuestVarGet(\"posZ\"));");
code("}");
code("}");

code("if (yGetDatabaseCount(\"ambushRooms\") > 0) {");
code("yDatabaseNext(\"ambushRooms\");");
code("trQuestVarSet(\"posX\", yGetVar(\"ambushRooms\", \"posX\"));");
code("trQuestVarSet(\"posZ\", yGetVar(\"ambushRooms\", \"posZ\"));");
code("for(p=1; < ENEMY_PLAYER) {");
code("if (zDistanceToVectorSquared(\"p\"+p+\"unit\", \"pos\") < 100) {");
code("pName = trStringQuestVarGet(\"enemyProto\"+1*yGetVar(\"ambushRooms\", \"type\"));");
code("trQuestVarSetFromRand(\"count\", trQuestVarGet(\"stage\"), 11, true);");
code("angle = 6.283185 / trQuestVarGet(\"count\");");
code("amt = 0;");
code("trQuestVarSet(\"angle\",0);");
code("for(x=trQuestVarGet(\"count\"); >0) {");
code("trQuestVarSetFromRand(\"dist\", 6, 18, true);");
code("trVectorSetFromAngle(\"dir\", trQuestVarGet(\"angle\"));");
code("trVectorScale(\"dir\", trQuestVarGet(\"dist\"));");
code("trQuestVarSet(\"dirX\", trQuestVarGet(\"posX\") + trQuestVarGet(\"dirX\"));");
code("trQuestVarSet(\"dirZ\", trQuestVarGet(\"posZ\") + trQuestVarGet(\"dirZ\"));");
code("amt = fModulo(360.0, trQuestVarGet(\"angle\") * 180.0 / 3.141592 - 180.0);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",pName,1,trQuestVarGet(\"dirX\"),0,trQuestVarGet(\"dirZ\"),amt,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitConvert(ENEMY_PLAYER);");
code("yAddToDatabase(\"enemiesIncoming\", \"next\");");
code("trQuestVarSet(\"angle\", trQuestVarGet(\"angle\") + angle);");
code("}");
code("for(x=trQuestVarGet(\"count\"); >0) {");
code("id = yDatabaseNext(\"enemiesIncoming\", true);");
code("activateEnemy(id);");
code("}");
code("trSoundPlayFN(\"attackwarning.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"wild.wav\",\"1\",-1,\"\",\"\");");
code("yRemoveFromDatabase(\"ambushRooms\");");
code("yRemoveUpdateVar(\"ambushRooms\", \"posX\");");
code("yRemoveUpdateVar(\"ambushRooms\", \"posZ\");");
code("yRemoveUpdateVar(\"ambushRooms\", \"type\");");
code("break;");
code("}");
code("}");
code("}");

code("if (yGetDatabaseCount(\"sphinxes\") > 0) {");
code("id = yDatabaseNext(\"sphinxes\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("trUnitChangeProtoUnit(\"Sphinx\");");
code("yRemoveFromDatabase(\"sphinxes\");");
code("yRemoveUpdateVar(\"sphinxes\", \"step\");");
code("} else if (trTimeMS() > yGetVar(\"sphinxes\", \"next\")) {");
code("switch(1*yGetVar(\"sphinxes\", \"step\"))");
code("{");
code("case 0:");
code("{");
code("if (kbUnitGetAnimationActionType(id) == 6) {");
code("ySetVar(\"sphinxes\", \"next\", trTimeMS() + 1600);");
code("ySetVar(\"sphinxes\", \"step\", 1);");
code("trUnitOverrideAnimation(39,0,false,false,-1);");
code("trVectorSetUnitPos(\"pos\", \"sphinxes\");");
code("for(p=1; < ENEMY_PLAYER) {");
code("if (zDistanceToVectorSquared(\"p\"+p+\"unit\", \"pos\") < 16) {");
code("silencePlayer(p, 5);");
code("}");
code("}");
code("}");
code("}");
code("case 1:");
code("{");
code("ySetVar(\"sphinxes\", \"next\", trTimeMS() + 10000);");
code("ySetVar(\"sphinxes\", \"step\", 0);");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("}");
code("}");
code("}");
code("}");

code("if (yGetDatabaseCount(\"MountainGiants\") > 0) {");
code("id = yDatabaseNext(\"MountainGiants\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("trUnitChangeProtoUnit(\"Mountain Giant\");");
code("yRemoveFromDatabase(\"MountainGiants\");");
code("yRemoveUpdateVar(\"MountainGiants\", \"step\");");
code("} else if (trTimeMS() > yGetVar(\"MountainGiants\", \"next\")) {");
code("switch(1*yGetVar(\"MountainGiants\", \"step\"))");
code("{");
code("case 0:");
code("{");
code("if (kbUnitGetAnimationActionType(id) == 6) {");
code("target = kbUnitGetTargetUnitID(id);");
code("trVectorQuestVarSet(\"end\", kbGetBlockPosition(\"\"+trGetUnitScenarioNameNumber(target)));");
code("ySetVarFromVector(\"MountainGiants\", \"end\", \"end\");");

code("ySetVar(\"MountainGiants\", \"next\", trTimeMS() + 1800);");
code("ySetVar(\"MountainGiants\", \"step\", 1);");
code("trUnitOverrideAnimation(39,0,false,false,-1);");
code("}");
code("}");
code("case 1:");
code("{");
code("trVectorSetUnitPos(\"pos\", \"MountainGiants\");");
code("yVarToVector(\"MountainGiants\", \"end\");");
code("for(x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("id = yDatabaseNext(\"playerUnits\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (zDistanceToVectorSquared(\"playerUnits\", \"end\") < 4) {");
code("damagePlayerUnit(100 + 100 * trQuestVarGet(\"stage\"));");
code("if (yGetVar(\"playerUnits\", \"hero\") == 1 && trCurrentPlayer() == yGetVar(\"playerUnits\", \"player\")) {");
code("trCameraShake(0.7, 0.7);");
code("}");
code("}");
code("}");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"endx\"),0,trQuestVarGet(\"endz\"),45,true);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"endx\"),0,trQuestVarGet(\"endz\"),135,false);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Tartarian Gate Flame\");");
code("ySetVar(\"MountainGiants\", \"step\", 2);");
code("ySetVar(\"MountainGiants\", \"next\", trTimeMS() + 1200);");

code("}");
code("case 2:");
code("{");
code("ySetVar(\"MountainGiants\", \"step\", 0);");
code("ySetVar(\"MountainGiants\", \"next\", trTimeMS() + 15000);");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("}");
code("}");
code("} else if (yGetVarAtIndex(\"enemies\", \"stunStatus\", 1*yGetVar(\"MountainGiants\", \"index\")) > 0 &&");
code("yGetVar(\"MountainGiants\", \"step\") == 1) {");
code("ySetVar(\"MountainGiants\", \"step\", 0);");
code("ySetVar(\"MountainGiants\", \"next\", trTimeMS() + 15000);");
code("}");
code("}");

code("for(x=xsMin(4, yGetDatabaseCount(\"MedusaBalls\")); >0) {");
code("action = processGenericProj(\"MedusaBalls\");");
code("trVectorSetUnitPos(\"pos\", \"MedusaBalls\");");
code("vectorToGrid(\"pos\", \"loc\");");
code("for(y=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("id = yDatabaseNext(\"playerUnits\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (zDistanceToVectorSquared(\"playerUnits\", \"pos\") < 2.0) {");
code("stunUnit(\"playerUnits\", 3.0, 0 - yGetVar(\"playerUnits\", \"player\"));");
code("action = PROJ_REMOVE;");
code("break;");
code("}");
code("}");
code("if (action == PROJ_FALLING) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"MedusaBalls\", \"target\"));");
code("if (trUnitAlive()) {");
code("trVectorQuestVarSet(\"end\", kbGetBlockPosition(\"\"+1*yGetVar(\"MedusaBalls\", \"target\")));");
code("trVectorQuestVarSet(\"dir\", zGetUnitVector(\"pos\", \"end\"));");
code("ySetVarFromVector(\"MedusaBalls\", \"dir\", \"dir\");");
code("}");
code("} else if (action == PROJ_BOUNCE) {");
code("ySetVar(\"MedusaBalls\", \"bounces\", yGetVar(\"MedusaBalls\", \"bounces\") - 1);");
code("} else if (action == PROJ_REMOVE ||");
code("terrainIsType(\"loc\", TERRAIN_WALL, TERRAIN_SUB_WALL) ||");
code("yGetVar(\"MedusaBalls\", \"bounces\") <= 0) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"MedusaBalls\");");
code("trUnitChangeProtoUnit(\"Conversion SFX\");");
code("yRemoveFromDatabase(\"MedusaBalls\");");
code("}");
code("}");

code("if (yGetDatabaseCount(\"Medusas\") >0) {");
code("id = yDatabaseNext(\"Medusas\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("trUnitChangeProtoUnit(\"Medusa\");");
code("yRemoveFromDatabase(\"Medusas\");");
code("yRemoveUpdateVar(\"Medusas\", \"step\");");
code("} else if (trTimeMS() > yGetVar(\"Medusas\", \"next\")) {");
code("switch(1*yGetVar(\"Medusas\", \"step\"))");
code("{");
code("case 0:");
code("{");
code("if (kbUnitGetAnimationActionType(id) == 12) {");
code("target = kbUnitGetTargetUnitID(id);");
code("ySetVar(\"Medusas\", \"target\", trGetUnitScenarioNameNumber(target));");

code("ySetVar(\"Medusas\", \"step\", 1);");
code("ySetVar(\"Medusas\", \"next\", trTimeMS() + 1200);");
code("trUnitOverrideAnimation(40,0,false,false,-1);");
code("}");
code("}");
code("case 1:");
code("{");
code("trVectorQuestVarSet(\"end\", kbGetBlockPosition(\"\"+1*yGetVar(\"Medusas\", \"target\")));");
code("trVectorSetUnitPos(\"start\", \"Medusas\");");
code("trVectorQuestVarSet(\"dir\", zGetUnitVector(\"start\", \"end\"));");
code("addGenericProj(\"MedusaBalls\",\"start\",\"dir\",kbGetProtoUnitID(\"Curse SFX\"),2,4,5);");
code("yAddUpdateVar(\"MedusaBalls\", \"target\", yGetVar(\"Medusas\", \"target\"));");
code("yAddUpdateVar(\"MedusaBalls\", \"bounces\", 12);");
code("ySetVar(\"Medusas\", \"step\", 2);");
code("ySetVar(\"Medusas\", \"next\", trTimeMS() + 800);");
code("}");
code("case 2:");
code("{");
code("ySetVar(\"Medusas\", \"step\", 0);");
code("ySetVar(\"Medusas\", \"next\", trTimeMS() + 18000);");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("}");
code("}");
code("} else if (yGetVarAtIndex(\"enemies\", \"stunStatus\", 1*yGetVar(\"Medusas\", \"index\")) > 0 &&");
code("yGetVar(\"Medusas\", \"step\") == 1) {");
code("ySetVar(\"Medusas\", \"step\", 0);");
code("ySetVar(\"Medusas\", \"next\", trTimeMS() + 18000);");
code("}");
code("}");

code("if (yGetDatabaseCount(\"Dryads\") > 0) {");
code("id = yDatabaseNext(\"Dryads\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("yVarToVector(\"Dryads\", \"pos\");");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"posX\"),0,trQuestVarGet(\"posZ\"),0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Lampades Blood\");");
code("for(x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("id = yDatabaseNext(\"playerUnits\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (zDistanceToVectorSquared(\"playerUnits\", \"pos\") < 16) {");
code("poisonUnit(\"playerUnits\", 12.0, 10.0);");
code("}");
code("}");
code("yRemoveFromDatabase(\"Dryads\");");
code("} else {");
code("trVectorSetUnitPos(\"pos\", \"Dryads\");");
code("ySetVarFromVector(\"Dryads\", \"pos\", \"pos\");");
code("}");
code("}");

code("xsSetContextPlayer(old);");
code("}");

code("const int BOSS_SPELL_COOLDOWN = 100;");

code("rule enter_boss_room");
code("inactive");
code("highFrequency");
code("{");
code("for(p=1; < ENEMY_PLAYER) {");
code("trUnitSelectClear();");
code("trVectorSetUnitPos(\"pos\", \"p\"+p+\"unit\");");
code("if (trQuestVarGet(\"posX\") > trQuestVarGet(\"bossRoomEntranceX\") &&");
code("trQuestVarGet(\"posZ\") > trQuestVarGet(\"bossRoomEntranceZ\")) {");
code("if (trQuestVarGet(\"p\"+p+\"enteredBossRoom\") == 0) {");
code("trQuestVarSet(\"p\"+p+\"enteredBossRoom\", 1);");
code("trQuestVarSet(\"playersInBossRoom\", 1 + trQuestVarGet(\"playersInBossRoom\"));");
code("trChatSend(0, \"<color={Playercolor(\"+p+\")}>{Playername(\"+p+\")}</color> has entered the boss room!\");");
code("trChatSend(0, \"All players must be present to start the boss!\");");
code("}");
code("} else if (trQuestVarGet(\"p\"+p+\"enteredBossRoom\") == 1) {");
code("trQuestVarSet(\"p\"+p+\"enteredBossRoom\", 0);");
code("trQuestVarSet(\"playersInBossRoom\", trQuestVarGet(\"playersInBossRoom\") - 1);");
code("}");
code("}");

code("if (trQuestVarGet(\"playersInBossRoom\") == trQuestVarGet(\"activePlayerCount\")) {");
code("xsDisableSelf();");
code("xsEnableRule(\"boss_cin_00\");");

code("trUIFadeToColor(0,0,0,1000,0,true);");
code("trLetterBox(true);");
code("}");
code("}");


code("rule boss_music");
code("minInterval 3");
code("inactive");
code("{");
code("if (trQuestVarGet(\"boss\") > 0 && trTime() > trQuestVarGet(\"musicTime\")) {");
code("if (trQuestVarGet(\"boss\") == 11) {");
code("trMusicPlay(\"music\interface\if you can use a doorknob.mp3\", \"1\",0.2);");
code("trQuestVarSet(\"musicTime\", trTime() + 60);");
code("} else {");
code("trQuestVarSet(\"musicTime\", trTime() + 50);");
code("trQuestVarSetFromRand(\"music\", 1, 6, true);");
code("switch(trQuestVarGet(\"music\"))");
code("{");
code("case 1:");
code("{");
code("trMusicPlay(\"music\fight\i wish i could throw shapes.mp3\",\"1\",3.0);");
code("}");
code("case 2:");
code("{");
code("trMusicPlay(\"music\fight\li'l drips.mp3\",\"1\",3.0);");
code("}");
code("case 3:");
code("{");
code("trMusicPlay(\"music\fight\meatier shower.mp3\",\"1\",3.0);");
code("}");
code("case 4:");
code("{");
code("trMusicPlay(\"music\fight\oi, that pops!!!.mp3\",\"1\",3.0);");
code("}");
code("case 5:");
code("{");
code("trMusicPlay(\"music\fight\rot loaf.mp3\",\"1\",3.0);");
code("}");
code("case 6:");
code("{");
code("trMusicPlay(\"music\fight\the fire brigade.mp3\",\"1\",3.0);");
code("}");
code("}");
code("}");
code("}");
code("}");

code("rule boss_cin_00");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 1) {");
code("xsDisableSelf();");
code("trQuestVarSet(\"bossRelicCount\", randomLow(2));");
code("trQuestVarSet(\"normalRelicCount\", 3 - trQuestVarGet(\"bossRelicCount\"));");
code("trQuestVarSet(\"gameOverStep\", 0);");
code("trPaintTerrain(trQuestVarGet(\"bossRoomEntranceX\")/2, trQuestVarGet(\"bossRoomEntranceZ\")/2 - 3,");
code("trQuestVarGet(\"bossRoomEntranceX\")/2 + 35, trQuestVarGet(\"bossRoomEntranceZ\")/2,");
code("TERRAIN_WALL, TERRAIN_SUB_WALL);");
code("trChangeTerrainHeight(trQuestVarGet(\"bossRoomEntranceX\")/2, trQuestVarGet(\"bossRoomEntranceZ\")/2 - 3,");
code("trQuestVarGet(\"bossRoomEntranceX\")/2 + 35, trQuestVarGet(\"bossRoomEntranceZ\")/2,5,false);");
code("trPaintTerrain(trQuestVarGet(\"bossRoomEntranceX\")/2-4, trQuestVarGet(\"bossRoomEntranceZ\")/2,");
code("trQuestVarGet(\"bossRoomEntranceX\")/2, trQuestVarGet(\"bossRoomEntranceZ\")/2 + 35,");
code("TERRAIN_WALL, TERRAIN_SUB_WALL);");
code("trChangeTerrainHeight(trQuestVarGet(\"bossRoomEntranceX\")/2 - 3, trQuestVarGet(\"bossRoomEntranceZ\")/2,");
code("trQuestVarGet(\"bossRoomEntranceX\")/2, trQuestVarGet(\"bossRoomEntranceZ\")/2 + 35,5,false);");

code("trPaintTerrain(0,0,5,5,0,70,true);");
code("trPaintTerrain(0,0,5,5,TERRAIN_WALL,TERRAIN_SUB_WALL,false);");

code("trQuestVarSet(\"bossUnit\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",trStringQuestVarGet(\"bossProto\"),1,");
code("trQuestVarGet(\"bossRoomCenterX\"),0,trQuestVarGet(\"bossRoomCenterZ\"),225,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossUnit\", true);");
code("trUnitConvert(0);");

code("trQuestVarSet(\"cinTime\", trTime());");
code("trQuestVarSet(\"cinStep\", 0);");

code("xsEnableRule(\"boss\"+1*trQuestVarGet(\"stage\")+\"_init\");");

code("trQuestVarSet(\"boss\", trQuestVarGet(\"stage\"));");

code("int id = 0;");
code("for(x=yGetDatabaseCount(\"enemies\"); >0) {");
code("id = yDatabaseNext(\"enemies\", true);");
code("if (id >= 0 && trUnitAlive()) {");
code("yAddToDatabase(\"enemiesIncoming\", \"enemies\");");
code("}");
code("}");
code("yClearDatabase(\"enemies\");");

code("trQuestVarSet(\"bossPointer\", yAddToDatabase(\"enemies\", \"bossUnit\"));");

code("trModifyProtounit(\"Revealer\", 1, 2, 20);");
code("trArmyDispatch(\"1,0\",\"Revealer\",1,trQuestVarGet(\"bossRoomCenterX\"),0,trQuestVarGet(\"bossRoomCenterZ\"),225,true);");
code("uiLookAtUnitByName(\"\"+1*trQuestVarGet(\"bossUnit\"));");
code("}");
code("}");

code("rule boss1_init");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > trQuestVarGet(\"cinTime\")) {");
code("switch(1*trQuestVarGet(\"cinStep\"))");
code("{");
code("case 0:");
code("{");
code("trOverlayText(\"The King of Beasts\", 3.0, -1, -1, -1);");
code("trQuestVarSet(\"cinTime\", trTime() + 2);");
code("}");
code("case 1:");
code("{");
code("trLetterBox(false);");
code("trUIFadeToColor(0,0,0,1000,0,false);");
code("xsDisableSelf();");
code("trModifyProtounit(\"Tornado\", ENEMY_PLAYER, 55, 1);");
code("trModifyProtounit(\"Tornado\", ENEMY_PLAYER, 8, -99);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossUnit\", true);");
code("trUnitConvert(ENEMY_PLAYER);");
code("trSetSelectedScale(trQuestVarGet(\"bossScale\"), trQuestVarGet(\"bossScale\"), trQuestVarGet(\"bossScale\"));");
code("spyEffect(1*trQuestVarGet(\"bossUnit\"), kbGetProtoUnitID(\"Cinematic Block\"), \"fakeBoss\");");
code("xsEnableRule(\"boss1_battle\");");
code("trQuestVarSet(\"bossSpell\", 11);");
code("trModifyProtounit(\"Nemean Lion\", ENEMY_PLAYER, 2, 60);");
code("trQuestVarSet(\"boss\", 1);");
code("trQuestVarSet(\"bossGem\", STARSTONE);");
code("trQuestVarSetFromRand(\"bossGemCount\", 1, 2, true);");
code("xsEnableRule(\"boss_music\");");
code("}");
code("}");
code("trQuestVarSet(\"cinStep\", 1 + trQuestVarGet(\"cinStep\"));");
code("}");
code("}");

code("rule boss1_battle");
code("inactive");
code("highFrequency");
code("{");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossUnit\");");
code("int old = xsGetContextPlayer();");
code("int p = 0;");
code("int x = 0;");
code("int action = 0;");
code("int id = 0;");
code("float angle = 0;");
code("bool hit = false;");
code("if (trUnitAlive() == true) {");
code("if (yGetDatabaseCount(\"bossMeteors\") > 0) {");
code("yDatabaseNext(\"bossMeteors\");");
code("if (yGetVar(\"bossMeteors\", \"yeehaw\") == 1) {");
code("ySetVar(\"bossMeteors\", \"yeehaw\", 0);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossMeteors\");");
code("trMutateSelected(kbGetProtoUnitID(\"Heka Shockwave SFX\"));");
code("trUnitOverrideAnimation(2,0,true,false,-1);");
code("} else if (yGetVar(\"bossMeteors\", \"yeehaw\") == 2) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossMeteors\");");
code("trUnitChangeProtoUnit(\"Rock Granite Big\");");
code("yRemoveFromDatabase(\"bossMeteors\");");
code("} else {");
code("trVectorSetUnitPos(\"pos\", \"bossMeteors\");");
code("if (trQuestVarGet(\"posY\") <= worldHeight + 0.5) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossMeteors\");");
code("trUnitChangeProtoUnit(\"Tartarian Gate Flame\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossMeteors\");");
code("trSetSelectedScale(0,0,0);");
code("trDamageUnitPercent(-100);");
code("vectorToGrid(\"pos\", \"loc\");");
code("trPaintTerrain(1*trQuestVarGet(\"locX\"),1*trQuestVarGet(\"locZ\"),");
code("1*trQuestVarGet(\"locX\"),1*trQuestVarGet(\"locZ\"),");
code("TERRAIN_WALL, TERRAIN_SUB_WALL, false);");
code("ySetVar(\"bossMeteors\", \"yeehaw\", 2);");
code("for(x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("id = yDatabaseNext(\"playeRUnits\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (zDistanceToVectorSquared(\"playerUnits\", \"pos\") < 9) {");
code("damagePlayerUnit(200);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("for(x=xsMin(4, yGetDatabaseCount(\"bossShockwaves\")); >0) {");
code("action = processGenericProj(\"bossShockwaves\");");
code("trVectorSetUnitPos(\"pos\", \"bossShockwaves\");");
code("hit = false;");
code("for(y=yGetDatabaseCount(\"bossShockwaveTargets\"); >0) {");
code("id = yDatabaseNext(\"bossShockwaveTargets\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("yRemoveFromDatabase(\"bossShockwaveTargets\");");
code("} else if (zDistanceToVectorSquared(\"bossShockwaveTargets\", \"pos\") < 9) {");
code("hit = true;");
code("ySetPointer(\"playerUnits\", 1*yGetVar(\"bossShockwaveTargets\", \"index\"));");
code("damagePlayerUnit(200);");
code("if (trQuestVarGet(\"bossSpell\") < 30 || trQuestVarGet(\"bossSpell\") == BOSS_SPELL_COOLDOWN) {");
code("yRemoveFromDatabase(\"bossShockwaveTargets\");");
code("}");
code("}");
code("}");
code("vectorToGrid(\"pos\", \"loc\");");
code("if (terrainIsType(\"loc\", TERRAIN_WALL, TERRAIN_SUB_WALL) || hit) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossShockwaves\", true);");
code("trUnitChangeProtoUnit(\"Dust Small\");");
code("yRemoveFromDatabase(\"bossShockwaves\");");
code("}");
code("}");

code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossUnit\");");
code("if (trQuestVarGet(\"bossSpell\") == BOSS_SPELL_COOLDOWN) {");
code("if (trTimeMS() > trQuestVarGet(\"bossCooldownTime\")) {");
code("trQuestVarSet(\"bossSpell\", 0);");
code("trQuestVarSet(\"bossUltimate\", trQuestVarGet(\"bossUltimate\") - 1);");
code("} else if (trUnitPercentDamaged() > trQuestVarGet(\"bossDamaged\")) {");
code("trQuestVarSet(\"bossDamaged\", trQuestVarGet(\"bossDamaged\") + 3);");
code("trQuestVarSet(\"bossCooldownTime\", trQuestVarGet(\"bossCooldownTime\") - 1000);");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") > 30) {");
code("if (trQuestVarGet(\"bossSpell\") == 31) {");
code("trSoundPlayFN(\"cinematics\15_in\gong.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"godpower.wav\",\"1\",-1,\"\",\"\");");
code("trSetLighting(\"night\", 1.0);");
code("trOverlayText(\"Roaring Gale\", 3.0, -1, -1, -1);");
code("id = kbGetBlockID(\"\"+1*trQuestVarGet(\"fakeBoss\"));");
code("if (id == -1) {");
code("trQuestVarSet(\"noFake\", 1);");
code("spyEffect(1*trQuestVarGet(\"bossUnit\"),kbGetProtoUnitID(\"Cinematic Block\"),\"fakeBoss\");");
code("} else {");
code("trQuestVarSet(\"noFake\", 0);");
code("trSetSelectedScale(0,0,0);");
code("trMutateSelected(kbGetProtoUnitID(\"Nemean Lion\"));");
code("trModifyProtounit(\"Nemean Lion\", ENEMY_PLAYER, 24, 1);");
code("trModifyProtounit(\"Nemean Lion\", ENEMY_PLAYER, 25, 1);");
code("trModifyProtounit(\"Nemean Lion\", ENEMY_PLAYER, 26, 1);");
code("trModifyProtounit(\"Nemean Lion\", ENEMY_PLAYER, 1, -6.0);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"fakeBoss\");");
code("trUnitChangeProtoUnit(\"Tornado\");");
code("trUnitConvert(ENEMY_PLAYER);");
code("}");
code("ySetPointer(\"enemies\", 1*trQuestVarGet(\"bossPointer\"));");
code("removeEnemy();");
code("trQuestVarSet(\"bossSpell\", 32);");
code("trQuestVarSet(\"bossSpellTimeout\", trTimeMS() + 12000);");
code("trQuestVarSet(\"bossSpellNext\", trTimeMS() + 2000);");
code("yClearDatabase(\"bossShockwaveTargets\");");
code("for(x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("id = yDatabaseNext(\"playerUnits\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else {");
code("yAddToDatabase(\"bossShockwaveTargets\", \"playerUnits\");");
code("yAddUpdateVar(\"bossShockwaveTargets\", \"index\", yGetPointer(\"playerUnits\"));");
code("}");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") == 32) {");
code("if (trTimeMS() > trQuestVarGet(\"bossSpellNext\")) {");
code("trQuestVarSet(\"bossSpellNext\", trQuestVarGet(\"bossSpellNext\") + 200);");
code("trVectorSetUnitPos(\"bossPos\", \"bossUnit\");");
code("trQuestVarSet(\"bossangle\", fModulo(6.283185, trQuestVarGet(\"bossangle\") + 2.41));");
code("id = kbGetProtoUnitID(\"Heka Shockwave SFX\");");
code("trVectorSetFromAngle(\"dir\", trQuestVarGet(\"bossangle\"));");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("addGenericProj(\"bossShockwaves\",\"bossPos\",\"dir\",id,2,15,4);");
code("if (trTimeMS() > trQuestVarGet(\"bossSpellTimeout\")) {");
code("trQuestVarSet(\"bossSpell\", BOSS_SPELL_COOLDOWN);");
code("trQuestVarSetFromRand(\"bossCooldownTime\", 7, 20, true);");
code("trQuestVarSet(\"bossCooldownTime\", 1000 * trQuestVarGet(\"bossCooldownTime\") + trTimeMS());");
code("trQuestVarSet(\"bossUltimate\", 3);");
code("if (trQuestVarGet(\"noFake\") == 0) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"fakeBoss\");");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");
code("trModifyProtounit(\"Nemean Lion\", ENEMY_PLAYER, 24, -1);");
code("trModifyProtounit(\"Nemean Lion\", ENEMY_PLAYER, 25, -1);");
code("trModifyProtounit(\"Nemean Lion\", ENEMY_PLAYER, 26, -1);");
code("trModifyProtounit(\"Nemean Lion\", ENEMY_PLAYER, 1, 6.0);");
code("}");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossUnit\");");
code("trUnitChangeProtoUnit(\"Nemean Lion\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossUnit\");");
code("trSetSelectedScale(trQuestVarGet(\"bossScale\"),trQuestVarGet(\"bossScale\"),trQuestVarGet(\"bossScale\"));");
code("yAddToDatabase(\"enemies\", \"bossUnit\");");
code("yAddUpdateVar(\"enemies\", \"bounty\", 0);");
code("yAddUpdateVar(\"enemies\", \"relic\", 0);");
code("trSetLighting(\"default\", 1);");
code("}");
code("}");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") > 20) {");
code("trQuestVarSetFromRand(\"rand\", 1, 5, true);");
code("switch(1*trQuestVarGet(\"rand\"))");
code("{");
code("case 1:");
code("{");
code("trChatSendSpoofed(ENEMY_PLAYER, \"King of Beasts: Royal Guards!\");");
code("}");
code("case 2:");
code("{");
code("trChatSendSpoofed(ENEMY_PLAYER, \"King of Beasts: Attack!\");");
code("}");
code("}");
code("trSoundPlayFN(\"wild.wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSet(\"anglemod\", 6.283185 / (1.0 + 2*ENEMY_PLAYER));");
code("trQuestVarSet(\"heading\", fModulo(360, 57.295779 * angle - 180.0));");
code("trQuestVarSet(\"headingmod\", 360.0 / (1.0 + 2*ENEMY_PLAYER));");
code("for(x=1+2*ENEMY_PLAYER; >0) {");
code("angle = fModulo(6.283185, angle + trQuestVarGet(\"anglemod\"));");
code("trQuestVarSet(\"heading\", fModulo(360.0, trQuestVarGet(\"heading\") + trQuestVarGet(\"headingMod\")));");
code("trVectorSetFromAngle(\"dir\", angle);");
code("trQuestVarSet(\"dirX\", 24.0 * trQuestVarGet(\"dirX\") + trQuestVarGet(\"bossRoomCenterX\"));");
code("trQuestVarSet(\"dirZ\", 24.0 * trQuestVarGet(\"dirZ\") + trQuestVarGet(\"bossRoomCenterZ\"));");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"dirx\"),0,trQuestVarGet(\"dirz\"),trQuestVarGet(\"heading\"),true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(ENEMY_PLAYER);");
code("trUnitChangeProtoUnit(\"Sphinx\");");
code("yAddToDatabase(\"enemies\", \"next\");");
code("yAddUpdateVar(\"enemies\", \"bounty\", 0);");
code("yAddUpdateVar(\"enemies\", \"relic\", 0);");
code("yAddToDatabase(\"Sphinxes\", \"next\");");
code("}");
code("trQuestVarSet(\"bossSpell\", BOSS_SPELL_COOLDOWN);");
code("trQuestVarSetFromRand(\"bossCooldownTime\", 7, 20, true);");
code("trQuestVarSet(\"bossCooldownTime\", trTimeMS() + 1000 * trQuestVarGet(\"bossCooldownTime\"));");
code("} else if (trQuestVarGet(\"bossSpell\") > 10) {");
code("if (trQuestVarGet(\"bossSpell\") == 11) {");
code("trQuestVarSet(\"bossMeteorCount\", 1 + trQuestVarGet(\"bossMeteorCount\"));");
code("trQuestVarSetFromRand(\"rand\", 1, 5, true);");
code("switch(1*trQuestVarGet(\"rand\"))");
code("{");
code("case 1:");
code("{");
code("trChatSendSpoofed(ENEMY_PLAYER, \"King of Beasts: Be crushed!\");");
code("}");
code("case 2:");
code("{");
code("trChatSendSpoofed(ENEMY_PLAYER, \"King of Beasts: Quake!\");");
code("}");
code("}");
code("trSoundPlayFN(\"earthquakeexist.wav\",\"1\",-1,\"\",\"\");");
code("trCameraShake(6.0, 0.25);");
code("trQuestVarSet(\"rainCount\", 9);");
code("trQuestVarSet(\"rainNext\", trTimeMS());");
code("trQuestVarSet(\"bossSpell\", 12);");
code("} else if (trQuestVarGet(\"bossSpell\") == 12) {");
code("if (trTimeMS() > trQuestVarGet(\"rainNext\")) {");
code("trQuestVarSetFromRand(\"modX\", -30, 30, true);");
code("trQuestVarSetFromRand(\"modZ\", -30, 30, true);");
code("if (xsPow(trQuestVarGet(\"modX\"), 2) + xsPow(trQuestVarGet(\"modZ\"), 2) < 900) {");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trQuestVarSet(\"modX\", trQuestVarGet(\"modX\") + trQuestVarGet(\"bossRoomCenterX\"));");
code("trQuestVarSet(\"modZ\", trQuestVarGet(\"modZ\") + trQuestVarGet(\"bossRoomCenterZ\"));");
code("trQuestVarSetFromRand(\"heading\", 1, 360, true);");
code("trArmyDispatch(\"1,0\",\"Kronny Flying\",1,trQuestVarGet(\"modX\"),0,trQuestVarGet(\"modZ\"),trQuestVarGet(\"heading\"),true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(ENEMY_PLAYER);");
code("zSetProtoUnitStat(\"Kronny Flying\", ENEMY_PLAYER, 1, 0.01);");
code("trDamageUnitPercent(100);");
code("trSetSelectedScale(0,5.0,0);");
code("yAddToDatabase(\"bossMeteors\", \"next\");");
code("yAddUpdateVar(\"bossMeteors\", \"yeehaw\", 1);");
code("trQuestVarSet(\"rainNext\", 500 + trQuestVarGet(\"rainNext\"));");
code("trQuestVarSet(\"rainCount\", trQuestVarGet(\"rainCount\") - 1);");
code("if (trQuestVarGet(\"rainCount\") <= 0) {");
code("trQuestVarSet(\"bossSpell\", 13);");
code("}");
code("}");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") == 13) {");
code("if (yGetDatabaseCount(\"bossMeteors\") == 0) {");
code("trQuestVarSet(\"bossSpell\", BOSS_SPELL_COOLDOWN);");
code("trQuestVarSetFromRand(\"bossCooldownTime\", 7, 20, true);");
code("trQuestVarSet(\"bossCooldownTime\", trTimeMS() + 1000 * trQuestVarGet(\"bossCooldownTime\"));");
code("}");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") > 0) {");
code("if (trQuestVarGet(\"bossSpell\") == 1) {");
code("trQuestVarSetFromRand(\"rand\", 1, 4, true);");
code("switch(1*trQuestVarGet(\"rand\"))");
code("{");
code("case 1:");
code("{");
code("trChatSendSpoofed(ENEMY_PLAYER, \"King of Beasts: Kneel!\");");
code("}");
code("case 2:");
code("{");
code("trChatSendSpoofed(ENEMY_PLAYER, \"King of Beasts: Bow before me!\");");
code("}");
code("}");

code("trMutateSelected(kbGetProtoUnitID(\"Nemean Lion\"));");
code("trUnitOverrideAnimation(39,0,false,false,-1);");
code("trUnitSetStance(\"Passive\");");
code("trQuestVarSet(\"bossNext\", trTimeMS() + 1500);");
code("trQuestVarSet(\"bossSpell\", 2);");
code("trVectorSetUnitPos(\"bossPos\", \"bossUnit\");");
code("} else if (trQuestVarGet(\"bossSpell\") == 2) {");
code("if (trTimeMS() > trQuestVarGet(\"bossNext\")) {");
code("trQuestVarSet(\"bossNext\", trQuestVarGet(\"bossNext\") + 1500);");
code("trQuestVarSet(\"bossSpell\", 3);");
code("id = kbGetProtoUnitID(\"Heka Shockwave SFX\");");
code("for(x=24; >0) {");
code("angle = fModulo(6.283185, angle + 0.2618);");
code("trVectorSetFromAngle(\"dir\", angle);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("addGenericProj(\"bossShockwaves\",\"bossPos\",\"dir\",id,2,15,4);");
code("}");
code("yClearDatabase(\"bossShockwaveTargets\");");
code("for(x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("id = yDatabaseNext(\"playerUnits\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else {");
code("yAddToDatabase(\"bossShockwaveTargets\", \"playerUnits\");");
code("yAddUpdateVar(\"bossShockwaveTargets\", \"index\", yGetPointer(\"playerUnits\"));");
code("}");
code("}");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") == 3) {");
code("if (trTimeMS() > trQuestVarGet(\"bossNext\")) {");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("trQuestVarSet(\"bossSpell\", BOSS_SPELL_COOLDOWN);");
code("trQuestVarSetFromRand(\"bossCooldownTime\", 7, 20, true);");
code("trQuestVarSet(\"bossCooldownTime\", trTimeMS() + 1000 * trQuestVarGet(\"bossCooldownTime\"));");
code("}");
code("}");
code("} else if (yGetVarAtIndex(\"enemies\", \"stunStatus\", 1*trQuestVarGet(\"bossPointer\")) == 0) {");
code("trQuestVarSetFromRand(\"bossSpell\", 0, xsMin(3, 1 * (trUnitPercentDamaged() * 0.05)), true);");
code("trQuestVarSet(\"bossSpell\", trQuestVarGet(\"bossSpell\") * 10 + 1);");
code("if (trQuestVarGet(\"bossSpell\") == 11 && trQuestVarGet(\"bossMeteorCount\") == 3) {");
code("trQuestVarSet(\"bossSpell\", 1);");
code("}");
code("if (trQuestVarGet(\"bossSpell\") == 31 && trQuestVarGet(\"bossUltimate\") > 0) {");
code("trQuestVarSetFromRand(\"bossSpell\", 0, 2, true);");
code("trQuestVarSet(\"bossSpell\", 1 + 10 * trQuestVarGet(\"bossSpell\"));");
code("}");
code("}");
code("} else {");
code("xsDisableSelf();");
code("trMusicStop();");
code("trQuestVarSet(\"boss\", 0);");
code("trSetLighting(\"default\", 1.0);");
code("trSoundPlayFN(\"win.wav\",\"1\",-1,\"\",\"\");");
code("for(x=yGetDatabaseCount(\"enemies\"); >0) {");
code("yDatabaseNext(\"enemies\", true);");
code("trDamageUnitPercent(100);");
code("}");
code("uiLookAtUnitByName(\"\"+1*trQuestVarGet(\"bossUnit\"));");
code("xsEnableRule(\"boss_ded\");");
code("xsDisableRule(\"gameplay_always\");");
code("}");
code("xsSetContextPlayer(old);");
code("}");

code("rule boss_ded");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > trQuestVarGet(\"gameOverNext\")) {");
code("int relic = 0;");
code("trQuestVarSet(\"gameOverStep\", 1 + trQuestVarGet(\"gameOverStep\"));");
code("switch(1*trQuestVarGet(\"gameOverStep\"))");
code("{");
code("case 1:");
code("{");
code("trQuestVarSet(\"playersWon\", 1);");
code("trLetterBox(true);");
code("trUIFadeToColor(0,0,0, 2000,0,true);");
code("trQuestVarSet(\"gameOverNext\", trTime() + 5);");
code("trSoundPlayFN(\"default\",\"1\",-1,");
code("\"Zenophobia: Boss defeated! Here are the rewards!\",\"icons\infantry g hoplite icon 64\");");
code("}");
code("case 2:");
code("{");
code("trQuestVarSet(\"gameOverNext\", trTime() + 3);");
code("int gem = trQuestVarGet(\"bossGem\");");
code("trShowImageDialog(gemstoneIcon(gem), gemstoneName(gem) + \" x\" + 1*trQuestVarGet(\"bossGemCount\"));");
code("trQuestVarSet(\"gemstone\"+gem, trQuestVarGet(\"bossGemCount\") + trQuestVarGet(\"gemstone\"+gem));");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("case 3:");
code("{");
code("trQuestVarSet(\"gameOverNext\", trTime() + 3);");
code("relic = randomStageClosest();");
code("trShowImageDialog(relicIcon(relic), \"Relic: \" + relicName(relic));");
code("trQuestVarSet(\"normalRelicCount\", trQuestVarGet(\"normalRelicCount\") - 1);");
code("if (trQuestVarGet(\"normalRelicCount\") > 0) {");
code("trQuestVarSet(\"gameOverStep\", 2);");
code("}");
code("trQuestVarSet(\"ownedRelics\"+relic, 1 + trQuestVarGet(\"ownedRelics\"+relic));");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("case 4:");
code("{");
code("trQuestVarSet(\"gameOverNext\", trTime() + 3);");
code("relic = randomStageClosest() + 10;");
code("trShowImageDialog(relicIcon(relic), \"Relic: \" + relicName(relic));");
code("trQuestVarSet(\"bossRelicCount\", trQuestVarGet(\"bossRelicCount\") - 1);");
code("if (trQuestVarGet(\"bossRelicCount\") > 0) {");
code("trQuestVarSet(\"gameOverStep\", 3);");
code("}");
code("trQuestVarSet(\"ownedRelics\"+relic, 1 + trQuestVarGet(\"ownedRelics\"+relic));");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("case 5:");
code("{");
code("if (trQuestVarGet(\"stage\") < 10) {");
code("int p = trCurrentPlayer();");
code("if (trQuestVarGet(\"stage\") == trQuestVarGet(\"p\"+p+\"progress\")+1) {");
code("trQuestVarSet(\"p\"+p+\"progress\", trQuestVarGet(\"p\"+p+\"progress\")+1);");
code("}");
code("int stage = 1 + trQuestVarGet(\"stage\");");
code("trShowImageDialog(stageIcon(stage), \"Unlocked stage \" + stage + \": \" + stageName(stage) + \"!\");");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSet(\"gameOverNext\", trTime() + 5);");
code("}");
code("}");
code("case 6:");
code("{");
code("gadgetUnreal(\"ShowImageBox\");");
code("trQuestVarSet(\"gameOverNext\", trTime() + 8);");
code("trSoundPlayFN(\"default.wav\",\"1\",-1,");
code("\"Zenophobia: Rewards have been sent to your warehouse. You can access them by playing this map in singleplayer.\",");
code("\"icons\infantry g hoplite icon 64\");");
code("trQuestVarSet(\"gameOverStep\", 1);");
code("xsDisableSelf();");
code("xsEnableRule(\"game_over\");");
code("}");
code("}");
code("gadgetUnreal(\"ShowImageBox-CloseButton\");");
code("}");
code("}");
code("void removeCamTracks(int eventID = -1) {");
code("trackRemove();");
code("trUnblockAllSounds();");
code("}");

code("void spawnPlayerClone(int p = 0, string vdb = \"\") {");
code("int class = trQuestVarGet(\"p\"+p+\"class\");");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("yAddToDatabase(\"p\"+p+\"characters\", \"next\");");
code("yAddUpdateVar(\"p\"+p+\"characters\", \"index\", yAddToDatabase(\"playerUnits\", \"next\"));");
code("yAddUpdateVar(\"playerUnits\", \"player\", p);");
code("yAddUpdateVar(\"playerUnits\", \"hero\", 1);");
code("yAddToDatabase(\"playerCharacters\", \"next\");");
code("yAddUpdateVar(\"playerCharacters\", \"player\", p);");
code("string proto = kbGetProtoUnitName(1*trQuestVarGet(\"class\"+class+\"proto\"));");
code("trArmyDispatch(\"\"+p+\",0\",proto,1,trQuestVarGet(vdb+\"x\"),0,trQuestVarGet(vdb+\"z\"),0,true);");
code("}");

code("void spawnPlayer(int p = 0, string vdb = \"\") {");
code("trQuestVarSet(\"p\"+p+\"unit\", trGetNextUnitScenarioNameNumber());");
code("spawnPlayerClone(p, vdb);");
code("trQuestVarSet(\"p\"+p+\"index\", yGetNewestPointer(\"playerUnits\"));");
code("if (trCurrentPlayer() == p) {");
code("int class = trQuestVarGet(\"p\"+p+\"class\");");
code("string proto = kbGetProtoUnitName(1*trQuestVarGet(\"class\"+class+\"proto\"));");
code("uiFindType(proto);");
code("}");
code("}");

code("void fixAnimations(int p = 0) {");
code("int action = 0;");
code("int id = kbGetBlockID(\"\"+1*trQuestVarGet(\"p\"+p+\"unit\"));");
code("if (id > 0) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"unit\");");
code("action = kbUnitGetAnimationActionType(id);");
code("if (trQuestVarGet(\"p\"+p+\"animation\") == action) {");
code("if (action == -1) {");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("}");
code("} else {");
code("trQuestVarSet(\"p\"+p+\"animation\", action);");
code("if (action == 11) {");
code("trUnitSetAnimationPath(\"0,0,0,0,0,0,0\");");
code("}");
code("}");
code("}");
code("}");

code("void checkGodPowers(int p = 0) {");
code("switch(1*trQuestVarGet(\"p\"+p+\"wellCooldownStatus\"))");
code("{");
code("case ABILITY_READY:");
code("{");
code("if (trPlayerUnitCountSpecific(p, \"Tunnel\") == 2) {");
code("yFindLatest(\"p\"+p+\"wellObject\", \"Tunnel\", p);");
code("trVectorSetUnitPos(\"p\"+p+\"wellPos\", \"p\"+p+\"wellObject\");");
code("trMutateSelected(kbGetProtoUnitID(\"Rocket\"));");
code("trDamageUnitPercent(100);");
code("yFindLatest(\"p\"+p+\"wellObject\", \"Tunnel\", p);");
code("trMutateSelected(kbGetProtoUnitID(\"Rocket\"));");
code("trDamageUnitPercent(100);");
code("trQuestVarSet(\"p\"+p+\"wellStatus\", ABILITY_ON);");
code("trQuestVarSet(\"p\"+p+\"wellCooldownStatus\", ABILITY_COOLDOWN);");
code("trQuestVarSet(\"p\"+p+\"wellReadyTime\",");
code("trTimeMS() + 1000 * trQuestVarGet(\"p\"+p+\"wellCooldown\") * trQuestVarGet(\"p\"+p+\"cooldownReduction\"));");
code("if (trCurrentPlayer() == p) {");
code("trCounterAbort(\"well\");");
code("trCounterAddTime(\"well\",");
code("trQuestVarGet(\"p\"+p+\"wellCooldown\") * trQuestVarGet(\"p\"+p+\"cooldownReduction\"), 1, wellName);");
code("}");
code("} else {");
code("trQuestVarSet(\"p\"+p+\"wellObject\", trGetNextUnitScenarioNameNumber() - 1);");
code("}");
code("}");
code("case ABILITY_COOLDOWN:");
code("{");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"wellReadyTime\")) {");
code("trQuestVarSet(\"p\"+p+\"wellCooldownStatus\", ABILITY_COST);");
code("}");
code("}");
code("case ABILITY_COST:");
code("{");
code("if (trPlayerResourceCount(p, \"favor\") >= trQuestVarGet(\"p\"+p+\"wellCost\") * trQuestVarGet(\"p\"+p+\"ultimateCost\")) {");
code("trQuestVarSet(\"p\"+p+\"wellCooldownStatus\", ABILITY_READY);");
code("if (trCurrentPlayer() == p) {");
code("trCounterAddTime(\"well\", -1, -99999, wellName);");
code("if (wellIsUltimate) {");
code("trSoundPlayFN(\"ui\thunder2.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("if (trQuestVarGet(\"p\"+p+\"silenced\") == 0) {");
code("trTechGodPower(p, \"Underworld Passage\", 1);");
code("}");
code("}");
code("}");
code("}");

code("switch(1*trQuestVarGet(\"p\"+p+\"rainCooldownStatus\"))");
code("{");
code("case ABILITY_READY:");
code("{");
code("if (trCheckGPActive(\"rain\", p)) {");
code("trQuestVarSet(\"p\"+p+\"rainStatus\", ABILITY_ON);");
code("trQuestVarSet(\"p\"+p+\"rainCooldownStatus\", ABILITY_COOLDOWN);");
code("trQuestVarSet(\"p\"+p+\"rainReadyTime\",");
code("trTimeMS() + 1000 * trQuestVarGet(\"p\"+p+\"rainCooldown\") * trQuestVarGet(\"p\"+p+\"cooldownReduction\"));");
code("if (trCurrentPlayer() == p) {");
code("trCounterAbort(\"rain\");");
code("trCounterAddTime(\"rain\",");
code("trQuestVarGet(\"p\"+p+\"rainCooldown\") * trQuestVarGet(\"p\"+p+\"cooldownReduction\"), 1, rainName);");
code("}");
code("}");
code("}");
code("case ABILITY_COOLDOWN:");
code("{");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"rainReadyTime\")) {");
code("trQuestVarSet(\"p\"+p+\"rainCooldownStatus\", ABILITY_COST);");
code("}");
code("}");
code("case ABILITY_COST:");
code("{");
code("if (trPlayerResourceCount(p, \"favor\") >= trQuestVarGet(\"p\"+p+\"rainCost\") * trQuestVarGet(\"p\"+p+\"ultimateCost\")) {");
code("trQuestVarSet(\"p\"+p+\"rainCooldownStatus\", ABILITY_READY);");
code("if (trCurrentPlayer() == p) {");
code("trCounterAddTime(\"rain\", -1, -99999, rainName);");
code("if (rainIsUltimate) {");
code("trSoundPlayFN(\"ui\thunder2.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("if (trQuestVarGet(\"p\"+p+\"silenced\") == 0) {");
code("trTechGodPower(p, \"rain\", 1);");
code("}");
code("}");
code("}");
code("}");

code("switch(1*trQuestVarGet(\"p\"+p+\"lureCooldownStatus\"))");
code("{");
code("case ABILITY_READY:");
code("{");
code("if (trPlayerUnitCountSpecific(p, \"Animal Attractor\") == 1) {");
code("yFindLatestReverse(\"p\"+p+\"lureObject\", \"Animal Attractor\", p);");
code("trMutateSelected(kbGetProtoUnitID(\"Rocket\"));");
code("trQuestVarSet(\"p\"+p+\"lureStatus\", ABILITY_ON);");
code("trQuestVarSet(\"p\"+p+\"lureCooldownStatus\", ABILITY_COOLDOWN);");
code("trQuestVarSet(\"p\"+p+\"lureReadyTime\",");
code("trTimeMS() + 1000 * trQuestVarGet(\"p\"+p+\"lureCooldown\") * trQuestVarGet(\"p\"+p+\"cooldownReduction\"));");
code("if (trCurrentPlayer() == p) {");
code("trCounterAbort(\"lure\");");
code("trCounterAddTime(\"lure\",");
code("trQuestVarGet(\"p\"+p+\"lureCooldown\") * trQuestVarGet(\"p\"+p+\"cooldownReduction\"), 1, lureName);");
code("}");
code("}");
code("}");
code("case ABILITY_COOLDOWN:");
code("{");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"lureReadyTime\")) {");
code("trQuestVarSet(\"p\"+p+\"lureCooldownStatus\", ABILITY_COST);");
code("}");
code("}");
code("case ABILITY_COST:");
code("{");
code("if (trPlayerResourceCount(p, \"favor\") >= trQuestVarGet(\"p\"+p+\"lureCost\") * trQuestVarGet(\"p\"+p+\"ultimateCost\")) {");
code("trQuestVarSet(\"p\"+p+\"lureCooldownStatus\", ABILITY_READY);");
code("if (trCurrentPlayer() == p) {");
code("trCounterAddTime(\"lure\", -1, -99999, lureName);");
code("if (lureIsUltimate) {");
code("trSoundPlayFN(\"ui\thunder2.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("if (trQuestVarGet(\"p\"+p+\"silenced\") == 0) {");
code("trTechGodPower(p, \"animal magnetism\", 1);");
code("}");
code("}");
code("}");
code("}");
code("}");

code("rule gameplay_start");
code("inactive");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("trDelayedRuleActivation(\"gameplay_start_2\");");
code("for(p=1; < ENEMY_PLAYER) {");
code("chooseClass(p, 1*trQuestVarGet(\"p\"+p+\"class\"));");
code("}");
code("trMusicPlayCurrent();");
code("trPlayNextMusicTrack();");
code("trSetFogAndBlackmap(true, true);");
code("trPlayerResetBlackMapForAllPlayers();");
code("}");

code("rule gameplay_start_2");
code("inactive");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("trEventSetHandler(999, \"removeCamTracks\");");
code("trSetUnitIdleProcessing(true);");
code("trCameraCut(vector(0,70.710701,0), vector(0.5,-0.707107,0.5), vector(0.5,0.707107,0.5), vector(0.707107,0,-0.707107));");
code("xsEnableRule(\"gameplay_always\");");
code("for(p=1; < ENEMY_PLAYER) {");
code("spawnPlayer(p, \"startPosition\");");
code("trQuestVarSet(\"p\"+p+\"lureObject\", trGetNextUnitScenarioNameNumber()-1);");
code("trQuestVarSet(\"p\"+p+\"wellObject\", trGetNextUnitScenarioNameNumber()-1);");
code("for(x=10; >0) {");
code("if (trQuestVarGet(\"p\"+p+\"relic\"+x) > 0) {");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,1,0,1,0,true);");
code("yAddToDatabase(\"p\"+p+\"relics\", \"next\");");
code("yAddUpdateVar(\"p\"+p+\"relics\", \"type\", trQuestVarGet(\"p\"+p+\"relic\"+x));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Relic\"));");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"p\"+p+\"unit\"));");
code("trMutateSelected(relicProto(1*trQuestVarGet(\"p\"+p+\"relic\"+x)));");
code("trSetSelectedScale(0,0,-1);");
code("trUnitSetAnimationPath(\"1,0,1,0,0,0,0\");");
code("relicEffect(1*trQuestVarGet(\"p\"+p+\"relic\"+x), p, true);");
code("trQuestVarSet(\"p\"+p+\"relic\"+x, 0);");
code("}");
code("}");
code("trSetCivilizationNameOverride(p, \"Level \" + (1+trQuestVarGet(\"p\"+p+\"level\")));");
code("}");
code("trQuestVarSet(\"nextProj\", trGetNextUnitScenarioNameNumber());");


code("}");

code("rule gameplay_always");
code("inactive");
code("highFrequency");
code("{");
code("int old = xsGetContextPlayer();");
code("int id = 0;");
code("int p = 0;");
code("int count = 0;");
code("float amt = 0;");

code("if (yGetDatabaseCount(\"playerUnits\") > 0) {");
code("id = yDatabaseNext(\"playerUnits\", true);");
code("if ((id == -1) || (trUnitAlive() == false)) {");
code("removePlayerUnit();");
code("} else {");
code("if (yGetVar(\"playerUnits\", \"decay\") > 0) {");
code("if (trTimeMS() > yGetVar(\"playerUnits\", \"decayNext\")) {");
code("ySetVar(\"playerUnits\", \"decayNext\", 1000 + yGetVar(\"playerUnits\", \"decayNext\"));");
code("trDamageUnitPercent(yGetVar(\"playerUnits\", \"decay\"));");
code("}");
code("}");

code("stunsAndPoisons(\"playerUnits\");");
code("}");
code("}");

code("for(x=yGetDatabaseCount(\"stunnedUnits\"); >0) {");
code("id = yDatabaseNext(\"stunnedUnits\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("trUnitChangeProtoUnit(kbGetProtoUnitName(1*yGetVar(\"stunnedUnits\", \"proto\")));");
code("yRemoveFromDatabase(\"stunnedUnits\");");
code("yRemoveUpdateVar(\"stunnedUnits\", \"proto\");");
code("} else {");
code("trMutateSelected(1*yGetVar(\"stunnedUnits\", \"proto\"));");
code("trUnitOverrideAnimation(2, 0, false, false, -1, 0);");
code("}");
code("}");

code("enemiesAlways();");

code("for(x=xsMin(3, yGetDatabaseCount(\"playerLasers\")); >0) {");
code("yDatabaseNext(\"playerLasers\", true);");
code("if (trTimeMS() > yGetVar(\"playerLasers\", \"timeout\")) {");
code("trUnitDestroy();");
code("yRemoveFromDatabase(\"playerLasers\");");
code("yRemoveUpdateVar(\"playerLasers\", \"timeout\");");
code("yRemoveUpdateVar(\"playerLasers\", \"range\");");
code("} else {");
code("float width = 4.0 * (yGetVar(\"playerLasers\", \"timeout\") - trTimeMS()) / 500;");
code("trSetSelectedScale(width, width, yGetVar(\"playerLasers\", \"range\"));");
code("}");
code("}");

code("for(p=1; < ENEMY_PLAYER) {");
code("trEventFire(12*trQuestVarGet(\"p\"+p+\"class\") + p);");
code("checkGodPowers(p);");
code("}");

code("if (trQuestVarGet(\"protectionCount\") > 0) {");
code("for(x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("id = yDatabaseNext(\"playerUnits\", true);");
code("trUnitHighlight(0.2, false);");
code("xsSetContextPlayer(1*yGetVar(\"playerUnits\", \"player\"));");
code("amt = kbUnitGetCurrentHitpoints(id);");
code("if (amt > yGetVar(\"playerUnits\", \"currentHealth\")) {");
code("ySetVar(\"playerUnits\", \"currentHealth\", amt);");
code("} else {");
code("trDamageUnit(amt - yGetVar(\"playerUnits\", \"currentHealth\"));");
code("}");
code("}");
code("if (trQuestVarGet(\"protectionWas\") == 0) {");
code("trQuestVarSet(\"protectionWas\", 1);");
code("for(p=1; < ENEMY_PLAYER) {");
code("id = trQuestVarGet(\"p\"+p+\"class\");");
code("id = trQuestVarGet(\"class\"+id+\"proto\");");
code("trModifyProtounit(kbGetProtoUnitName(id),p,24,1);");
code("trModifyProtounit(kbGetProtoUnitName(id),p,25,1);");
code("trModifyProtounit(kbGetProtoUnitName(id),p,26,1);");
code("}");
code("}");
code("} else if (trQuestVarGet(\"protectionWas\") == 1) {");
code("trQuestVarSet(\"protectionWas\", 0);");
code("for(p=1; < ENEMY_PLAYER) {");
code("id = trQuestVarGet(\"p\"+p+\"class\");");
code("id = trQuestVarGet(\"class\"+id+\"proto\");");
code("trModifyProtounit(kbGetProtoUnitName(id),p,24,-1);");
code("trModifyProtounit(kbGetProtoUnitName(id),p,25,-1);");
code("trModifyProtounit(kbGetProtoUnitName(id),p,26,-1);");
code("}");
code("}");

code("trQuestVarSet(\"relicPlayer\", 1 + trQuestVarGet(\"relicPlayer\"));");
code("if (trQuestVarGet(\"relicPlayer\") >= ENEMY_PLAYER) {");
code("trQuestVarSet(\"relicPlayer\", 1);");
code("}");
code("p = trQuestVarGet(\"relicPlayer\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"unit\");");
code("if (trUnitAlive() && trQuestVarGet(\"p\"+p+\"rideLightning\") == 0 && trQuestVarGet(\"p\"+p+\"dead\") <= 0) {");
code("trVectorSetUnitPos(\"pos\", \"p\"+p+\"unit\");");
code("for(x=yGetDatabaseCount(\"p\"+p+\"relics\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"relics\", true);");
code("if (trUnitGetIsContained(\"Unit\") == false) {");
code("relicEffect(1*yGetVar(\"p\"+p+\"relics\", \"type\"), p, false);");
code("if (yGetVar(\"p\"+p+\"relics\", \"type\") < RELIC_KEY_GREEK) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"relics\");");
code("if (trCurrentPlayer() == p) {");
code("trSoundPlayFN(\"backtowork.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("if (trPlayerResourceCount(p, \"Gold\") > 25 &&");
code("zDistanceBetweenVectorsSquared(\"pos\", \"relicTransporterGuyPos\") < 36) {");
code("trMutateSelected(kbGetProtoUnitID(\"Conversion SFX\"));");
code("if (trCurrentPlayer() == p) {");
code("trChatSend(0, relicName(1*yGetVar(\"p\"+p+\"relics\", \"type\")) + \" added to your warehouse\");");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSet(\"ownedRelics\"+1*yGetVar(\"p\"+p+\"relics\", \"type\"),");
code("xsMin(10, 1 + trQuestVarGet(\"ownedRelics\"+1*yGetVar(\"p\"+p+\"relics\", \"type\"))));");
code("}");
code("trPlayerGrantResources(p, \"Gold\", -25);");
code("} else {");
code("if (trCurrentPlayer() == p) {");
code("trChatSend(0, relicName(1*yGetVar(\"p\"+p+\"relics\", \"type\")) + \" dropped.\");");
code("if (zDistanceToVectorSquared(\"p\"+p+\"relics\", \"relicTransporterGuyPos\") < 36) {");
code("trSoundPlayFN(\"cantdothat.wav\",\"1\",-1,\"\",\"\");");
code("trChatSend(0, \"Not enough gold to transport relic! You need 25!\");");
code("}");
code("}");

code("trUnitChangeProtoUnit(\"Relic\");");
code("yAddToDatabase(\"freeRelics\", \"p\"+p+\"relics\");");
code("yAddUpdateVar(\"freeRelics\", \"type\", yGetVar(\"p\"+p+\"relics\", \"type\"));");
code("}");
code("}");
code("yRemoveFromDatabase(\"p\"+p+\"relics\");");
code("yRemoveUpdateVar(\"p\"+p+\"relics\", \"type\");");
code("}");
code("}");
code("}");

code("if (Multiplayer) {");
code("count = 1;");
code("} else {");
code("count = 30;");
code("}");
code("for (x=xsMin(count, yGetDatabaseCount(\"freeRelics\")); > 0) {");
code("amt = 0;");
code("yDatabaseNext(\"freeRelics\", true);");
code("if (trUnitGetIsContained(\"Unit\")) {");
code("trVectorSetUnitPos(\"pos\", \"freeRelics\");");
code("for(p=1; < ENEMY_PLAYER) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"unit\");");
code("if (trUnitAlive()) {");
code("if (zDistanceToVectorSquared(\"p\"+p+\"unit\", \"pos\") < 1) {");
code("amt = 1;");
code("break;");
code("}");
code("}");
code("}");
code("if (amt == 1) {");
code("relicEffect(1*yGetVar(\"freeRelics\", \"type\"), p, true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"freeRelics\", true);");
code("trSetSelectedScale(0,0,-1);");
code("trMutateSelected(relicProto(1*yGetVar(\"freeRelics\", \"type\")));");
code("if (yGetVar(\"freeRelics\", \"type\") < RELIC_KEY_GREEK) {");
code("trUnitSetAnimationPath(\"1,0,1,1,0,0,0\");");
code("}");
code("if (trCurrentPlayer() == p) {");
code("trChatSend(0, relicName(1*yGetVar(\"freeRelics\", \"type\")) + \" equipped!\");");
code("trSoundPlayFN(\"researchcomplete.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("yAddToDatabase(\"p\"+p+\"relics\", \"freeRelics\");");
code("yAddUpdateVar(\"p\"+p+\"relics\", \"type\", yGetVar(\"freeRelics\", \"type\"));");
code("yRemoveFromDatabase(\"freeRelics\");");
code("yRemoveUpdateVar(\"freeRelics\", \"type\");");
code("}");
code("} else if (trUnitIsSelected()) {");
code("relicDescription(1*yGetVar(\"freeRelics\", \"type\"));");
code("reselectMyself();");
code("}");
code("}");

code("if (trQuestVarGet(\"stunSound\") == 1) {");
code("trQuestVarSet(\"stunSound\", 0);");
code("trQuestVarSetFromRand(\"sound\", 1, 3, true);");
code("trSoundPlayFN(\"woodcrush\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("}");

code("if (trQuestVarGet(\"poisonSound\") == 1) {");
code("trQuestVarSet(\"poisonSound\", 0);");
code("trSoundPlayFN(\"lampadesblood.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"carnivorabirth.wav\",\"1\",-1,\"\",\"\");");
code("}");

code("for(p=1; < ENEMY_PLAYER) {");
code("if (trQuestVarGet(\"p\"+p+\"dead\") == 0) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"unit\");");
code("if (trQuestVarGet(\"p\"+p+\"lifestealTotal\") > 0) {");
code("healUnit(p, trQuestVarGet(\"p\"+p+\"lifestealTotal\"), 1*trQuestVarGet(\"p\"+p+\"index\"));");
code("trQuestVarSet(\"p\"+p+\"lifestealTotal\", 0);");
code("}");
code("if (Multiplayer) {");
code("fixAnimations(p);");
code("}");
code("if (trQuestVarGet(\"p\"+p+\"silenced\") == 1) {");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"silenceTimeout\")) {");
code("trQuestVarSet(\"p\"+p+\"silenced\", 0);");
code("if (trQuestVarGet(\"p\"+p+\"wellCooldownStatus\") == ABILITY_READY) {");
code("trTechGodPower(p, \"Underworld Passage\", 1);");
code("}");
code("if (trQuestVarGet(\"p\"+p+\"lureCooldownStatus\") == ABILITY_READY) {");
code("trTechGodPower(p, \"Animal magnetism\", 1);");
code("}");
code("if (trQuestVarGet(\"p\"+p+\"rainCooldownStatus\") == ABILITY_READY) {");
code("trTechGodPower(p, \"rain\", 1);");
code("}");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"silenceSFX\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("}");
code("}");
code("} else if (trTimeMS() > trQuestVarGet(\"p\"+p+\"reviveNext\")) {");
code("count = 0 - trCountUnitsInArea(\"\"+1*trQuestVarGet(\"p\"+p+\"unit\"),ENEMY_PLAYER,\"Unit\",20);");
code("trQuestVarSet(\"p\"+p+\"reviveNext\", trTimeMS() + 1000);");
code("trVectorSetUnitPos(\"pos\", \"p\"+p+\"unit\");");
code("trQuestVarSet(\"playersReviving\", 0);");
code("for(x=yGetDatabaseCount(\"playerCharacters\"); >0) {");
code("id = yDatabaseNext(\"playerCharacters\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removePlayerCharacter();");
code("} else if (zDistanceToVectorSquared(\"playerCharacters\", \"pos\") < 100) {");
code("count = count + 1;");
code("trQuestVarSet(\"playersReviving\", 1);");
code("}");
code("}");
code("if (Multiplayer == false) {");
code("trQuestVarSet(\"playersReviving\", 1);");
code("count = 1;");
code("}");
code("if (trQuestVarGet(\"playersReviving\") == 1) {");
code("if (count <= 0) {");
code("trChatSend(0, \"<color={Playercolor(\"+p+\")}>{Playername(\"+p+\")}</color> can't be revived. Too many enemies nearby!\");");
code("} else {");
code("trQuestVarSet(\"p\"+p+\"dead\", xsMax(0, trQuestVarGet(\"p\"+p+\"dead\") - count));");
code("trChatSend(0,");
code("\"<color={Playercolor(\"+p+\")}>{Playername(\"+p+\")}</color> is being revived: \" + 1*trQuestVarGet(\"p\"+p+\"dead\"));");
code("}");
code("if (trQuestVarGet(\"p\"+p+\"dead\") <= 0) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"reviveBeam\");");
code("trUnitChangeProtoUnit(\"Rocket\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"unit\");");
code("id = trQuestVarGet(\"p\"+p+\"class\");");
code("id = trQuestVarGet(\"class\"+id+\"proto\");");
code("trUnitChangeProtoUnit(\"Dwarf\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"unit\");");
code("trDamageUnitPercent(-100);");
code("trMutateSelected(id);");
code("trSoundPlayFN(\"herorevived.wav\",\"1\",-1,\"\",\"\");");
code("trDamageUnitPercent(50);");
code("trQuestVarSet(\"deadPlayerCount\", trQuestVarGet(\"deadPlayerCount\") - 1);");
code("yAddToDatabase(\"p\"+p+\"characters\", \"p\"+p+\"unit\");");
code("yAddToDatabase(\"playerCharacters\", \"p\"+p+\"unit\");");
code("yAddUpdateVar(\"playerCharacters\", \"player\", p);");
code("yAddToDatabase(\"playerUnits\", \"p\"+p+\"unit\");");
code("yAddUpdateVar(\"playerUnits\", \"player\", p);");
code("yAddUpdateVar(\"playerUnits\", \"hero\", 1);");
code("yAddUpdateVar(\"p\"+p+\"characters\", \"index\", yGetNewestPointer(\"playerUnits\"));");
code("for(x=yGetDatabaseCount(\"p\"+p+\"relics\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"relics\", true);");
code("trUnitChangeProtoUnit(\"Relic\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"relics\");");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"p\"+p+\"unit\"));");
code("trMutateSelected(relicProto(1*yGetVar(\"p\"+p+\"relics\", \"type\")));");
code("if (yGetVar(\"p\"+p+\"relics\", \"type\") < RELIC_KEY_GREEK) {");
code("trSetSelectedScale(0,0,0);");
code("trUnitSetAnimationPath(\"1,0,1,1,0,0,0\");");
code("}");
code("}");
code("if (trCurrentPlayer() == p) {");
code("uiFindType(kbGetProtoUnitName(id));");
code("}");
code("}");
code("}");
code("}");
code("}");

code("if (yGetDatabaseCount(\"skyPassages\") > 0) {");
code("yDatabaseNext(\"skyPassages\");");
code("trVectorSetUnitPos(\"pos\", \"skyPassages\");");
code("trQuestVarSet(\"sound\", 0);");
code("for(x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("yDatabaseNext(\"playerUnits\");");
code("if (zDistanceToVectorSquared(\"playerUnits\", \"pos\") < 6) {");
code("yAddToDatabase(\"magicalJourney\", \"playerUnits\");");
code("if (yGetVar(\"playerUnits\", \"hero\") == 1) {");
code("if (trCurrentPlayer() == yGetVar(\"playerUnits\", \"player\")) {");
code("uiLookAtUnitByName(\"\"+1*yGetVar(\"skyPassages\", \"exit\"));");
code("trQuestVarSet(\"sound\", 1);");
code("}");
code("}");
code("}");
code("}");

code("if (yGetDatabaseCount(\"magicalJourney\") > 0) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"skyPassages\", \"exit\"));");
code("trUnitChangeProtoUnit(\"Dwarf\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"skyPassages\", \"exit\"));");
code("trMutateSelected(kbGetProtoUnitID(\"Sky Passage\"));");
code("for(x=yGetDatabaseCount(\"magicalJourney\"); >0) {");
code("yDatabaseNext(\"magicalJourney\", true);");
code("trImmediateUnitGarrison(\"\"+1*yGetVar(\"skyPassages\", \"exit\"));");
code("}");
code("yClearDatabase(\"magicalJourney\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"skyPassages\", \"exit\"));");
code("trUnitEjectContained();");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"skyPassages\", \"exit\"));");
code("trMutateSelected(kbGetProtoUnitID(\"Sky Passage\"));");
code("trSetSelectedScale(0, 0.2, 0);");
code("}");
code("if (trQuestVarGet(\"sound\") == 1) {");
code("trSoundPlayFN(\"skypassageout.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");

code("for(x=xsMin(5, yGetDatabaseCount(\"launchedUnits\")); >0) {");
code("processLaunchedUnit();");
code("}");

code("processChests();");

code("xsSetContextPlayer(old);");

code("if (trQuestVarGet(\"deadPlayerCount\") == trQuestVarGet(\"activePlayerCount\") && Multiplayer) {");
code("xsDisableSelf();");
code("trSoundPlayFN(\"lose.wav\",\"1\",-1,\"\",\"\");");
code("trUIFadeToColor(0,0,0,1500,0,true);");
code("trLetterBox(true);");
code("trQuestVarSet(\"gameOverNext\", trTime() + 2);");
code("xsEnableRule(\"game_over\");");
code("}");
code("}");

code("rule game_over");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > trQuestVarGet(\"gameOverNext\")) {");
code("trQuestVarSet(\"gameOverStep\", 1 + trQuestVarGet(\"gameOverStep\"));");
code("switch(1*trQuestVarGet(\"gameOverStep\"))");
code("{");
code("case 1:");
code("{");
code("trSoundPlayFN(\"default\",\"1\",-1,\"Zenophobia: Your journey is not over! This map remembers your progress!\",");
code("\"icons\infantry g hoplite icon 64\");");
code("trQuestVarSet(\"gameOverNext\", trTime() + 4);");
code("}");
code("case 2:");
code("{");
code("trSoundPlayFN(\"default\", \"1\",-1,");
code("\"Zenophobia: Your level, gold, and relics have been saved! The next time you play, you will keep them!\",");
code("\"icons\infantry g hoplite icon 64\");");
code("trQuestVarSet(\"gameOverNext\", trTime() + 6);");
code("}");
code("case 3:");
code("{");
code("trSoundPlayFN(\"default\", \"1\",-1,");
code("\"Zenophobia: Be sure to also play this map in singleplayer to switch classes, level up, and more!\",");
code("\"icons\infantry g hoplite icon 64\");");
code("trQuestVarSet(\"gameOverNext\", trTime() + 6);");
code("}");
code("case 4:");
code("{");
code("trQuestVarSet(\"gameOverNext\", trTime() + 1);");
code("trUIFadeToColor(0,0,0,1000,0,false);");
code("trLetterBox(false);");
code("saveAllData();");
code("}");
code("case 5:");
code("{");
code("xsDisableSelf();");
code("for(p=1; < ENEMY_PLAYER) {");
code("if (trQuestVarGet(\"playersWon\") == 1) {");
code("trSetPlayerWon(p);");
code("} else {");
code("trSetPlayerDefeated(p);");
code("}");
code("}");
code("trEndGame();");
code("}");
code("}");
code("}");
code("}");
code("void spSwitchToClass(int class = -1) {");
code("chooseClass(1, class - 3000);");
code("}");

code("void spExplainClass(int class = -1) {");
code("class = class - 4000;");
code("explainClass(class);");
code("}");

code("void spAscendClass(int class = -1) {");
code("class = class - 5000;");
code("int gemstone = trQuestVarGet(\"class\"+class+\"gemstone\");");
code("if (trPlayerResourceCount(1, \"Gold\") < trQuestVarGet(\"goldCost\")) {");
code("trSoundPlayFN(\"cantdothat.wav\",\"1\",-1,\"\",\"\");");
code("uiMessageBox(\"You don't have enough gold! You need \" + 1*trQuestVarGet(\"goldCost\"));");
code("} else if (trQuestVarGet(\"gemstone\"+gemstone) < trQuestVarGet(\"gemstoneCost\")) {");
code("trSoundPlayFN(\"cantdothat.wav\",\"1\",-1,\"\",\"\");");
code("string noMessage = \"You don't have enough \" + gemstoneName(gemstone) + \"! (\";");
code("noMessage = noMessage + 1*trQuestVarGet(\"gemstone\"+gemstone)+\"/\"+1*trQuestVarGet(\"gemstoneCost\")+\")\";");
code("uiMessageBox(noMessage);");
code("} else {");
code("trPlayerGrantResources(1, \"Gold\", 0-trQuestVarGet(\"goldCost\"));");
code("trQuestVarSet(\"gemstone\"+gemstone, trQuestVarGet(\"gemstone\"+gemstone) - trQuestVarGet(\"gemstoneCost\"));");
code("trSoundPlayFN(\"ageadvance.wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSet(\"class\"+class+\"level\", 1 + trQuestVarGet(\"class\"+class+\"level\"));");
code("trQuestVarSet(\"p1level\", 1 + trQuestVarGet(\"p1level\"));");
code("uiMessageBox(className(class) + \" ascended to level \" + 1*trQuestVarGet(\"class\"+class+\"level\") + \"! +1 relic slot!\");");
code("trModifyProtounit(kbGetProtoUnitName(1*trQuestVarGet(\"class\"+class+\"proto\")),1,5,1);");
code("trSetCivilizationNameOverride(1, \"Level \" + (1+trQuestVarGet(\"p1level\")));");
code("}");
code("}");

code("rule singleplayer_init");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 2) {");
code("xsDisableSelf();");
code("trLetterBox(false);");
code("trUIFadeToColor(0,0,0,1000,0,false);");
code("trMusicPlayCurrent();");
code("trPlayNextMusicTrack();");

code("trVectorQuestVarSet(\"startPosition\", vector(135,0,135));");

code("trPaintTerrain(0,0,145,145,2,13,false);");

code("TERRAIN_WALL = 2;");
code("TERRAIN_SUB_WALL = 13;");

code("trPlayerSetDiplomacy(1, 2, \"Enemy\");");
code("trPlayerSetDiplomacy(2, 1, \"Enemy\");");
code("trPlayerSetDiplomacy(0, 1, \"Neutral\");");
code("trArmyDispatch(\"1,0\",\"Victory Marker\",1,1,0,1,0,true);");
code("trArmyDispatch(\"2,0\",\"Victory Marker\",1,1,0,1,0,true);");

code("int x = 0;");
code("int z = 15;");
code("for(x=0; <15) {");
code("for(b=0; < 15) {");
code("if (x*x + z*z <= 225) {");
code("trPaintTerrain(72-x,72-z,72+x,72+z,0,50,false);");
code("break;");
code("} else {");
code("z = z - 1;");
code("}");
code("}");
code("}");

code("trPaintTerrain(57,71,73,73,0,53,false);");
code("trPaintTerrain(71,57,73,73,0,53,false);");

code("trQuestVarSet(\"levelupObelisk\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,145,0,118,0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(0);");
code("trMutateSelected(kbGetProtoUnitID(\"Outpost\"));");

code("trPaintTerrain(45,66, 57,78, 0,70, false);");
code("x = 114;");
code("for(a=1; <= 10) {");
code("z = 154;");
code("if (trQuestVarGet(\"ownedRelics\"+a) > 0) {");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,x,0,z+2,180,true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(kbGetProtoUnitName(relicProto(a)));");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\", \"Dwarf\",trQuestVarGet(\"ownedRelics\"+a),x,0,z,0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Relic\");");
code("for(b=0; <trQuestVarGet(\"ownedRelics\"+a)) {");
code("yAddToDatabase(\"freeRelics\", \"next\");");
code("yAddUpdateVar(\"freeRelics\", \"type\", a);");
code("trQuestVarSet(\"next\", 1 + trQuestVarGet(\"next\"));");
code("}");
code("}");

code("z = 134;");
code("if (trQuestVarGet(\"ownedRelics\"+(a+10)) > 0) {");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,x,0,z-2,0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(kbGetProtoUnitName(relicProto(a+10)));");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\", \"Dwarf\",trQuestVarGet(\"ownedRelics\"+(a+10)),x,0,z,0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Relic\");");
code("for(b=0; <trQuestVarGet(\"ownedRelics\"+(a+10))) {");
code("yAddToDatabase(\"freeRelics\", \"next\");");
code("yAddUpdateVar(\"freeRelics\", \"type\", a+10);");
code("trQuestVarSet(\"next\", 1 + trQuestVarGet(\"next\"));");
code("}");
code("}");

code("x = x - 2;");
code("}");

code("if (trQuestVarGet(\"class1level\") == 0) {");
code("xsEnableRule(\"singleplayer_cin\");");
code("trQuestVarSet(\"class1level\", 1);");
code("trQuestVarSet(\"class2level\", 1);");
code("trQuestVarSet(\"gemstone\"+STARSTONE, 1 + trQuestVarGet(\"gemstone\"+STARSTONE));");
code("startNPCDialog(NPC_EXPLAIN_SINGLEPLAYER);");
code("} else {");
code("xsEnableRule(\"gameplay_start_2\");");
code("}");

code("if (trQuestVarGet(\"p1class\") == 0) {");
code("trQuestVarSet(\"p1class\", MOONBLADE);");
code("}");
code("chooseClass(1, 1*trQuestVarGet(\"p1class\"));");

code("trPaintTerrain(69,49, 75,56, 4,15, false);");
code("x = 138;");
code("z = 98;");
code("for(a=1; <= CLASS_COUNT) {");
code("trQuestVarSet(\"class\"+a+\"unit\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,x,0,z,180,true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(0);");
code("trMutateSelected(1*trQuestVarGet(\"class\"+a+\"proto\"));");
code("if (trQuestVarGet(\"class\"+a+\"level\") == 0) {");
code("trPaintTerrain(x/2,z/2,x/2,z/2,2,12,false);");
code("}");
code("x = x + 4;");
code("if (x > 150) {");
code("x = 138;");
code("z = z + 4;");
code("}");
code("trEventSetHandler(3000+a, \"spSwitchToClass\");");
code("trEventSetHandler(4000+a, \"spExplainClass\");");
code("trEventSetHandler(5000+a, \"spAscendClass\");");
code("}");

code("trSetCounterDisplay(\"To save and exit, enter the Sky Passage.\");");

code("trSetFogAndBlackmap(false, false);");
code("trSetLighting(\"default\", 0);");

code("trQuestVarSet(\"skyPassage\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,145,0,145,0,true);");
code("trArmySelect(\"1,0\");");
code("trMutateSelected(kbGetProtoUnitID(\"Sky Passage\"));");

code("trPaintTerrain(0,0,5,5,0,70,true);");
code("trPaintTerrain(0,0,5,5,2,13,false);");

code("xsEnableRule(\"singleplayer_always\");");
code("}");
code("}");

code("rule singleplayer_always");
code("inactive");
code("highFrequency");
code("{");
code("int class = 0;");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p1unit\");");
code("if (trUnitGetIsContained(\"Sky Passage\")) {");
code("xsDisableSelf();");
code("xsDisableRule(\"gameplay_always\");");

code("for(x=31; >0) {");
code("trQuestVarSet(\"ownedRelics\"+x, 0);");
code("}");
code("for(x=yGetDatabaseCount(\"freeRelics\"); >0) {");
code("yDatabaseNext(\"freeRelics\");");
code("class = yGetVar(\"freeRelics\", \"type\");");
code("trQuestVarSet(\"ownedRelics\"+class, xsMin(10, 1 + trQuestVarGet(\"ownedRelics\"+class)));");
code("}");
code("saveAllData();");

code("trUIFadeToColor(255,255,255,1000,0,true);");
code("xsEnableRule(\"singleplayer_end\");");

code("}");

code("for(x=CLASS_COUNT; >0) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"class\"+x+\"unit\");");
code("if (trUnitIsSelected()) {");
code("reselectMyself();");
code("if (trQuestVarGet(\"p1class\") == x || trQuestVarGet(\"class\"+x+\"level\") == 0) {");
code("explainClass(x);");
code("if (trQuestVarGet(\"class\"+x+\"level\") == 0) {");
code("trDelayedRuleActivation(\"singleplayer_explain_class\");");
code("}");
code("} else if (trQuestVarGet(\"class\"+x+\"level\") > 0) {");
code("trShowChoiceDialog(className(x) + \" (Level \" + 1*trQuestVarGet(\"class\"+x+\"level\")+\")\",");
code("\"Switch to this class\", 3000 + x, \"View class details\", 4000 + x);");
code("}");
code("}");
code("}");

code("trUnitSelectClear();");
code("trUnitSelectByQV(\"levelupObelisk\");");
code("if (trUnitIsSelected()) {");
code("reselectMyself();");
code("class = trQuestVarGet(\"p1class\");");
code("trQuestVarSet(\"goldCost\", 100 * trQuestVarGet(\"class\"+class+\"level\"));");
code("trQuestVarSet(\"gemstoneCost\", (1 + trQuestVarGet(\"class\"+class+\"level\")) / 2);");
code("string yesPrompt = \"Yes (\" + 1*trQuestVarGet(\"goldCost\") + \" gold + \" + 1*trQuestVarGet(\"gemstoneCost\") + \" \";");
code("yesPrompt = yesPrompt + gemstoneName(1*trQuestVarGet(\"class\"+class+\"gemstone\")) + \")\";");
code("if (trQuestVarGet(\"p1level\") < 9) {");
code("trShowChoiceDialog(\"Ascend \" + className(class) + \"? (Increases relic capacity by 1)\",");
code("yesPrompt, 5000+class, \"No\", -1);");
code("trChatSend(0, \"<u><color=1,1,1>Gemstones</color></u>\");");
code("for(x=0; <3) {");
code("trChatSend(0, gemstoneName(x) + \" x\" + 1*trQuestVarGet(\"gemstone\"+x));");
code("}");
code("} else {");
code("uiMessageBox(\"You have reached the max level for \" + className(class) + \"!\");");
code("}");
code("}");
code("}");

code("rule singleplayer_end");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > 1 + cActivationTime) {");
code("trModeEnter(\"Pregame\");");
code("}");
code("}");


code("rule singleplayer_explain_class");
code("inactive");
code("highFrequency");
code("{");
code("if (trQuestVarGet(\"explain\") == 0 && trIsGadgetVisible(\"ShowImageBox\") == false) {");
code("xsDisableSelf();");
code("int class = trQuestVarGet(\"pleaseExplain\");");
code("switch(class)");
code("{");
code("case THUNDERRIDER:");
code("{");
code("uiMessageBox(\"To unlock this class, defeat 5 bosses.\");");
code("}");
code("case FIREKNIGHT:");
code("{");
code("uiMessageBox(\"To unlock this class, host this map in multiplayer once.\");");
code("}");
code("case FROSTKNIGHT:");
code("{");
code("uiMessageBox(\"To unlock this class, kill 100 Giants.\");");
code("}");
code("case INVENTOR:");
code("{");
code("uiMessageBox(\"To unlock this class, collect 50 relics.\");");
code("}");
code("case ALCHEMIST:");
code("{");
code("uiMessageBox(\"To unlock this class, ascend a character to level 7.\");");
code("}");
code("}");
code("}");
code("}");
rmAddTriggerEffect("SetIdleProcessing");
rmSetTriggerEffectParam("IdleProc",");*/rule _zenowashereagain inactive {if(true){xsDisableSelf();//");
rmSwitchToTrigger(rmCreateTrigger("get_player_names"));
rmSetTriggerPriority(4);
rmSetTriggerActive(true);
rmSetTriggerLoop(false);
rmSetTriggerRunImmediately(true);
rmAddTriggerEffect("SetIdleProcessing");
rmSetTriggerEffectParam("IdleProc","false);/*");
for(p=1; < cNumberNonGaiaPlayers) {
code("trStringQuestVarSet(\"p"+p+"name\", \""+rmGetPlayerName(p)+"\");");
}
string quote = "\\";
code("map(\"esc\", \"ShowImageBox\", \"gadgetUnreal("+quote+"ShowImageBox"+quote+")\");");
rmAddTriggerEffect("SetIdleProcessing");
rmSetTriggerEffectParam("IdleProc",");*///");
rmSetStatusText("", 0.99);}