void code(string xs="") {
rmAddTriggerEffect("SetIdleProcessing");
rmSetTriggerEffectParam("IdleProc",");*/"+xs+"/*");}
void main(void) {
rmSetStatusText("", 0.01);

rmSetMapSize(290, 290);

rmSetSeaLevel(0);
rmSetSeaType("greek river");
rmTerrainInitialize("OlympusA",1);
rmSetGaiaCiv(cCivZeus);
rmSetLightingSet("Default");
rmSetStatusText("", 0.1);
rmSwitchToTrigger(rmCreateTrigger("zenowashere"));
rmSetTriggerPriority(4);
rmSetTriggerActive(false);
rmSetTriggerLoop(false);
rmSetTriggerRunImmediately(true);
rmAddTriggerEffect("SetIdleProcessing");
rmSetTriggerEffectParam("IdleProc",");}}/*");
code("const int DIMENSION_X = 290;");
code("const int DIMENSION_Z = 290;");
code("const float PI = 3.141592;");

code("void trVectorQuestVarSet(string VQVname = \"\", vector QVv = vector(-1,-1,-1)) {");
code("if (VQVname == \"\") return;");
code("trQuestVarSet(\"\"+VQVname+\"X\", xsVectorGetX(QVv));");
code("trQuestVarSet(\"\"+VQVname+\"Y\", xsVectorGetY(QVv));");
code("trQuestVarSet(\"\"+VQVname+\"Z\", xsVectorGetZ(QVv));");
code("}");

code("vector trVectorQuestVarGet(string name = \"\") {");
code("if (name == \"\") { return(vector(-1,-1,-1)); }");
code("vector ret = xsVectorSet(trQuestVarGet(name+\"X\"),trQuestVarGet(name+\"Y\"),trQuestVarGet(name+\"Z\"));");
code("return(ret);");
code("}");

code("float trVectorQuestVarGetX(string VQVname = \"\") {");
code("if (VQVname == \"\") return(-1);");
code("return(trQuestVarGet(\"\"+VQVname+\"X\"));");
code("}");

code("float trVectorQuestVarGetY(string VQVname = \"\") {");
code("if (VQVname == \"\") return(-1);");
code("return(trQuestVarGet(\"\"+VQVname+\"Y\"));");
code("}");

code("float trVectorQuestVarGetZ(string VQVname = \"\") {");
code("if (VQVname == \"\") return(-1);");
code("return(trQuestVarGet(\"\"+VQVname+\"Z\"));");
code("}");

code("void trVectorQuestVarEcho(string VQVname = \"\") {");
code("if (VQVname == \"\") return;");
code("trChatSend(0, \"\"+VQVname+\": \"+trVectorQuestVarGet(VQVname));");
code("}");

code("void trStringQuestVarSet(string name = \"\", string value = \"\") {");
code("int old = xsGetContextPlayer();");
code("xsSetContextPlayer(0);");
code("if (trQuestVarGet(\"string\"+name) > 0) {");
code("kbArmyDestroy(1*trQuestVarGet(\"string\"+name));");
code("}");
code("trQuestVarSet(\"string\"+name, kbArmyCreate(value));");
code("xsSetContextPlayer(old);");
code("}");

code("string trStringQuestVarGet(string name=\"\") {");
code("int old = xsGetContextPlayer();");
code("xsSetContextPlayer(0);");
code("string val = kbArmyGetName(1*trQuestVarGet(\"string\"+name));");
code("xsSetContextPlayer(old);");
code("return(val);");
code("}");


code("bool playerIsPlaying(int p = 0) {");
code("return(kbIsPlayerHuman(p) == true && kbIsPlayerResigned(p) == false);");
code("}");


code("void trUnitTeleportToVector(String v = \"\") {");
code("trUnitTeleport(trVectorQuestVarGetX(\"\"+v), trVectorQuestVarGetY(\"\"+v), trVectorQuestVarGetZ(\"\"+v));");
code("}");

code("void trUnitSelectByQV(String s = \"\", bool reverse = true) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"\"+s), reverse);");
code("}");

code("void trVectorSetUnitPos(string v = \"\", string db = \"\", bool reverse = true) {");
code("trVectorQuestVarSet(v, kbGetBlockPosition(\"\"+1*trQuestVarGet(db), reverse));");
code("}");

code("void trVectorSetUnitPosInt(string v = \"\", int val = 0, bool reverse = true) {");
code("trVectorQuestVarSet(v, kbGetBlockPosition(\"\"+val, reverse));");
code("}");


code("void trUnitMoveToVector(string v = \"\", bool attack = false) {");
code("trUnitMoveToPoint(trVectorQuestVarGetX(v),0,trVectorQuestVarGetZ(v),-1,attack);");
code("}");

code("void trVectorScale(string db = \"\", float s = 1.0) {");
code("trQuestVarSet(db+\"x\", trQuestVarGet(db+\"x\") * s);");
code("trQuestVarSet(db+\"z\", trQuestVarGet(db+\"z\") * s);");
code("}");


code("void vectorSnapToGrid(string qv = \"\") {");
code("int x = trQuestVarGet(qv+\"x\") / 2;");
code("int z = trQuestVarGet(qv+\"z\") / 2;");
code("trQuestVarSet(qv+\"x\", x * 2 + 1);");
code("trQuestVarSet(qv+\"z\", z * 2 + 1);");
code("}");

code("int zModulo(int mod = 10, float val = 0) {");
code("int m = 0 + mod;");
code("int v = xsRound(val);");
code("return(v - xsFloor(val / m) * m);");
code("}");

code("int iModulo(int mod = 10, int val = 0) {");
code("return(val - val / mod * mod);");
code("}");

code("float fModulo(float mod = 0, float val = 0) {");
code("int c = 0;");
code("if (val > 0) {");
code("c = val / mod;");
code("} else {");
code("c = val / mod - 1;");
code("}");
code("return(0.0 + val - mod * c);");
code("}");


code("void zUnitHeading(float a = 0) {");
code("trSetUnitOrientation(xsVectorSet(xsSin(a),0,xsCos(a)), xsVectorSet(0,1,0), true);");
code("}");

code("void zInitProtoUnitStat(string r = \"\", int p = 0, int f = 0, float v = 0.0) {");
code("trQuestVarSet(\"p\"+p+\"pf\"+kbGetProtoUnitID(r)+\"f\"+f, v);");
code("}");

code("void zSetProtoUnitStat(string r = \"\", int p = 0, int f = 0, float v = 0.0) {");
code("for(zsps=0; >1){}");
code("zsps = kbGetProtoUnitID(r);");
code("trModifyProtounit(r, p, f, 0.0 + v - trQuestVarGet(\"p\"+p+\"pf\"+zsps+\"f\"+f));");
code("trQuestVarSet(\"p\"+p+\"pf\"+zsps+\"f\"+f, 0.0 + v);");
code("}");

code("void vectorToGrid(string from = \"\", string to = \"\"){");
code("int x = 0 + trQuestVarGet(from+\"x\") / 2;");
code("int z = 0 + trQuestVarGet(from+\"z\") / 2;");
code("trQuestVarSet(to+\"x\", x);");
code("trQuestVarSet(to+\"z\", z);");
code("}");

code("void gridToVector(string from = \"\", string to = \"\") {");
code("trQuestVarSet(to+\"x\", trQuestVarGet(from+\"x\") * 2 + 1);");
code("trQuestVarSet(to+\"z\", trQuestVarGet(from+\"z\") * 2 + 1);");
code("}");

code("float gridDistanceSquared(string from = \"\", string to = \"\") {");
code("float xdiff = trQuestVarGet(to+\"x\") - trQuestVarGet(from+\"x\");");
code("float zdiff = trQuestVarGet(to+\"z\") - trQuestVarGet(from+\"z\");");
code("return(xdiff * xdiff + zdiff * zdiff);");
code("}");

code("void zSquareVar(string qv = \"\") {");
code("trQuestVarSet(qv, xsPow(trQuestVarGet(qv), 2));");
code("}");

code("float zDistanceBetweenVectorsSquared(string start = \"\", string end = \"\") {");
code("float xdiff = trQuestVarGet(end + \"X\") - trQuestVarGet(start + \"X\");");
code("float zdiff = trQuestVarGet(end + \"Z\") - trQuestVarGet(start + \"Z\");");
code("float dist = xdiff * xdiff + zdiff * zdiff;");
code("return(dist);");
code("}");



code("float zDistanceBetweenVectors(string start = \"\", string end = \"\") {");
code("float xdiff = trQuestVarGet(end + \"X\") - trQuestVarGet(start + \"X\");");
code("float zdiff = trQuestVarGet(end + \"Z\") - trQuestVarGet(start + \"Z\");");
code("float dist = xsSqrt(xdiff * xdiff + zdiff * zdiff);");
code("return(dist);");
code("}");

code("float zDistanceBetweenVectors3d(string start = \"\", string end = \"\") {");
code("float xdiff = trQuestVarGet(end + \"X\") - trQuestVarGet(start + \"X\");");
code("float ydiff = trQuestVarGet(end + \"Y\") - trQuestVarGet(start + \"Y\");");
code("float zdiff = trQuestVarGet(end + \"Z\") - trQuestVarGet(start + \"Z\");");
code("float dist = xsSqrt(xdiff * xdiff + ydiff * ydiff + zdiff * zdiff);");
code("return(dist);");
code("}");

code("float zDistanceToVectorSquared(string qv = \"\", string v = \"\") {");
code("trVectorQuestVarSet(\"abcd\", kbGetBlockPosition(\"\"+1*trQuestVarGet(qv), true));");
code("return(zDistanceBetweenVectorsSquared(\"abcd\", v));");
code("}");

code("float zDistanceToVector(string qv = \"\", string v = \"\") {");
code("trVectorQuestVarSet(\"abcd\", kbGetBlockPosition(\"\"+1*trQuestVarGet(qv), true));");
code("return(zDistanceBetweenVectors(\"abcd\", v));");
code("}");

code("void trVectorSetFromAngle(string qv = \"\", float angle = 0) {");
code("trVectorQuestVarSet(qv,xsVectorSet(xsSin(angle), 0, xsCos(angle)));");
code("}");

code("float angleBetweenVectors(string from = \"\", string to = \"\") {");
code("float a = trQuestVarGet(to+\"X\")-trQuestVarGet(from+\"X\");");
code("a = a / (trQuestVarGet(to+\"Z\")-trQuestVarGet(from+\"Z\"));");
code("a = xsAtan(a);");
code("if (trVectorQuestVarGetZ(from) > trVectorQuestVarGetZ(to)) {");
code("if (trVectorQuestVarGetX(from) > trVectorQuestVarGetX(to)) {");
code("a = a - PI;");
code("} else {");
code("a = a + PI;");
code("}");
code("}");
code("return(a);");
code("}");

code("vector zGetUnitVector(string start = \"\", string end = \"\", float mod = 1.0) {");
code("float xdiff = trQuestVarGet(end + \"X\") - trQuestVarGet(start + \"X\");");
code("float zdiff = trQuestVarGet(end + \"Z\") - trQuestVarGet(start + \"Z\");");
code("float dist = xsSqrt(xdiff * xdiff + zdiff * zdiff);");
code("vector ret = xsVectorSet(xdiff / dist * mod, 0, zdiff / dist * mod);");
code("return(ret);");
code("}");

code("vector zGetUnitVector3d(string start = \"\", string end = \"\", float mod = 1.0) {");
code("float xdiff = trQuestVarGet(end + \"X\") - trQuestVarGet(start + \"X\");");
code("float ydiff = trQuestVarGet(end + \"Y\") - trQuestVarGet(start + \"Y\");");
code("float zdiff = trQuestVarGet(end + \"Z\") - trQuestVarGet(start + \"Z\");");
code("float dist = xsSqrt(xdiff * xdiff + ydiff * ydiff + zdiff * zdiff);");
code("vector ret = xsVectorSet(xdiff / dist * mod, ydiff / dist * mod, zdiff / dist * mod);");
code("return(ret);");
code("}");

code("vector crossProduct(string a = \"\", string b = \"\") {");
code("float x = trQuestVarGet(a + \"y\") * trQuestVarGet(b + \"z\") - trQuestVarGet(a + \"z\") * trQuestVarGet(b + \"y\");");
code("float y = trQuestVarGet(a + \"z\") * trQuestVarGet(b + \"x\") - trQuestVarGet(a + \"x\") * trQuestVarGet(b + \"z\");");
code("float z = trQuestVarGet(a + \"x\") * trQuestVarGet(b + \"y\") - trQuestVarGet(a + \"y\") * trQuestVarGet(b + \"x\");");
code("vector ret = xsVectorSet(x, y, z);");
code("return(ret);");
code("}");

code("bool terrainIsType(string qv = \"\", int type = 0, int subtype = 0) {");
code("bool isType = trGetTerrainType(trQuestVarGet(qv+\"x\"),trQuestVarGet(qv+\"z\")) == type;");
code("isType = trGetTerrainSubType(trQuestVarGet(qv+\"x\"),trQuestVarGet(qv+\"z\")) == subtype;");
code("return(isType);");
code("}");

code("vector intersectionWithCircle(string start = \"\", string end = \"\", string center = \"\", float radius = 0) {");
code("trVectorQuestVarSet(\"iDir\", zGetUnitVector(start, end));");
code("float x = 0;");
code("float z = 0;");
code("float dist = 0;");
code("float len = radius * 2;");
code("float lenmod = radius;");
code("for(i=8; >0) {");
code("x = trQuestVarGet(start+\"x\") + trQuestVarGet(\"iDirx\") * len;");
code("z = trQuestVarGet(start+\"z\") + trQuestVarGet(\"iDirz\") * len;");
code("dist = xsPow(x - trQuestVarGet(center+\"x\"), 2) + xsPow(z - trQuestVarGet(center+\"z\"), 2);");
code("if (dist > radius * radius) {");
code("len = len - lenmod;");
code("} else {");
code("len = len + lenmod;");
code("}");
code("lenmod = lenmod * 0.5;");
code("}");
code("return(xsVectorSet(x,0,z));");
code("}");

code("void modularCounterInit(string name = \"\", int size = 0) {");
code("trQuestVarSet(\"counter\" + name + \"size\", size);");
code("trQuestVarSet(\"counter\" + name + \"pointer\", 1);");
code("trQuestVarSet(name, 1);");
code("}");

code("int modularCounterNext(string name = \"\") {");
code("trQuestVarSet(\"counter\" + name + \"pointer\", 1 + trQuestVarGet(\"counter\" + name + \"pointer\"));");
code("if (trQuestVarGet(\"counter\" + name + \"pointer\") > trQuestVarGet(\"counter\" + name + \"size\")) {");
code("trQuestVarSet(\"counter\" + name + \"pointer\", 1);");
code("}");
code("trQuestVarSet(name, trQuestVarGet(\"counter\"+name+\"pointer\"));");
code("return(0 + trQuestVarGet(\"counter\" + name + \"pointer\"));");
code("}");

code("int peekModularCounterNext(string name = \"\") {");
code("trQuestVarSet(\"counter\" + name + \"fake\", 1 + trQuestVarGet(\"counter\" + name + \"pointer\"));");
code("if (trQuestVarGet(\"counter\" + name + \"fake\") >= trQuestVarGet(\"counter\" + name + \"size\")) {");
code("trQuestVarSet(\"counter\" + name + \"fake\", 1);");
code("}");
code("return(0 + trQuestVarGet(\"counter\" + name + \"fake\"));");
code("}");

code("void zBankInit(string name = \"\", int start = 0, int length = 0) {");
code("trQuestVarSet(\"z\"+name+\"start\", start);");
code("trQuestVarSet(\"z\"+name+\"end\", start + length);");
code("trQuestVarSet(\"z\"+name+\"pointer\", start);");
code("trQuestVarSet(name, start);");
code("}");

code("int zBankNext(string name = \"\", bool select = false) {");
code("trQuestVarSet(\"z\"+name+\"pointer\", trQuestVarGet(\"z\"+name+\"pointer\") + 1);");
code("if (trQuestVarGet(\"z\"+name+\"pointer\") >= trQuestVarGet(\"z\"+name+\"end\")) {");
code("trQuestVarSet(\"z\"+name+\"pointer\", trQuestVarGet(\"z\"+name+\"start\"));");
code("}");
code("trQuestVarSet(name, trQuestVarGet(\"z\"+name+\"pointer\"));");
code("if (select) {");
code("trUnitSelectClear();");
code("trUnitSelectByID(1*trQuestVarGet(name));");
code("}");
code("return(1*trQuestVarGet(name));");
code("}");

code("void zSetVar(string name = \"\", string var = \"\", float val = 0) {");
code("int index = trQuestVarGet(name);");
code("trQuestVarSet(\"z\"+name+\"i\"+index+\"v\"+var, val);");
code("}");

code("void zSetVarByIndex(string name = \"\", string var = \"\", int index = 0, float val = 0) {");
code("trQuestVarSet(\"z\"+name+\"i\"+index+\"v\"+var, val);");
code("}");

code("float zGetVar(string name = \"\", string var = \"\") {");
code("int index = trQuestVarGet(name);");
code("return(trQuestVarGet(\"z\"+name+\"i\"+index+\"v\"+var));");
code("}");

code("float zGetVarByIndex(string name = \"\", string var = \"\", int index = 0) {");
code("return(trQuestVarGet(\"z\"+name+\"i\"+index+\"v\"+var));");
code("}");

code("int zGetBankCount(string name = \"\") {");
code("return(trQuestVarGet(\"z\"+name+\"end\") - trQuestVarGet(\"z\"+name+\"start\"));");
code("}");

code("void yAddToDatabase(string to = \"\", string from = \"\") {");
code("int zdatacount = trQuestVarGet(\"zdatalite\" + to + \"count\");");
code("trQuestVarSet(\"zdatalite\" + to + \"index\"+zdatacount, trQuestVarGet(from));");
code("trQuestVarSet(\"zdatalite\" + to + \"count\", zdatacount+1);");
code("}");

code("int yGetDatabaseCount(string db = \"\") {");
code("return(trQuestVarGet(\"zdatalite\" + db + \"count\"));");
code("}");

code("int yDatabaseNext(string db = \"\", bool select = false, int pointer = 0) {");
code("for(zdatapointer=0;>1){}");
code("trQuestVarSet(\"zdatalite\" + db + \"pointer\"+pointer, trQuestVarGet(\"zdatalite\" + db + \"pointer\"+pointer)-1);");
code("if (0 > trQuestVarGet(\"zdatalite\" + db + \"pointer\"+pointer)) {");
code("trQuestVarSet(\"zdatalite\" + db + \"pointer\"+pointer, trQuestVarGet(\"zdatalite\" + db + \"count\")-1);");
code("}");
code("if (trQuestVarGet(\"zdatalite\" + db + \"pointer\"+pointer) >= trQuestVarGet(\"zdatalite\" + db + \"count\")) {");
code("trQuestVarSet(\"zdatalite\" + db + \"pointer\"+pointer, trQuestVarGet(\"zdatalite\" + db + \"count\")-1);");
code("}");
code("zdatapointer = trQuestVarGet(\"zdatalite\" + db + \"pointer\"+pointer);");
code("trQuestVarSet(db, trQuestVarGet(\"zdatalite\" + db + \"index\"+zdatapointer));");
code("trQuestVarSet(\"zdatalite\"+db+\"pointer\", zdatapointer);");
code("if (select) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(db), true);");
code("return(kbGetBlockID(\"\"+1*trQuestVarGet(db), true));");
code("}");
code("return(trQuestVarGet(db));");
code("}");

code("void yDatabaseSelectAll(string db = \"\") {");
code("trUnitSelectClear();");
code("for(zdatapointer=0; <yGetDatabaseCount(db)) {");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"zdatalite\"+db+\"index\"+zdatapointer), true);");
code("}");
code("}");

code("bool yDatabaseContains(string db = \"\", int index = 0) {");
code("for (x=yGetDatabaseCount(db) - 1; >=0) {");
code("if (xsRound(trQuestVarGet(\"zdatalite\" + db + \"index\" + x)) == index) {");
code("trQuestVarSet(\"zdatalite\" + db + \"pointer\", x);");
code("trQuestVarSet(db, index);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+index, true);");
code("return(true);");
code("}");
code("}");
code("return(false);");
code("}");


code("void yDatabasePointerDefault(string db = \"\", int pointer = 0) {");
code("trQuestVarSet(\"zdatalite\" + db + \"pointer\"+pointer, 0);");
code("}");

code("void yRemoveFromDatabase(string db = \"\") {");
code("int zdatacount = trQuestVarGet(\"zdatalite\" + db + \"count\") - 1;");
code("int zdataremove = trQuestVarGet(\"zdatalite\" + db + \"pointer\");");
code("trQuestVarSet(\"zdatalite\" + db + \"index\"+zdataremove,");
code("trQuestVarGet(\"zdatalite\" + db + \"index\"+zdatacount));");
code("trQuestVarSet(\"zdatalite\" + db + \"count\", zdatacount);");
code("}");

code("void yRemoveUpdateString(string db = \"\", string attr = \"\") {");
code("int zdatacount = trQuestVarGet(\"zdatalite\" + db + \"count\");");
code("int zdataremove = trQuestVarGet(\"zdatalite\" + db + \"pointer\");");
code("trStringQuestVarSet(\"zdatalite\" + db + \"\" + zdataremove + \"\" + attr,");
code("trStringQuestVarGet(\"zdatalite\" + db + \"\" + zdatacount + \"\" + attr));");
code("trStringQuestVarSet(\"zdatalite\" + db + \"\" + zdatacount + \"\" + attr, \" \");");
code("}");

code("void yRemoveUpdateVar(string db = \"\", string attr = \"\") {");
code("int zdatacount = trQuestVarGet(\"zdatalite\" + db + \"count\");");
code("int zdataremove = trQuestVarGet(\"zdatalite\" + db + \"pointer\");");
code("trQuestVarSet(\"zdatalite\" + db + \"\" + zdataremove + \"\" + attr,");
code("trQuestVarGet(\"zdatalite\" + db + \"\" + zdatacount + \"\" + attr));");
code("trQuestVarSet(\"zdatalite\" + db + \"\" + zdatacount + \"\" + attr, 0);");
code("}");

code("void yRemoveAllCopies(string db = \"\", int val = 0) {");
code("int data = 0;");
code("for(x=yGetDatabaseCount(db); >0) {");
code("data = yDatabaseNext(db, false, 999);");
code("if (data == val) {");
code("yRemoveFromDatabase(db);");
code("}");
code("}");
code("}");

code("void yTransferUpdateVar(string to = \"\", string from = \"\", string attr = \"\") {");
code("int zdatato = trQuestVarGet(\"zdatalite\" + to + \"count\") - 1;");
code("int zdatafrom = trQuestVarGet(\"zdatalite\" + from + \"pointer\");");
code("trQuestVarSet(\"zdatalite\" + to + \"\"  + zdatato + \"\" + attr,");
code("trQuestVarGet(\"zdatalite\" + from + \"\"  + zdatafrom + \"\" + attr));");
code("}");

code("void yTransferUpdateString(string to = \"\", string from = \"\", string attr = \"\") {");
code("int zdatato = trQuestVarGet(\"zdatalite\" + to + \"count\") - 1;");
code("int zdatafrom = trQuestVarGet(\"zdatalite\" + from + \"pointer\");");
code("trStringQuestVarSet(\"zdatalite\" + to + \"\"  + zdatato + \"\" + attr,");
code("trStringQuestVarGet(\"zdatalite\" + from + \"\"  + zdatafrom + \"\" + attr));");
code("}");

code("void yAddUpdateString(string db = \"\", string attr = \"\", string value = \"\") {");
code("int zdatacount = trQuestVarGet(\"zdatalite\" + db + \"count\") - 1;");
code("trStringQuestVarSet(\"zdatalite\" + db + zdatacount + attr, value);");
code("}");

code("void yAddUpdateVar(string db = \"\", string attr = \"\", float value = 0.0) {");
code("int zdatacount = trQuestVarGet(\"zdatalite\" + db + \"count\") - 1;");
code("trQuestVarSet(\"zdatalite\" + db + zdatacount + attr, value);");
code("}");

code("string yGetString(string db = \"\", string attr = \"\") {");
code("int zdatapointer = trQuestVarGet(\"zdatalite\" + db + \"pointer\");");
code("return(trStringQuestVarGet(\"zdatalite\" + db + zdatapointer + attr));");
code("}");

code("float yGetVar(string db = \"\", string attr = \"\") {");
code("int zdatapointer = trQuestVarGet(\"zdatalite\" + db + \"pointer\");");
code("return(trQuestVarGet(\"zdatalite\" + db + \"\" + zdatapointer + \"\" + attr));");
code("}");

code("string yGetStringByIndex(string db = \"\", string attr = \"\", int index = 0) {");
code("return(trStringQuestVarGet(\"zdatalite\" + db + \"\" + index + \"\" + attr));");
code("}");

code("float yGetVarByIndex(string db = \"\", string attr = \"\", int index = 0) {");
code("return(trQuestVarGet(\"zdatalite\" + db + \"\" + index + \"\" + attr));");
code("}");

code("void ySetString(string db = \"\", string attr = \"\", string value = \"\") {");
code("int zdatapointer = trQuestVarGet(\"zdatalite\" + db + \"pointer\");");
code("trStringQuestVarSet(\"zdatalite\" + db + \"\" + zdatapointer + \"\" + attr, value);");
code("}");

code("void ySetVar(string db = \"\", string attr = \"\", float value = 0.0) {");
code("int zdatapointer = trQuestVarGet(\"zdatalite\" + db + \"pointer\");");
code("trQuestVarSet(\"zdatalite\" + db + \"\" + zdatapointer + \"\" + attr, value);");
code("}");

code("void ySetStringByIndex(string db = \"\", string attr = \"\", int index = 0, string value = \"\") {");
code("trStringQuestVarSet(\"zdatalite\" + db + \"\" + index + \"\" + attr, value);");
code("}");

code("void ySetVarByIndex(string db = \"\", string attr = \"\", int index = 0, float value = 0.0) {");
code("trQuestVarSet(\"zdatalite\" + db + \"\" + index + \"\" + attr, value);");
code("}");

code("int yGetUnitAtIndex(string db = \"\", int index = 0) {");
code("return(trQuestVarGet(\"zdatalite\"+db+\"index\"+index));");
code("}");

code("int ySetUnitAtIndex(string db = \"\", int index = 0, int value = 0) {");
code("trQuestVarSet(\"zdatalite\"+db+\"index\"+index, value);");
code("}");

code("int yGetPointer(string db = \"\") {");
code("return(trQuestVarGet(\"zdatalite\"+db+\"pointer\"));");
code("}");

code("void ySetPointer(string db = \"\", int val = 0) {");
code("trQuestVarSet(\"zdatalite\"+db+\"pointer\", val);");
code("trQuestVarSet(db, trQuestVarGet(\"zdatalite\" + db + \"index\"+val));");
code("}");

code("void yClearDatabase(string db = \"\") {");
code("trQuestVarSet(\"zdatalite\" + db + \"count\", 0);");
code("trQuestVarSet(\"zdatalite\" + db + \"pointer\", 0);");
code("trQuestVarSet(db, 0);");
code("}");


code("int yFindLatestReverse(string qv = \"\", string proto = \"\", int p = 0) {");
code("int id = kbGetProtoUnitID(proto);");
code("trUnitSelectClear();");
code("for(x=trGetNextUnitScenarioNameNumber(); >trQuestVarGet(qv)) {");
code("int i = kbGetBlockID(\"\"+x, true);");
code("if (kbGetUnitBaseTypeID(i) == id) {");
code("trUnitSelectClear();");
code("trUnitSelectByID(i);");
code("if (trUnitIsOwnedBy(p)) {");
code("trQuestVarSet(qv, x);");
code("return(i);");
code("}");
code("}");
code("}");
code("return(-1);");
code("}");

code("int yFindLatest(string qv = \"\", string proto = \"\", int p = 0) {");
code("int id = kbGetProtoUnitID(proto);");
code("trUnitSelectClear();");
code("trQuestVarSet(\"next\",trGetNextUnitScenarioNameNumber() - 1);");
code("while(trQuestVarGet(\"next\") > trQuestVarGet(qv)) {");
code("trQuestVarSet(qv, 1 + trQuestVarGet(qv));");
code("int i = kbGetBlockID(\"\"+1*trQuestVarGet(qv), true);");
code("if (kbGetUnitBaseTypeID(i) == id) {");
code("trUnitSelectClear();");
code("trUnitSelectByID(i);");
code("if (trUnitIsOwnedBy(p)) {");
code("return(i);");
code("}");
code("}");
code("}");
code("return(-1);");
code("}");
code("const int CURSED_RANGE = 1;");
code("const int CURSED_DURATION = 2;");
code("const int CURSED_POWER = 3;");
code("const int CURSED_COOLDOWNS = 4;");
code("const int CURSED_ATTACK_SPEED = 5;");
code("const int CURSED_SPECIAL_ATTACK = 6;");
code("const int NOTTUD_BLESSING = 7;");
code("const int ZENO_PARADOX = 8;");
code("const int YEEB_STAFF = 9;");
code("const int ANRAHEIR_WONDERS = 10;");
code("const int TILE_NOT_FOUND = 0;");
code("const int TILE_FOUND = 1;");
code("const int TILE_VISITED = 2;");

code("const int EDGE_NOT_FOUND = 0;");
code("const int EDGE_NORMAL = 1;");
code("const int EDGE_CHASM = 2;");

code("const int ROOM_BASIC = 0;");
code("const int ROOM_STARTER = 1;");
code("const int ROOM_BOSS = 2;");
code("const int ROOM_NICK = 3;");

code("const int CHEST_KEY = 1;");
code("const int CHEST_PADS = 2;");
code("const int CHEST_ENCOUNTER = 3;");

code("const int MOONBLADE = 1;");
code("const int SUNBOW = 2;");
code("const int CLASS_COUNT = 2;");

code("int ENEMY_PLAYER = 0;");
code("bool Multiplayer = false;");

code("int TERRAIN_CHASM = 5;");
code("int TERRAIN_SUB_CHASM = 4;");

code("int TERRAIN_WALL = 2;");
code("int TERRAIN_SUB_WALL = 13;");

code("int TERRAIN_PRIMARY = 0;");
code("int TERRAIN_SUB_PRIMARY = 1;");

code("int TERRAIN_SECONDARY = 0;");
code("int TERRAIN_SUB_SECONDARY = 1;");

code("void setupPlayerProto(string proto = \"\", float health = 0, float attack = 0, float speed = 4, float range = 0) {");
code("int pNum = kbGetProtoUnitID(proto);");
code("for(p=0; <ENEMY_PLAYER) {");
code("trModifyProtounit(proto, p, 27, 9999999999999999999.0);");
code("trModifyProtounit(proto, p, 27, -9999999999999999999.0);");
code("trModifyProtounit(proto, p, 27, attack);");
code("zInitProtoUnitStat(proto, p, 27, attack);");
code("trModifyProtounit(proto, p, 30, 9999999999999999999.0);");
code("trModifyProtounit(proto, p, 30, -9999999999999999999.0);");
code("trModifyProtounit(proto, p, 31, 9999999999999999999.0);");
code("trModifyProtounit(proto, p, 31, -9999999999999999999.0);");
code("trModifyProtounit(proto, p, 31, attack);");
code("zInitProtoUnitStat(proto, p, 31, attack);");
code("trQuestVarSet(\"proto\"+pNum+\"attack\", attack);");
code("zInitProtoUnitStat(proto, p, 13, 1);");
code("trModifyProtounit(proto, p, 0, 9999999999999999999.0);");
code("trModifyProtounit(proto, p, 0, -9999999999999999999.0);");
code("trModifyProtounit(proto, p, 0, health);");
code("zInitProtoUnitStat(proto, p, 0, health);");
code("trQuestVarSet(\"proto\"+pNum+\"health\", health);");
code("trModifyProtounit(proto, p, 2, 9999999999999999999.0);");
code("trModifyProtounit(proto, p, 2, -9999999999999999999.0);");
code("trModifyProtounit(proto, p, 2, 20);");
code("trModifyProtounit(proto, p, 11, 9999999999999999999.0);");
code("trModifyProtounit(proto, p, 11, -9999999999999999999.0);");
code("trModifyProtounit(proto, p, 11, range);");
code("zInitProtoUnitStat(proto, p, 11, range);");
code("trQuestVarSet(\"proto\"+pNum+\"range\", range);");
code("trModifyProtounit(proto, p, 1, 9999999999999999999.0);");
code("trModifyProtounit(proto, p, 1, -9999999999999999999.0);");
code("trModifyProtounit(proto, p, 1, speed);");
code("zInitProtoUnitStat(proto, p, 1, speed);");
code("trQuestVarSet(\"proto\"+pNum+\"speed\", speed);");
code("trModifyProtounit(proto, p, 24, -1);");
code("trModifyProtounit(proto, p, 25, -1);");
code("trModifyProtounit(proto, p, 26, -1);");
code("}");
code("trModifyProtounit(proto, 0, 2, -20);");
code("}");

code("void setupClass(string proto = \"\", int class = 0, int firstDelay = 0, int nextDelay = 0, int specialCD = 0) {");
code("int p = kbGetProtoUnitID(proto);");
code("trQuestVarSet(\"class\"+class+\"proto\", p);");
code("trQuestVarSet(\"proto\"+p+\"class\", class);");
code("trQuestVarSet(\"class\"+class+\"firstDelay\", firstDelay);");
code("trQuestVarSet(\"class\"+class+\"nextDelay\", nextDelay);");
code("trQuestVarSet(\"class\"+class+\"specialAttackCooldown\", specialCD);");
code("}");

code("void chooseClass(int p = 0, int class = 0) {");
code("trQuestVarSet(\"p\"+p+\"class\", class);");
code("trEventFire(1000 + 12 * class + p);");
code("int proto = trQuestVarGet(\"class\"+class+\"proto\");");
code("trQuestVarSet(\"p\"+p+\"health\", trQuestVarGet(\"proto\"+proto+\"health\"));");
code("trQuestVarSet(\"p\"+p+\"attack\", trQuestVarGet(\"proto\"+proto+\"attack\"));");
code("trQuestVarSet(\"p\"+p+\"baseAttack\", trQuestVarGet(\"proto\"+proto+\"attack\"));");
code("trQuestVarSet(\"p\"+p+\"range\", trQuestVarGet(\"proto\"+proto+\"range\"));");
code("trQuestVarSet(\"p\"+p+\"speed\", trQuestVarGet(\"proto\"+proto+\"speed\"));");
code("trQuestVarSet(\"p\"+p+\"firstDelay\", trQuestVarGet(\"class\"+class+\"firstDelay\"));");
code("trQuestVarSet(\"p\"+p+\"nextDelay\", trQuestVarGet(\"class\"+class+\"nextDelay\"));");
code("trQuestVarSet(\"p\"+p+\"specialAttackCooldown\", trQuestVarGet(\"class\"+class+\"specialAttackCooldown\"));");
code("trQuestVarSet(\"p\"+p+\"projectiles\", 1);");
code("trQuestVarSet(\"p\"+p+\"spellRange\", 1);");
code("trQuestVarSet(\"p\"+p+\"spellDamage\", 1);");
code("trQuestVarSet(\"p\"+p+\"spellDuration\", 1);");
code("trQuestVarSet(\"p\"+p+\"cooldownReduction\", 1);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"unit\");");
code("if (trUnitAlive()) {");
code("trMutateSelected(proto);");
code("}");
code("trPlayerKillAllGodPowers(p);");
code("trCounterAbort(\"lure\");");
code("trCounterAbort(\"well\");");
code("trCounterAbort(\"rain\");");
code("if (class > 0) {");
code("trQuestVarSet(\"p\"+p+\"wellCooldownStatus\", 2);");
code("trQuestVarSet(\"p\"+p+\"lureCooldownStatus\", 2);");
code("trQuestVarSet(\"p\"+p+\"rainCooldownStatus\", 2);");
code("}");
code("}");

code("rule setup");
code("active");
code("runImmediately");
code("{");
code("Multiplayer = aiIsMultiplayer();");
code("trSetUnitIdleProcessing(false);");

code("trSetObscuredUnits(false);");
code("configUndef(\"ErodeBuildingFoundations\");");

code("ENEMY_PLAYER = cNumberPlayers - 1;");

code("trForceNonCinematicModels(true);");


code("ambientColor(0,0,0);");
code("sunColor(0,0,0);");
code("trLetterBox(true);");
code("trUIFadeToColor(0,0,0,0,0,true);");

code("modularCounterInit(\"spyFind\", 32);");
code("modularCounterInit(\"spyFound\", 32);");

code("trTechSetStatus(0, 304, 4);");
code("aiSet(\"NoAI\", 0);");
code("aiSet(\"NoAI\", ENEMY_PLAYER);");

code("setupClass(\"Militia\", 0, 500, 1000);");
code("setupClass(\"Hero Greek Theseus\", MOONBLADE, 460, 1000, 7);");
code("setupClass(\"Hero Greek Hippolyta\", SUNBOW, 1350, 1750);");

code("for(p=1; < ENEMY_PLAYER) {");
code("trPlayerSetDiplomacy(p, 0, \"neutral\");");
code("trSetCivAndCulture(p, 1, 0);");
code("trModifyProtounit(\"Animal Attractor\", p, 2, -99);");
code("trModifyProtounit(\"Animal Attractor\", p, 55, 4);");
code("trModifyProtounit(\"Tunnel\", p, 2, -99);");
code("trModifyProtounit(\"Tunnel\", p, 55, 4);");
code("trModifyProtounit(\"Ajax\", p, 5, 99);");
code("trModifyProtounit(\"Vision SFX\", p, 0, -9999);");
code("trModifyProtounit(\"Dwarf\", p, 55, 4);");
code("trModifyProtounit(\"Athena\", p, 55, 4);");

code("trPlayerKillAllGodPowers(p);");
code("trPlayerTechTreeEnabledGodPowers(p, false);");

code("trForbidProtounit(p, \"Trident Soldier Hero\");");
code("trForbidProtounit(p, \"Archer Atlantean Hero\");");
code("trForbidProtounit(p, \"Royal Guard Hero\");");
code("trForbidProtounit(p, \"Lancer Hero\");");
code("trForbidProtounit(p, \"Javelin Cavalry Hero\");");
code("trForbidProtounit(p, \"Wall Connector\");");
code("trForbidProtounit(p, \"Dock\");");
code("trForbidProtounit(p, \"Settlement Level 1\");");
code("trForbidProtounit(p, \"House\");");
code("trForbidProtounit(p, \"Granary\");");
code("trForbidProtounit(p, \"Mining Camp\");");
code("trForbidProtounit(p, \"Lumber Camp\");");
code("trForbidProtounit(p, \"Monument\");");
code("trForbidProtounit(p, \"Temple\");");
code("trForbidProtounit(p, \"Wonder\");");
code("trForbidProtounit(p, \"Market\");");
code("trForbidProtounit(p, \"Dwarf Foundry\");");
code("trForbidProtounit(p, \"Armory\");");
code("trForbidProtounit(p, \"Hill Fort\");");
code("trForbidProtounit(p, \"Tower\");");
code("trForbidProtounit(p, \"Longhouse\");");
code("}");

code("xsEnableRule(\"delayed_modify\");");
code("xsEnableRule(\"data_load_00\");");
code("xsDisableSelf();");
code("}");

code("rule delayed_modify");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime) {");
code("trModifyProtounit(\"Transport Ship Atlantean\", 1, 5, 2147483648.0);");
code("trModifyProtounit(\"Transport Ship Atlantean\", 1, 5, 2147483648.0);");
code("trModifyProtounit(\"Transport Ship Atlantean\", 1, 5, 1);");

code("setupPlayerProto(\"Militia\", 100, 10, 4.8);");
code("setupPlayerProto(\"Wolf\", 200, 10, 5);");
code("setupPlayerProto(\"Hero Greek Theseus\", 1000, 50, 4.3);");
code("setupPlayerProto(\"Hero Greek Hippolyta\", 1000, 50, 4.3, 16);");
code("setupPlayerProto(\"Royal Guard Hero\", 1200, 30, 4.6);");

code("xsEnableRule(\"setup_enemies\");");
code("xsDisableSelf();");
code("}");
code("}");

code("rule no_extra_resources");
code("active");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime) {");
code("for (p=1; <cNumberPlayers) {");
code("trPlayerGrantResources(p, \"Food\", -1000.0);");
code("trPlayerGrantResources(p, \"Wood\", -1000.0);");
code("trPlayerGrantResources(p, \"Gold\", -1000.0);");
code("trPlayerGrantResources(p, \"Favor\", -1000.0);");
code("}");
code("xsDisableSelf();");
code("}");
code("}");

code("rule Z_cin_00");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 1) {");
code("trSetFogAndBlackmap(false, false);");
code("trCameraCut(vector(96,90,98), vector(0,-1,0), vector(0,0,1), vector(1,0,0));");
code("int posX = 96 - 10;");
code("int posZ = 96 + 10;");
code("trModifyProtounit(\"Curse SFX\", 1, 8, 8);");
code("trArmyDispatch(\"1,0\", \"Dwarf\",1,posX,0,posZ,0,true);");
code("for(x=10; >0) {");
code("posX = posX + 2;");
code("trArmyDispatch(\"1,0\", \"Dwarf\",1,posX,0,posZ,0,false);");
code("}");
code("for(x=5; >0) {");
code("posX = posX - 2;");
code("posZ = posZ - 2;");
code("trArmyDispatch(\"1,0\", \"Dwarf\",1,posX,0,posZ,0,false);");
code("}");
code("for (x=4; >0) {");
code("posX = posX + 2;");
code("posZ = posZ - 2;");
code("trArmyDispatch(\"1,0\", \"Dwarf\",1,posX,0,posZ,0,false);");
code("}");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Curse SFX\");");

code("trUIFadeToColor(0,0,0,500,0,false);");
code("trSoundPlayFN(\"cinematics\15_in\gong.wav\", \"4\", -1, \"\",\"\");");
code("trSoundPlayFN(\"godpower.wav\", \"6\", -1, \"\",\"\");");
code("trOverlayText(\"Zenophobia presents...\", 4.0, -1, -1, -1);");

code("xsEnableRule(\"Z_cin_01\");");
code("xsDisableSelf();");
code("}");
code("}");

code("rule Z_cin_01");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 5) {");
code("trSoundPlayFN(\"ui\thunder2.wav\",\"1\",-1,\"\",\"\");");
code("trOverlayText(\"Hero Build Fighters 3\", 3.0, -1, -1, -1);");
code("trUIFadeToColor(0,0,0,1000,3000,true);");
code("xsEnableRule(\"Z_cin_02\");");
code("xsDisableSelf();");
code("}");
code("}");

code("rule Z_cin_02");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 5) {");
code("int minProgress = 10;");
code("for (p=1; < ENEMY_PLAYER) {");
code("minProgress = xsMin(minProgress, trQuestVarGet(\"p\"+p+\"progress\"));");
code("}");
code("if (minProgress == 0) {");
code("trQuestVarSet(\"newPlayers\", 1);");
code("trQuestVarSet(\"stage\", 1);");
code("} else {");
code("trLetterBox(false);");
code("trMusicPlay(\"cinematics\9_in\music.mp3\", \"1\", 0.5);");
code("trUIFadeToColor(0,0,0,1000,0,false);");
code("trCameraCut(vector(96,70,26), vector(0,-0.7071,0.7071), vector(0,0.7071,0.7071), vector(1,0,0));");
code("trQuestVarSet(\"chooser\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\", \"Athena\",1,96,0,90,0,true);");
code("trMessageSetText(\"Host: Choose a stage to challenge.\",-1);");

code("int posX = 96 - 2 * minProgress;");

code("for(x=0; <= minProgress) {");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Flag Numbered\",1,posX,0,100,0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitSetAnimationPath(\"\"+x+\",0,0,0,0,0,0\");");
code("yAddToDatabase(\"stageChoices\", \"next\");");
code("posX = posX + 4;");
code("}");

code("xsEnableRule(\"choose_stage_00\");");
code("}");
code("trSetLighting(\"default\", 0.1);");
code("xsDisableSelf();");
code("xsEnableRule(\"choose_stage_01\");");
code("}");
code("}");

code("rule choose_stage_00");
code("inactive");
code("highFrequency");
code("{");
code("int n = yDatabaseNext(\"stageChoices\");");
code("if (trCountUnitsInArea(\"\"+n, 1, \"Athena\",3) == 1) {");
code("trQuestVarSet(\"stage\", yGetPointer(\"stageChoices\") + 1);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"chooser\", true);");
code("trUnitChangeProtoUnit(\"Rocket\");");
code("for(x=yGetDatabaseCount(\"stageChoices\"); >0) {");
code("yDatabaseNext(\"stageChoices\", true);");
code("trUnitDestroy();");
code("}");
code("yClearDatabase(\"stageChoices\");");
code("xsDisableSelf();");
code("trForceNonCinematicModels(true);");
code("trLetterBox(true);");
code("trUIFadeToColor(0,0,0,1000,0,true);");
code("trSoundPlayFN(\"ui\thunder2.wav\",\"1\",-1,\"\",\"\");");
code("trOverlayText(\"Stage \" + 1*trQuestVarGet(\"stage\") + \" chosen!\", 3.0, -1, -1, -1);");
code("}");
code("}");

code("int edgeName(int first = 0, int second = 0) {");
code("return(16 * xsMin(first, second) + xsMax(first, second));");
code("}");

code("void paintEnemies(int x0 = 0, int z0 = 0, int x1 = 0, int z1 = 0) {");
code("for(a=x0; < x1) {");
code("trQuestVarSetFromRand(\"deploy\", 0, 1, false);");
code("if (trQuestVarGet(\"deploy\") < trQuestVarGet(\"enemyDensity\")) {");
code("trQuestVarSetFromRand(\"z\", z0, z1, true);");
code("trQuestVarSet(\"posX\", a);");
code("trQuestVarSet(\"posZ\", trQuestVarGet(\"z\"));");
code("if (terrainIsType(\"pos\", TERRAIN_WALL, TERRAIN_SUB_WALL) == false) {");
code("trQuestVarSetFromRand(\"type\", 1, trQuestVarGet(\"enemyProtoCount\"), true);");
code("trQuestVarSetFromRand(\"type2\", 1, trQuestVarGet(\"enemyProtoCount\"), true);");
code("if (trQuestVarGet(\"type2\") < trQuestVarGet(\"type\")) {");
code("trQuestVarSet(\"type\", trQuestVarGet(\"type2\"));");
code("}");
code("trQuestVarSetFromRand(\"heading\", 0, 360, true);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",trStringQuestVarGet(\"enemyProto\"+1*trQuestVarGet(\"type\")),1,");
code("2*a,0,2*trQuestVarGet(\"z\"),trQuestVarGet(\"heading\"),true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitConvert(ENEMY_PLAYER);");
code("yAddToDatabase(\"enemiesIncoming\", \"next\");");
code("}");
code("}");
code("}");
code("for(b=z0; < z1) {");
code("trQuestVarSetFromRand(\"deploy\", 0, 1, false);");
code("if (trQuestVarGet(\"deploy\") < trQuestVarGet(\"enemyDensity\")) {");
code("trQuestVarSetFromRand(\"x\", x0, x1, true);");
code("trQuestVarSet(\"posX\", trQuestVarGet(\"x\"));");
code("trQuestVarSet(\"posZ\", b);");
code("if (terrainIsType(\"pos\", TERRAIN_WALL, TERRAIN_SUB_WALL) == false) {");
code("trQuestVarSetFromRand(\"type\", 1, trQuestVarGet(\"enemyProtoCount\"), true);");
code("trQuestVarSetFromRand(\"type2\", 1, trQuestVarGet(\"enemyProtoCount\"), true);");
code("if (trQuestVarGet(\"type2\") < trQuestVarGet(\"type\")) {");
code("trQuestVarSet(\"type\", trQuestVarGet(\"type2\"));");
code("}");
code("trQuestVarSetFromRand(\"heading\", 0, 360, true);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",trStringQuestVarGet(\"enemyProto\"+1*trQuestVarGet(\"type\")),1,");
code("2*trQuestVarGet(\"x\"),0,2*b,trQuestVarGet(\"heading\"),true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitConvert(ENEMY_PLAYER);");
code("yAddToDatabase(\"enemiesIncoming\", \"next\");");
code("}");
code("}");
code("}");
code("}");

code("void paintEyecandy(int x0 = 0, int z0 = 0, int x1 = 0, int z1 = 0, string type = \"sprite\") {");
code("if (trQuestVarGet(type+\"Density\") > 0) {");
code("for(a=x0; < x1) {");
code("trQuestVarSetFromRand(\"deploy\", 0, 1, false);");
code("if (trQuestVarGet(\"deploy\") < trQuestVarGet(type+\"Density\")) {");
code("trQuestVarSetFromRand(\"z\", z0, z1, true);");
code("trQuestVarSetFromRand(\"type\", 1, 3, true);");
code("trQuestVarSetFromRand(\"heading\", 0, 360, true);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",trStringQuestVarGet(type+\"Proto\"+1*trQuestVarGet(\"type\")),1,");
code("2*a,0,2*trQuestVarGet(\"z\"),trQuestVarGet(\"heading\"),true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitConvert(0);");
code("}");
code("}");
code("for(b=z0; < z1) {");
code("trQuestVarSetFromRand(\"deploy\", 0, 1, false);");
code("if (trQuestVarGet(\"deploy\") < trQuestVarGet(type+\"Density\")) {");
code("trQuestVarSetFromRand(\"x\", x0, x1, true);");
code("trQuestVarSetFromRand(\"type\", 1, 3, true);");
code("trQuestVarSetFromRand(\"heading\", 0, 360, true);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",trStringQuestVarGet(type+\"Proto\"+1*trQuestVarGet(\"type\")),1,");
code("2*trQuestVarGet(\"x\"),0,2*b,trQuestVarGet(\"heading\"),true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitConvert(0);");
code("}");
code("}");
code("}");
code("}");

code("void paintColumns(int x0 = 0, int z0 = 0, int x1 = 0, int z1 = 0) {");
code("if (trQuestVarGet(\"columnDensity\") > 0) {");
code("for(a=x0; < x1) {");
code("trQuestVarSetFromRand(\"deploy\", 0, 1, false);");
code("if (trQuestVarGet(\"deploy\") < trQuestVarGet(\"columnDensity\")) {");
code("trQuestVarSetFromRand(\"z\", z0, z1, true);");
code("trPaintTerrain(a-1, 1*trQuestVarGet(\"z\")-1, a+1, 1*trQuestVarGet(\"z\")+1, TERRAIN_WALL, TERRAIN_SUB_WALL, false);");
code("trChangeTerrainHeight(a, 1*trQuestVarGet(\"z\"), a+1, 1*trQuestVarGet(\"z\")+1, 6, false);");
code("}");
code("}");
code("for(b=z0; < z1) {");
code("trQuestVarSetFromRand(\"deploy\", 0, 1, false);");
code("if (trQuestVarGet(\"deploy\") < trQuestVarGet(\"columnDensity\")) {");
code("trQuestVarSetFromRand(\"x\", x0, x1, true);");
code("trPaintTerrain(1*trQuestVarGet(\"x\")-1, b-1, 1*trQuestVarGet(\"x\")+1, b+1, TERRAIN_WALL, TERRAIN_SUB_WALL, false);");
code("trChangeTerrainHeight(1*trQuestVarGet(\"x\"), b, 1*trQuestVarGet(\"x\")+1, b+1, 6, false);");
code("}");
code("}");
code("}");
code("}");

code("int countRoomEntrances(int x = 0, int z = 0) {");
code("int room = x + 4 * z;");
code("int n = 0;");
code("int count = 0;");
code("for(a=1; >=0) {");
code("for(b=1; >=0) {");
code("trQuestVarSet(\"newX\", (1 - 2 * b) * a + x);");
code("trQuestVarSet(\"newZ\", (1 - 2 * b) * (1 - a) + z);");
code("if (trQuestVarGet(\"newX\") < 0 || trQuestVarGet(\"newZ\") < 0 ||");
code("trQuestVarGet(\"newX\") > 3 || trQuestVarGet(\"newZ\") > 3) {");
code("continue;");
code("}");
code("n = 0 + trQuestVarGet(\"newX\") + 4 * trQuestVarGet(\"newZ\");");
code("if (trQuestVarGet(\"edge\"+edgeName(room, n)) == EDGE_NOT_FOUND) {");
code("continue;");
code("} else {");
code("count = count + 1;");
code("}");
code("}");
code("}");
code("return(count);");
code("}");

code("void paintSecondary(int x0 = 0, int z0 = 0, int x1 = 0, int z1 = 0) {");
code("for(a=x0; < x1) {");
code("trQuestVarSetFromRand(\"z\", z0, z1, true);");
code("trPaintTerrain(a, 1*trQuestVarGet(\"z\"), a, 1*trQuestVarGet(\"z\"), TERRAIN_SECONDARY, TERRAIN_SUB_SECONDARY, false);");
code("}");
code("for(b=z0; < z1) {");
code("trQuestVarSetFromRand(\"x\", x0, x1, true);");
code("trPaintTerrain(1*trQuestVarGet(\"x\"), b, 1*trQuestVarGet(\"x\"), b, TERRAIN_SECONDARY, TERRAIN_SUB_SECONDARY, false);");
code("}");
code("}");

code("void buildRoom(int x = 0, int z = 0, int type = 0) {");
code("int room = x + 4 * z;");
code("int x0 = 0;");
code("int z0 = 0;");
code("int x1 = 0;");
code("int z1 = 0;");
code("trQuestVarSet(\"room\"+room, type);");
code("switch(type)");
code("{");
code("case ROOM_BASIC:");
code("{");
code("for (i=2; >0) {");
code("trQuestVarSetFromRand(\"x0\", x * 35 + 5, x * 35 + 18, true);");
code("trQuestVarSetFromRand(\"z0\", z * 35 + 5, z * 35 + 18, true);");
code("trQuestVarSetFromRand(\"x1\", x * 35 + 22, x * 35 + 35, true);");
code("trQuestVarSetFromRand(\"z1\", z * 35 + 22, z * 35 + 35, true);");
code("x0 = trQuestVarGet(\"x0\");");
code("x1 = trQuestVarGet(\"x1\");");
code("z0 = trQuestVarGet(\"z0\");");
code("z1 = trQuestVarGet(\"z1\");");
code("trPaintTerrain(x0, z0, x1, z1, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x0, z0, x1 + 1, z1 + 1, 0, false);");
code("trVectorQuestVarSet(\"room\"+room+\"center\"+i, xsVectorSet(x0 + x1,0,z0 + z1));");
code("trVectorQuestVarSet(\"room\"+room+\"bottom\"+i, xsVectorSet(x0,0,z0));");
code("paintSecondary(x0, z0, x1, z1);");
code("paintEyecandy(x0, z0, x1, z1, \"tree\");");
code("paintEyecandy(x0, z0, x1, z1, \"rock\");");
code("paintEyecandy(x0, z0, x1, z1, \"sprite\");");
code("paintEnemies(x0, z0, x1, z1);");
code("}");
code("paintColumns(x * 35 + 5, z * 35 + 5, x * 35 + 35, z * 35 + 35);");
code("trQuestVarSet(\"room\", room);");
code("yAddToDatabase(\"basicRooms\", \"room\");");
code("}");
code("case ROOM_STARTER:");
code("{");
code("trPaintTerrain(x * 35 + 10, z * 35 + 10, x * 35 + 30, z * 35 + 30, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x * 35 + 10, z * 35 + 10, x * 35 + 31, z * 35 + 31, 0, false);");
code("trVectorQuestVarSet(\"startPosition\", xsVectorSet(x*70 + 40,0,z*70+40));");
code("if (trQuestVarGet(\"stage\") < 5) {");
code("trVectorQuestVarSet(\"choice1\", xsVectorSet(x*70+48,0,z*70+54));");
code("trVectorQuestVarSet(\"choice2\", xsVectorSet(x*70+54,0,z*70+48));");
code("string choice1 = kbGetProtoUnitName(1*trQuestVarGet(\"class\"+(2*trQuestVarGet(\"stage\")-1)+\"proto\"));");
code("string choice2 = kbGetProtoUnitName(1*trQuestVarGet(\"class\"+(2*trQuestVarGet(\"stage\"))+\"proto\"));");
code("trQuestVarSet(\"choice1unit\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\", choice1, 1, trQuestVarGet(\"choice1x\"),0,trQuestVarGet(\"choice1z\"),225,true);");
code("trQuestVarSet(\"choice2unit\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\", choice2, 1, trQuestVarGet(\"choice2x\"),0,trQuestVarGet(\"choice2z\"),225,false);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(0);");
code("yAddToDatabase(\"stunnedUnits\", \"choice1unit\");");
code("yAddUpdateVar(\"stunnedUnits\", \"proto\", trQuestVarGet(\"class\"+(2*trQuestVarGet(\"stage\")-1)+\"proto\"));");
code("yAddToDatabase(\"stunnedUnits\", \"choice2unit\");");
code("yAddUpdateVar(\"stunnedUnits\", \"proto\", trQuestVarGet(\"class\"+(2*trQuestVarGet(\"stage\"))+\"proto\"));");
code("xsEnableRule(\"class_shop_always\");");
code("}");
code("}");
code("case ROOM_BOSS:");
code("{");
code("trPaintTerrain(x * 35 + 5, z * 35 + 5, x * 35 + 35, z * 35 + 35, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x * 35 + 5, z * 35 + 5, x * 35 + 36, z * 35 + 36, 0, false);");
code("}");
code("case ROOM_NICK:");
code("{");
code("trPaintTerrain(x * 35 + 10, z * 35 + 10, x * 35 + 30, z * 35 + 30, 0, 73, false);");
code("trChangeTerrainHeight(x * 35 + 10, z * 35 + 10, x * 35 + 31, z * 35 + 31, 0, false);");
code("trQuestVarSet(\"nickonhawk\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\", \"Victory Marker\", 1, 70*x+40, 0, 70*z+40,225,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"nickonhawk\", true);");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Odysseus\");");
code("trQuestVarSet(\"nickShop1\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\", \"Victory Marker\", 1, 70*x+26,0, 70*z+26,0,true);");
code("trQuestVarSet(\"nickShop2\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\", \"Victory Marker\", 1, 70*x+26,0, 70*z+54,0,true);");
code("trQuestVarSet(\"nickShop3\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\", \"Victory Marker\", 1, 70*x+54,0, 70*z+26,0,true);");
code("trQuestVarSet(\"nickShop4\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\", \"Victory Marker\", 1, 70*x+54,0, 70*z+54,0,true);");
code("for(i=4; >0) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"nickShop\"+i, true);");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Outpost\");");
code("}");
code("}");
code("}");
code("}");

code("int getOtherVertex(int edge = 0, int v = 0) {");
code("if (edge >= 16 * v) {");
code("return(edge - 16 * v);");
code("} else {");
code("return(edge / 16);");
code("}");
code("}");

code("void buildEdge(int edge = 0, int type = 0) {");
code("if (trQuestVarGet(\"edge\"+edge) == EDGE_NOT_FOUND) {");
code("int first = edge / 16;");
code("int second = edge - 16 * first;");
code("int z0 = first / 4;");
code("int x0 = first - 4 * z0;");
code("int z1 = second / 4;");
code("int x1 = second - 4 * z1;");
code("z0 = z0 * 35 + 17;");
code("x0 = x0 * 35 + 17;");
code("z1 = z1 * 35 + 23;");
code("x1 = x1 * 35 + 23;");
code("trPaintTerrain(x0, z0, x1, z1, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x0, z0, x1 + 1, z1 + 1, 0, false);");
code("paintSecondary(x0, z0, x1, z1);");
code("trQuestVarSet(\"edge\"+edge, type);");
code("}");
code("}");

code("rule choose_stage_01");
code("inactive");
code("highFrequency");
code("{");
code("if (trQuestVarGet(\"stage\") > 0) {");
code("xsEnableRule(\"choose_stage_02\");");
code("xsDisableSelf();");
code("}");
code("}");


code("rule choose_stage_02");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 1) {");
code("xsDisableSelf();");
code("trBlockAllSounds();");
code("for(i=trQuestVarGet(\"stage\"); >1) {");
code("trTechSetStatus(ENEMY_PLAYER, 76, 4);");
code("for(j=10; >0) {");
code("trTechSetStatus(ENEMY_PLAYER, 78, 4);");
code("}");
code("}");
code("switch(1*trQuestVarGet(\"stage\"))");
code("{");
code("case 1:");
code("{");
code("trOverlayText(\"Desert Tomb\", 3.0, -1, -1, -1);");
code("TERRAIN_WALL = 2;");
code("TERRAIN_SUB_WALL = 2;");

code("TERRAIN_PRIMARY = 0;");
code("TERRAIN_SUB_PRIMARY = 34;");

code("TERRAIN_SECONDARY = 0;");
code("TERRAIN_SUB_SECONDARY = 17;");

code("trQuestVarSet(\"treeDensity\", 0);");
code("trQuestVarSet(\"spriteDensity\", 0.3);");
code("trStringQuestVarSet(\"spriteProto1\", \"Rock Sandstone Sprite\");");
code("trStringQuestVarSet(\"spriteProto2\", \"Skeleton\");");
code("trStringQuestVarSet(\"spriteProto3\", \"Cinematic Scorch\");");
code("trQuestVarSet(\"rockDensity\", 0.1);");
code("trStringQuestVarSet(\"rockProto1\", \"Rock Sandstone Big\");");
code("trStringQuestVarSet(\"rockProto2\", \"Rock Sandstone Big\");");
code("trStringQuestVarSet(\"rockProto3\", \"Statue Pharaoh\");");

code("trQuestVarSet(\"enemyDensity\", 0.03 * ENEMY_PLAYER);");
code("trQuestVarSet(\"enemyProtoCount\", 5);");
code("trStringQuestVarSet(\"enemyProto1\", \"Minion\");");
code("trStringQuestVarSet(\"enemyProto2\", \"Anubite\");");
code("trStringQuestVarSet(\"enemyProto3\", \"Sphinx\");");
code("trStringQuestVarSet(\"enemyProto4\", \"Wadjet\");");
code("trStringQuestVarSet(\"enemyProto5\", \"Mummy\");");

code("trQuestVarSet(\"columnDensity\", 0.05);");
code("}");
code("}");

code("trChangeTerrainHeight(0,0,150,150,6,false);");
code("trPaintTerrain(0,0,150,150,TERRAIN_WALL, TERRAIN_SUB_WALL,false);");

code("int x = 0;");
code("int z = 0;");
code("int n = 0;");
code("int total = 0;");
code("int backtrack = 5;");
code("trQuestVarSet(\"tile0\", TILE_VISITED);");
code("trQuestVarSet(\"tile1\", TILE_FOUND);");
code("trQuestVarSet(\"tile4\", TILE_FOUND);");
code("trQuestVarSet(\"next\", 1);");
code("yAddToDatabase(\"frontier\", \"next\");");
code("yAddUpdateVar(\"frontier\", \"edge\", edgeName(0, 1));");
code("trQuestVarSet(\"next\", 4);");
code("yAddToDatabase(\"frontier\", \"next\");");
code("yAddUpdateVar(\"frontier\", \"edge\", edgeName(0, 4));");

code("for(i=0; < 64) {");
code("trQuestVarSetFromRand(\"search\", 1, backtrack, true);");
code("yDatabasePointerDefault(\"frontier\");");
code("for(j=trQuestVarGet(\"search\"); >0) {");
code("yDatabaseNext(\"frontier\");");
code("}");
code("if (trQuestVarGet(\"tile\"+1*trQuestVarGet(\"frontier\")) < TILE_VISITED) {");
code("z = 1*trQuestVarGet(\"frontier\") / 4;");
code("x = 1*trQuestVarGet(\"frontier\") - 4 * z;");
code("buildEdge(1*yGetVar(\"frontier\", \"edge\"), EDGE_NORMAL);");
code("trQuestVarSet(\"tile\"+1*trQuestVarGet(\"frontier\"), TILE_VISITED);");
code("if (trQuestVarGet(\"frontier\") < 15) {");
code("for(a=1; >=0) {");
code("for(b=1; >=0) {");
code("trQuestVarSet(\"newX\", (1 - 2 * b) * a + x);");
code("trQuestVarSet(\"newZ\", (1 - 2 * b) * (1 - a) + z);");
code("if (trQuestVarGet(\"newX\") < 0 || trQuestVarGet(\"newZ\") < 0 ||");
code("trQuestVarGet(\"newX\") > 3 || trQuestVarGet(\"newZ\") > 3) {");
code("continue;");
code("}");
code("n = 0 + trQuestVarGet(\"newX\") + 4 * trQuestVarGet(\"newZ\");");
code("if (trQuestVarGet(\"tile\"+n) < TILE_VISITED) {");
code("trQuestVarSet(\"next\", n);");
code("yAddToDatabase(\"frontier\", \"next\");");
code("yAddUpdateVar(\"frontier\", \"edge\", edgeName(1*trQuestVarGet(\"frontier\"), n));");
code("}");
code("}");
code("}");
code("}");

code("total = total + 1;");
code("if (total == 15) {");
code("break;");
code("}");
code("} else {");
code("backtrack = backtrack + 1;");
code("}");
code("yRemoveFromDatabase(\"frontier\");");
code("yRemoveUpdateVar(\"frontier\", \"edge\");");
code("}");
code("for(i=0; <10) {");
code("trQuestVarSetFromRand(\"first\", 1, 14);");
code("trQuestVarSetFromRand(\"direction\", 0, 3);");
code("z = 1*trQuestVarGet(\"first\") / 4;");
code("x = 1*trQuestVarGet(\"first\") - z * 4;");
code("a = 1*trQuestVarGet(\"direction\") / 2;");
code("b = 1*trQuestVarGet(\"direction\") - a * 2;");
code("trQuestVarSet(\"newX\", (1 - 2 * b) * a + x);");
code("trQuestVarSet(\"newZ\", (1 - 2 * b) * (1 - a) + z);");
code("if (trQuestVarGet(\"newX\") < 0 || trQuestVarGet(\"newZ\") < 0 ||");
code("trQuestVarGet(\"newX\") > 3 || trQuestVarGet(\"newZ\") > 3 ||");
code("(trQuestVarGet(\"newX\") + trQuestVarGet(\"newZ\") == 6)) {");
code("continue;");
code("} else {");
code("n = 0 + trQuestVarGet(\"newX\") + 4 * trQuestVarGet(\"newZ\");");
code("buildEdge(edgeName(1*trQuestVarGet(\"first\"), n), EDGE_NORMAL);");
code("}");
code("}");

code("buildRoom(0,0, ROOM_STARTER);");
code("buildRoom(3,3, ROOM_BOSS);");

code("bool nick = false;");
code("trQuestVarSetFromRand(\"nick\", 0, 20, true);");
code("if (trQuestVarGet(\"nick\") < trQuestVarGet(\"stage\")) {");
code("nick = true;");
code("}");

code("int chests = 3;");
code("for(i=1; <=3) {");
code("trQuestVarSet(\"chestType\"+i, i);");
code("}");
code("for(i=3; >0) {");
code("trQuestVarSetFromRand(\"swap\", 1, i, true);");
code("trQuestVarSet(\"temp\", trQuestVarGet(\"chestType\"+i));");
code("trQuestVarSet(\"chestType\"+i, trQuestVarGet(\"chestType\"+1*trQuestVarGet(\"swap\")));");
code("trQuestVarSet(\"chestType\"+1*trQuestVarGet(\"swap\"), trQuestVarGet(\"temp\"));");
code("}");

code("for (i=1; < 15) {");
code("z = i / 4;");
code("x = i - z * 4;");
code("if (chests > 0) {");
code("trQuestVarSetFromRand(\"chest\", 1, 7, true);");
code("if (trQuestVarGet(\"chest\") == 1) {");
code("chests = chests - 1;");
code("}");
code("} else {");
code("trQuestVarSet(\"chest\", 0);");
code("}");
code("if (nick && (countRoomEntrances(x, z) == 1)) {");
code("buildRoom(x, z, ROOM_NICK);");
code("nick = false;");
code("xsEnableRule(\"nick_00_visit\");");
code("} else {");
code("buildRoom(x, z, ROOM_BASIC);");
code("}");
code("}");

code("trPaintTerrain(0,0,5,5,0,70,true);");
code("trPaintTerrain(0,0,5,5,TERRAIN_WALL,TERRAIN_SUB_WALL,false);");

code("trUnblockAllSounds();");
code("if (trQuestVarGet(\"newPlayers\") == 0) {");
code("xsEnableRule(\"gameplay_start\");");
code("trUIFadeToColor(0,0,0,1000,0,false);");
code("trLetterBox(false);");
code("} else {");
code("xsEnableRule(\"choose_stage_03\");");
code("trSoundPlayFN(\"default\",\"1\",-1,");
code("\"Zenophobia: Looks like we have some new faces today!\", \"icons\infantry g hoplite icon 64\");");
code("}");
code("}");
code("}");

code("rule choose_stage_03");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 5) {");
code("trSoundPlayFN(\"default\",\"1\",-1,");
code("\"Zenophobia: I'll let you choose one of the starter characters for free.\", \"icons\infantry g hoplite icon 64\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"choice1\", true);");
code("trUnitSetStance(\"Passive\");");
code("trUnitHighlight(15.0, true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"choice2\", true);");
code("trUnitSetStance(\"Passive\");");
code("trUnitHighlight(15.0, true);");
code("xsEnableRule(\"choose_stage_04\");");
code("xsDisableSelf();");
code("}");
code("}");

code("rule choose_stage_04");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 6) {");
code("trUIFadeToColor(0,0,0,1000,0,false);");
code("trLetterBox(false);");
code("xsEnableRule(\"gameplay_start\");");
code("xsDisableSelf();");
code("}");
code("}");
code("int progress = 0;");
code("int savedata = 0;");
code("int currentdata = 0;");

code("void showLoadProgress() {");
code("trSoundPlayFN(\"default\",\"1\",-1,\"Loading Data:\"+100 * progress / 16,\"icons\god power reverse time icons 64\");");
code("}");

code("rule data_load_00");
code("highFrequency");
code("inactive");
code("{");
code("if (Multiplayer) {");
code("trSoundPlayFN(\"default\",\"1\",-1,\"Loading:\",\"icons\god power reverse time icons 64\");");

code("int posX = 10;");

code("for(p=1; < ENEMY_PLAYER) {");
code("trModifyProtounit(\"Swordsman Hero\", p, 6, -100);");
code("trModifyProtounit(\"Swordsman Hero\", p, 16, 9999999999999999999.0);");
code("trModifyProtounit(\"Swordsman Hero\", p, 17, 9999999999999999999.0);");
code("trModifyProtounit(\"Swordsman Hero\", p, 18, 9999999999999999999.0);");
code("trModifyProtounit(\"Swordsman Hero\", p, 19, 9999999999999999999.0);");
code("trModifyProtounit(\"Swordsman Hero\", p, 16, -9999999999999999999.0);");
code("trModifyProtounit(\"Swordsman Hero\", p, 17, -9999999999999999999.0);");
code("trModifyProtounit(\"Swordsman Hero\", p, 18, -9999999999999999999.0);");
code("trModifyProtounit(\"Swordsman Hero\", p, 19, -9999999999999999999.0);");
code("trArmyDispatch(\"\"+p+\",0\",\"Swordsman\", 32, posX,0,10,0,true);");
code("posX = posX + 10;");
code("}");

code("trBlockAllSounds(true);");
code("xsEnableRule(\"data_load_01_ready\");");
code("} else {");
code("for(p=1; < ENEMY_PLAYER) {");
code("trForbidProtounit(p, \"Swordsman Hero\");");
code("}");
code("trLetterBox(false);");
code("}");
code("trQuestVarSet(\"enemyVictoryMarker\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Victory Marker\",1,1,0,1,0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(ENEMY_PLAYER);");
code("xsDisableSelf();");
code("}");

code("rule data_load_01_ready");
code("highFrequency");
code("inactive");
code("{");
code("int swordsmen = 0;");
code("int total = 32 * (cNumberPlayers - 2);");
code("for(p=1; < ENEMY_PLAYER) {");
code("swordsmen = swordsmen + trPlayerUnitCountSpecific(p, \"Swordsman\");");
code("}");
code("if (swordsmen == total) {");
code("savedata = trGetScenarioUserData(0);");
code("currentdata = iModulo(10, savedata);");
code("xsEnableRule(\"data_load_01_load_data\");");
code("xsEnableRule(\"data_load_02_detect_data\");");
code("xsDisableSelf();");
code("}");
code("}");

code("rule data_load_01_load_data");
code("highFrequency");
code("inactive");
code("{");
code("trLetterBox(false);");
code("trBlockAllSounds(true);");
code("if (currentdata >= 32) {");
code("trSoundPlayFN(\"cantdothat.wav\",\"1\",-1,\"Invalid code at \" + progress + \"!\",\"\");");
code("}");
code("trUnitSelectClear();");
code("trUnitSelectByID(currentdata + 32 * (trCurrentPlayer() - 1));");
code("for(i=32; >0) {");
code("if (trUnitIsSelected() == false) {");
code("uiFindType(\"Swordsman\");");
code("} else {");
code("trChatSend(0, \"Found!\");");
code("break;");
code("}");
code("}");
code("uiTransformSelectedUnit(\"Swordsman Hero\");");
code("trForceNonCinematicModels(true);");
code("trLetterBox(true);");
code("showLoadProgress();");
code("xsDisableSelf();");
code("}");

code("rule data_load_02_detect_data");
code("highFrequency");
code("inactive");
code("{");
code("int swordsmen = 0;");
code("for(p=1; < ENEMY_PLAYER) {");
code("swordsmen = swordsmen + trPlayerUnitCountSpecific(p, \"Swordsman Hero\");");
code("}");
code("if (swordsmen == cNumberPlayers - 2) {");
code("for(p=1; < ENEMY_PLAYER) {");
code("swordsmen = 32 * (p - 1);");
code("for(x=0; < 32) {");
code("if (kbGetUnitBaseTypeID(x + swordsmen) == kbGetProtoUnitID(\"Swordsman Hero\")) {");
code("if (progress == 0) {");
code("trQuestVarSet(\"p\"+p+\"progress\", x);");
code("} else if (progress == 1) {");
code("trQuestVarSet(\"p\"+p+\"class\", x);");
code("} else if (progress == 2) {");
code("trPlayerGrantResources(p, \"Gold\", x);");
code("} else if (progress == 3) {");
code("trPlayerGrantResources(p, \"Gold\", x * 32);");
code("} else if (progress < 15) {");
code("trQuestVarSet(\"p\"+p+\"relic\"+(progress - 3), x);");
code("} else if (progress == 15) {");
code("trQuestVarSet(\"p\"+p+\"unlocked\", x);");
code("} else {");
code("trQuestVarSet(\"p\"+p+\"unlocked\", trQuestVarGet(\"p\"+p+\"unlocked\") + 32 * x);");
code("}");
code("trUnitSelectClear();");
code("trUnitSelectByID(x);");
code("trMutateSelected(kbGetProtoUnitID(\"Swordsman\"));");
code("break;");
code("}");
code("}");
code("}");
code("progress = progress + 1;");
code("showLoadProgress();");
code("if (progress == 16) {");
code("xsDisableSelf();");
code("xsEnableRule(\"data_load_03_done\");");
code("} else {");
code("xsEnableRule(\"data_load_01_load_data\");");
code("switch(progress)");
code("{");
code("case 1:");
code("{");
code("currentdata = savedata / 10;");
code("}");
code("case 2:");
code("{");
code("savedata = trGetScenarioUserData(1);");
code("}");
code("case 4:");
code("{");
code("savedata = trGetScenarioUserData(2);");
code("}");
code("case 9:");
code("{");
code("savedata = trGetScenarioUserData(3);");
code("}");
code("case 14:");
code("{");
code("savedata = trGetScenarioUserData(4);");
code("}");
code("}");
code("if (progress >=2) {");
code("currentdata = iModulo(32, savedata);");
code("savedata = savedata / 32;");
code("}");
code("}");
code("}");
code("}");


code("rule data_load_03_done");
code("highFrequency");
code("inactive");
code("{");
code("for(x=0; < trQuestVarGet(\"enemyVictoryMarker\")) {");
code("trUnitSelectClear();");
code("trUnitSelectByID(x);");
code("trUnitDestroy();");
code("}");
code("int n = 0;");
code("int current = 0;");
code("int proto = 0;");
code("for(p=1; < ENEMY_PLAYER) {");
code("trQuestVarSet(\"p\"+p+\"noob\", 1);");
code("n = trQuestVarGet(\"p\"+p+\"unlocked\");");
code("trForbidProtounit(p, \"Swordsman Hero\");");
code("trQuestVarSet(\"p\"+p+\"victoryMarker\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\",\"Victory Marker\",1,1,0,1,0,true);");
code("current = xsPow(2, CLASS_COUNT);");
code("for(c=CLASS_COUNT; >0) {");
code("proto = trQuestVarGet(\"class\"+c+\"proto\");");
code("trModifyProtounit(kbGetProtoUnitName(proto), p, 5, trQuestVarGet(\"p\"+p+\"progress\"));");
code("if (n >= current) {");
code("trQuestVarSet(\"p\"+p+\"unlocked\"+c, 1);");
code("trQuestVarSet(\"p\"+p+\"noob\", 0);");
code("n = n - current;");
code("}");
code("current = current / 2;");
code("}");
code("}");
code("trUnblockAllSounds();");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"Done!\",\"icons\god power reverse time icons 64\");");
code("xsDisableSelf();");
code("xsEnableRule(\"Z_cin_00\");");
code("}");
code("int displayNextTooltip(int class = 0, int tooltip = 0) {");
code("string icon = \"\";");
code("string msg = \"\";");
code("int next = tooltip + 1;");
code("switch(class)");
code("{");
code("case MOONBLADE:");
code("{");
code("icon = \"icons\hero g theseus icon 64\";");
code("switch(tooltip)");
code("{");
code("case 0:");
code("{");
code("msg = \"Moonblade: A jack-of-all-trades good for beginners.\";");
code("}");
code("case 1:");
code("{");
code("msg = \"Passive: Each time you attack, restore health to all allies. Heal = 1 percent of your max health\";");
code("}");
code("case 2:");
code("{");
code("msg = \"Special Attack (7 attacks): Summon a wolf companion that fights for you.\";");
code("}");
code("case 3:");
code("{");
code("icon = \"icons\god power eclipse icon 64\";");
code("msg = \"(Q) Moonbeam: Create a circle that damages enemies. Damage increases for each ally in the circle\";");
code("}");
code("case 4:");
code("{");
code("icon = \"icons\improvement swine array icon 64\";");
code("msg = \"(W) Crescent Strikes: Your next 3 attacks deal bonus damage and stun.\";");
code("}");
code("case 5:");
code("{");
code("icon = \"icons\improvement rheias gift icons 64\";");
code("msg = \"(E) Protection (Toggle): Grant all allies invulnerability. Costs 12 favor per second.\";");
code("next = 0;");
code("}");
code("}");
code("}");
code("case SUNBOW:");
code("{");
code("icon = \"icons\hero g hyppolyta icon 64\";");
code("switch(tooltip)");
code("{");
code("case 0:");
code("{");
code("msg = \"Sunbow: A ranged healer who can also deal good damage.\";");
code("}");
code("case 1:");
code("{");
code("msg = \"Passive: All allies regenerate 1 health each second.\";");
code("}");
code("case 2:");
code("{");
code("icon = \"icons\god power restoration icon 64\";");
code("msg = \"(Q) Sunlight: Create a circle that heals allies for several seconds.\";");
code("}");
code("case 3:");
code("{");
code("icon = \"icons\improvement sun ray icon 64\";");
code("msg = \"(W) Healing Rays: For a short duration, your attacks fire rays that heal allies.\";");
code("}");
code("case 4:");
code("{");
code("icon = \"icons\improvement flames of typhon icon\";");
code("msg = \"(E) Searing Light (Toggle): Your heals also deal damage to enemies. Costs 5 favor per second.\";");
code("next = 0;");
code("}");
code("}");
code("}");
code("}");
code("trShowImageDialog(icon, msg);");
code("return(next);");
code("}");

code("rule class_shop_always");
code("inactive");
code("highFrequency");
code("{");
code("int class = 0;");
code("for(i=2; >0) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"choice\"+i+\"unit\");");
code("if (trUnitIsSelected()) {");
code("if (trQuestVarGet(\"choice\"+i+\"selected\") == 0) {");
code("trQuestVarSet(\"choice\"+i+\"selected\", 1);");
code("trQuestVarSet(\"pleaseExplain\", i);");
code("trQuestVarSet(\"choice\"+i+\"explain\", 0);");
code("trDelayedRuleActivation(\"class_shop_explain_01\");");
code("}");
code("} else if (trQuestVarGet(\"choice\"+i+\"selected\") == 1) {");
code("trQuestVarSet(\"choice\"+i+\"selected\", 0);");
code("}");
code("trVectorSetUnitPos(\"pos\", \"choice\"+i+\"unit\");");
code("for (p=1; < ENEMY_PLAYER) {");
code("if (zDistanceToVectorSquared(\"p\"+p+\"unit\", \"pos\") < 5) {");
code("if (trQuestVarGet(\"p\"+p+\"buy\"+i) == 0) {");
code("trQuestVarSet(\"p\"+p+\"buy\"+i, 1);");
code("class = i + 2 * trQuestVarGet(\"stage\") - 2;");
code("if (trQuestVarGet(\"p\"+p+\"unlocked\"+class) == 1) {");
code("if (trCurrentPlayer() == p) {");
code("trSoundPlayFN(\"cantdothat.wav\",\"1\",-1,\"\",\"\");");
code("trChatSend(0, \"You have already unlocked this class!\");");
code("}");
code("} else if (trQuestVarGet(\"p\"+p+\"noob\") == 1) {");
code("trQuestVarSet(\"p\"+p+\"noob\", 0);");
code("trQuestVarSet(\"p\"+p+\"unlocked\"+class, 1);");
code("chooseClass(p, class);");
code("trSoundPlayFN(\"ui\thunder5.wav\",\"1\",-1,\"\",\"\");");
code("} else if (trPlayerResourceCount(p, \"Gold\") < 500) {");
code("if (trCurrentPlayer() == p) {");
code("trSoundPlayFN(\"cantdothat.wav\",\"1\",-1,\"\",\"\");");
code("trChatSend(0, \"You need 500 gold to unlock this class!\");");
code("}");
code("} else {");
code("trQuestVarSet(\"p\"+p+\"unlocked\"+class, 1);");
code("trPlayerGrantResources(p, \"Gold\", -500);");
code("chooseClass(p, class);");
code("trSoundPlayFN(\"ui\thunder5.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("} else {");
code("trQuestVarSet(\"p\"+p+\"buy\"+i, 0);");
code("}");
code("}");
code("}");
code("}");

code("rule class_shop_explain_01");
code("inactive");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("int i = trQuestVarGet(\"pleaseExplain\");");
code("trQuestVarSet(\"choice\"+i+\"explain\",");
code("displayNextTooltip(i + 2 * trQuestVarGet(\"stage\") - 2, 1*trQuestVarGet(\"choice\"+i+\"explain\")));");
code("if (trQuestVarGet(\"choice\"+i+\"explain\") > 0) {");
code("xsEnableRule(\"class_shop_explain_02\");");
code("}");
code("}");

code("rule class_shop_explain_02");
code("inactive");
code("highFrequency");
code("{");
code("int i = trQuestVarGet(\"pleaseExplain\");");
code("if ((trQuestVarGet(\"choice\"+i+\"explain\") > 0) && (trIsGadgetVisible(\"ShowImageBox\") == false)) {");
code("trDelayedRuleActivation(\"class_shop_explain_01\");");
code("xsDisableSelf();");
code("}");
code("}");
code("const int ABILITY_READY = 0;");
code("const int ABILITY_COOLDOWN = 1;");
code("const int ABILITY_COST = 2;");

code("const int ABILITY_OFF = 0;");
code("const int ABILITY_ON = 1;");

code("const int ON_HIT_NONE = 0;");
code("const int ON_HIT_NORMAL = 1;");
code("const int ON_HIT_SPECIAL = 2;");

code("string wellName = \"\";");
code("string lureName = \"\";");
code("string rainName = \"\";");

code("bool wellIsUltimate = false;");
code("bool rainIsUltimate = false;");
code("bool lureIsUltimate = false;");

code("void removeArrow() {");
code("for(x=2;>0) {");
code("if (yGetVar(\"arrowsActive\", \"sfx\"+x) > 0) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"arrowsActive\", \"sfx\"+x), true);");
code("trUnitChangeProtoUnit(\"Rocket\");");
code("}");
code("}");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"arrowsActive\"), true);");
code("yRemoveFromDatabase(\"arrowsActive\");");
code("yRemoveUpdateVar(\"arrowsActive\", \"destx\");");
code("yRemoveUpdateVar(\"arrowsActive\", \"destz\");");
code("yRemoveUpdateVar(\"arrowsActive\", \"timeout\");");
code("yRemoveUpdateVar(\"arrowsActive\", \"element\");");
code("yRemoveUpdateVar(\"arrowsActive\", \"damage\");");
code("yRemoveUpdateVar(\"arrowsActive\", \"player\");");
code("yRemoveUpdateVar(\"arrowsActive\", \"sfx1\");");
code("yRemoveUpdateVar(\"arrowsActive\", \"sfx2\");");
code("yRemoveUpdateVar(\"arrowsActive\", \"special\");");
code("}");

code("void removeEnemy() {");
code("if (yGetVar(\"enemies\", \"bounty\") > 0) {");
code("trChatSend(0, \"Collected \" + 1*yGetVar(\"enemies\", \"bounty\") + \" <icon=(24)(icons/icon resource gold)>\");");
code("for(p=1; <ENEMY_PLAYER) {");
code("trPlayerGrantResources(p, \"Gold\", yGetVar(\"enemies\", \"bounty\"));");
code("trPlayerGrantResources(p, \"Favor\", yGetVar(\"enemies\", \"bounty\"));");
code("}");
code("}");
code("yRemoveFromDatabase(\"enemies\");");
code("yRemoveUpdateVar(\"enemies\", \"bounty\");");
code("yRemoveUpdateVar(\"enemies\", \"stunStatus\");");
code("yRemoveUpdateVar(\"enemies\", \"stunTimeout\");");
code("yRemoveUpdateVar(\"enemies\", \"stunSFX\");");
code("yRemoveUpdateVar(\"enemies\", \"poisonStatus\");");
code("yRemoveUpdateVar(\"enemies\", \"poisonTimeout\");");
code("yRemoveUpdateVar(\"enemies\", \"poisonLast\");");
code("yRemoveUpdateVar(\"enemies\", \"poisonDamage\");");
code("yRemoveUpdateVar(\"enemies\", \"poisonSFX\");");
code("}");

code("void removePlayerCharacter(int p = 0) {");
code("yRemoveFromDatabase(\"p\"+p+\"characters\");");
code("yRemoveUpdateVar(\"p\"+p+\"Characters\", \"specialAttack\");");
code("yRemoveUpdateVar(\"p\"+p+\"Characters\", \"attacking\");");
code("yRemoveUpdateVar(\"p\"+p+\"Characters\", \"attackNext\");");
code("}");

code("void removePlayerUnit() {");
code("yRemoveFromDatabase(\"playerUnits\");");
code("yRemoveUpdateVar(\"playerUnits\", \"player\");");
code("yRemoveUpdateVar(\"playerUnits\", \"currentHealth\");");
code("yRemoveUpdateVar(\"playerUnits\", \"stunStatus\");");
code("yRemoveUpdateVar(\"playerUnits\", \"stunTimeout\");");
code("yRemoveUpdateVar(\"playerUnits\", \"stunSFX\");");
code("yRemoveUpdateVar(\"playerUnits\", \"poisonStatus\");");
code("yRemoveUpdateVar(\"playerUnits\", \"poisonTimeout\");");
code("yRemoveUpdateVar(\"playerUnits\", \"poisonLast\");");
code("yRemoveUpdateVar(\"playerUnits\", \"poisonDamage\");");
code("yRemoveUpdateVar(\"playerUnits\", \"poisonSFX\");");
code("yRemoveUpdateVar(\"playerUnits\", \"decay\");");
code("yRemoveUpdateVar(\"playerUnits\", \"decayNext\");");
code("}");


code("void vectorSetAsTargetVector(string target = \"\", string from = \"\", string to = \"\", float dist = 40.0) {");
code("trVectorQuestVarSet(\"dir\", zGetUnitVector(from, to, dist));");
code("trQuestVarSet(target+\"x\", trQuestVarGet(\"dirx\") + trQuestVarGet(from+\"x\"));");
code("trQuestVarSet(target+\"z\", trQuestVarGet(\"dirz\") + trQuestVarGet(from+\"z\"));");

code("float scale = 0;");
code("if (trQuestVarGet(target+\"x\") < 0) {");
code("scale = trQuestVarGet(target+\"x\") / (trQuestVarGet(target+\"x\") - trQuestVarGet(from+\"x\"));");
code("trQuestVarSet(target+\"z\", trQuestVarGet(target+\"z\") + scale * (trQuestVarGet(from+\"z\") - trQuestVarGet(target+\"z\")));");
code("trQuestVarSet(target+\"x\", 0);");
code("} else if (trQuestVarGet(target+\"x\") > DIMENSION_X) {");
code("scale = (trQuestVarGet(target+\"x\") - DIMENSION_X) / (trQuestVarGet(target+\"x\") - trQuestVarGet(from+\"x\"));");
code("trQuestVarSet(target+\"z\", trQuestVarGet(target+\"z\") + scale * (trQuestVarGet(from+\"z\") - trQuestVarGet(target+\"z\")));");
code("trQuestVarSet(target+\"x\", DIMENSION_X);");
code("}");

code("if (trQuestVarGet(target+\"z\") < 0) {");
code("scale = trQuestVarGet(target+\"z\") / (trQuestVarGet(target+\"z\") - trQuestVarGet(from+\"z\"));");
code("trQuestVarSet(target+\"x\", trQuestVarGet(target+\"x\") + scale * (trQuestVarGet(from+\"x\") - trQuestVarGet(target+\"x\")));");
code("trQuestVarSet(target+\"z\", 0);");
code("} else if (trQuestVarGet(target+\"z\") > DIMENSION_Z) {");
code("scale = (trQuestVarGet(target+\"z\") - DIMENSION_Z) / (trQuestVarGet(target+\"z\") - trQuestVarGet(from+\"z\"));");
code("trQuestVarSet(target+\"x\", trQuestVarGet(target+\"x\") + scale * (trQuestVarGet(from+\"x\") - trQuestVarGet(target+\"x\")));");
code("trQuestVarSet(target+\"z\", DIMENSION_Z);");
code("}");
code("}");


code("bool collideWithTerrain(int arrow = 0) {");
code("bool collide = false;");
code("trVectorQuestVarSet(\"loc\", kbGetBlockPosition(\"\"+arrow));");
code("vectorToGrid(\"loc\", \"loc\");");
code("if (trCountUnitsInArea(\"\"+arrow,ENEMY_PLAYER,\"Phoenix Egg\", 1.5) > 0) {");
code("trQuestVarSetFromRand(\"sound\", 1, 3, true);");
code("trSoundPlayFN(\"mine\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("collide = true;");
code("} else if (terrainIsType(\"loc\", TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("trQuestVarSetFromRand(\"sound\", 1, 3, true);");
code("trSoundPlayFN(\"mine\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("collide = true;");
code("}");
code("return(collide);");
code("}");


code("bool checkArrowDie() {");
code("int arrow = trQuestVarGet(\"arrowsActive\");");
code("trQuestVarSet(\"endx\", yGetVar(\"arrowsActive\", \"destx\"));");
code("trQuestVarSet(\"endz\", yGetVar(\"arrowsActive\", \"destz\"));");
code("if ((collideWithTerrain(arrow)) ||");
code("zDistanceToVectorSquared(\"arrowsActive\", \"end\") < 9 ||");
code("trTimeMS() > yGetVar(\"arrowsActive\", \"timeout\")) {");
code("return(true);");
code("} else {");
code("return(false);");
code("}");
code("}");

code("int spyEffect(int unit = 0, int proto = 0) {");
code("int x = modularCounterNext(\"spyFind\");");
code("trQuestVarSet(\"spyEye\"+x, 0 - proto);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+unit, true);");
code("trTechInvokeGodPower(0, \"spy\", vector(0,0,0), vector(0,0,0));");
code("return(x);");
code("}");

code("void poisonUnit(string db = \"\", float duration = 0, float damage = 0, int p = 0) {");
code("duration = duration * 1000;");
code("if (p > 0) {");
code("duration = duration * trQuestVarGet(\"p\"+p+\"spellDuration\");");
code("damage = damage * trQuestVarGet(\"p\"+p+\"spellDamage\");");
code("}");
code("if (trTimeMS() + duration > yGetVar(db, \"poisonTimeout\")) {");
code("if (yGetVar(db, \"poisonStatus\") == 0) {");
code("if (yGetVar(db, \"poisonSFX\") == 0) {");
code("ySetVar(db, \"poisonSFX\", 0 - spyEffect(1*trQuestVarGet(db), kbGetProtoUnitID(\"Shockwave poison effect\")));");
code("} else {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(db, \"poisonSFX\"), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Poison SFX\"));");
code("}");
code("ySetVar(db, \"poisonStatus\", 1);");
code("ySetVar(db, \"poisonLast\", trTimeMS());");
code("}");
code("ySetVar(db, \"poisonTimeout\", trTimeMS() + duration);");
code("}");
code("if (damage > yGetVar(db, \"poisonDamage\")) {");
code("ySetVar(db, \"poisonDamage\", damage);");
code("}");
code("}");

code("void stunUnit(string db = \"\", float duration = 0, int p = 0) {");
code("trQuestVarSet(\"stunSound\", 1);");
code("duration = duration * 1000;");
code("if (p > 0) {");
code("duration = duration * trQuestVarGet(\"p\"+p+\"spellDuration\");");
code("}");
code("if (trTimeMS() + duration > yGetVar(db, \"stunTimeout\")) {");
code("if (yGetVar(db, \"stunStatus\") == 0) {");
code("yAddToDatabase(\"stunnedUnits\", db);");
code("yAddUpdateVar(\"stunnedUnits\", \"proto\", kbGetUnitBaseTypeID(kbGetBlockID(\"\"+1*trQuestVarGet(db), true)));");
code("if (yGetVar(db, \"stunSFX\") == 0) {");
code("ySetVar(db, \"stunSFX\", 0 - spyEffect(1*trQuestVarGet(db), kbGetProtoUnitID(\"Shockwave stun effect\")));");
code("} else {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(db, \"stunSFX\"), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Shockwave stun effect\"));");
code("}");
code("ySetVar(db, \"stunStatus\", 1);");
code("}");
code("ySetVar(db, \"stunTimeout\", trTimeMS() + duration);");
code("}");
code("}");

code("int addEffect(int car = 0, string proto = \"\", string anim = \"0,0,0,0,0,0,0\") {");
code("int sfx = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,1,0,1,0,true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+sfx, true);");
code("trMutateSelected(kbGetProtoUnitID(proto));");
code("trUnitSetAnimationPath(anim);");
code("trMutateSelected(kbGetProtoUnitID(\"Relic\"));");
code("trImmediateUnitGarrison(\"\"+car);");
code("trMutateSelected(kbGetProtoUnitID(proto));");
code("return(sfx);");
code("}");

code("void healUnit(int p = 0, float amt = 0) {");
code("trDamageUnit(0.0 - amt);");
code("}");

code("float damageEnemy(int p = 0, float dmg = 0, bool spell = true) {");
code("trDamageUnit(dmg);");
code("return(dmg);");
code("}");

code("void stunsAndPoisons(string db = \"\") {");
code("if (yGetVar(db, \"poisonStatus\") == 1) {");
code("if ((yGetVar(db, \"poisonSFX\") < 0) && (trQuestVarGet(\"spyFind\") == trQuestVarGet(\"spyFound\"))) {");
code("ySetVar(db, \"poisonSFX\", trQuestVarGet(\"spyEye\"+(0-yGetVar(db, \"poisonSFX\"))));");
code("}");
code("if (trTimeMS() > yGetVar(db, \"poisonTimeout\")) {");
code("ySetVar(db, \"poisonStatus\", 0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(db, \"poisonSFX\"), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Rocket\"));");
code("} else {");
code("trDamageUnit((trTimeMS() - yGetVar(db, \"poisonLast\")) * yGetVar(db, \"poisonDamage\") * 0.001);");
code("ySetVar(db, \"poisonLast\", trTimeMS());");
code("}");
code("}");
code("if (yGetVar(db, \"stunStatus\") == 1) {");
code("if ((yGetVar(db, \"stunSFX\") < 0) && (trQuestVarGet(\"spyFind\") == trQuestVarGet(\"spyFound\"))) {");
code("ySetVar(db, \"stunSFX\", trQuestVarGet(\"spyEye\"+(0-yGetVar(db, \"stunSFX\"))));");
code("}");
code("if (trTimeMS() > yGetVar(db, \"stunTimeout\")) {");
code("ySetVar(db, \"stunStatus\", 0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(db, \"stunSFX\"), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Rocket\"));");
code("yRemoveAllCopies(\"stunnedUnits\", 1*trQuestVarGet(db));");
code("}");
code("}");
code("}");

code("int CheckOnHit(int p = 0, int id = 0) {");
code("int action = kbUnitGetAnimationActionType(id);");
code("int status = ON_HIT_NONE;");
code("if (yGetVar(\"p\"+p+\"characters\", \"attacking\") == 0) {");
code("if ((action == 12) || (action == 6)) {");
code("ySetVar(\"p\"+p+\"characters\", \"attacking\", 1);");
code("ySetVar(\"p\"+p+\"characters\", \"attackNext\", trTimeMS() + trQuestVarGet(\"p\"+p+\"firstDelay\"));");
code("}");
code("} else {");
code("if ((action == 12) || (action == 6)) {");
code("if (trTimeMS() > yGetVar(\"p\"+p+\"characters\", \"attackNext\")) {");
code("status = ON_HIT_NORMAL;");
code("ySetVar(\"p\"+p+\"characters\", \"attackNext\",");
code("yGetVar(\"p\"+p+\"characters\", \"attackNext\") + trQuestVarGet(\"p\"+p+\"nextDelay\"));");
code("if (action == 6) {");
code("ySetVar(\"p\"+p+\"characters\", \"specialAttack\", yGetVar(\"p\"+p+\"characters\", \"specialAttack\") - 1);");
code("if (yGetVar(\"p\"+p+\"characters\", \"specialAttack\") <= 0) {");
code("ySetVar(\"p\"+p+\"characters\", \"specialAttack\", trQuestVarGet(\"p\"+p+\"specialAttackCooldown\"));");
code("status = ON_HIT_SPECIAL;");
code("}");
code("}");
code("}");
code("} else {");
code("ySetVar(\"p\"+p+\"characters\", \"attacking\", 0);");
code("}");
code("}");
code("return(status);");
code("}");

code("float calculateDecay(int p = 0, float decay = 0) {");
code("return(decay / trQuestVarGet(\"p\"+p+\"spellDuration\"));");
code("}");

code("rule spy_find");
code("active");
code("highFrequency");
code("{");
code("if ((trQuestVarGet(\"spyfound\") == trQuestVarGet(\"spyfind\")) == false) {");
code("while(trQuestVarGet(\"spysearch\") < trGetNextUnitScenarioNameNumber()) {");
code("int id = kbGetBlockID(\"\"+1*trQuestVarGet(\"spysearch\"), true);");
code("if (id >= 0) {");
code("if (kbGetUnitBaseTypeID(id) == kbGetProtoUnitID(\"Spy Eye\")) {");
code("int x = modularCounterNext(\"spyfound\");");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("trMutateSelected(0 - trQuestVarGet(\"spyEye\"+x));");
code("trQuestVarSet(\"spyEye\"+x, trQuestVarGet(\"spysearch\"));");
code("}");
code("}");
code("trQuestVarSet(\"spysearch\", 1 + trQuestVarGet(\"spysearch\"));");
code("}");
code("trQuestVarSet(\"spyreset\", 1 + trQuestVarGet(\"spyreset\"));");
code("if (trQuestVarGet(\"spyreset\") >= 10) {");
code("trQuestVarSet(\"spyfound\", trQuestVarGet(\"spyfind\"));");
code("}");
code("} else {");
code("trQuestVarSet(\"spyreset\", 0);");
code("trQuestVarSet(\"spysearch\", trGetNextUnitScenarioNameNumber());");
code("}");
code("}");
code("void removeMoonblade(int p = 0) {");
code("removePlayerCharacter(p);");
code("yRemoveUpdateVar(\"p\"+p+\"characters\", \"crescentCount\");");
code("yRemoveUpdateVar(\"p\"+p+\"characters\", \"crescentDamage\");");
code("yRemoveUpdateVar(\"p\"+p+\"characters\", \"crescentTimeout\");");
code("yRemoveUpdateVar(\"p\"+p+\"characters\", \"crescentSFX\");");
code("yRemoveUpdateVar(\"p\"+p+\"characters\", \"crescentOn\");");
code("}");

code("void moonbladeAlways(int eventID = -1) {");
code("int p = eventID - 12 * MOONBLADE;");
code("int id = 0;");
code("int hit = 0;");
code("int target = 0;");
code("float angle = 0;");
code("float posX = 0;");
code("float posZ = 0;");
code("int old = xsGetContextPlayer();");
code("xsSetContextPlayer(p);");
code("if (yGetDatabaseCount(\"p\"+p+\"characters\") > 0) {");
code("id = yDatabaseNext(\"p\"+p+\"characters\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeMoonblade(p);");
code("} else {");
code("hit = CheckOnHit(p, id);");
code("if (hit > ON_HIT_NONE) {");
code("if (yGetVar(\"p\"+p+\"characters\", \"crescentCount\") > 0) {");
code("ySetVar(\"p\"+p+\"characters\", \"crescentCount\", yGetVar(\"p\"+p+\"characters\", \"crescentCount\") - 1);");
code("ySetVar(\"p\"+p+\"characters\", \"crescentTimeout\", trTimeMS() + 5000);");
code("target = trGetUnitScenarioNameNumber(kbUnitGetTargetUnitID(id));");
code("trVectorQuestVarSet(\"pos\", kbGetBlockPosition(\"\"+target));");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"posx\"),0,trQuestVarGet(\"posz\"),0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Lightning Sparks Ground\");");
code("for(x=yGetDatabaseCount(\"enemies\"); >0) {");
code("if (yDatabaseNext(\"enemies\") == target) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"enemies\", true);");
code("damageEnemy(p, 50*trQuestVarGet(\"p\"+p+\"spellDamage\"), true);");
code("stunUnit(\"enemies\", 1.5, p);");
code("break;");
code("}");
code("}");
code("}");
code("angle = trQuestVarGet(\"p\"+p+\"health\") * trQuestVarGet(\"p\"+p+\"spellDamage\") * 0.01;");
code("for(x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("yDatabaseNext(\"playerUnits\", true);");
code("healUnit(p, angle);");
code("}");
code("if (hit == ON_HIT_SPECIAL) {");
code("if (trCurrentPlayer() == p) {");
code("trSoundPlayFN(\"mythcreate.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("trVectorSetUnitPos(\"pos\", \"p\"+p+\"characters\");");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("yAddToDatabase(\"playerUnits\", \"next\");");
code("yAddUpdateVar(\"playerUnits\", \"player\", p);");
code("yAddUpdateVar(\"playerUnits\", \"decay\", calculateDecay(p, 5));");
code("yAddUpdateVar(\"playerUnits\", \"decayNext\", trTimeMS() + 1000);");
code("yAddToDatabase(\"p\"+p+\"wolves\", \"next\");");
code("trArmyDispatch(\"\"+p+\",0\",\"Wolf\",1,trQuestVarGet(\"posx\"),0,trQuestVarGet(\"posz\"),0,true);");
code("}");
code("}");
code("if ((yGetVar(\"p\"+p+\"characters\", \"crescentCount\") > 0) &&");
code("(trTimeMS() > yGetVar(\"p\"+p+\"characters\", \"crescentTimeout\"))) {");
code("ySetVar(\"p\"+p+\"characters\", \"crescentTimeout\", trTimeMS() + 5000);");
code("ySetVar(\"p\"+p+\"characters\", \"crescentCount\", yGetVar(\"p\"+p+\"characters\", \"crescentCount\") - 1);");
code("}");

code("if ((yGetVar(\"p\"+p+\"characters\", \"crescentOn\") == 1) && (yGetVar(\"p\"+p+\"characters\", \"crescentCount\") == 0)) {");
code("ySetVar(\"p\"+p+\"characters\", \"crescentOn\", 0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"p\"+p+\"characters\", \"crescentSFX\"), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");
code("}");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"wellStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"wellStatus\", ABILITY_OFF);");
code("trSoundPlayFN(\"eclipsebirth.wav\",\"1\",-1,\"\",\"\");");
code("vectorSnapToGrid(\"p\"+p+\"wellPos\");");
code("posX = trQuestVarGet(\"p\"+p+\"wellPosx\");");
code("posZ = trQuestVarGet(\"p\"+p+\"wellPosz\");");
code("yAddToDatabase(\"p\"+p+\"moonbeams\", \"next\");");
code("yAddUpdateVar(\"p\"+p+\"moonbeams\", \"radius\", xsPow(trQuestVarGet(\"moonbeamRadius\")*trQuestVarGet(\"p\"+p+\"spellRange\"),2));");
code("yAddUpdateVar(\"p\"+p+\"moonbeams\", \"damage\", trQuestVarGet(\"moonbeamDamage\") * trQuestVarGet(\"p\"+p+\"spellDamage\"));");
code("yAddUpdateVar(\"p\"+p+\"moonbeams\", \"damageBoost\",");
code("trQuestVarGet(\"moonbeamDamageBoost\") * trQuestVarGet(\"p\"+p+\"spellDamage\"));");
code("yAddUpdateVar(\"p\"+p+\"moonbeams\", \"timeout\",");
code("trTimeMS() + 1000 * trQuestVarGet(\"moonbeamDuration\") * trQuestVarGet(\"p\"+p+\"spellDuration\"));");
code("yAddUpdateVar(\"p\"+p+\"moonbeams\", \"start\", trGetNextUnitScenarioNameNumber());");
code("yAddUpdateVar(\"p\"+p+\"moonbeams\", \"posx\", posX);");
code("yAddUpdateVar(\"p\"+p+\"moonbeams\", \"posz\", posZ);");
code("yAddUpdateVar(\"p\"+p+\"moonbeams\", \"next\", trTimeMS());");
code("for(x=0; <16) {");
code("trVectorSetFromAngle(\"dir\", angle);");
code("angle = angle + 6.283185 / 16;");
code("trQuestVarSet(\"dirx\",");
code("trQuestVarGet(\"dirx\") * trQuestVarGet(\"moonbeamRadius\") * trQuestVarGet(\"p\"+p+\"spellRange\") + posX);");
code("trQuestVarSet(\"dirz\",");
code("trQuestVarGet(\"dirz\") * trQuestVarGet(\"moonbeamRadius\") * trQuestVarGet(\"p\"+p+\"spellRange\") + posZ);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,trQuestVarGet(\"dirx\"),0,trQuestVarGet(\"dirz\"),0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Healing SFX\"));");
code("}");
code("yAddUpdateVar(\"p\"+p+\"moonbeams\", \"end\", trGetNextUnitScenarioNameNumber());");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"lureStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"lureStatus\", ABILITY_OFF);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"lureObject\", true);");
code("trUnitDestroy();");
code("trQuestVarSet(\"p\"+p+\"crescentStarted\", 1);");
code("trSoundPlayFN(\"olympustemplesfx.wav\",\"1\",-1,\"\",\"\");");
code("for(x=yGetDatabaseCount(\"p\"+p+\"Characters\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"Characters\");");
code("ySetVar(\"p\"+p+\"Characters\", \"crescentCount\", yGetVar(\"p\"+p+\"Characters\", \"crescentCount\") + 3);");
code("ySetVar(\"p\"+p+\"Characters\", \"crescentDamage\", trQuestVarGet(\"crescentDamage\") * trQuestVarGet(\"p\"+p+\"spellDamage\"));");
code("ySetVar(\"p\"+p+\"Characters\", \"crescentTimeout\", trTimeMS() + 5000);");
code("ySetVar(\"p\"+p+\"characters\", \"crescentOn\", 1);");
code("if ((yGetVar(\"p\"+p+\"Characters\", \"crescentSFX\") == 0) ||");
code("(kbGetBlockID(\"\"+1*yGetVar(\"p\"+p+\"characters\", \"crescentSFX\")) == -1)) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"characters\", true);");
code("ySetVar(\"p\"+p+\"Characters\", \"crescentSFX\",");
code("0 - spyEffect(1*trQuestVarGet(\"p\"+p+\"Characters\"), kbGetProtoUnitID(\"Rocket\")));");
code("}");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"rainStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"rainStatus\", ABILITY_OFF);");
code("trQuestVarSet(\"p\"+p+\"protection\", 1 - trQuestVarGet(\"p\"+p+\"protection\"));");
code("if (trQuestVarGet(\"p\"+p+\"protection\") == 1) {");
code("if (trPlayerResourceCount(p, \"favor\") < trQuestVarGet(\"protectionCost\")) {");
code("if (trCurrentPlayer() == p) {");
code("trSoundPlayFN(\"cantdothat.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("trQuestVarSet(\"p\"+p+\"protection\", 0);");
code("} else {");
code("trQuestVarSet(\"protectionCount\", trQuestVarGet(\"protectionCount\") + 1);");
code("trQuestVarSet(\"p\"+p+\"protectionNext\", trTimeMS() + 1000);");
code("trSoundPlayFN(\"bronzebirth.wav\",\"1\",-1,\"\",\"\");");
code("for(x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("id = yDatabaseNext(\"playerUnits\", true);");
code("xsSetContextPlayer(1*yGetVar(\"playerUnits\", \"player\"));");
code("ySetVar(\"playerUnits\", \"currentHealth\", kbUnitGetCurrentHitpoints(id));");
code("}");
code("}");
code("} else {");
code("trQuestVarSet(\"protectionCount\", trQuestVarGet(\"protectionCount\") - 1);");
code("if (trCurrentPlayer() == p) {");
code("trSoundPlayFN(\"godpowerfailed.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("}");

code("if ((trQuestVarGet(\"p\"+p+\"crescentStarted\") == 1) && (trQuestVarGet(\"spyFind\") == trQuestVarGet(\"spyFound\"))) {");
code("for(x=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"characters\");");
code("if (yGetVar(\"p\"+p+\"characters\", \"crescentSFX\") < 0) {");
code("ySetVar(\"p\"+p+\"characters\", \"crescentSFX\", trQuestVarGet(\"spyEye\"+(0-yGetVar(\"p\"+p+\"characters\", \"crescentSFX\"))));");
code("}");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"p\"+p+\"characters\", \"crescentSFX\"), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Outpost\"));");
code("trSetSelectedScale(0.0,0.0,0.0);");
code("}");
code("trQuestVarSet(\"p\"+p+\"crescentStarted\", 0);");
code("}");

code("if (yGetDatabaseCount(\"p\"+p+\"moonbeams\") > 0) {");
code("target = 0;");
code("yDatabaseNext(\"p\"+p+\"moonbeams\");");
code("if (trTimeMS() > yGetVar(\"p\"+p+\"moonbeams\", \"next\")) {");
code("ySetVar(\"p\"+p+\"moonbeams\", \"next\", trTimeMS() + 500);");
code("trQuestVarSet(\"centerX\", yGetVar(\"p\"+p+\"moonbeams\", \"posX\"));");
code("trQuestVarSet(\"centerZ\", yGetVar(\"p\"+p+\"moonbeams\", \"posZ\"));");
code("angle = yGetVar(\"p\"+p+\"moonbeams\", \"radius\");");
code("for(x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("yDatabaseNext(\"playerUnits\");");
code("if (zDistanceToVectorSquared(\"playerUnits\", \"center\") < angle) {");
code("target = target + 1;");
code("}");
code("}");
code("posX = yGetVar(\"p\"+p+\"moonbeams\", \"damage\") + target * yGetVar(\"p\"+p+\"moonbeams\", \"damageBoost\");");
code("posX = posX * 0.5;");
code("for(x=yGetDatabaseCount(\"enemies\"); >0) {");
code("id = yDatabaseNext(\"enemies\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (zDistanceToVectorSquared(\"enemies\", \"center\") < angle) {");
code("damageEnemy(p, posX);");
code("}");
code("}");
code("if (trTimeMS() > yGetVar(\"p\"+p+\"moonbeams\", \"timeout\")) {");
code("for(x=yGetVar(\"p\"+p+\"moonbeams\", \"start\"); < yGetVar(\"p\"+p+\"moonbeams\", \"end\")) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+x, true);");
code("trUnitDestroy();");
code("}");
code("yRemoveFromDatabase(\"p\"+p+\"moonbeams\");");
code("yRemoveUpdateVar(\"p\"+p+\"moonbeams\", \"radius\");");
code("yRemoveUpdateVar(\"p\"+p+\"moonbeams\", \"damage\");");
code("yRemoveUpdateVar(\"p\"+p+\"moonbeams\", \"damageBoost\");");
code("yRemoveUpdateVar(\"p\"+p+\"moonbeams\", \"timeout\");");
code("yRemoveUpdateVar(\"p\"+p+\"moonbeams\", \"posX\");");
code("yRemoveUpdateVar(\"p\"+p+\"moonbeams\", \"posZ\");");
code("yRemoveUpdateVar(\"p\"+p+\"moonbeams\", \"next\");");
code("yRemoveUpdateVar(\"p\"+p+\"moonbeams\", \"start\");");
code("yRemoveUpdateVar(\"p\"+p+\"moonbeams\", \"end\");");
code("}");
code("}");
code("}");

code("if (yGetDatabaseCount(\"p\"+p+\"wolves\") > 0) {");
code("yDatabaseNext(\"p\"+p+\"wolves\", true);");
code("if (trUnitAlive() == false) {");
code("trUnitChangeProtoUnit(\"Conversion SFX\");");
code("yRemoveFromDatabase(\"p\"+p+\"wolves\");");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"protection\") == 1) {");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"protectionNext\")) {");
code("trQuestVarSet(\"p\"+p+\"protectionNext\", trTimeMS() + 1000);");
code("trPlayerGrantResources(p, \"favor\", 0 - trQuestVarGet(\"protectionCost\"));");
code("if (trPlayerResourceCount(p, \"favor\") < trQuestVarGet(\"protectionCost\")) {");
code("trQuestVarSet(\"p\"+p+\"protection\", 0);");
code("trQuestVarSet(\"protectionCount\", trQuestVarGet(\"protectionCount\") - 1);");
code("trSoundPlayFN(\"godpowerfailed.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("}");

code("xsSetContextPlayer(old);");
code("}");

code("void chooseMoonblade(int eventID = -1) {");
code("int p = eventID - 1000 - 12 * MOONBLADE;");
code("if (trCurrentPlayer() == p) {");
code("map(\"q\", \"game\", \"uiSetSpecialPower(133) uiSpecialPowerAtPointer\");");
code("wellName = \"(Q) Moonbeam\";");
code("wellIsUltimate = false;");
code("map(\"e\", \"game\", \"uiSetSpecialPower(156) uiSpecialPowerAtPointer\");");
code("rainName = \"(E) Protection\";");
code("rainIsUltimate = false;");
code("map(\"w\", \"game\", \"uiSetSpecialPower(227) uiSpecialPowerAtPointer\");");
code("lureName = \"(W) Crescent Strikes\";");
code("lureIsUltimate = false;");
code("}");
code("trQuestVarSet(\"p\"+p+\"wellCooldown\", trQuestVarGet(\"moonbeamCooldown\"));");
code("trQuestVarSet(\"p\"+p+\"wellCost\", 0);");
code("trQuestVarSet(\"p\"+p+\"lureCooldown\", trQuestVarGet(\"crescentCooldown\"));");
code("trQuestVarSet(\"p\"+p+\"lureCost\", 0);");
code("trQuestVarSet(\"p\"+p+\"rainCooldown\", 1);");
code("trQuestVarSet(\"p\"+p+\"rainCost\", 0);");

code("trSetCivilizationNameOverride(p, \"Moonblade | Level \" + 1*trQuestVarGet(\"p\"+p+\"progress\"));");
code("}");

code("rule moonblade_init");
code("active");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("for(p=1; < ENEMY_PLAYER) {");
code("trEventSetHandler(12 * MOONBLADE + p, \"moonbladeAlways\");");
code("trEventSetHandler(1000 + 12 * MOONBLADE + p, \"chooseMoonblade\");");
code("}");
code("trQuestVarSet(\"moonbeamCooldown\", 18);");
code("trQuestVarSet(\"moonbeamDamage\", 20);");
code("trQuestVarSet(\"moonbeamDamageBoost\", 10);");
code("trQuestVarSet(\"moonbeamDuration\", 6);");
code("trQuestVarSet(\"moonbeamRadius\", 6);");

code("trQuestVarSet(\"crescentCooldown\", 12);");
code("trQuestVarSet(\"crescentCount\", 3);");
code("trQuestVarSet(\"crescentDamage\", 50);");

code("trQuestVarSet(\"protectionCost\", 12);");
code("}");
code("void removeSunbow(int p = 0) {");
code("removePlayerCharacter(p);");
code("yRemoveUpdateVar(\"p\"+p+\"characters\", \"searingSFX\");");
code("}");

code("void sunbowAlways(int eventID = -1) {");
code("int p = eventID - 12 * SUNBOW;");
code("int id = 0;");
code("int hit = 0;");
code("int target = 0;");
code("float amt = 0;");
code("float dist = 0;");
code("float posX = 0;");
code("float posZ = 0;");
code("int old = xsGetContextPlayer();");
code("xsSetContextPlayer(p);");
code("if (yGetDatabaseCount(\"p\"+p+\"characters\") > 0) {");
code("id = yDatabaseNext(\"p\"+p+\"characters\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeSunbow(p);");
code("} else {");
code("hit = CheckOnHit(p, id);");
code("if (hit == ON_HIT_NORMAL) {");
code("if (trQuestVarGet(\"p\"+p+\"healingRays\") == 1) {");
code("trPlayerGrantResources(p, \"favor\", 1);");
code("target = trGetUnitScenarioNameNumber(kbUnitGetTargetUnitID(id));");
code("trVectorQuestVarSet(\"end\", kbGetBlockPosition(\"\"+target));");
code("trVectorSetUnitPos(\"start\", \"p\"+p+\"characters\");");
code("trVectorQuestVarSet(\"dir\", zGetUnitVector(\"start\", \"end\"));");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,trQuestVarGet(\"startx\"),0,trQuestVarGet(\"startz\"),0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Petosuchus Projectile\"));");
code("trUnitHighlight(1.0, false);");
code("trSetUnitOrientation(xsVectorSet(0.0 - trQuestVarGet(\"dirx\"),0, 0.0 - trQuestVarGet(\"dirz\")), vector(0,1,0), true);");
code("yAddToDatabase(\"playerLasers\", \"next\");");
code("yAddUpdateVar(\"playerLasers\", \"timeout\", trTimeMS() + 500);");
code("yAddUpdateVar(\"playerLasers\", \"range\", trQuestVarGet(\"p\"+p+\"range\") * 1.3);");
code("amt = trQuestVarGet(\"healingRaysPower\") * trQuestVarGet(\"p\"+p+\"spellDamage\");");
code("for(x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("yDatabaseNext(\"playerUnits\");");
code("dist = zDistanceToVector(\"playerUnits\", \"start\");");
code("if (dist < trQuestVarGet(\"p\"+p+\"range\") + 3) {");
code("trQuestVarSet(\"hitboxX\", trQuestVarGet(\"startX\") + dist * trQuestVarGet(\"dirx\"));");
code("trQuestVarSet(\"hitboxZ\", trQuestVarGet(\"startZ\") + dist * trQuestVarGet(\"dirz\"));");
code("if (zDistanceToVectorSquared(\"playerUnits\", \"hitbox\") < 9) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"playerUnits\", true);");
code("healUnit(p, amt);");
code("}");
code("}");

code("}");
code("if (trQuestVarGet(\"p\"+p+\"searing\") == 1) {");
code("for(x=yGetDatabaseCount(\"enemies\"); >0) {");
code("yDatabaseNext(\"enemies\");");
code("dist = zDistanceToVector(\"enemies\", \"start\");");
code("if (dist < trQuestVarGet(\"p\"+p+\"range\") + 3) {");
code("trQuestVarSet(\"hitboxX\", trQuestVarGet(\"startX\") + dist * trQuestVarGet(\"dirx\"));");
code("trQuestVarSet(\"hitboxZ\", trQuestVarGet(\"startZ\") + dist * trQuestVarGet(\"dirz\"));");
code("if (zDistanceToVectorSquared(\"enemies\", \"hitbox\") < 9) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"enemies\", true);");
code("damageEnemy(p, amt);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"wellStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"wellStatus\", ABILITY_OFF);");
code("trSoundPlayFN(\"restorationbirth.wav\",\"1\",-1,\"\",\"\");");
code("vectorSnapToGrid(\"p\"+p+\"wellPos\");");
code("posX = trQuestVarGet(\"p\"+p+\"wellPosx\");");
code("posZ = trQuestVarGet(\"p\"+p+\"wellPosz\");");
code("yAddToDatabase(\"p\"+p+\"sunlights\", \"next\");");
code("yAddUpdateVar(\"p\"+p+\"sunlights\", \"radius\", xsPow(trQuestVarGet(\"sunlightRadius\")*trQuestVarGet(\"p\"+p+\"spellRange\"),2));");
code("yAddUpdateVar(\"p\"+p+\"sunlights\", \"power\", trQuestVarGet(\"sunlightPower\") * trQuestVarGet(\"p\"+p+\"spellDamage\"));");
code("yAddUpdateVar(\"p\"+p+\"sunlights\", \"timeout\",");
code("trTimeMS() + 1000 * trQuestVarGet(\"sunlightDuration\") * trQuestVarGet(\"p\"+p+\"spellDuration\"));");
code("yAddUpdateVar(\"p\"+p+\"sunlights\", \"start\", trGetNextUnitScenarioNameNumber());");
code("yAddUpdateVar(\"p\"+p+\"sunlights\", \"posx\", posX);");
code("yAddUpdateVar(\"p\"+p+\"sunlights\", \"posz\", posZ);");
code("yAddUpdateVar(\"p\"+p+\"sunlights\", \"next\", trTimeMS());");
code("for(x=0; <16) {");
code("trVectorSetFromAngle(\"dir\", amt);");
code("amt = amt + 6.283185 / 16;");
code("trQuestVarSet(\"dirx\",");
code("trQuestVarGet(\"dirx\") * trQuestVarGet(\"sunlightRadius\") * trQuestVarGet(\"p\"+p+\"spellRange\") + posX);");
code("trQuestVarSet(\"dirz\",");
code("trQuestVarGet(\"dirz\") * trQuestVarGet(\"sunlightRadius\") * trQuestVarGet(\"p\"+p+\"spellRange\") + posZ);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,trQuestVarGet(\"dirx\"),0,trQuestVarGet(\"dirz\"),0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitChangeProtoUnit(\"Relic\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Hero Birth\"));");
code("}");
code("yAddUpdateVar(\"p\"+p+\"sunlights\", \"end\", trGetNextUnitScenarioNameNumber());");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"lureStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"lureStatus\", ABILITY_OFF);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"lureObject\", true);");
code("trUnitDestroy();");
code("trQuestVarSet(\"p\"+p+\"healingrays\", 1);");
code("trQuestVarSet(\"p\"+p+\"healingRaysTimeout\",");
code("trTimeMS() + 1000 * trQuestVarGet(\"healingRaysDuration\") * trQuestVarGet(\"p\"+p+\"spellDuration\"));");
code("trSoundPlayFN(\"skypassagein.wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSet(\"p\"+p+\"nextDelay\",");
code("trQuestVarGet(\"class\"+SUNBOW+\"nextDelay\") * 2.0 / (1.0 + trQuestVarGet(\"p\"+p+\"projectiles\")));");
code("}");

code("if ((trQuestVarGet(\"p\"+p+\"healingRays\") == 1) && (trTimeMS() > trQuestVarGet(\"p\"+p+\"healingRaysTimeout\"))) {");
code("trQuestVarSet(\"p\"+p+\"healingRays\", 0);");
code("trSoundPlayFN(\"godpowerfailed.wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSet(\"p\"+p+\"nextDelay\", trQuestVarGet(\"class\"+SUNBOW+\"nextDelay\"));");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"rainStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"rainStatus\", ABILITY_OFF);");
code("trQuestVarSet(\"p\"+p+\"searingStarted\", 1);");
code("trQuestVarSet(\"p\"+p+\"searing\", 1 - trQuestVarGet(\"p\"+p+\"searing\"));");
code("if (trQuestVarGet(\"p\"+p+\"searing\") == 1) {");
code("if (trPlayerResourceCount(p, \"favor\") < trQuestVarGet(\"searingCost\")) {");
code("if (trCurrentPlayer() == p) {");
code("trSoundPlayFN(\"cantdothat.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("trQuestVarSet(\"p\"+p+\"searing\", 0);");
code("} else {");
code("trQuestVarSet(\"p\"+p+\"searingNext\", trTimeMS() + 1000);");
code("trSoundPlayFN(\"flamingweapons.wav\",\"1\",-1,\"\",\"\");");
code("for(x=yGetDatabaseCount(\"p\"+p+\"Characters\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"Characters\");");
code("if ((yGetVar(\"p\"+p+\"Characters\", \"searingSFX\") == 0) ||");
code("(kbGetBlockID(\"\"+1*yGetVar(\"p\"+p+\"characters\", \"searingSFX\")) == -1)) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"characters\", true);");
code("ySetVar(\"p\"+p+\"Characters\", \"searingSFX\",");
code("0 - spyEffect(1*trQuestVarGet(\"p\"+p+\"Characters\"), kbGetProtoUnitID(\"Rocket\")));");
code("}");
code("}");
code("}");
code("} else {");
code("if (trCurrentPlayer() == p) {");
code("trSoundPlayFN(\"godpowerfailed.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"searing\") == 1) {");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"searingNext\")) {");
code("trQuestVarSet(\"p\"+p+\"searingNext\", trTimeMS() + 1000);");
code("trPlayerGrantResources(p, \"favor\", 0 - trQuestVarGet(\"searingCost\"));");
code("if (trPlayerResourceCount(p, \"favor\") < trQuestVarGet(\"searingCost\")) {");
code("trQuestVarSet(\"p\"+p+\"searing\", 0);");
code("trQuestVarSet(\"p\"+p+\"searingStarted\", 1);");
code("trSoundPlayFN(\"godpowerfailed.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("}");

code("if ((trQuestVarGet(\"p\"+p+\"searingStarted\") == 1) && (trQuestVarGet(\"spyFind\") == trQuestVarGet(\"spyFound\"))) {");
code("for(x=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"characters\");");
code("if (yGetVar(\"p\"+p+\"characters\", \"searingSFX\") < 0) {");
code("ySetVar(\"p\"+p+\"characters\", \"searingSFX\", trQuestVarGet(\"spyEye\"+(0-yGetVar(\"p\"+p+\"characters\", \"searingSFX\"))));");
code("}");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"p\"+p+\"characters\", \"searingSFX\"), true);");
code("if (trQuestVarGet(\"p\"+p+\"searing\") == 1) {");
code("trMutateSelected(kbGetProtoUnitID(\"Ball of Fire Impact\"));");
code("} else {");
code("trMutateSelected(kbGetProtoUnitID(\"Rocket\"));");
code("}");
code("}");
code("trQuestVarSet(\"p\"+p+\"searingStarted\", 0);");
code("}");

code("if (yGetDatabaseCount(\"p\"+p+\"sunlights\") > 0) {");
code("target = 0;");
code("yDatabaseNext(\"p\"+p+\"sunlights\");");
code("if (trTimeMS() > yGetVar(\"p\"+p+\"sunlights\", \"next\")) {");
code("ySetVar(\"p\"+p+\"sunlights\", \"next\", trTimeMS() + 500);");
code("trQuestVarSet(\"centerX\", yGetVar(\"p\"+p+\"sunlights\", \"posX\"));");
code("trQuestVarSet(\"centerZ\", yGetVar(\"p\"+p+\"sunlights\", \"posZ\"));");
code("amt = xsPow(yGetVar(\"p\"+p+\"sunlights\", \"radius\"), 2);");
code("posX = yGetVar(\"p\"+p+\"sunlights\", \"power\");");
code("posX = posX * 0.5;");

code("for (x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("id = yDatabaseNext(\"playerUnits\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (zDistanceToVectorSquared(\"playerUnits\", \"center\") < amt) {");
code("healUnit(p, posX);");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"searing\") == 1) {");
code("for(x=yGetDatabaseCount(\"enemies\"); >0) {");
code("id = yDatabaseNext(\"enemies\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (zDistanceToVectorSquared(\"enemies\", \"center\") < amt) {");
code("damageEnemy(p, posX);");
code("}");
code("}");
code("}");

code("if (trTimeMS() > yGetVar(\"p\"+p+\"sunlights\", \"timeout\")) {");
code("for(x=yGetVar(\"p\"+p+\"sunlights\", \"start\"); < yGetVar(\"p\"+p+\"sunlights\", \"end\")) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+x, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Rocket\"));");
code("trUnitDestroy();");
code("}");
code("yRemoveFromDatabase(\"p\"+p+\"sunlights\");");
code("yRemoveUpdateVar(\"p\"+p+\"sunlights\", \"radius\");");
code("yRemoveUpdateVar(\"p\"+p+\"sunlights\", \"power\");");
code("yRemoveUpdateVar(\"p\"+p+\"sunlights\", \"timeout\");");
code("yRemoveUpdateVar(\"p\"+p+\"sunlights\", \"posX\");");
code("yRemoveUpdateVar(\"p\"+p+\"sunlights\", \"posZ\");");
code("yRemoveUpdateVar(\"p\"+p+\"sunlights\", \"next\");");
code("yRemoveUpdateVar(\"p\"+p+\"sunlights\", \"start\");");
code("yRemoveUpdateVar(\"p\"+p+\"sunlights\", \"end\");");
code("}");
code("}");
code("}");

code("if (trTime() > trQuestVarGet(\"p\"+p+\"sunbowPassiveNext\")) {");
code("trQuestVarSet(\"p\"+p+\"sunbowPassiveNext\", trTime());");
code("for(x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("id = yDatabaseNext(\"playerUnits\", true);");
code("if ((id == -1) || trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else {");
code("healUnit(1, 1);");
code("}");
code("}");
code("}");

code("xsSetContextPlayer(old);");
code("}");

code("void chooseSunbow(int eventID = -1) {");
code("int p = eventID - 1000 - 12 * SUNBOW;");
code("if (trCurrentPlayer() == p) {");
code("map(\"q\", \"game\", \"uiSetSpecialPower(133) uiSpecialPowerAtPointer\");");
code("wellName = \"(Q) Sunlight\";");
code("wellIsUltimate = false;");
code("map(\"e\", \"game\", \"uiSetSpecialPower(156) uiSpecialPowerAtPointer\");");
code("rainName = \"(E) Searing Light\";");
code("rainIsUltimate = false;");
code("map(\"w\", \"game\", \"uiSetSpecialPower(227) uiSpecialPowerAtPointer\");");
code("lureName = \"(W) Healing Rays\";");
code("lureIsUltimate = false;");
code("}");
code("trQuestVarSet(\"p\"+p+\"wellCooldown\", trQuestVarGet(\"sunlightCooldown\"));");
code("trQuestVarSet(\"p\"+p+\"wellCost\", 0);");
code("trQuestVarSet(\"p\"+p+\"lureCooldown\", trQuestVarGet(\"healingRaysCooldown\"));");
code("trQuestVarSet(\"p\"+p+\"lureCost\", 0);");
code("trQuestVarSet(\"p\"+p+\"rainCooldown\", 1);");
code("trQuestVarSet(\"p\"+p+\"rainCost\", 0);");

code("trSetCivilizationNameOverride(p, \"Sunbow | Level \" + 1*trQuestVarGet(\"p\"+p+\"progress\"));");
code("}");

code("rule sunbow_init");
code("active");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("for(p=1; < ENEMY_PLAYER) {");
code("trEventSetHandler(12 * SUNBOW + p, \"sunbowAlways\");");
code("trEventSetHandler(1000 + 12 * SUNBOW + p, \"chooseSunbow\");");
code("}");

code("trQuestVarSet(\"sunlightCooldown\", 18);");
code("trQuestVarSet(\"sunlightRadius\", 6);");
code("trQuestVarSet(\"sunlightDuration\", 6);");
code("trQuestVarSet(\"sunlightPower\", 60);");

code("trQuestVarSet(\"healingRaysCooldown\", 12);");
code("trQuestVarSet(\"healingRaysPower\", 100);");
code("trQuestVarSet(\"healingRaysDuration\", 5);");

code("trQuestVarSet(\"searingCost\", 5);");
code("}");
code("void setupProtounitBounty(string proto = \"\", int bounty = 2) {");
code("int p = kbGetProtoUnitID(proto);");
code("trQuestVarSet(\"proto\"+p+\"bounty\", bounty);");
code("trModifyProtounit(proto, ENEMY_PLAYER, 24, -1);");
code("trModifyProtounit(proto, ENEMY_PLAYER, 25, -1);");
code("trModifyProtounit(proto, ENEMY_PLAYER, 26, -1);");
code("trModifyProtounit(proto, 1, 24, -1);");
code("trModifyProtounit(proto, 1, 25, -1);");
code("trModifyProtounit(proto, 1, 26, -1);");
code("trModifyProtounit(proto, ENEMY_PLAYER, 6, 6);");
code("trModifyProtounit(proto, 1, 6, 6);");
code("}");

code("void activateEnemy(int id = 0) {");
code("int proto = kbGetUnitBaseTypeID(id);");
code("int bounty = trQuestVarGet(\"proto\"+proto+\"bounty\");");

code("yAddToDatabase(\"enemies\", \"enemiesIncoming\");");
code("trQuestVarSetFromRand(\"bounty\", bounty / 2, bounty, true);");
code("yAddUpdateVar(\"enemies\", \"bounty\", trQuestVarGet(\"bounty\"));");
code("yRemoveFromDatabase(\"enemiesIncoming\");");
code("}");

code("rule setup_enemies");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime) {");
code("trModifyProtounit(\"Minion\", ENEMY_PLAYER, 8, -99);");
code("trModifyProtounit(\"Minion\", 1, 8, -99);");
code("setupProtounitBounty(\"Anubite\", 6);");
code("setupProtounitBounty(\"Minion\", 4);");
code("setupProtounitBounty(\"Sphinx\", 8);");
code("setupProtounitBounty(\"Scarab\", 10);");
code("setupProtounitBounty(\"Mummy\", 12);");
code("xsDisableSelf();");
code("}");
code("}");

code("rule enemies_always");
code("inactive");
code("highFrequency");
code("{");
code("int old = xsGetContextPlayer();");
code("int proto = 0;");
code("int id = 0;");
code("id = yDatabaseNext(\"enemiesIncoming\", true);");
code("for(p=1; < ENEMY_PLAYER) {");
code("if (trUnitHasLOS(p)) {");
code("activateEnemy(id);");
code("break;");
code("}");
code("}");

code("xsSetContextPlayer(ENEMY_PLAYER);");
code("while(trQuestVarGet(\"nextProj\") < trGetNextUnitScenarioNameNumber()) {");
code("id = kbGetBlockID(\"\"+1*trQuestVarGet(\"nextProj\"), true);");
code("proto = kbGetUnitBaseTypeID(id);");
code("if ((proto == kbGetProtoUnitID(\"Sling Stone\")) ||");
code("(proto == kbGetProtoUnitID(\"Arrow Flaming\")) ||");
code("(proto == kbGetProtoUnitID(\"Javelin Flaming\")) ||");
code("(proto == kbGetProtoUnitID(\"Axe\"))) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"nextProj\");");
code("if (trUnitIsOwnedBy(ENEMY_PLAYER)) {");
code("}");
code("}");
code("trQuestVarSet(\"nextProj\", 1 + trQuestVarGet(\"nextProj\"));");
code("}");

code("if (yGetDatabaseCount(\"enemies\") > 0) {");
code("id = yDatabaseNext(\"enemies\", true);");
code("if ((id == -1) || (trUnitAlive() == false)) {");
code("removeEnemy();");
code("} else {");
code("stunsAndPoisons(\"enemies\");");
code("}");
code("}");

code("xsSetContextPlayer(old);");
code("}");
code("void spawnPlayerClone(int p = 0, string vdb = \"\") {");
code("int class = trQuestVarGet(\"p\"+p+\"class\");");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("yAddToDatabase(\"p\"+p+\"characters\", \"next\");");
code("yAddToDatabase(\"playerUnits\", \"next\");");
code("yAddUpdateVar(\"playerUnits\", \"player\", p);");
code("yAddToDatabase(\"playerCharacters\", \"next\");");
code("yAddUpdateVar(\"playerCharacters\", \"player\", p);");
code("string proto = kbGetProtoUnitName(1*trQuestVarGet(\"class\"+class+\"proto\"));");
code("trArmyDispatch(\"\"+p+\",0\",proto,1,trQuestVarGet(vdb+\"x\"),0,trQuestVarGet(vdb+\"z\"),0,true);");
code("}");

code("void spawnPlayer(int p = 0, string vdb = \"\") {");
code("trQuestVarSet(\"p\"+p+\"unit\", trGetNextUnitScenarioNameNumber());");
code("spawnPlayerClone(p, vdb);");
code("if (trCurrentPlayer() == p) {");
code("int class = trQuestVarGet(\"p\"+p+\"class\");");
code("string proto = kbGetProtoUnitName(1*trQuestVarGet(\"class\"+class+\"proto\"));");
code("uiFindType(proto);");
code("}");
code("}");

code("void checkGodPowers(int p = 0) {");
code("switch(1*trQuestVarGet(\"p\"+p+\"wellCooldownStatus\"))");
code("{");
code("case ABILITY_READY:");
code("{");
code("if (trPlayerUnitCountSpecific(p, \"Tunnel\") == 2) {");
code("yFindLatest(\"p\"+p+\"wellObject\", \"Tunnel\", p);");
code("trVectorSetUnitPos(\"p\"+p+\"wellPos\", \"p\"+p+\"wellObject\");");
code("trMutateSelected(kbGetProtoUnitID(\"Rocket\"));");
code("trUnitDestroy();");
code("trQuestVarSet(\"p\"+p+\"wellStatus\", ABILITY_ON);");
code("trQuestVarSet(\"p\"+p+\"wellCooldownStatus\", ABILITY_COOLDOWN);");
code("trQuestVarSet(\"p\"+p+\"wellReadyTime\",");
code("trTimeMS() + 1000 * trQuestVarGet(\"p\"+p+\"wellCooldown\") * trQuestVarGet(\"p\"+p+\"cooldownReduction\"));");
code("if (trCurrentPlayer() == p) {");
code("trCounterAbort(\"well\");");
code("trCounterAddTime(\"well\",");
code("trQuestVarGet(\"p\"+p+\"wellCooldown\") * trQuestVarGet(\"p\"+p+\"cooldownReduction\"), 1, wellName);");
code("}");
code("} else {");
code("trQuestVarSet(\"p\"+p+\"wellObject\", trGetNextUnitScenarioNameNumber() - 1);");
code("}");
code("}");
code("case ABILITY_COOLDOWN:");
code("{");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"wellReadyTime\")) {");
code("trQuestVarSet(\"p\"+p+\"wellCooldownStatus\", ABILITY_COST);");
code("}");
code("}");
code("case ABILITY_COST:");
code("{");
code("if (trPlayerResourceCount(p, \"favor\") >= trQuestVarGet(\"p\"+p+\"wellCost\")) {");
code("trQuestVarSet(\"p\"+p+\"wellCooldownStatus\", ABILITY_READY);");
code("if (trCurrentPlayer() == p) {");
code("trCounterAddTime(\"well\", -1, -99999, wellName);");
code("if (wellIsUltimate) {");
code("trSoundPlayFN(\"ui\thunder2.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("if (trQuestVarGet(\"p\"+p+\"silenced\") == 0) {");
code("trTechGodPower(p, \"Underworld Passage\", 1);");
code("}");
code("}");
code("}");
code("}");

code("switch(1*trQuestVarGet(\"p\"+p+\"rainCooldownStatus\"))");
code("{");
code("case ABILITY_READY:");
code("{");
code("if (trCheckGPActive(\"rain\", p)) {");
code("trQuestVarSet(\"p\"+p+\"rainStatus\", ABILITY_ON);");
code("trQuestVarSet(\"p\"+p+\"rainCooldownStatus\", ABILITY_COOLDOWN);");
code("trQuestVarSet(\"p\"+p+\"rainReadyTime\",");
code("trTimeMS() + 1000 * trQuestVarGet(\"p\"+p+\"rainCooldown\") * trQuestVarGet(\"p\"+p+\"cooldownReduction\"));");
code("if (trCurrentPlayer() == p) {");
code("trCounterAbort(\"rain\");");
code("trCounterAddTime(\"rain\",");
code("trQuestVarGet(\"p\"+p+\"rainCooldown\") * trQuestVarGet(\"p\"+p+\"cooldownReduction\"), 1, rainName);");
code("}");
code("}");
code("}");
code("case ABILITY_COOLDOWN:");
code("{");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"rainReadyTime\")) {");
code("trQuestVarSet(\"p\"+p+\"rainCooldownStatus\", ABILITY_COST);");
code("}");
code("}");
code("case ABILITY_COST:");
code("{");
code("if (trPlayerResourceCount(p, \"favor\") >= trQuestVarGet(\"p\"+p+\"rainCost\")) {");
code("trQuestVarSet(\"p\"+p+\"rainCooldownStatus\", ABILITY_READY);");
code("if (trCurrentPlayer() == p) {");
code("trCounterAddTime(\"rain\", -1, -99999, rainName);");
code("if (rainIsUltimate) {");
code("trSoundPlayFN(\"ui\thunder2.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("if (trQuestVarGet(\"p\"+p+\"silenced\") == 0) {");
code("trTechGodPower(p, \"rain\", 1);");
code("}");
code("}");
code("}");
code("}");

code("switch(1*trQuestVarGet(\"p\"+p+\"lureCooldownStatus\"))");
code("{");
code("case ABILITY_READY:");
code("{");
code("if (trPlayerUnitCountSpecific(p, \"Animal Attractor\") == 1) {");
code("yFindLatestReverse(\"p\"+p+\"lureObject\", \"Animal Attractor\", p);");
code("trMutateSelected(kbGetProtoUnitID(\"Rocket\"));");
code("trQuestVarSet(\"p\"+p+\"lureStatus\", ABILITY_ON);");
code("trQuestVarSet(\"p\"+p+\"lureCooldownStatus\", ABILITY_COOLDOWN);");
code("trQuestVarSet(\"p\"+p+\"lureReadyTime\",");
code("trTimeMS() + 1000 * trQuestVarGet(\"p\"+p+\"lureCooldown\") * trQuestVarGet(\"p\"+p+\"cooldownReduction\"));");
code("if (trCurrentPlayer() == p) {");
code("trCounterAbort(\"lure\");");
code("trCounterAddTime(\"lure\",");
code("trQuestVarGet(\"p\"+p+\"lureCooldown\") * trQuestVarGet(\"p\"+p+\"cooldownReduction\"), 1, lureName);");
code("}");
code("}");
code("}");
code("case ABILITY_COOLDOWN:");
code("{");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"lureReadyTime\")) {");
code("trQuestVarSet(\"p\"+p+\"lureCooldownStatus\", ABILITY_COST);");
code("}");
code("}");
code("case ABILITY_COST:");
code("{");
code("if (trPlayerResourceCount(p, \"favor\") >= trQuestVarGet(\"p\"+p+\"lureCost\")) {");
code("trQuestVarSet(\"p\"+p+\"lureCooldownStatus\", ABILITY_READY);");
code("if (trCurrentPlayer() == p) {");
code("trCounterAddTime(\"lure\", -1, -99999, lureName);");
code("if (lureIsUltimate) {");
code("trSoundPlayFN(\"ui\thunder2.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("if (trQuestVarGet(\"p\"+p+\"silenced\") == 0) {");
code("trTechGodPower(p, \"animal magnetism\", 1);");
code("}");
code("}");
code("}");
code("}");
code("}");

code("rule gameplay_start");
code("inactive");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("trDelayedRuleActivation(\"gameplay_start_2\");");
code("for(p=1; < ENEMY_PLAYER) {");
code("chooseClass(p, 1*trQuestVarGet(\"p\"+p+\"class\"));");
code("}");
code("}");

code("rule gameplay_start_2");
code("inactive");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("trSetUnitIdleProcessing(true);");
code("trSetFogAndBlackmap(true, true);");
code("trPlayerResetBlackMapForAllPlayers();");
code("trCameraCut(vector(0,70.710701,0), vector(0.5,-0.707107,0.5), vector(0.5,0.707107,0.5), vector(0.707107,0,-0.707107));");
code("xsEnableRule(\"gameplay_always\");");
code("xsEnableRule(\"enemies_always\");");
code("for(p=1; < ENEMY_PLAYER) {");
code("spawnPlayer(p, \"startPosition\");");
code("trQuestVarSet(\"p\"+p+\"lureObject\", trGetNextUnitScenarioNameNumber()-1);");
code("trQuestVarSet(\"p\"+p+\"wellObject\", trGetNextUnitScenarioNameNumber()-1);");
code("}");
code("trQuestVarSet(\"nextProj\", trGetNextUnitScenarioNameNumber());");

code("}");

code("rule gameplay_always");
code("inactive");
code("highFrequency");
code("{");
code("int old = xsGetContextPlayer();");
code("int id = 0;");
code("int p = 0;");
code("float amt = 0;");

code("if (yGetDatabaseCount(\"playerUnits\") > 0) {");
code("id = yDatabaseNext(\"playerUnits\", true);");
code("if ((id == -1) || (trUnitAlive() == false)) {");
code("removePlayerUnit();");
code("} else {");
code("if (yGetVar(\"playerUnits\", \"decay\") > 0) {");
code("if (trTimeMS() > yGetVar(\"playerUnits\", \"decayNext\")) {");
code("ySetVar(\"playerUnits\", \"decayNext\", 1000 + yGetVar(\"playerUnits\", \"decayNext\"));");
code("trDamageUnitPercent(yGetVar(\"playerUnits\", \"decay\"));");
code("}");
code("}");

code("stunsAndPoisons(\"playerUnits\");");
code("}");
code("}");

code("for(x=yGetDatabaseCount(\"stunnedUnits\"); >0) {");
code("id = yDatabaseNext(\"stunnedUnits\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("yRemoveFromDatabase(\"stunnedUnits\");");
code("yRemoveUpdateVar(\"stunnedUnits\", \"proto\");");
code("} else {");
code("trMutateSelected(1*yGetVar(\"stunnedUnits\", \"proto\"));");
code("trUnitOverrideAnimation(2, 0, false, true, -1, 0);");
code("}");
code("}");

code("for(x=xsMin(3, yGetDatabaseCount(\"playerLasers\")); >0) {");
code("yDatabaseNext(\"playerLasers\", true);");
code("if (trTimeMS() > yGetVar(\"playerLasers\", \"timeout\")) {");
code("trUnitDestroy();");
code("yRemoveFromDatabase(\"playerLasers\");");
code("yRemoveUpdateVar(\"playerLasers\", \"timeout\");");
code("yRemoveUpdateVar(\"playerLasers\", \"range\");");
code("} else {");
code("float width = 4.0 * (yGetVar(\"playerLasers\", \"timeout\") - trTimeMS()) / 500;");
code("trSetSelectedScale(width, width, yGetVar(\"playerLasers\", \"range\"));");
code("}");
code("}");

code("for(p=1; < ENEMY_PLAYER) {");
code("trEventFire(12*trQuestVarGet(\"p\"+p+\"class\") + p);");
code("checkGodPowers(p);");
code("}");

code("if (trQuestVarGet(\"protectionCount\") > 0) {");
code("for(x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("id = yDatabaseNext(\"playerUnits\", true);");
code("trUnitHighlight(0.2, false);");
code("xsSetContextPlayer(1*yGetVar(\"playerUnits\", \"player\"));");
code("amt = kbUnitGetCurrentHitpoints(id);");
code("if (amt > yGetVar(\"playerUnits\", \"currentHealth\")) {");
code("ySetVar(\"playerUnits\", \"currentHealth\", amt);");
code("} else {");
code("trDamageUnit(amt - yGetVar(\"playerUnits\", \"currentHealth\"));");
code("}");
code("}");
code("}");

code("if (trQuestVarGet(\"stunSound\") == 1) {");
code("trQuestVarSet(\"stunSound\", 0);");
code("trQuestVarSetFromRand(\"sound\", 1, 3, true);");
code("trSoundPlayFN(\"woodcrush\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("}");

code("xsSetContextPlayer(old);");
code("}");
rmAddTriggerEffect("SetIdleProcessing");
rmSetTriggerEffectParam("IdleProc",");*/rule _zenowashereagain inactive {if(true){xsDisableSelf();//");
rmSetStatusText("", 0.99);}