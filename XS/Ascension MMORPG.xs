void code(string xs="") {
rmAddTriggerEffect("SetIdleProcessing");
rmSetTriggerEffectParam("IdleProc",");*/"+xs+"/*");}
void main(void) {
rmSetStatusText("", 0.01);

rmSetMapSize(290, 290);

rmSetSeaLevel(0);
rmSetSeaType("greek river");
rmTerrainInitialize("OlympusA",1);
rmSetGaiaCiv(cCivZeus);
rmSetLightingSet("Default");
rmSetStatusText("", 0.1);

string quote = "\\";
rmAddTriggerEffect("SetIdleProcessing");
rmSetTriggerEffectParam("IdleProc",");*/rule _zenowasherefirstagain inactive {if(true){xsDisableSelf();//");
rmSwitchToTrigger(rmCreateTrigger("zenowashere"));
rmSetTriggerPriority(4);
rmSetTriggerActive(false);
rmSetTriggerLoop(false);
rmSetTriggerRunImmediately(true);
rmAddTriggerEffect("SetIdleProcessing");
rmSetTriggerEffectParam("IdleProc",");}}/*");
code("const int DIMENSION_X = 290;");
code("const int DIMENSION_Z = 290;");
code("const float PI = 3.141592;");

code("void debugLog(string msg = \"\") {");
code("if (trCurrentPlayer() == 1) {");
code("trChatSend(0, \"<color=1,0,0>\" + msg);");
code("}");
code("}");

code("void trVectorQuestVarSet(string VQVname = \"\", vector QVv = vector(-1,-1,-1)) {");
code("if (VQVname == \"\") return;");
code("trQuestVarSet(\"\"+VQVname+\"X\", xsVectorGetX(QVv));");
code("trQuestVarSet(\"\"+VQVname+\"Y\", xsVectorGetY(QVv));");
code("trQuestVarSet(\"\"+VQVname+\"Z\", xsVectorGetZ(QVv));");
code("}");

code("vector trVectorQuestVarGet(string name = \"\") {");
code("if (name == \"\") { return(vector(-1,-1,-1)); }");
code("vector ret = xsVectorSet(trQuestVarGet(name+\"X\"),trQuestVarGet(name+\"Y\"),trQuestVarGet(name+\"Z\"));");
code("return(ret);");
code("}");

code("float trVectorQuestVarGetX(string VQVname = \"\") {");
code("if (VQVname == \"\") return(-1);");
code("return(trQuestVarGet(\"\"+VQVname+\"X\"));");
code("}");

code("float trVectorQuestVarGetY(string VQVname = \"\") {");
code("if (VQVname == \"\") return(-1);");
code("return(trQuestVarGet(\"\"+VQVname+\"Y\"));");
code("}");

code("float trVectorQuestVarGetZ(string VQVname = \"\") {");
code("if (VQVname == \"\") return(-1);");
code("return(trQuestVarGet(\"\"+VQVname+\"Z\"));");
code("}");

code("void trVectorQuestVarEcho(string VQVname = \"\") {");
code("if (VQVname == \"\") return;");
code("trChatSend(0, \"\"+VQVname+\": \"+trVectorQuestVarGet(VQVname));");
code("}");

code("void vectorRotate90Deg(string qv = \"\") {");
code("float x = trQuestVarGet(qv+\"x\");");
code("trQuestVarSet(qv+\"x\", 0.0 - trQuestVarGet(qv+\"z\"));");
code("trQuestVarSet(qv+\"z\", x);");
code("}");

code("void trStringQuestVarSet(string name = \"\", string value = \"\") {");
code("int old = xsGetContextPlayer();");
code("xsSetContextPlayer(0);");
code("if (trQuestVarGet(\"string\"+name) > 0) {");
code("kbArmyDestroy(1*trQuestVarGet(\"string\"+name));");
code("}");
code("trQuestVarSet(\"string\"+name, kbArmyCreate(value));");
code("xsSetContextPlayer(old);");
code("}");

code("string trStringQuestVarGet(string name=\"\") {");
code("int old = xsGetContextPlayer();");
code("xsSetContextPlayer(0);");
code("string val = kbArmyGetName(1*trQuestVarGet(\"string\"+name));");
code("xsSetContextPlayer(old);");
code("return(val);");
code("}");


code("bool playerIsPlaying(int p = 0) {");
code("return(kbIsPlayerHuman(p) == true && kbIsPlayerResigned(p) == false);");
code("}");


code("void trUnitTeleportToVector(string v = \"\") {");
code("trUnitTeleport(trVectorQuestVarGetX(\"\"+v), trVectorQuestVarGetY(\"\"+v), trVectorQuestVarGetZ(\"\"+v));");
code("}");

code("void trUnitSelectByQV(string s = \"\", bool reverse = true) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"\"+s), reverse);");
code("}");

code("void trVectorSetUnitPos(string v = \"\", string db = \"\", bool reverse = true) {");
code("trVectorQuestVarSet(v, kbGetBlockPosition(\"\"+1*trQuestVarGet(db), reverse));");
code("}");

code("void trVectorSetUnitPosInt(string v = \"\", int val = 0, bool reverse = true) {");
code("trVectorQuestVarSet(v, kbGetBlockPosition(\"\"+val, reverse));");
code("}");


code("void trUnitMoveToVector(string v = \"\", bool attack = false) {");
code("trUnitMoveToPoint(trVectorQuestVarGetX(v),0,trVectorQuestVarGetZ(v),-1,attack);");
code("}");

code("void trVectorScale(string db = \"\", float s = 1.0) {");
code("trQuestVarSet(db+\"x\", trQuestVarGet(db+\"x\") * s);");
code("trQuestVarSet(db+\"z\", trQuestVarGet(db+\"z\") * s);");
code("}");


code("void vectorSnapToGrid(string qv = \"\") {");
code("int x = trQuestVarGet(qv+\"x\") / 2;");
code("int z = trQuestVarGet(qv+\"z\") / 2;");
code("trQuestVarSet(qv+\"x\", x * 2 + 1);");
code("trQuestVarSet(qv+\"z\", z * 2 + 1);");
code("}");

code("int zModulo(int mod = 10, float val = 0) {");
code("int m = 0 + mod;");
code("int v = xsRound(val);");
code("return(v - xsFloor(val / m) * m);");
code("}");

code("int iModulo(int mod = 10, int val = 0) {");
code("return(val - val / mod * mod);");
code("}");

code("float fModulo(float mod = 0, float val = 0) {");
code("int c = 0;");
code("if (val > 0) {");
code("c = val / mod;");
code("} else {");
code("c = val / mod - 1;");
code("}");
code("return(0.0 + val - mod * c);");
code("}");

code("bool getBit(int bit = 0, int val = 0) {");
code("val = val / xsPow(2, bit);");
code("return((iModulo(2, val) == 1));");
code("}");

code("void zUnitHeading(float a = 0) {");
code("trSetUnitOrientation(xsVectorSet(xsSin(a),0,xsCos(a)), xsVectorSet(0,1,0), true);");
code("}");

code("void zInitProtoUnitStat(string r = \"\", int p = 0, int f = 0, float v = 0.0) {");
code("trQuestVarSet(\"p\"+p+\"pf\"+kbGetProtoUnitID(r)+\"f\"+f, v);");
code("}");

code("void zSetProtoUnitStat(string r = \"\", int p = 0, int f = 0, float v = 0.0) {");
code("for(zsps=0; >1){}");
code("zsps = kbGetProtoUnitID(r);");
code("trModifyProtounit(r, p, f, 0.0 + v - trQuestVarGet(\"p\"+p+\"pf\"+zsps+\"f\"+f));");
code("trQuestVarSet(\"p\"+p+\"pf\"+zsps+\"f\"+f, 0.0 + v);");
code("}");

code("void vectorToGrid(string from = \"\", string to = \"\"){");
code("int x = 0 + trQuestVarGet(from+\"x\") / 2;");
code("int z = 0 + trQuestVarGet(from+\"z\") / 2;");
code("trQuestVarSet(to+\"x\", x);");
code("trQuestVarSet(to+\"z\", z);");
code("}");

code("void gridToVector(string from = \"\", string to = \"\") {");
code("trQuestVarSet(to+\"x\", trQuestVarGet(from+\"x\") * 2 + 1);");
code("trQuestVarSet(to+\"z\", trQuestVarGet(from+\"z\") * 2 + 1);");
code("}");

code("float gridDistanceSquared(string from = \"\", string to = \"\") {");
code("float xdiff = trQuestVarGet(to+\"x\") - trQuestVarGet(from+\"x\");");
code("float zdiff = trQuestVarGet(to+\"z\") - trQuestVarGet(from+\"z\");");
code("return(xdiff * xdiff + zdiff * zdiff);");
code("}");

code("void zSquareVar(string qv = \"\") {");
code("trQuestVarSet(qv, xsPow(trQuestVarGet(qv), 2));");
code("}");

code("float zDistanceBetweenVectorsSquared(string start = \"\", string end = \"\") {");
code("float xdiff = trQuestVarGet(end + \"X\") - trQuestVarGet(start + \"X\");");
code("float zdiff = trQuestVarGet(end + \"Z\") - trQuestVarGet(start + \"Z\");");
code("float dist = xdiff * xdiff + zdiff * zdiff;");
code("return(dist);");
code("}");

code("bool vectorInRectangle(string pos = \"\", string bottom = \"\", string top = \"\") {");
code("if (trQuestVarGet(pos+\"x\") < trQuestVarGet(bottom+\"x\")) {");
code("return(false);");
code("}");
code("if (trQuestVarGet(pos+\"x\") > trQuestVarGet(top+\"x\")) {");
code("return(false);");
code("}");
code("if (trQuestVarGet(pos+\"z\") < trQuestVarGet(bottom+\"z\")) {");
code("return(false);");
code("}");
code("if (trQuestVarGet(pos+\"z\") > trQuestVarGet(top+\"z\")) {");
code("return(false);");
code("}");
code("return(true);");
code("}");

code("vector rotationMatrix(string v = \"\", float cosT = 0, float sinT = 0) {");
code("float x = trQuestVarGet(v+\"x\");");
code("float z = trQuestVarGet(v+\"z\");");
code("vector ret = xsVectorSet(x * cosT - z * sinT, 0, x * sinT + z * cosT);");
code("return(ret);");
code("}");

code("float zDistanceBetweenVectors(string start = \"\", string end = \"\") {");
code("float xdiff = trQuestVarGet(end + \"X\") - trQuestVarGet(start + \"X\");");
code("float zdiff = trQuestVarGet(end + \"Z\") - trQuestVarGet(start + \"Z\");");
code("float dist = xsSqrt(xdiff * xdiff + zdiff * zdiff);");
code("return(dist);");
code("}");

code("float zDistanceBetweenVectors3d(string start = \"\", string end = \"\") {");
code("float xdiff = trQuestVarGet(end + \"X\") - trQuestVarGet(start + \"X\");");
code("float ydiff = trQuestVarGet(end + \"Y\") - trQuestVarGet(start + \"Y\");");
code("float zdiff = trQuestVarGet(end + \"Z\") - trQuestVarGet(start + \"Z\");");
code("float dist = xsSqrt(xdiff * xdiff + ydiff * ydiff + zdiff * zdiff);");
code("return(dist);");
code("}");

code("float zDistanceToVectorSquared(string qv = \"\", string v = \"\") {");
code("trVectorQuestVarSet(\"abcd\", kbGetBlockPosition(\"\"+1*trQuestVarGet(qv), true));");
code("return(zDistanceBetweenVectorsSquared(\"abcd\", v));");
code("}");

code("float zDistanceToVector(string qv = \"\", string v = \"\") {");
code("trVectorQuestVarSet(\"abcd\", kbGetBlockPosition(\"\"+1*trQuestVarGet(qv), true));");
code("return(zDistanceBetweenVectors(\"abcd\", v));");
code("}");

code("void trVectorSetFromAngle(string qv = \"\", float angle = 0) {");
code("trVectorQuestVarSet(qv,xsVectorSet(xsSin(angle), 0, xsCos(angle)));");
code("}");

code("float angleBetweenVectors(string from = \"\", string to = \"\") {");
code("float a = trQuestVarGet(to+\"X\")-trQuestVarGet(from+\"X\");");
code("a = a / (trQuestVarGet(to+\"Z\")-trQuestVarGet(from+\"Z\"));");
code("a = xsAtan(a);");
code("if (trVectorQuestVarGetZ(from) > trVectorQuestVarGetZ(to)) {");
code("if (trVectorQuestVarGetX(from) > trVectorQuestVarGetX(to)) {");
code("a = a - PI;");
code("} else {");
code("a = a + PI;");
code("}");
code("}");
code("return(a);");
code("}");

code("float angleOfVector(string dir = \"\") {");
code("float a = trQuestVarGet(dir+\"X\") / trQuestVarGet(dir+\"Z\");");
code("a = xsAtan(a);");
code("if (0.0 > trVectorQuestVarGetZ(dir)) {");
code("if (0.0 > trVectorQuestVarGetX(dir)) {");
code("a = a - PI;");
code("} else {");
code("a = a + PI;");
code("}");
code("}");
code("return(a);");
code("}");

code("vector zGetUnitVector(string start = \"\", string end = \"\", float mod = 1.0) {");
code("float xdiff = trQuestVarGet(end + \"X\") - trQuestVarGet(start + \"X\");");
code("float zdiff = trQuestVarGet(end + \"Z\") - trQuestVarGet(start + \"Z\");");
code("float dist = xsSqrt(xdiff * xdiff + zdiff * zdiff);");
code("vector ret = vector(1,0,0);");
code("if (dist > 0) {");
code("ret = xsVectorSet(xdiff / dist * mod, 0, zdiff / dist * mod);");
code("}");
code("return(ret);");
code("}");

code("vector zGetUnitVector3d(string start = \"\", string end = \"\", float mod = 1.0) {");
code("float xdiff = trQuestVarGet(end + \"X\") - trQuestVarGet(start + \"X\");");
code("float ydiff = trQuestVarGet(end + \"Y\") - trQuestVarGet(start + \"Y\");");
code("float zdiff = trQuestVarGet(end + \"Z\") - trQuestVarGet(start + \"Z\");");
code("float dist = xsSqrt(xdiff * xdiff + ydiff * ydiff + zdiff * zdiff);");
code("vector ret = xsVectorSet(xdiff / dist * mod, ydiff / dist * mod, zdiff / dist * mod);");
code("return(ret);");
code("}");

code("vector crossProduct(string a = \"\", string b = \"\") {");
code("float x = trQuestVarGet(a + \"y\") * trQuestVarGet(b + \"z\") - trQuestVarGet(a + \"z\") * trQuestVarGet(b + \"y\");");
code("float y = trQuestVarGet(a + \"z\") * trQuestVarGet(b + \"x\") - trQuestVarGet(a + \"x\") * trQuestVarGet(b + \"z\");");
code("float z = trQuestVarGet(a + \"x\") * trQuestVarGet(b + \"y\") - trQuestVarGet(a + \"y\") * trQuestVarGet(b + \"x\");");
code("vector ret = xsVectorSet(x, y, z);");
code("return(ret);");
code("}");

code("float dotProduct(string a = \"\", string b = \"\") {");
code("return(trQuestVarGet(a+\"x\") * trQuestVarGet(b+\"x\") + trQuestVarGet(a+\"z\") * trQuestVarGet(b+\"z\"));");
code("}");

code("bool terrainIsType(string qv = \"\", int type = 0, int subtype = 0) {");
code("bool isType = trGetTerrainType(trQuestVarGet(qv+\"x\"),trQuestVarGet(qv+\"z\")) == type;");
code("isType = trGetTerrainSubType(trQuestVarGet(qv+\"x\"),trQuestVarGet(qv+\"z\")) == subtype;");
code("return(isType);");
code("}");

code("vector intersectionWithCircle(string start = \"\", string end = \"\", string center = \"\", float radius = 0) {");
code("trVectorQuestVarSet(\"iDir\", zGetUnitVector(start, end));");
code("float x = 0;");
code("float z = 0;");
code("float dist = 0;");
code("float len = radius * 2;");
code("float lenmod = radius;");
code("for(i=8; >0) {");
code("x = trQuestVarGet(start+\"x\") + trQuestVarGet(\"iDirx\") * len;");
code("z = trQuestVarGet(start+\"z\") + trQuestVarGet(\"iDirz\") * len;");
code("dist = xsPow(x - trQuestVarGet(center+\"x\"), 2) + xsPow(z - trQuestVarGet(center+\"z\"), 2);");
code("if (dist > radius * radius) {");
code("len = len - lenmod;");
code("} else {");
code("len = len + lenmod;");
code("}");
code("lenmod = lenmod * 0.5;");
code("}");
code("return(xsVectorSet(x,0,z));");
code("}");

code("void modularCounterInit(string name = \"\", int size = 0) {");
code("trQuestVarSet(\"counter\" + name + \"size\", size);");
code("trQuestVarSet(\"counter\" + name + \"pointer\", 1);");
code("trQuestVarSet(name, 1);");
code("}");

code("int modularCounterNext(string name = \"\") {");
code("trQuestVarSet(\"counter\" + name + \"pointer\", 1 + trQuestVarGet(\"counter\" + name + \"pointer\"));");
code("if (trQuestVarGet(\"counter\" + name + \"pointer\") > trQuestVarGet(\"counter\" + name + \"size\")) {");
code("trQuestVarSet(\"counter\" + name + \"pointer\", 1);");
code("}");
code("trQuestVarSet(name, trQuestVarGet(\"counter\"+name+\"pointer\"));");
code("return(0 + trQuestVarGet(\"counter\" + name + \"pointer\"));");
code("}");

code("int peekModularCounterNext(string name = \"\") {");
code("trQuestVarSet(\"counter\" + name + \"fake\", 1 + trQuestVarGet(\"counter\" + name + \"pointer\"));");
code("if (trQuestVarGet(\"counter\" + name + \"fake\") >= trQuestVarGet(\"counter\" + name + \"size\")) {");
code("trQuestVarSet(\"counter\" + name + \"fake\", 1);");
code("}");
code("return(0 + trQuestVarGet(\"counter\" + name + \"fake\"));");
code("}");


code("float yGetVarAtIndex(string db = \"\", string var = \"\", int index = 0) {");
code("return(trQuestVarGet(\"xdata\"+db+index+var));");
code("}");

code("float yGetVar(string db = \"\", string var = \"\") {");
code("int index = trQuestVarGet(\"xdata\"+db+\"pointer\");");
code("return(trQuestVarGet(\"xdata\"+db+index+var));");
code("}");

code("string yGetStringAtIndex(string db = \"\", string var = \"\", int index = 0) {");
code("return(trStringQuestVarGet(\"xdata\"+db+index+var));");
code("}");

code("string yGetString(string db = \"\", string var = \"\") {");
code("int index = trQuestVarGet(\"xdata\"+db+\"pointer\");");
code("return(trStringQuestVarGet(\"xdata\"+db+index+var));");
code("}");

code("string yGetVarName(string db = \"\", string var = \"\") {");
code("int index = trQuestVarGet(\"xdata\"+db+\"pointer\");");
code("return(\"xdata\"+db+index+var);");
code("}");

code("void ySetVarAtIndex(string db = \"\", string var = \"\", float val = 0, int index = 0) {");
code("trQuestVarSet(\"xdata\"+db+index+var, val);");
code("}");

code("void ySetVar(string db = \"\", string var = \"\", float val = 0) {");
code("int index = trQuestVarGet(\"xdata\"+db+\"pointer\");");
code("ySetVarAtIndex(db, var, val, index);");
code("}");

code("void ySetStringAtIndex(string db = \"\", string var = \"\", string val = \"\", int index = 0) {");
code("trStringQuestVarSet(\"xdata\"+db+index+var, val);");
code("}");

code("void ySetString(string db = \"\", string var = \"\", string val = \"\") {");
code("int index = trQuestVarGet(\"xdata\"+db+\"pointer\");");
code("ySetStringAtIndex(db, var, val, index);");
code("}");

code("int yDatabaseNext(string db = \"\", bool select = false, bool reverse = false) {");
code("int index = yGetVar(db, \"xNextBlock\");");
code("if (reverse) {");
code("index = yGetVar(db, \"xPrevBlock\");");
code("}");
code("if (yGetVar(db, \"xActive\") == 0) {");
code("if (trCurrentPlayer() == 1) {");
code("trSoundPlayFN(\"attackwarning.wav\",\"1\",-1,\"\",\"\");");
code("debugLog(\"<color=1,0,0>\"+db+\" is pointing to something wrong!\");");
code("}");
code("}");
code("trQuestVarSet(\"xdata\"+db+\"pointer\", index);");
code("int u = trQuestVarGet(\"xdata\"+db+\"index\"+index);");
code("trQuestVarSet(db, u);");
code("if (select) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+u, true);");
code("return(kbGetBlockID(\"\"+u, true));");
code("} else {");
code("return(trQuestVarGet(db));");
code("}");
code("}");

code("void yRemoveFromDatabase(string db = \"\") {");
code("int index = trQuestVarGet(\"xdata\"+db+\"pointer\");");
code("if (yGetVar(db, \"xActive\") == 1) {");
code("ySetVarAtIndex(db, \"xNextBlock\", yGetVar(db, \"xNextBlock\"), 1*yGetVar(db, \"xPrevBlock\"));");
code("ySetVarAtIndex(db, \"xPrevBlock\", yGetVar(db, \"xPrevBlock\"), 1*yGetVar(db, \"xNextBlock\"));");

code("ySetVar(db, \"xNextBlock\", trQuestVarGet(\"xdata\"+db+\"nextFree\"));");
code("ySetVar(db, \"xActive\", 0);");
code("trQuestVarSet(\"xdata\"+db+\"nextFree\", index);");

code("trQuestVarSet(\"xdata\"+db+\"pointer\", yGetVar(db, \"xPrevBlock\"));");
code("trQuestVarSet(\"xdata\"+db+\"count\", trQuestVarGet(\"xdata\"+db+\"count\") - 1);");
code("}");
code("}");

code("void yRemoveUpdateVar(string db = \"\", string attr = \"\") {");
code("int index = trQuestVarGet(\"xdata\"+db+\"nextFree\");");
code("ySetVarAtIndex(db, attr, 0, index);");
code("}");

code("int yAddToDatabase(string db = \"\", string val = \"\") {");
code("int next = trQuestVarGet(\"xdata\"+db+\"nextFree\");");
code("if (next == 0) {");
code("next = 1 + trQuestVarGet(\"xdata\"+db+\"total\");");
code("trQuestVarSet(\"xdata\"+db+\"total\", next);");
code("} else {");
code("trQuestVarSet(\"xdata\"+db+\"nextFree\", yGetVarAtIndex(db, \"xNextBlock\", next));");
code("}");
code("trQuestVarSet(\"xdata\"+db+\"index\"+next, trQuestVarGet(val));");
code("ySetVarAtIndex(db, \"xActive\", 1, next);");
code("if (trQuestVarGet(\"xdata\"+db+\"count\") == 0) {");
code("ySetVarAtIndex(db, \"xNextBlock\", next, next);");
code("ySetVarAtIndex(db, \"xPrevBlock\", next, next);");
code("trQuestVarSet(\"xdata\"+db+\"pointer\", next);");
code("} else {");
code("int index = trQuestVarGet(\"xdata\"+db+\"pointer\");");
code("ySetVarAtIndex(db, \"xNextBlock\", yGetVarAtIndex(db, \"xNextBlock\", index), next);");
code("ySetVarAtIndex(db, \"xPrevBlock\", index, next);");
code("ySetVarAtIndex(db, \"xNextBlock\", next, index);");
code("ySetVarAtIndex(db, \"xPrevBlock\", next, 1*yGetVarAtIndex(db, \"xNextBlock\", next));");
code("}");
code("trQuestVarSet(\"xdata\"+db+\"newest\", next);");
code("trQuestVarSet(\"xdata\"+db+\"count\", trQuestVarGet(\"xdata\"+db+\"count\") + 1);");
code("return(next);");
code("}");

code("string yGetNewestName(string db = \"\") {");
code("return(\"xdata\"+db+\"index\"+1*trQuestVarGet(\"xdata\"+db+\"newest\"));");
code("}");

code("int yGetNewestPointer(string db = \"\") {");
code("return(1*trQuestVarGet(\"xdata\"+db+\"newest\"));");
code("}");

code("string yGetNewVarName(string db = \"\", string var = \"\") {");
code("int index = yGetNewestPointer(db);");
code("return(\"xdata\"+db+index+var);");
code("}");

code("void yAddUpdateVar(string db = \"\", string var = \"\", float val = 0) {");
code("ySetVarAtIndex(db, var, val, 1*trQuestVarGet(\"xdata\"+db+\"newest\"));");
code("}");

code("void yAddUpdateString(string db = \"\", string var = \"\", string val = \"\") {");
code("ySetStringAtIndex(db, var, val, 1*trQuestVarGet(\"xdata\"+db+\"newest\"));");
code("}");

code("int yGetDatabaseCount(string db = \"\") {");
code("return(1*trQuestVarGet(\"xdata\"+db+\"count\"));");
code("}");

code("int yGetUnitAtIndex(string db = \"\", int index = 0) {");
code("return(1*trQuestVarGet(\"xdata\"+db+\"index\"+index));");
code("}");

code("void ySetUnitAtIndex(string db = \"\", int index = 0, int value = 0) {");
code("trQuestVarSet(\"xdata\"+db+\"index\"+index, value);");
code("}");

code("void ySetUnit(string db = \"\", int value = 0) {");
code("int index = trQuestVarGet(\"xdata\"+db+\"pointer\");");
code("ySetUnitAtIndex(db, index, value);");
code("}");

code("int yGetPointer(string db = \"\") {");
code("return(trQuestVarGet(\"xdata\"+db+\"pointer\"));");
code("}");

code("bool ySetPointer(string db = \"\", int index = 0) {");
code("bool safe = (yGetVarAtIndex(db, \"xActive\", index) == 1);");
code("if (safe) {");
code("trQuestVarSet(\"xdata\"+db+\"pointer\", index);");
code("trQuestVarSet(db, trQuestVarGet(\"xdata\"+db+\"index\"+index));");
code("}");
code("return(safe);");
code("}");

code("void yClearDatabase(string db = \"\") {");
code("int index = trQuestVarGet(\"xdata\"+db+\"nextFree\");");
code("trQuestVarSet(\"xdata\"+db+\"nextFree\", yGetVar(db, \"xNextBlock\"));");
code("ySetVar(db, \"xNextBlock\", index);");
code("trQuestVarSet(\"xdata\"+db+\"count\", 0);");
code("trQuestVarSet(\"xdata\"+db+\"pointer\", 0);");
code("}");

code("void yVarToVector(string db = \"\", string v = \"\") {");
code("trQuestVarSet(v+\"x\", yGetVar(db, v + \"x\"));");
code("trQuestVarSet(v+\"z\", yGetVar(db, v + \"z\"));");
code("}");

code("void ySetVarFromVector(string db = \"\", string attr = \"\", string v = \"\") {");
code("ySetVar(db, attr+\"x\", trQuestVarGet(v+\"x\"));");
code("ySetVar(db, attr+\"z\", trQuestVarGet(v+\"z\"));");
code("}");

code("int yFindLatestReverse(string qv = \"\", string proto = \"\", int p = 0) {");
code("int id = kbGetProtoUnitID(proto);");
code("trUnitSelectClear();");
code("for(x=trGetNextUnitScenarioNameNumber(); >trQuestVarGet(qv)) {");
code("int i = kbGetBlockID(\"\"+x, true);");
code("if (kbGetUnitBaseTypeID(i) == id) {");
code("trUnitSelectClear();");
code("trUnitSelectByID(i);");
code("if (trUnitIsOwnedBy(p)) {");
code("trQuestVarSet(qv, x);");
code("return(i);");
code("}");
code("}");
code("}");
code("return(-1);");
code("}");

code("int yFindLatest(string qv = \"\", string proto = \"\", int p = 0) {");
code("int id = kbGetProtoUnitID(proto);");
code("trUnitSelectClear();");
code("trQuestVarSet(\"next\",trGetNextUnitScenarioNameNumber() - 1);");
code("while(trQuestVarGet(\"next\") > trQuestVarGet(qv)) {");
code("trQuestVarSet(qv, 1 + trQuestVarGet(qv));");
code("int i = kbGetBlockID(\"\"+1*trQuestVarGet(qv), true);");
code("if (kbGetUnitBaseTypeID(i) == id) {");
code("trUnitSelectClear();");
code("trUnitSelectByID(i);");
code("if (trUnitIsOwnedBy(p)) {");
code("return(i);");
code("}");
code("}");
code("}");
code("return(-1);");
code("}");
code("const int BOON_DOUBLE_FAVOR = 1;");
code("const int BOON_POISON_STACKS = 2;");
code("const int BOON_MORE_GOLD = 3;");

code("const int BOON_SPELL_POISON = 4;");
code("const int BOON_SPELL_ATTACK = 5;");
code("const int BOON_REGENERATE_HEALTH = 6;");

code("const int BOON_FROSTY_SPELLS = 7;");
code("const int BOON_DOUBLE_STUN = 8;");
code("const int BOON_DECAY_HALVED = 9;");

code("const int BOON_EXCESS_FAVOR = 10;");
code("const int BOON_TWO_RELICS = 11;");
code("const int BOON_MONSTER_COMPANION = 12;");

code("int statueCiv(int boon = 0) {");
code("return(boon - 1);");
code("}");

code("int statueCulture(int boon = 0) {");
code("return(statueCiv(boon) / 3);");
code("}");

code("void overrideStatue(int boon = 0) {");
code("int g = 0;");
code("switch(boon)");
code("{");
code("case 1:");
code("{");
code("g = 5;");
code("}");
code("case 2:");
code("{");
code("g = 4;");
code("}");
code("case 3:");
code("{");
code("g = 3;");
code("}");
code("case 4:");
code("{");
code("g = 0;");
code("}");
code("case 5:");
code("{");
code("g = 1;");
code("}");
code("case 6:");
code("{");
code("g = 2;");
code("}");
code("case 7:");
code("{");
code("g = 7;");
code("}");
code("case 8:");
code("{");
code("g = 8;");
code("}");
code("case 9:");
code("{");
code("g = 6;");
code("}");
code("case 10:");
code("{");
code("g = 9;");
code("}");
code("case 11:");
code("{");
code("g = 11;");
code("}");
code("case 12:");
code("{");
code("g = 10;");
code("}");
code("}");
code("trUnitSetAnimationPath(\"\"+g+\",0,0,0,0,0,0\");");
code("}");

code("string boonIcon(int boon = 0) {");
code("string icon = \"icons\infantry g hoplite icon 64\";");
code("switch(boon)");
code("{");
code("case 1:");
code("{");
code("icon = \"icons\god major zeus icon 128\";");
code("}");
code("case 2:");
code("{");
code("icon = \"icons\god major poseidon icon 128\";");
code("}");
code("case 3:");
code("{");
code("icon = \"icons\god major hades icon 128\";");
code("}");
code("case 4:");
code("{");
code("icon = \"icons\god major isis icon 128\";");
code("}");
code("case 5:");
code("{");
code("icon = \"icons\god major ra icon 128\";");
code("}");
code("case 6:");
code("{");
code("icon = \"icons\god major set icon 128\";");
code("}");
code("case 7:");
code("{");
code("icon = \"icons\god major odin icon 128\";");
code("}");
code("case 8:");
code("{");
code("icon = \"icons\god major thor icon 128\";");
code("}");
code("case 9:");
code("{");
code("icon = \"icons\god major loki icon 128\";");
code("}");
code("case 10:");
code("{");
code("icon = \"icons\god major kronos icons 64\";");
code("}");
code("case 11:");
code("{");
code("icon = \"icons\god major ouranos icons 64\";");
code("}");
code("case 12:");
code("{");
code("icon = \"icons\god major gaia icons 64\";");
code("}");
code("}");
code("return(icon);");
code("}");

code("string boonName(int boon = 0) {");
code("string name = \"WTF that's not a boon!\";");
code("switch(boon)");
code("{");
code("case BOON_REGENERATE_HEALTH:");
code("{");
code("name = \"Regenerate 3 percent health per second.\";");
code("}");
code("case BOON_MORE_GOLD:");
code("{");
code("name = \"Gain double gold from enemy kills.\";");
code("}");
code("case BOON_DOUBLE_STUN:");
code("{");
code("name = \"Double the duration of your stuns and silences.\";");
code("}");
code("case BOON_DECAY_HALVED:");
code("{");
code("name = \"The decay rate of your summoned allies is halved.\";");
code("}");
code("case BOON_SPELL_POISON:");
code("{");
code("name = \"Your damage spells will poison enemies.\";");
code("}");
code("case BOON_DOUBLE_FAVOR:");
code("{");
code("name = \"Your maximum favor is doubled.\";");
code("}");
code("case BOON_POISON_STACKS:");
code("{");
code("name = \"Your poison damage stacks.\";");
code("}");
code("case BOON_SPELL_ATTACK:");
code("{");
code("name = \"Your attack is multiplied by your spell power.\";");
code("}");
code("case BOON_FROSTY_SPELLS:");
code("{");
code("name = \"Your spell damage will stun enemies at full health.\";");
code("}");
code("case BOON_EXCESS_FAVOR:");
code("{");
code("name = \"When your favor exceeds your Ultimate cost, your basic spells cost 10 favor and have no cooldown.\";");
code("}");
code("case BOON_TWO_RELICS:");
code("{");
code("name = \"Relic Slots +2\";");
code("}");
code("case BOON_MONSTER_COMPANION:");
code("{");
code("name = \"Choose a monster from the Monsterpedia to be your pet. Revive it whenever you use your Ultimate.\";");
code("}");
code("}");
code("return(name);");
code("}");
code("const int RELIC_HEALTH = 1;");
code("const int RELIC_SPEED = 2;");
code("const int RELIC_ATTACK_RANGE = 3;");
code("const int RELIC_SPELL_RANGE = 4;");
code("const int RELIC_SPELL_DURATION = 5;");
code("const int RELIC_LIFESTEAL = 6;");
code("const int RELIC_ARMOR = 7;");
code("const int RELIC_ATTACK_DAMAGE = 8;");
code("const int RELIC_SPELL_POWER = 9;");
code("const int RELIC_HEAL_BOOST = 10;");

code("const int RELIC_POISON_RESISTANCE = 11;");
code("const int RELIC_ULTIMATE_COST = 12;");
code("const int RELIC_SILENCE_RESISTANCE = 13;");
code("const int RELIC_PROJECTILES = 14;");
code("const int RELIC_STUN_RESISTANCE = 15;");
code("const int RELIC_SPECIAL_ATTACK = 16;");
code("const int RELIC_POISON_KILLER = 17;");
code("const int RELIC_COOLDOWN_REDUCTION = 18;");
code("const int RELIC_WEIGHTED_BLOWS = 19;");
code("const int RELIC_ALL = 20;");

code("const int RELIC_CURSED_RANGE = 21;");
code("const int RELIC_CURSED_DURATION = 22;");
code("const int RELIC_CURSED_POWER = 23;");
code("const int RELIC_FAVOR_FROM_ATTACKS = 24;");
code("const int RELIC_POISON_FASTER = 25;");

code("const int RELIC_YEEBAAGOOON = 26;");

code("const int RELIC_NOTTUD = 28;");

code("const int RELIC_CURSED_COOLDOWNS = 29;");
code("const int RELIC_ZENOPHOBIA = 30;");

code("const int NORMAL_RELICS = 30;");

code("const int RELIC_NICKONHAWK = 36;");
code("const int RELIC_NICKONHAWK_GOGGLES = 37;");

code("const int RELIC_GHOST_PICTURE = 38;");

code("const int RELIC_MATH_PROBLEM = 40;");
code("const int RELIC_MATH_PROBLEM_END = 60;");

code("const int RELIC_LITERAL_FECES = 61;");
code("const int RELIC_BERRY_BUSH = 62;");
code("const int RELIC_A_FUCKING_CORPSE = 63;");

code("const int RELIC_POISON_BUCKET = 64;");

code("const int RELIC_WORTHLESS_JUNK = 65;");
code("const int RELIC_MAGIC_DETECTOR = 66;");

code("const int KEY_RELICS = 100;");
code("const int RELIC_KEY_GREEK = 101;");
code("const int RELIC_KEY_NORSE = 102;");
code("const int RELIC_KEY_ATLANTEAN = 103;");
code("const int RELIC_KEY_CHINA = 104;");
code("const int RELIC_KEY_EGYPT = 105;");

code("string relicName(int relic = 0) {");
code("string msg = \"WTF That's not a relic!\";");
code("if ((relic >= RELIC_KEY_GREEK) && (relic <= RELIC_KEY_EGYPT)) {");
code("msg = \"A key that opens something\";");
code("} else if ((relic >= RELIC_MATH_PROBLEM) && (relic <= RELIC_MATH_PROBLEM_END)) {");
code("msg = \"\" + (relic - RELIC_MATH_PROBLEM);");
code("} else {");
code("switch(relic)");
code("{");
code("case RELIC_HEALTH:");
code("{");
code("msg = \"Health +300\";");
code("}");
code("case RELIC_SPEED:");
code("{");
code("msg = \"Speed +1\";");
code("}");
code("case RELIC_ATTACK_RANGE:");
code("{");
code("msg = \"Attack Range and LOS +5\";");
code("}");
code("case RELIC_SPELL_RANGE:");
code("{");
code("msg = \"Spell Range +0.3x\";");
code("}");
code("case RELIC_SPELL_DURATION:");
code("{");
code("msg = \"Spell Duration +0.3x\";");
code("}");
code("case RELIC_LIFESTEAL:");
code("{");
code("msg = \"Lifesteal +0.2 (Half for spells)\";");
code("}");
code("case RELIC_ARMOR:");
code("{");
code("msg = \"Armor +0.2x\";");
code("}");
code("case RELIC_ATTACK_DAMAGE:");
code("{");
code("msg = \"Attack +15\";");
code("}");
code("case RELIC_SPELL_POWER:");
code("{");
code("msg = \"Spell Power +0.3x\";");
code("}");
code("case RELIC_HEAL_BOOST:");
code("{");
code("msg = \"Healing Effects +0.5x\";");
code("}");
code("case RELIC_POISON_RESISTANCE:");
code("{");
code("msg = \"Poison resistance x0.5\";");
code("}");
code("case RELIC_STUN_RESISTANCE:");
code("{");
code("msg = \"Stun resistance x0.5\";");
code("}");
code("case RELIC_SILENCE_RESISTANCE:");
code("{");
code("msg = \"Silence resistance x0.5\";");
code("}");
code("case RELIC_POISON_KILLER:");
code("{");
code("msg = \"+0.5x damage to poisoned enemies.\";");
code("}");
code("case RELIC_WEIGHTED_BLOWS:");
code("{");
code("msg = \"Your stuns deal damage equal to 10 percent of your health.\";");
code("}");
code("case RELIC_ALL:");
code("{");
code("msg = \"Spell Power, Duration, Range +0.15\";");
code("}");
code("case RELIC_ULTIMATE_COST:");
code("{");
code("msg = \"Ultimate Cost Reduction x0.1\";");
code("}");
code("case RELIC_PROJECTILES:");
code("{");
code("msg = \"Projectiles +1\";");
code("}");
code("case RELIC_SPECIAL_ATTACK:");
code("{");
code("msg = \"Special Attack Cooldown -1\";");
code("}");
code("case RELIC_COOLDOWN_REDUCTION:");
code("{");
code("msg = \"Cooldown Reduction x0.15\";");
code("}");
code("case RELIC_CURSED_RANGE:");
code("{");
code("msg = \"Spell Range +0.5 | Spell Power -0.3\";");
code("}");
code("case RELIC_CURSED_DURATION:");
code("{");
code("msg = \"Spell Duration +0.5 | Spell Range -0.3\";");
code("}");
code("case RELIC_CURSED_POWER:");
code("{");
code("msg = \"Spell Power +0.5 | Spell Duration -0.3\";");
code("}");
code("case RELIC_FAVOR_FROM_ATTACKS:");
code("{");
code("msg = \"When you attack, gain 1 favor. Ultimate Cost Increased x0.1\";");
code("}");
code("case RELIC_POISON_FASTER:");
code("{");
code("msg = \"Poison damage doubled but duration halved\";");
code("}");
code("case RELIC_YEEBAAGOOON:");
code("{");
code("msg = \"Regenerate 0.3 favor per second\";");
code("}");

code("case RELIC_GHOST_PICTURE:");
code("{");
code("msg = \"A picture of a young man.\";");
code("}");
code("case RELIC_NICKONHAWK:");
code("{");
code("msg = \"Help! Someone help me!\";");
code("}");
code("case RELIC_NICKONHAWK_GOGGLES:");
code("{");
code("msg = \"Golden Ticket\";");
code("}");

code("case RELIC_LITERAL_FECES:");
code("{");
code("msg = \"Literal feces\";");
code("}");

code("case RELIC_A_FUCKING_CORPSE:");
code("{");
code("msg = \"A fucking corpse\";");
code("}");

code("case RELIC_BERRY_BUSH:");
code("{");
code("msg = \"A berry bush\";");
code("}");

code("case RELIC_POISON_BUCKET:");
code("{");
code("msg = \"A bucket for holding a liquid\";");
code("}");

code("case RELIC_WORTHLESS_JUNK:");
code("{");
code("msg = \"Worthless junk\";");
code("}");
code("case RELIC_MAGIC_DETECTOR:");
code("{");
code("msg = \"Magic Detector\";");
code("}");
code("}");
code("}");
code("return(msg);");
code("}");

code("string relicIcon(int relic = 0) {");
code("string icon = \"icons\infantry g hoplite icon 64\";");
code("if ((relic >= RELIC_MATH_PROBLEM) && (relic <= RELIC_MATH_PROBLEM_END)) {");
code("icon = \"icons\god power audrey icons 64\";");
code("} else {");
code("switch(relic)");
code("{");
code("case RELIC_HEALTH:");
code("{");
code("icon = \"icons\special g sea turtle icon 64\";");
code("}");
code("case RELIC_SPEED:");
code("{");
code("icon = \"icons\special g pegasus icon 64\";");
code("}");
code("case RELIC_ATTACK_RANGE:");
code("{");
code("icon = \"icons\cavalry e chariot archer icon 64\";");
code("}");
code("case RELIC_SPELL_RANGE:");
code("{");
code("icon = \"icons\special e petosuchus icon 64\";");
code("}");
code("case RELIC_SPELL_DURATION:");
code("{");
code("icon = \"icons\special n frost giant icon 64\";");
code("}");
code("case RELIC_LIFESTEAL:");
code("{");
code("icon = \"icons\special n troll icon 64\";");
code("}");
code("case RELIC_STUN_RESISTANCE:");
code("{");
code("icon = \"icons\special e Scarab icon 64\";");
code("}");
code("case RELIC_ATTACK_DAMAGE:");
code("{");
code("icon = \"icons\siege n ballista icon 64\";");
code("}");
code("case RELIC_SPELL_POWER:");
code("{");
code("icon = \"icons\special n fire giant icon 64\";");
code("}");
code("case RELIC_HEAL_BOOST:");
code("{");
code("icon = \"icons\special x flying medic icons 64\";");
code("}");
code("case RELIC_POISON_RESISTANCE:");
code("{");
code("icon = \"icons\god power dryad icons 64\";");
code("}");
code("case RELIC_ARMOR:");
code("{");
code("icon = \"icons\special x behemoth icons 64\";");
code("}");
code("case RELIC_SILENCE_RESISTANCE:");
code("{");
code("icon = \"icons\special e sphinx icon 64\";");
code("}");
code("case RELIC_POISON_KILLER:");
code("{");
code("icon = \"icons\special e mummy icon 64\";");
code("}");
code("case RELIC_WEIGHTED_BLOWS:");
code("{");
code("icon = \"icons\special g medusa icon 64\";");
code("}");
code("case RELIC_ALL:");
code("{");
code("icon = \"icons\special g chimera icon 64\";");
code("}");
code("case RELIC_ULTIMATE_COST:");
code("{");
code("icon = \"icons\special g arkantos icon 64\";");
code("}");
code("case RELIC_PROJECTILES:");
code("{");
code("icon = \"icons\special g manticore icon 64\";");
code("}");
code("case RELIC_SPECIAL_ATTACK:");
code("{");
code("icon = \"icons\special e avenger icon 64\";");
code("}");
code("case RELIC_COOLDOWN_REDUCTION:");
code("{");
code("icon = \"icons\special x argus icons 64\";");
code("}");
code("case RELIC_CURSED_RANGE:");
code("{");
code("icon = \"icons\siege g petrobolos icon 64\";");
code("}");
code("case RELIC_CURSED_DURATION:");
code("{");
code("icon = \"icons\scenario x folstag icons 64\";");
code("}");
code("case RELIC_CURSED_POWER:");
code("{");
code("icon = \"icons\special e phoenix icon 64\";");
code("}");
code("case RELIC_FAVOR_FROM_ATTACKS:");
code("{");
code("icon = \"icons\special x servant icons 64\";");
code("}");
code("case RELIC_POISON_FASTER:");
code("{");
code("icon = \"icons\special e scorpionman icon 64\";");
code("}");
code("case RELIC_YEEBAAGOOON:");
code("{");
code("icon = \"icons\special e son of osiris icon 64\";");
code("}");
code("case RELIC_KEY_GREEK:");
code("{");
code("icon = \"ui range indicator greek\";");
code("}");
code("case RELIC_KEY_NORSE:");
code("{");
code("icon = \"ui range indicator norse\";");
code("}");
code("case RELIC_KEY_ATLANTEAN:");
code("{");
code("icon = \"ui range indicator atlantean\";");
code("}");
code("case RELIC_KEY_CHINA:");
code("{");
code("icon = \"ui range indicator chinese\";");
code("}");
code("case RELIC_KEY_EGYPT:");
code("{");
code("icon = \"ui range indicator egypt\";");
code("}");
code("case RELIC_GHOST_PICTURE:");
code("{");
code("icon = \"icons\special g kastor icon 64\";");
code("}");
code("case RELIC_LITERAL_FECES:");
code("{");
code("icon = \"icons\special x promethean icons 64\";");
code("}");
code("case RELIC_A_FUCKING_CORPSE:");
code("{");
code("icon = \"icons\special e minion icon 64\";");
code("}");
code("case RELIC_BERRY_BUSH:");
code("{");
code("icon = \"icons\world berry bush icon 64\";");
code("}");
code("case RELIC_POISON_BUCKET:");
code("{");
code("icon = \"icons\special c jiangshi icon\";");
code("}");
code("case RELIC_WORTHLESS_JUNK:");
code("{");
code("icon = \"icons\boat c junk icon\";");
code("}");
code("case RELIC_MAGIC_DETECTOR:");
code("{");
code("icon = \"icons\siege g helepolis icon 64\";");
code("}");
code("case RELIC_NICKONHAWK:");
code("{");
code("icon = \"icons\trade x caravan icons 64\";");
code("}");
code("case RELIC_NICKONHAWK_GOGGLES:");
code("{");
code("icon = \"icons\hero g odysseus icon 64\";");
code("}");
code("}");
code("}");
code("return(icon);");
code("}");

code("void relicDescription(int relic = 0) {");
code("string icon = relicIcon(relic);");
code("string msg = relicName(relic);");
code("trShowImageDialog(icon, msg);");
code("}");

code("float calculateArmor(float start = 0, float armor = 0) {");
code("float remaining = 1.0 - start;");
code("float reduction = remaining * (1.0 - armor);");
code("return(start + remaining - reduction);");
code("}");

code("void relicEffect(int relic = 0, int p = 0, bool equip = true) {");
code("float m = 1.0;");
code("if (equip == false) {");
code("m = -1.0;");
code("}");
code("int class = trQuestVarGet(\"p\"+p+\"class\");");
code("string proto = kbGetProtoUnitName(1*trQuestVarGet(\"class\"+class+\"proto\"));");
code("switch(relic)");
code("{");
code("case RELIC_HEALTH:");
code("{");
code("trQuestVarSet(\"p\"+p+\"health\", trQuestVarGet(\"p\"+p+\"health\") + 300.0 * m);");
code("zSetProtoUnitStat(proto, p, 0, trQuestVarGet(\"p\"+p+\"health\"));");
code("}");
code("case RELIC_SPEED:");
code("{");
code("trQuestVarSet(\"p\"+p+\"speed\", trQuestVarGet(\"p\"+p+\"speed\") + 1.0 * m);");
code("zSetProtoUnitStat(proto, p, 1, trQuestVarGet(\"p\"+p+\"speed\"));");
code("}");
code("case RELIC_ATTACK_RANGE:");
code("{");
code("trQuestVarSet(\"p\"+p+\"range\", trQuestVarGet(\"p\"+p+\"range\") + 5.0 * m);");
code("zSetProtoUnitStat(proto, p, 11, trQuestVarGet(\"p\"+p+\"range\"));");
code("trQuestVarSet(\"p\"+p+\"los\", trQuestVarGet(\"p\"+p+\"los\") + 5.0 * m);");
code("zSetProtoUnitStat(proto, p, 2, trQuestVarGet(\"p\"+p+\"los\"));");
code("zSetProtoUnitStat(\"Revealer to Player\", p, 2, trQuestVarGet(\"p\"+p+\"los\"));");
code("}");
code("case RELIC_SPELL_RANGE:");
code("{");
code("trQuestVarSet(\"p\"+p+\"spellRangeTrue\", trQuestVarGet(\"p\"+p+\"spellRangeTrue\") + 0.3 * m);");
code("}");
code("case RELIC_SPELL_DURATION:");
code("{");
code("trQuestVarSet(\"p\"+p+\"spellDurationTrue\", trQuestVarGet(\"p\"+p+\"spellDurationTrue\") + 0.3 * m);");
code("}");
code("case RELIC_LIFESTEAL:");
code("{");
code("trQuestVarSet(\"p\"+p+\"Lifesteal\", trQuestVarGet(\"p\"+p+\"Lifesteal\") + 0.2 * m);");
code("}");
code("case RELIC_ARMOR:");
code("{");
code("if (m == 1) {");
code("trQuestVarSet(\"p\"+p+\"magicResist\", calculateArmor(trQuestVarGet(\"p\"+p+\"magicResist\"), 0.2));");
code("trQuestVarSet(\"p\"+p+\"physicalResist\", calculateArmor(trQuestVarGet(\"p\"+p+\"physicalResist\"), 0.2));");
code("} else {");
code("trQuestVarSet(\"p\"+p+\"magicResist\", calculateArmor(trQuestVarGet(\"p\"+p+\"magicResist\"), -0.25));");
code("trQuestVarSet(\"p\"+p+\"physicalResist\", calculateArmor(trQuestVarGet(\"p\"+p+\"physicalResist\"), -0.25));");
code("}");
code("trModifyProtounit(proto, p, 24, -1);");
code("trModifyProtounit(proto, p, 25, -1);");
code("trModifyProtounit(proto, p, 26, -1);");
code("trModifyProtounit(proto, p, 24, trQuestVarGet(\"p\"+p+\"physicalResist\"));");
code("trModifyProtounit(proto, p, 25, trQuestVarGet(\"p\"+p+\"physicalResist\"));");
code("trModifyProtounit(proto, p, 26, trQuestVarGet(\"p\"+p+\"physicalResist\"));");
code("for(x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("yDatabaseNext(\"playerUnits\");");
code("if ((yGetVar(\"playerUnits\", \"player\") == p) && (yGetVar(\"playerUnits\", \"hero\") == 1)) {");
code("ySetVar(\"playerUnits\", \"physicalResist\", trQuestVarGet(\"p\"+p+\"physicalResist\"));");
code("ySetVar(\"playerUnits\", \"magicResist\", trQuestVarGet(\"p\"+p+\"magicResist\"));");
code("}");
code("}");
code("}");
code("case RELIC_ATTACK_DAMAGE:");
code("{");
code("trQuestVarSet(\"p\"+p+\"baseAttackTrue\", trQuestVarGet(\"p\"+p+\"baseAttackTrue\") + 15.0 * m);");
code("trQuestVarSet(\"p\"+p+\"baseAttack\", trQuestVarGet(\"p\"+p+\"baseAttackTrue\"));");
code("trQuestVarSet(\"p\"+p+\"Attack\", trQuestVarGet(\"p\"+p+\"baseAttack\"));");
code("zSetProtoUnitStat(proto, p, 27, trQuestVarGet(\"p\"+p+\"baseAttack\"));");
code("zSetProtoUnitStat(proto, p, 31, trQuestVarGet(\"p\"+p+\"baseAttack\"));");
code("}");
code("case RELIC_SPELL_POWER:");
code("{");
code("trQuestVarSet(\"p\"+p+\"spellDamageTrue\", trQuestVarGet(\"p\"+p+\"spellDamageTrue\") + 0.3 * m);");
code("}");
code("case RELIC_HEAL_BOOST:");
code("{");
code("trQuestVarSet(\"p\"+p+\"healBoost\", trQuestVarGet(\"p\"+p+\"healBoost\") + 0.5 * m);");
code("}");
code("case RELIC_POISON_RESISTANCE:");
code("{");
code("trQuestVarSet(\"p\"+p+\"poisonResistanceCount\", trQuestVarGet(\"p\"+p+\"poisonResistanceCount\") + 1.0 * m);");
code("trQuestVarSet(\"p\"+p+\"poisonResistance\", xsPow(0.5, 1*trQuestVarGet(\"p\"+p+\"poisonResistanceCount\")));");
code("}");
code("case RELIC_STUN_RESISTANCE:");
code("{");
code("trQuestVarSet(\"p\"+p+\"stunResistanceCount\", trQuestVarGet(\"p\"+p+\"stunResistanceCount\") + 1.0 * m);");
code("trQuestVarSet(\"p\"+p+\"stunResistance\", xsPow(0.5, 1*trQuestVarGet(\"p\"+p+\"stunResistanceCount\")));");
code("}");
code("case RELIC_SILENCE_RESISTANCE:");
code("{");
code("trQuestVarSet(\"p\"+p+\"silenceResistanceCount\", trQuestVarGet(\"p\"+p+\"silenceResistanceCount\") + 1.0 * m);");
code("trQuestVarSet(\"p\"+p+\"silenceResistance\", xsPow(0.5, 1*trQuestVarGet(\"p\"+p+\"silenceResistanceCount\")));");
code("}");
code("case RELIC_POISON_KILLER:");
code("{");
code("trQuestVarSet(\"p\"+p+\"poisonKiller\", trQuestVarGet(\"p\"+p+\"poisonKiller\") + 0.5 * m);");
code("}");
code("case RELIC_WEIGHTED_BLOWS:");
code("{");
code("trQuestVarSet(\"p\"+p+\"stunDamage\", trQuestVarGet(\"p\"+p+\"stunDamage\") + 0.1 * m);");
code("}");
code("case RELIC_ALL:");
code("{");
code("trQuestVarSet(\"p\"+p+\"spellDamage\", trQuestVarGet(\"p\"+p+\"spellDamage\") + 0.15 * m);");
code("trQuestVarSet(\"p\"+p+\"spellDuration\", trQuestVarGet(\"p\"+p+\"spellDuration\") + 0.15 * m);");
code("trQuestVarSet(\"p\"+p+\"spellRange\", trQuestVarGet(\"p\"+p+\"spellRange\") + 0.15 * m);");
code("}");
code("case RELIC_ULTIMATE_COST:");
code("{");
code("trQuestVarSet(\"p\"+p+\"ultimateCostCount\", trQuestVarGet(\"p\"+p+\"ultimateCostCount\") + 1.0 * m);");
code("trQuestVarSet(\"p\"+p+\"ultimateCost\", xsPow(0.9, trQuestVarGet(\"p\"+p+\"ultimateCostCount\")));");
code("}");
code("case RELIC_PROJECTILES:");
code("{");
code("trQuestVarSet(\"p\"+p+\"projectiles\", trQuestVarGet(\"p\"+p+\"projectiles\") + 1.0 * m);");
code("zSetProtoUnitStat(proto, p, 13, trQuestVarGet(\"p\"+p+\"projectiles\"));");
code("}");
code("case RELIC_SPECIAL_ATTACK:");
code("{");
code("trQuestVarSet(\"p\"+p+\"specialAttackCooldown\", trQuestVarGet(\"p\"+p+\"specialAttackCooldown\") - 1.0 * m);");
code("}");
code("case RELIC_COOLDOWN_REDUCTION:");
code("{");
code("trQuestVarSet(\"p\"+p+\"cooldownReductionCount\", trQuestVarGet(\"p\"+p+\"cooldownReductionCount\") + 1.0 * m);");
code("trQuestVarSet(\"p\"+p+\"cooldownReduction\", xsPow(0.85, 1*trQuestVarGet(\"p\"+p+\"cooldownReductionCount\")));");
code("}");
code("case RELIC_CURSED_RANGE:");
code("{");
code("trQuestVarSet(\"p\"+p+\"spellRangeTrue\", trQuestVarGet(\"p\"+p+\"spellRangeTrue\") + 0.5 * m);");
code("trQuestVarSet(\"p\"+p+\"spellDamageTrue\", trQuestVarGet(\"p\"+p+\"spellDamageTrue\") - 0.3 * m);");
code("}");
code("case RELIC_CURSED_DURATION:");
code("{");
code("trQuestVarSet(\"p\"+p+\"spellDurationTrue\", trQuestVarGet(\"p\"+p+\"spellDurationTrue\") + 0.5 * m);");
code("trQuestVarSet(\"p\"+p+\"spellRangeTrue\", trQuestVarGet(\"p\"+p+\"spellRangeTrue\") - 0.3 * m);");
code("}");
code("case RELIC_CURSED_POWER:");
code("{");
code("trQuestVarSet(\"p\"+p+\"spellDamageTrue\", trQuestVarGet(\"p\"+p+\"spellDamageTrue\") + 0.5 * m);");
code("trQuestVarSet(\"p\"+p+\"spellDurationTrue\", trQuestVarGet(\"p\"+p+\"spellDurationTrue\") - 0.3 * m);");
code("}");
code("case RELIC_FAVOR_FROM_ATTACKS:");
code("{");
code("trQuestVarSet(\"p\"+p+\"favorFromAttacks\", trQuestVarGet(\"p\"+p+\"favorFromAttacks\") + m);");
code("trQuestVarSet(\"p\"+p+\"ultimateCostCount\", trQuestVarGet(\"p\"+p+\"ultimateCostCount\") - 1.0 * m);");
code("trQuestVarSet(\"p\"+p+\"ultimateCost\", xsPow(0.9, trQuestVarGet(\"p\"+p+\"ultimateCostCount\")));");
code("}");
code("case RELIC_POISON_FASTER:");
code("{");
code("trQuestVarSet(\"p\"+p+\"poisonSpeed\", trQuestVarGet(\"p\"+p+\"poisonSpeed\") + 1.0 * m);");
code("}");
code("case RELIC_YEEBAAGOOON:");
code("{");
code("trQuestVarSet(\"p\"+p+\"regenerateFavorLast\", trTimeMS());");
code("trQuestVarSet(\"p\"+p+\"favorRegen\", trQuestVarGet(\"p\"+p+\"favorRegen\") + 0.3 * m);");
code("}");
code("case RELIC_MAGIC_DETECTOR:");
code("{");
code("trQuestVarSet(\"p\"+p+\"favorRegen\", trQuestVarGet(\"p\"+p+\"favorRegen\") - m);");
code("trQuestVarSet(\"p\"+p+\"regenerateFavorLast\", trTimeMS());");
code("if (trQuestVarGet(\"questActive\") > 0) {");
code("if (m > 0) {");
code("trQuestVarSet(\"magicDetectorHolder\", p);");
code("} else {");
code("trQuestVarSet(\"magicDetectorHolder\", 0);");
code("}");
code("}");
code("}");
code("case RELIC_POISON_BUCKET:");
code("{");
code("trQuestVarSet(\"p\"+p+\"poisonBucket\", m);");
code("if (m > 0) {");
code("trQuestVarSet(\"poisonBucketHolder\", p);");
code("} else {");
code("trQuestVarSet(\"poisonBucketHolder\", 0);");
code("}");
code("}");
code("case RELIC_NICKONHAWK:");
code("{");
code("trQuestVarSet(\"p\"+p+\"nickEquipped\", trQuestVarGet(\"p\"+p+\"nickEquipped\") + m);");
code("if ((trQuestVarGet(\"p\"+p+\"nickEquipped\") > 1) ||");
code("(trQuestVarGet(\"p\"+p+\"nickQuestProgress\") * trQuestVarGet(\"p\"+p+\"nickEquipped\") >= 5)) {");
code("ySetPointer(\"p\"+p+\"relics\", yGetNewestPointer(\"p\"+p+\"relics\"));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"relics\", true);");
code("trUnitChangeProtoUnit(\"Relic\");");
code("yAddToDatabase(\"freeRelics\", \"p\"+p+\"relics\");");
code("yAddUpdateVar(\"freeRelics\", \"type\", RELIC_NICKONHAWK);");
code("yRemoveFromDatabase(\"p\"+p+\"relics\");");
code("} else if (trQuestVarGet(\"p\"+p+\"nickQuestProgress\") == 0) {");
code("trQuestVarSet(\"p\"+p+\"nickQuestProgress\", 1);");
code("}");
code("}");
code("case RELIC_NICKONHAWK_GOGGLES:");
code("{");
code("trQuestVarSet(\"p\"+p+\"equippedGoggles\", trQuestVarGet(\"p\"+p+\"equippedGoggles\") + m);");
code("}");
code("}");
code("if ((relic >= RELIC_KEY_GREEK) && (relic <= RELIC_KEY_EGYPT) && (trCurrentPlayer() == p) && equip) {");
code("trChatSend(0, \"You have picked up a key. <icon=(20)(\"+relicIcon(relic)+\")>\");");
code("} else {");
code("trEventFire(5000 + 12 * trQuestVarGet(\"p\"+p+\"class\") + p);");
code("}");
code("zSetProtoUnitStat(\"Cinematic Block\", p, 0, trQuestVarGet(\"p\"+p+\"health\"));");
code("trQuestVarSet(\"p\"+p+\"spellDamage\", xsMax(0.1, trQuestVarGet(\"p\"+p+\"spellDamageTrue\")));");
code("trQuestVarSet(\"p\"+p+\"spellDuration\", xsMax(0.1, trQuestVarGet(\"p\"+p+\"spellDurationTrue\")));");
code("trQuestVarSet(\"p\"+p+\"spellRange\", xsMax(0.1, trQuestVarGet(\"p\"+p+\"spellRangeTrue\")));");
code("if (trQuestVarGet(\"p\"+p+\"godBoon\") == BOON_SPELL_ATTACK) {");
code("trQuestVarSet(\"p\"+p+\"baseAttack\", trQuestVarGet(\"p\"+p+\"spellDamage\") * trQuestVarGet(\"p\"+p+\"baseAttackTrue\"));");
code("trQuestVarSet(\"p\"+p+\"Attack\", trQuestVarGet(\"p\"+p+\"baseAttack\"));");
code("zSetProtoUnitStat(proto, p, 27, trQuestVarGet(\"p\"+p+\"baseAttack\"));");
code("zSetProtoUnitStat(proto, p, 31, trQuestVarGet(\"p\"+p+\"baseAttack\"));");
code("}");
code("}");

code("int relicProto(int relic = 0) {");
code("int proto = kbGetProtoUnitID(\"Hoplite\");");
code("if ((relic >= RELIC_MATH_PROBLEM) && (relic <= RELIC_MATH_PROBLEM_END)) {");
code("proto = kbGetProtoUnitID(\"Audrey\");");
code("} else {");
code("switch(relic)");
code("{");
code("case RELIC_HEALTH:");
code("{");
code("proto = kbGetProtoUnitID(\"Sea Turtle\");");
code("}");
code("case RELIC_SPEED:");
code("{");
code("proto = kbGetProtoUnitID(\"Pegasus\");");
code("}");
code("case RELIC_ATTACK_RANGE:");
code("{");
code("proto = kbGetProtoUnitID(\"Chariot Archer\");");
code("}");
code("case RELIC_SPELL_RANGE:");
code("{");
code("proto = kbGetProtoUnitID(\"Petsuchos\");");
code("}");
code("case RELIC_SPELL_DURATION:");
code("{");
code("proto = kbGetProtoUnitID(\"Frost Giant\");");
code("}");
code("case RELIC_LIFESTEAL:");
code("{");
code("proto = kbGetProtoUnitID(\"Troll\");");
code("}");
code("case RELIC_STUN_RESISTANCE:");
code("{");
code("proto = kbGetProtoUnitID(\"Scarab\");");
code("}");
code("case RELIC_ATTACK_DAMAGE:");
code("{");
code("proto = kbGetProtoUnitID(\"Ballista\");");
code("}");
code("case RELIC_SPELL_POWER:");
code("{");
code("proto = kbGetProtoUnitID(\"Fire Giant\");");
code("}");
code("case RELIC_HEAL_BOOST:");
code("{");
code("proto = kbGetProtoUnitID(\"Flying Medic\");");
code("}");
code("case RELIC_POISON_RESISTANCE:");
code("{");
code("proto = kbGetProtoUnitID(\"Dryad\");");
code("}");
code("case RELIC_ARMOR:");
code("{");
code("proto = kbGetProtoUnitID(\"Behemoth\");");
code("}");
code("case RELIC_SILENCE_RESISTANCE:");
code("{");
code("proto = kbGetProtoUnitID(\"Sphinx\");");
code("}");
code("case RELIC_POISON_KILLER:");
code("{");
code("proto = kbGetProtoUnitID(\"Mummy\");");
code("}");
code("case RELIC_WEIGHTED_BLOWS:");
code("{");
code("proto = kbGetProtoUnitID(\"Medusa\");");
code("}");
code("case RELIC_ALL:");
code("{");
code("proto = kbGetProtoUnitID(\"Chimera\");");
code("}");
code("case RELIC_ULTIMATE_COST:");
code("{");
code("proto = kbGetProtoUnitID(\"Arkantos\");");
code("}");
code("case RELIC_PROJECTILES:");
code("{");
code("proto = kbGetProtoUnitID(\"Manticore\");");
code("}");
code("case RELIC_SPECIAL_ATTACK:");
code("{");
code("proto = kbGetProtoUnitID(\"Avenger\");");
code("}");
code("case RELIC_COOLDOWN_REDUCTION:");
code("{");
code("proto = kbGetProtoUnitID(\"Argus\");");
code("}");
code("case RELIC_KEY_GREEK:");
code("{");
code("proto = kbGetProtoUnitID(\"UI Range Indicator Greek SFX\");");
code("}");
code("case RELIC_KEY_NORSE:");
code("{");
code("proto = kbGetProtoUnitID(\"UI Range Indicator Norse SFX\");");
code("}");
code("case RELIC_KEY_ATLANTEAN:");
code("{");
code("proto = kbGetProtoUnitID(\"UI Range Indicator Atlantean SFX\");");
code("}");
code("case RELIC_KEY_CHINA:");
code("{");
code("proto = kbGetProtoUnitID(\"UI Range Indicator Chinese SFX\");");
code("}");
code("case RELIC_KEY_EGYPT:");
code("{");
code("proto = kbGetProtoUnitID(\"UI Range Indicator Egypt SFX\");");
code("}");
code("case RELIC_CURSED_RANGE:");
code("{");
code("proto = kbGetProtoUnitID(\"Petrobolos\");");
code("}");
code("case RELIC_CURSED_DURATION:");
code("{");
code("proto = kbGetProtoUnitID(\"King Folstag\");");
code("}");
code("case RELIC_CURSED_POWER:");
code("{");
code("proto = kbGetProtoUnitID(\"Phoenix\");");
code("}");
code("case RELIC_FAVOR_FROM_ATTACKS:");
code("{");
code("proto = kbGetProtoUnitID(\"Servant\");");
code("}");
code("case RELIC_POISON_FASTER:");
code("{");
code("proto = kbGetProtoUnitID(\"Scorpion Man\");");
code("}");
code("case RELIC_YEEBAAGOOON:");
code("{");
code("proto = kbGetProtoUnitID(\"Pharaoh of Osiris\");");
code("}");
code("case RELIC_GHOST_PICTURE:");
code("{");
code("proto = kbGetProtoUnitID(\"Kastor\");");
code("}");
code("case RELIC_LITERAL_FECES:");
code("{");
code("proto = kbGetProtoUnitID(\"Promethean\");");
code("}");
code("case RELIC_A_FUCKING_CORPSE:");
code("{");
code("proto = kbGetProtoUnitID(\"Minion\");");
code("}");
code("case RELIC_BERRY_BUSH:");
code("{");
code("proto = kbGetProtoUnitID(\"Walking Berry Bush\");");
code("}");
code("case RELIC_POISON_BUCKET:");
code("{");
code("proto = kbGetProtoUnitID(\"Jiangshi\");");
code("}");
code("case RELIC_WORTHLESS_JUNK:");
code("{");
code("proto = kbGetProtoUnitID(\"Junk\");");
code("}");
code("case RELIC_MAGIC_DETECTOR:");
code("{");
code("proto = kbGetProtoUnitID(\"Helepolis\");");
code("}");
code("case RELIC_NICKONHAWK:");
code("{");
code("proto = kbGetProtoUnitID(\"Caravan Atlantean\");");
code("}");
code("case RELIC_NICKONHAWK_GOGGLES:");
code("{");
code("proto = kbGetProtoUnitID(\"Hero Greek Odysseus\");");
code("}");
code("}");
code("}");
code("return(proto);");
code("}");

code("int randomLow(int maxval = 10) {");
code("trQuestVarSetFromRand(\"relicrand1\",1,maxval, true);");
code("trQuestVarSetFromRand(\"relicrand2\",1,maxval, true);");
code("if (trQuestVarGet(\"relicrand2\") < trQuestVarGet(\"relicrand1\")) {");
code("trQuestVarSet(\"relicrand1\", trQuestVarGet(\"relicrand2\"));");
code("}");
code("return(1*trQuestVarGet(\"relicrand1\"));");
code("}");

code("int randomStageClosest(int maxval = 10) {");
code("trQuestVarSetFromRand(\"relicrand1\",1,maxval, true);");
code("trQuestVarSetFromRand(\"relicrand2\",1,maxval, true);");
code("float firstDiff = xsAbs(trQuestVarGet(\"relicrand1\") - trQuestVarGet(\"stage\"));");
code("float secondDiff = xsAbs(trQuestVarGet(\"relicrand2\") - trQuestVarGet(\"stage\"));");
code("if (secondDiff < firstDiff) {");
code("trQuestVarSet(\"relicrand1\", trQuestVarGet(\"relicrand2\"));");
code("}");
code("return(1*trQuestVarGet(\"relicrand1\"));");
code("}");

code("void spawnRelicSpecific(float x = 0, float z = 0, int val = 1) {");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,x,0,z,0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("if (trUnitVisToPlayer()) {");
code("trSoundPlayFN(\"relicselect.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("trUnitChangeProtoUnit(\"Relic\");");
code("yAddToDatabase(\"freeRelics\", \"next\");");
code("yAddUpdateVar(\"freeRelics\", \"type\", val);");
code("}");

code("void spawnRelic(float x = 0, float z = 0, int maxval = 10) {");
code("spawnRelicSpecific(x, z, randomStageClosest(maxval));");
code("}");

code("void spawnRelicClosest(float x = 0, float z = 0, int target = 0) {");
code("trQuestVarSetFromRand(\"rand\", 0, 10, true);");
code("trQuestVarSetFromRand(\"rand\",");
code("xsMax(1, target - trQuestVarGet(\"rand\")), xsMin(10, target + trQuestVarGet(\"rand\")), true);");
code("spawnRelicSpecific(x, z, 1*trQuestVarGet(\"rand\"));");
code("}");


code("const int CHEST_KEY = 1;");
code("const int CHEST_ENCOUNTER = 2;");
code("const int CHEST_STATUES = 3;");

code("const int MOONBLADE = 1;");
code("const int SUNBOW = 2;");
code("const int FIREKNIGHT = 3;");
code("const int THRONESHIELD = 4;");

code("const int STORMCUTTER = 5;");
code("const int BLASTMAGE = 6;");
code("const int THUNDERRIDER = 7;");
code("const int ALCHEMIST = 8;");

code("const int GARDENER = 9;");
code("const int STARSEER = 10;");
code("const int COMMANDO = 11;");
code("const int SPELLSTEALER = 12;");

code("const int NIGHTRIDER = 13;");
code("const int SPARKWITCH = 14;");
code("const int SAVIOR = 15;");

code("const int CLASS_COUNT = 16;");
code("const int FROSTKNIGHT = 17;");

code("const int STARSTONE = 0;");
code("const int SOULSTONE = 1;");
code("const int MANASTONE = 2;");

code("float worldHeight = 0;");
code("float wallHeight = 5;");
code("int ENEMY_PLAYER = 0;");
code("bool Multiplayer = false;");

code("int TERRAIN_CHASM = 5;");
code("int TERRAIN_SUB_CHASM = 4;");

code("int TERRAIN_WALL = 2;");
code("int TERRAIN_SUB_WALL = 13;");

code("int TERRAIN_PRIMARY = 0;");
code("int TERRAIN_SUB_PRIMARY = 1;");

code("int TERRAIN_SECONDARY = 0;");
code("int TERRAIN_SUB_SECONDARY = 1;");

code("string gemstoneIcon(int gem = 0) {");
code("string img = \"icons\improvement hands of the pharaoh icons 64\";");
code("switch(gem)");
code("{");
code("case STARSTONE:");
code("{");
code("img = \"icons\improvement focus icons 64\";");
code("}");
code("case SOULSTONE:");
code("{");
code("img = \"icons\god power healing spring icon 64\";");
code("}");
code("case MANASTONE:");
code("{");
code("img = \"icons\improvement hands of the pharaoh icons 64\";");
code("}");
code("}");
code("return(img);");
code("}");

code("string gemstoneName(int gem = 0) {");
code("string name = \"Dust\";");
code("switch(gem)");
code("{");
code("case STARSTONE:");
code("{");
code("name = \"Starstone\";");
code("}");
code("case SOULSTONE:");
code("{");
code("name = \"Soulstone\";");
code("}");
code("case MANASTONE:");
code("{");
code("name = \"Manastone\";");
code("}");
code("}");
code("return(name);");
code("}");

code("string stageName(int stage = 0) {");
code("string name = \"(This stage has not been made yet)\";");
code("switch(stage)");
code("{");
code("case 1:");
code("{");
code("name = \"The Lion's Den\";");
code("}");
code("case 2:");
code("{");
code("name = \"Murkwood\";");
code("}");
code("case 3:");
code("{");
code("name = \"Frozen Canyon\";");
code("}");
code("case 4:");
code("{");
code("name = \"Emerald Fields\";");
code("}");
code("case 5:");
code("{");
code("name = \"Miasma Crypt\";");
code("}");
code("case 6:");
code("{");
code("name = \"The Factory\";");
code("}");
code("case 7:");
code("{");
code("name = \"The Deep\";");
code("}");
code("case 8:");
code("{");
code("name = \"The Clouds\";");
code("}");
code("case 9:");
code("{");
code("name = \"The Pit\";");
code("}");
code("case 10:");
code("{");
code("name = \"The Unknown\";");
code("}");
code("case 0:");
code("{");
code("name = \"Dream Stadium\";");
code("}");
code("}");
code("return(name);");
code("}");

code("string stageIcon(int stage = 0) {");
code("string img = \"icons\infantry g hoplite icon 64\";");
code("switch(stage)");
code("{");
code("case 1:");
code("{");
code("img = \"ui\ui map watering hole 256x256\";");
code("}");
code("case 2:");
code("{");
code("img = \"ui\ui map deep jungle 256x256\";");
code("}");
code("case 3:");
code("{");
code("img = \"ui\ui map jotunheim 256x256\";");
code("}");
code("case 4:");
code("{");
code("img = \"ui\ui map open fields 256x256\";");
code("}");
code("case 5:");
code("{");
code("img = \"ui\ui map river styx 256x256\";");
code("}");
code("case 6:");
code("{");
code("img = \"icons\building siege workshop icon 64\";");
code("}");
code("case 7:");
code("{");
code("img = \"icons\improvement poseidons secret icons 64\";");
code("}");
code("case 8:");
code("{");
code("img = \"icons\improvement safe passage icons 64\";");
code("}");
code("case 9:");
code("{");
code("img = \"ui\ui map erebus 256x256\";");
code("}");
code("case 10:");
code("{");
code("img = \"ui\ui map missing 256x256\";");
code("}");
code("case 0:");
code("{");
code("img = \"ui\ui map land unknown 256x256\";");
code("}");
code("}");
code("return(img);");
code("}");

code("void reselectMyself() {");
code("uiClearSelection();");
code("int p = trCurrentPlayer();");
code("int class = trQuestVarGet(\"p\"+p+\"class\");");
code("trackInsert();");
code("trackAddWaypoint();");
code("trackAddWaypoint();");
code("trBlockAllSounds(false);");
code("uiFindType(kbGetProtoUnitName(1*trQuestVarGet(\"class\"+class+\"proto\")));");
code("trackPlay(1,999);");
code("}");

code("void setupPlayerProto(string proto=\"\",float health=0,float attack=0,float speed=4,float armor=0,float range=0) {");
code("int pNum = kbGetProtoUnitID(proto);");
code("for(p=0; <ENEMY_PLAYER) {");
code("trModifyProtounit(proto, p, 27, 9999999999999999999.0);");
code("trModifyProtounit(proto, p, 27, -9999999999999999999.0);");
code("trModifyProtounit(proto, p, 27, attack);");
code("zInitProtoUnitStat(proto, p, 27, attack);");
code("trModifyProtounit(proto, p, 30, 9999999999999999999.0);");
code("trModifyProtounit(proto, p, 30, -9999999999999999999.0);");
code("trModifyProtounit(proto, p, 31, 9999999999999999999.0);");
code("trModifyProtounit(proto, p, 31, -9999999999999999999.0);");
code("trModifyProtounit(proto, p, 31, attack);");
code("zInitProtoUnitStat(proto, p, 31, attack);");
code("trQuestVarSet(\"proto\"+pNum+\"attack\", attack);");
code("zInitProtoUnitStat(proto, p, 13, 1);");
code("trModifyProtounit(proto, p, 0, 9999999999999999999.0);");
code("trModifyProtounit(proto, p, 0, -9999999999999999999.0);");
code("trModifyProtounit(proto, p, 0, health);");
code("zInitProtoUnitStat(proto, p, 0, health);");
code("trQuestVarSet(\"proto\"+pNum+\"health\", health);");
code("trModifyProtounit(proto, p, 2, 9999999999999999999.0);");
code("trModifyProtounit(proto, p, 2, -9999999999999999999.0);");
code("trModifyProtounit(proto, p, 2, 20);");
code("zInitProtoUnitStat(proto, p, 2, 20);");
code("trModifyProtounit(proto, p, 11, 9999999999999999999.0);");
code("trModifyProtounit(proto, p, 11, -9999999999999999999.0);");
code("trModifyProtounit(proto, p, 11, range);");
code("zInitProtoUnitStat(proto, p, 11, range);");
code("trQuestVarSet(\"proto\"+pNum+\"range\", range);");
code("trModifyProtounit(proto, p, 1, 9999999999999999999.0);");
code("trModifyProtounit(proto, p, 1, -9999999999999999999.0);");
code("trModifyProtounit(proto, p, 1, speed);");
code("zInitProtoUnitStat(proto, p, 1, speed);");
code("trQuestVarSet(\"proto\"+pNum+\"speed\", speed);");
code("trModifyProtounit(proto, p, 24, -1);");
code("trModifyProtounit(proto, p, 25, -1);");
code("trModifyProtounit(proto, p, 26, -1);");
code("trModifyProtounit(proto, p, 24, armor);");
code("trModifyProtounit(proto, p, 25, armor);");
code("trModifyProtounit(proto, p, 26, armor);");
code("trQuestVarSet(\"proto\"+pNum+\"armor\", armor);");

code("trModifyProtounit(proto, p, 33, 9999999999999999999.0);");
code("trModifyProtounit(proto, p, 33, -9999999999999999999.0);");
code("trModifyProtounit(proto, p, 33, 1.0);");
code("trModifyProtounit(proto, p, 44, 9999999999999999999.0);");
code("trModifyProtounit(proto, p, 44, -9999999999999999999.0);");
code("trModifyProtounit(proto, p, 44, 1.0);");
code("}");
code("trModifyProtounit(proto, 0, 2, -20);");
code("}");

code("void setupClass(string proto = \"\", int class = 0, int firstDelay = 0, int nextDelay = 0,int gem = 0,int specialCD = 0) {");
code("int p = kbGetProtoUnitID(proto);");
code("trQuestVarSet(\"class\"+class+\"proto\", p);");
code("trQuestVarSet(\"proto\"+p+\"class\", class);");
code("trQuestVarSet(\"class\"+class+\"firstDelay\", firstDelay);");
code("trQuestVarSet(\"class\"+class+\"nextDelay\", nextDelay);");
code("trQuestVarSet(\"class\"+class+\"specialAttackCooldown\", specialCD);");
code("trQuestVarSet(\"class\"+class+\"gemstone\", gem);");
code("}");

code("void chooseClass(int p = 0, int class = 0) {");
code("trQuestVarSet(\"p\"+p+\"class\", class);");
code("trEventFire(1000 + 12 * class + p);");
code("int proto = trQuestVarGet(\"class\"+class+\"proto\");");
code("trQuestVarSet(\"p\"+p+\"health\", trQuestVarGet(\"proto\"+proto+\"health\"));");
code("trQuestVarSet(\"p\"+p+\"attack\", trQuestVarGet(\"proto\"+proto+\"attack\"));");
code("trQuestVarSet(\"p\"+p+\"baseAttackTrue\", trQuestVarGet(\"proto\"+proto+\"attack\"));");
code("trQuestVarSet(\"p\"+p+\"baseAttack\", trQuestVarGet(\"proto\"+proto+\"attack\"));");
code("trQuestVarSet(\"p\"+p+\"attack\", trQuestVarGet(\"proto\"+proto+\"attack\"));");
code("trQuestVarSet(\"p\"+p+\"range\", trQuestVarGet(\"proto\"+proto+\"range\"));");
code("trQuestVarSet(\"p\"+p+\"speed\", trQuestVarGet(\"proto\"+proto+\"speed\"));");
code("trQuestVarSet(\"p\"+p+\"firstDelay\", trQuestVarGet(\"class\"+class+\"firstDelay\"));");
code("trQuestVarSet(\"p\"+p+\"nextDelay\", trQuestVarGet(\"class\"+class+\"nextDelay\"));");
code("trQuestVarSet(\"p\"+p+\"specialAttackCooldown\", trQuestVarGet(\"class\"+class+\"specialAttackCooldown\"));");
code("trQuestVarSet(\"p\"+p+\"los\", 20);");
code("trQuestVarSet(\"p\"+p+\"projectiles\", 1);");
code("trQuestVarSet(\"p\"+p+\"spellRange\", 1);");
code("trQuestVarSet(\"p\"+p+\"spellDamage\", 1);");
code("trQuestVarSet(\"p\"+p+\"spellDuration\", 1);");
code("trQuestVarSet(\"p\"+p+\"spellRangeTrue\", 1);");
code("trQuestVarSet(\"p\"+p+\"spellDamageTrue\", 1);");
code("trQuestVarSet(\"p\"+p+\"spellDurationTrue\", 1);");
code("trQuestVarSet(\"p\"+p+\"healBoost\", 1);");
code("trQuestVarSet(\"p\"+p+\"favorFromAttacks\", 0);");
code("trQuestVarSet(\"p\"+p+\"poisonSpeed\", 0);");
code("trQuestVarSet(\"p\"+p+\"lifesteal\", 0);");
code("trQuestVarSet(\"p\"+p+\"favorRegen\", 0);");
code("trQuestVarSet(\"p\"+p+\"physicalResist\", trQuestVarGet(\"proto\"+proto+\"armor\"));");
code("trQuestVarSet(\"p\"+p+\"magicResist\", trQuestVarGet(\"proto\"+proto+\"armor\"));");

code("trQuestVarSet(\"p\"+p+\"ultimateCost\", 1);");
code("trQuestVarSet(\"p\"+p+\"cooldownReduction\", 1);");
code("trQuestVarSet(\"p\"+p+\"stunResistance\", 1);");
code("trQuestVarSet(\"p\"+p+\"poisonResistance\", 1);");
code("trQuestVarSet(\"p\"+p+\"silenceResistance\", 1);");

code("trQuestVarSet(\"p\"+p+\"ultimateCostCount\", 0);");
code("trQuestVarSet(\"p\"+p+\"cooldownReductionCount\", 0);");
code("trQuestVarSet(\"p\"+p+\"stunResistanceCount\", 0);");
code("trQuestVarSet(\"p\"+p+\"poisonResistanceCount\", 0);");
code("trQuestVarSet(\"p\"+p+\"silenceResistanceCount\", 0);");

code("trQuestVarSet(\"p\"+p+\"stunDamage\", 0);");
code("trQuestVarSet(\"p\"+p+\"poisonKiller\", 0);");

code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"unit\");");
code("if (trUnitAlive() && trQuestVarGet(\"p\"+p+\"unit\") > 0) {");
code("trMutateSelected(proto);");
code("}");
code("trPlayerKillAllGodPowers(p);");
code("if (trCurrentPlayer() == p) {");
code("trCounterAbort(\"lure\");");
code("trCounterAbort(\"well\");");
code("trCounterAbort(\"rain\");");
code("}");
code("if (class > 0) {");
code("trQuestVarSet(\"p\"+p+\"wellCooldownStatus\", 1);");
code("trQuestVarSet(\"p\"+p+\"lureCooldownStatus\", 1);");
code("trQuestVarSet(\"p\"+p+\"rainCooldownStatus\", 1);");
code("}");

code("if (Multiplayer == false) {");
code("trQuestVarSet(\"p\"+p+\"level\", trQuestVarGet(\"class\"+class+\"level\") - 1);");
code("trSetCivilizationNameOverride(p, \"Level \" + (1+trQuestVarGet(\"p\"+p+\"level\")));");
code("}");

code("for(x=yGetDatabaseCount(\"p\"+p+\"relics\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"relics\");");
code("if (x > trQuestVarGet(\"p\"+p+\"level\")+1) {");
code("yAddToDatabase(\"freeRelics\", \"p\"+p+\"relics\");");
code("yAddUpdateVar(\"freeRelics\", \"type\", 1*yGetVar(\"p\"+p+\"relics\", \"type\"));");
code("yRemoveFromDatabase(\"p\"+p+\"relics\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"relics\");");
code("trUnitChangeProtoUnit(\"Relic\");");
code("} else {");
code("relicEffect(1*yGetVar(\"p\"+p+\"relics\", \"type\"), p, true);");
code("}");
code("}");
code("}");

code("rule setup");
code("active");
code("runImmediately");
code("{");
code("Multiplayer = aiIsMultiplayer();");
code("trSetUnitIdleProcessing(false);");

	for(p=1; < cNumberNonGaiaPlayers) {
		code("trStringQuestVarSet(\"p"+p+"name\", \""+rmGetPlayerName(p)+"\");");
	}
	code("map(\"esc\", \"ShowImageBox\", \"gadgetUnreal("+quote+"ShowImageBox"+quote+")\");");

code("gadgetUnreal(\"GodPowers\");");
code("gadgetUnreal(\"tributedlg-sendButton\");");
code("gadgetUnreal(\"tributedlg-clearButton\");");

code("trSetObscuredUnits(false);");
code("configUndef(\"ErodeBuildingFoundations\");");

code("trVectorQuestVarSet(\"zeroVector\", vector(0,0,0));");

code("if (Multiplayer) {");
code("ENEMY_PLAYER = cNumberPlayers - 1;");
code("} else {");
code("ENEMY_PLAYER = 2;");
code("}");

code("trQuestVarSet(\"activePlayerCount\", ENEMY_PLAYER - 1);");

code("trForceNonCinematicModels(true);");


code("ambientColor(0,0,0);");
code("sunColor(0,0,0);");
code("trLetterBox(true);");
code("trUIFadeToColor(0,0,0,0,0,true);");

code("modularCounterInit(\"spyFind\", 32);");
code("modularCounterInit(\"spyFound\", 32);");

code("trTechSetStatus(0, 304, 4);");
code("trTechSetStatus(ENEMY_PLAYER, 304, 4);");
code("aiSet(\"NoAI\", 0);");
code("aiSet(\"NoAI\", ENEMY_PLAYER);");
code("xsSetContextPlayer(ENEMY_PLAYER);");
code("aiSetAttackResponseDistance(0.0);");

code("setupClass(\"Militia\", 0, 500, 1000);");
code("setupClass(\"Militia\", 13, 500, 1000);");
code("setupClass(\"Militia\", 14, 500, 1000);");
code("setupClass(\"Militia\", 15, 500, 1000);");
code("setupClass(\"Militia\", 16, 500, 1000);");
code("setupClass(\"Hero Greek Theseus\", MOONBLADE, 460, 1000, STARSTONE, 7);");
code("setupClass(\"Hero Greek Hippolyta\", SUNBOW, 1350, 1750, STARSTONE);");
code("setupClass(\"Hero Greek Atalanta\", THUNDERRIDER, 630, 1400, MANASTONE, 5);");
code("setupClass(\"Lancer Hero\", FIREKNIGHT, 1155, 1500, MANASTONE, 5);");
code("setupClass(\"Hero Greek Achilles\", NIGHTRIDER, 470, 1000, SOULSTONE, 8);");
code("setupClass(\"Priest\", BLASTMAGE, 500, 800, MANASTONE);");
code("setupClass(\"Oracle Hero\", STARSEER, 540, 1500, STARSTONE, 8);");
code("setupClass(\"Archer Atlantean Hero\", STORMCUTTER, 400, 1000, MANASTONE);");
code("setupClass(\"Pharaoh\", ALCHEMIST, 550, 1200, SOULSTONE);");
code("setupClass(\"Swordsman Hero\", SPELLSTEALER, 400, 800, MANASTONE, 6);");
code("setupClass(\"Javelin Cavalry Hero\", COMMANDO, 1000, 2000, STARSTONE);");
code("setupClass(\"Trident Soldier Hero\", THRONESHIELD, 625, 1250, SOULSTONE, 10);");
code("setupClass(\"Hero Greek Bellerophon\", SAVIOR, 625, 1250, STARSTONE, 3);");
code("setupClass(\"Hero Greek Chiron\", GARDENER, 900, 1500, SOULSTONE);");
code("setupClass(\"Circe\", SPARKWITCH, 1400, 2800, MANASTONE);");

code("trQuestVarSet(\"p\"+ENEMY_PLAYER+\"stunResistance\", 1);");
code("trQuestVarSet(\"p\"+ENEMY_PLAYER+\"poisonResistance\", 1);");
code("trQuestVarSet(\"p0stunResistance\", 1);");
code("trQuestVarSet(\"p0poisonResistance\", 1);");
code("for(p=1; < ENEMY_PLAYER) {");
code("trPlayerSetDiplomacy(p, 0, \"neutral\");");
code("trPlayerSetDiplomacy(p, ENEMY_PLAYER, \"Enemy\");");
code("for(x=p+1; < ENEMY_PLAYER) {");
code("trPlayerSetDiplomacy(p, x, \"ally\");");
code("trPlayerSetDiplomacy(x, p, \"ally\");");
code("}");
code("trSetCivAndCulture(p, 1, 0);");
code("trModifyProtounit(\"Animal Attractor\", p, 2, -99);");
code("trModifyProtounit(\"Animal Attractor\", p, 55, 4);");
code("trModifyProtounit(\"Tunnel\", p, 2, -99);");
code("trModifyProtounit(\"Tunnel\", p, 55, 4);");
code("trModifyProtounit(\"Ajax\", p, 5, 99);");
code("trModifyProtounit(\"Transport Ship Greek\", p, 5, 99);");
code("trModifyProtounit(\"Dwarf\", p, 55, 4);");
code("trModifyProtounit(\"Dwarf\", p, 2, -99);");
code("trModifyProtounit(\"Transport Ship Greek\", p, 55, 4);");
code("trModifyProtounit(\"Athena\", p, 55, 4);");

code("trModifyProtounit(\"Servant\", p, 55, 1);");
code("trModifyProtounit(\"Phoenix\", p, 55, 1);");
code("trModifyProtounit(\"Sea Turtle\", p, 55, 1);");
code("trModifyProtounit(\"Pegasus\", p, 55, 1);");
code("trModifyProtounit(\"Flying Medic\", p, 55, 1);");
code("trModifyProtounit(\"Junk\", p, 55, 1);");

code("trPlayerKillAllGodPowers(p);");
code("trPlayerTechTreeEnabledGodPowers(p, false);");

code("trTechSetStatus(p, 471, 4);");

code("trTechSetStatus(p, 9, 0);");
code("trTechSetStatus(p, 101, 0);");
code("trTechSetStatus(p, 34, 0);");
code("trTechSetStatus(p, 35, 0);");

code("trForbidProtounit(p, \"Trident Soldier Hero\");");
code("trForbidProtounit(p, \"Archer Atlantean Hero\");");
code("trForbidProtounit(p, \"Royal Guard Hero\");");
code("trForbidProtounit(p, \"Lancer Hero\");");
code("trForbidProtounit(p, \"Oracle Hero\");");
code("trForbidProtounit(p, \"Wall Connector\");");
code("trForbidProtounit(p, \"Dock\");");
code("trForbidProtounit(p, \"Settlement Level 1\");");
code("trForbidProtounit(p, \"House\");");
code("trForbidProtounit(p, \"Granary\");");
code("trForbidProtounit(p, \"Mining Camp\");");
code("trForbidProtounit(p, \"Lumber Camp\");");
code("trForbidProtounit(p, \"Monument\");");
code("trForbidProtounit(p, \"Temple\");");
code("trForbidProtounit(p, \"Wonder\");");
code("trForbidProtounit(p, \"Market\");");
code("trForbidProtounit(p, \"Dwarf Foundry\");");
code("trForbidProtounit(p, \"Armory\");");
code("trForbidProtounit(p, \"Hill Fort\");");
code("trForbidProtounit(p, \"Tower\");");
code("trForbidProtounit(p, \"Longhouse\");");
code("trForbidProtounit(p, \"Manor\");");
code("trForbidProtounit(p, \"Guild\");");
code("}");

code("xsEnableRule(\"delayed_modify\");");
code("xsEnableRule(\"data_load_00\");");
code("xsDisableSelf();");
code("}");

code("rule delayed_modify");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime) {");
code("zInitProtoUnitStat(\"Revealer\", 1, 2, 12);");
code("zInitProtoUnitStat(\"Revealer to Player\", 1, 2, 12);");
code("zSetProtoUnitStat(\"Revealer to Player\", 1, 2, 32);");
code("setupPlayerProto(\"Kronny Flying\", 1000, 0, 0);");

code("trTechSetStatus(0, 7, 4);");
code("trTechSetStatus(0, 476, 4);");
code("trTechSetStatus(ENEMY_PLAYER, 7, 4);");
code("trTechSetStatus(ENEMY_PLAYER, 476, 4);");

code("setupPlayerProto(\"Militia\", 100, 10, 4.8);");
code("setupPlayerProto(\"Wolf\", 200, 10, 5, 0.2);");
code("setupPlayerProto(\"Minion\", 240, 10, 5, 0.2);");
code("setupPlayerProto(\"Hero Greek Theseus\", 1000, 50, 4.3, 0.3);");
code("setupPlayerProto(\"Hero Greek Hippolyta\", 1000, 50, 4.3, 0, 16);");
code("setupPlayerProto(\"Hero Greek Atalanta\", 800, 30, 6.0, 0);");
code("setupPlayerProto(\"Lancer Hero\", 1100, 55, 6.05, 0.5);");
code("setupPlayerProto(\"Hero Greek Achilles\", 1200, 50, 5.5, 0.4);");
code("setupPlayerProto(\"Archer Atlantean Hero\", 900, 30, 4.05, 0, 20);");
code("setupPlayerProto(\"Pharaoh\", 1000, 50, 4.0, 0, 12);");
code("setupPlayerProto(\"Swordsman Hero\", 1000, 50, 4.8, 0.3);");
code("setupPlayerProto(\"Javelin Cavalry Hero\", 1200, 45, 5.3, 0, 12);");
code("setupPlayerProto(\"Trident Soldier Hero\", 1200, 30, 3.9, 0);");
code("setupPlayerProto(\"Hero Greek Bellerophon\", 1200, 60, 6.0, 0.3);");
code("setupPlayerProto(\"Hero Greek Chiron\", 1000, 50, 5.5, 0, 16);");
code("setupPlayerProto(\"Priest\", 1000, 10, 3.6, 0, 16);");
code("setupPlayerProto(\"Oracle Hero\", 1000, 0, 4.0, 0.3);");
code("setupPlayerProto(\"Circe\", 1000, 0, 3.7, 0, 15);");
code("setupPlayerProto(\"Audrey\", 1000, 50, 0);");
code("setupPlayerProto(\"Walking Berry Bush\", 500, 25, 3.5, 0.3);");


code("setupPlayerProto(\"Villager Atlantean Hero\", 500, 0, 4.0);");

code("trModifyProtounit(\"Sky Passage\", 0, 5, 999);");

code("trModifyProtounit(\"Walking Woods Marsh\", ENEMY_PLAYER, 6, 1);");

code("trModifyProtounit(\"Monument 2\", ENEMY_PLAYER, 24, -1);");
code("trModifyProtounit(\"Monument 2\", ENEMY_PLAYER, 25, -1);");
code("trModifyProtounit(\"Monument 2\", ENEMY_PLAYER, 26, -1);");
code("trModifyProtounit(\"Monument 2\", 0, 24, -1);");
code("trModifyProtounit(\"Monument 2\", 0, 25, -1);");
code("trModifyProtounit(\"Monument 2\", 0, 26, -1);");
code("trModifyProtounit(\"Monument 2\", ENEMY_PLAYER, 0, 1000);");
code("trModifyProtounit(\"Monument 2\", 0, 0, 1000);");

code("trModifyProtounit(\"Uproot 2x2\", 0, 8, -99);");

code("for(p=ENEMY_PLAYER; >0) {");
code("trModifyProtounit(\"Circe\", p, 9, -99);");
code("trModifyProtounit(\"Ox Cart\", p, 0, 120);");
code("trModifyProtounit(\"Spy Eye\", p, 2, -99);");
code("trModifyProtounit(\"Villager Atlantean Hero\", p, 5, 2);");
code("trModifyProtounit(\"Pharaoh\", p, 15, -999);");
code("trModifyProtounit(\"Pharaoh\", p, 14, -999);");
code("trModifyProtounit(\"Priest\", p, 15, -999);");
code("trModifyProtounit(\"Priest\", p, 14, -999);");
code("trModifyProtounit(\"Wadjet Spit\", p, 1, -15);");
code("trModifyProtounit(\"Ajax\", p, 5, 999);");
code("trModifyProtounit(\"Ball of Fire Impact\", p, 8, 9999999999999999999.0);");
code("trModifyProtounit(\"Ball of Fire Impact\", p, 8, -9999999999999999999.0);");
code("trModifyProtounit(\"Ball of Fire Impact\", p, 8, 4.0);");
code("zInitProtoUnitStat(\"Ball of Fire Impact\", p, 8, 4.0);");
code("trModifyProtounit(\"Kronny Flying\", p, 1, 9999999999999999999.0);");
code("trModifyProtounit(\"Kronny Flying\", p, 1, -9999999999999999999.0);");
code("zInitProtoUnitStat(\"Kronny Flying\", p, 1, 0);");
code("zInitProtoUnitStat(\"Meteorite\",p,1,100);");
code("trModifyProtounit(\"Minion\", p, 8, -999);");
code("trModifyProtounit(\"Arkantos God Out\", p, 8, 1);");
code("zInitProtoUnitStat(\"Cinematic Block\", p, 0, 300);");
code("zInitProtoUnitStat(\"Priest Projectile\", p, 8, 2);");

code("zInitProtoUnitStat(\"Ballista Shot\", p, 1, 30);");

code("trModifyProtounit(\"Servant\", p, 55, 1);");
code("trModifyProtounit(\"Nereid\", p, 55, 1);");
code("trModifyProtounit(\"Scylla\", p, 55, 1);");
code("}");

code("trModifyProtounit(\"Minion\", 0, 8, -999);");

code("trModifyProtounit(\"Kronny Flying\", 0, 1, 9999999999999999999.0);");
code("trModifyProtounit(\"Kronny Flying\", 0, 1, -9999999999999999999.0);");
code("zInitProtoUnitStat(\"Kronny Flying\", 0, 1, 0);");

code("trModifyProtounit(\"Bolt Strike\", 0, 27, -10000);");
code("trModifyProtounit(\"Bolt Strike\", 0, 28, -10000);");
code("trModifyProtounit(\"Bolt Strike\", 0, 29, -10000);");
code("zInitProtoUnitStat(\"Bolt Strike\", 0, 27, 0);");

code("xsEnableRule(\"setup_enemies\");");
code("xsDisableSelf();");
code("}");
code("}");

code("rule no_extra_resources");
code("active");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime) {");
code("for (p=1; <cNumberPlayers) {");
code("trPlayerGrantResources(p, \"Food\", -1000.0);");
code("trPlayerGrantResources(p, \"Wood\", -1000.0);");
code("trPlayerGrantResources(p, \"Gold\", -1000.0);");
code("trPlayerGrantResources(p, \"Favor\", -1000.0);");
code("}");
code("if (Multiplayer == false) {");
code("trPlayerGrantResources(1, \"Gold\", trQuestVarGet(\"p1gold\"));");
code("}");
code("xsDisableSelf();");
code("}");
code("}");

code("rule Z_cin_00");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 1) {");
code("trSetFogAndBlackmap(false, false);");
code("trCameraCut(vector(96,90,98), vector(0,-1,0), vector(0,0,1), vector(1,0,0));");
code("int posX = 96 - 10;");
code("int posZ = 96 + 10;");
code("trModifyProtounit(\"Curse SFX\", 1, 8, 8);");
code("trArmyDispatch(\"1,0\", \"Dwarf\",1,posX,0,posZ,0,true);");
code("for(x=10; >0) {");
code("posX = posX + 2;");
code("trArmyDispatch(\"1,0\", \"Dwarf\",1,posX,0,posZ,0,false);");
code("}");
code("for(x=5; >0) {");
code("posX = posX - 2;");
code("posZ = posZ - 2;");
code("trArmyDispatch(\"1,0\", \"Dwarf\",1,posX,0,posZ,0,false);");
code("}");
code("for (x=4; >0) {");
code("posX = posX + 2;");
code("posZ = posZ - 2;");
code("trArmyDispatch(\"1,0\", \"Dwarf\",1,posX,0,posZ,0,false);");
code("}");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Curse SFX\");");

code("trUIFadeToColor(0,0,0,500,0,false);");
code("trSoundPlayFN(\"cinematics\15_in\gong.wav\", \"4\", -1, \"\",\"\");");
code("trSoundPlayFN(\"godpower.wav\", \"6\", -1, \"\",\"\");");
code("trOverlayText(\"Zenophobia presents...\", 4.0, -1, -1, -1);");

code("xsEnableRule(\"Z_cin_01\");");
code("xsDisableSelf();");
code("}");
code("}");

code("rule Z_cin_01");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 5) {");
code("trSoundPlayFN(\"ui\thunder2.wav\",\"1\",-1,\"\",\"\");");
code("trOverlayText(\"Ascension MMORPG\", 3.0, -1, -1, -1);");
code("trUIFadeToColor(0,0,0,1000,3000,true);");
code("xsEnableRule(\"Z_cin_02\");");
code("xsDisableSelf();");
code("}");
code("}");

code("rule Z_cin_02");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 5) {");
code("trModifyProtounit(\"Curse SFX\", 1, 8, -8);");
code("if (trQuestVarGet(\"p1progress\") == 0) {");
code("trQuestVarSet(\"stage\", 1);");
code("} else {");
code("trLetterBox(false);");
code("trMusicPlay(\"cinematics\9_in\music.mp3\", \"1\", 0.5);");
code("trUIFadeToColor(0,0,0,1000,0,false);");
code("trCameraCut(vector(96,70,26), vector(0,-0.7071,0.7071), vector(0,0.7071,0.7071), vector(1,0,0));");
code("trQuestVarSet(\"chooser\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\", \"Athena\",1,96,0,90,0,true);");
code("trMessageSetText(\"Host: Choose a floor to challenge.\",-1);");

code("int posX = 97 - 2 * trQuestVarGet(\"p1progress\");");
code("if ((trQuestVarGet(\"p1nickQuestProgress\") == 6) && (ENEMY_PLAYER > 2)) {");
code("posX = posX - 2;");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,posX,0,101,180,true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(0);");
code("trMutateSelected(kbGetProtoUnitID(\"Hero Greek Odysseus\"));");
code("yAddToDatabase(\"stageChoices\", \"next\");");
code("yAddUpdateVar(\"stageChoices\", \"stage\", 0);");
code("yAddUpdateVar(\"stageChoices\", \"obelisk\", trQuestVarGet(\"next\"));");
code("posX = posX + 4;");
code("}");

code("for(x=0; <= trQuestVarGet(\"p1progress\")) {");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Flag Numbered\",1,posX,0,101,0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitSetAnimationPath(\"\"+x+\",0,0,0,0,0,0\");");
code("yAddToDatabase(\"stageChoices\", \"next\");");
code("yAddUpdateVar(\"stageChoices\", \"stage\", x + 1);");
code("yAddUpdateVar(\"stageChoices\", \"obelisk\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,posX,0,103,0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(0);");
code("trMutateSelected(kbGetProtoUnitID(\"Outpost\"));");
code("posX = posX + 4;");
code("}");

code("xsEnableRule(\"choose_stage_00\");");
code("}");
code("trSetLighting(\"default\", 0.1);");
code("xsDisableSelf();");
code("xsEnableRule(\"choose_stage_01\");");
code("}");
code("}");

code("int loadProgress = 0;");
code("int savedata = 0;");
code("int currentdata = 0;");
code("const int VERSION_NUMBER = 6;");

code("void saveAllData() {");
code("trSetCurrentScenarioUserData(VERSION_NUMBER, 1);");
code("int p = trCurrentPlayer();");
code("int relic = 0;");
code("for(x=yGetDatabaseCount(\"p\"+p+\"warehouse\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"warehouse\");");
code("relic = yGetVar(\"p\"+p+\"warehouse\", \"type\");");
code("if (relic <= NORMAL_RELICS) {");
code("trQuestVarSet(\"ownedRelics\"+relic, 1 + trQuestVarGet(\"ownedRelics\"+relic));");
code("}");
code("}");

code("if ((trQuestVarGet(\"p\"+p+\"nickQuestProgress\") < 5) && (trQuestVarGet(\"p\"+p+\"nickEquipped\") == 0) && Multiplayer) {");
code("trQuestVarSet(\"p\"+p+\"nickQuestProgress\", 0);");
code("}");

code("savedata = 1*trQuestVarGet(\"p\"+p+\"progress\") + 10 * trQuestVarGet(\"p\"+p+\"level\");");
code("savedata = savedata + 100 * trQuestVarGet(\"p\"+p+\"godBoon\") + 1300 * trQuestVarGet(\"p\"+p+\"class\");");
code("trSetCurrentScenarioUserData(0, savedata);");
code("savedata = trQuestVarGet(\"p\"+p+\"gold\") - trQuestVarGet(\"p\"+p+\"startingGold\");");
code("savedata = savedata + trGetScenarioUserData(1);");
code("trSetCurrentScenarioUserData(1, savedata);");
code("for(x=12; > yGetDatabaseCount(\"p\"+p+\"relics\")) {");
code("trQuestVarSet(\"p\"+p+\"relic\"+x, 0);");
code("}");
code("for(x=yGetDatabaseCount(\"p\"+p+\"relics\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"relics\");");
code("if (yGetVar(\"p\"+p+\"relics\", \"type\") <= NORMAL_RELICS) {");
code("trQuestVarSet(\"p\"+p+\"relic\"+x, yGetVar(\"p\"+p+\"relics\", \"type\"));");
code("} else if (yGetVar(\"p\"+p+\"relics\", \"type\") == RELIC_NICKONHAWK_GOGGLES) {");
code("trQuestVarSet(\"p\"+p+\"nickQuestProgress\", 6);");
code("} else {");
code("trQuestVarSet(\"p\"+p+\"relic\"+x, 0);");
code("}");
code("}");
code("savedata = 0;");
code("currentdata = 0;");
code("for(x=6; > 0) {");
code("savedata = savedata * 31 + (1*trQuestVarGet(\"p\"+p+\"relic\"+x));");
code("currentdata = currentdata * 31 + (1*trQuestVarGet(\"p\"+p+\"relic\"+(x+6)));");
code("}");
code("trSetCurrentScenarioUserData(2, savedata);");
code("trSetCurrentScenarioUserData(3, currentdata);");

code("for(y=0; < 4) {");
code("savedata = 0;");
code("for(x=8; >0) {");
code("currentdata = 1*xsMin(12, 1*trQuestVarGet(\"ownedRelics\"+(x+8*y)));");
code("savedata = savedata * 13 + currentdata;");
code("}");
code("trSetCurrentScenarioUserData(12 + y, savedata);");
code("}");

code("savedata = 1*xsMin(10, 1*trQuestVarGet(\"dreamGogglesCount\"));");
code("for(x=3; >=0) {");
code("currentdata = 1*xsMin(99, 1*trQuestVarGet(\"gemstone\"+x));");
code("savedata = savedata * 100 + currentdata;");
code("}");
code("trSetCurrentScenarioUserData(9, savedata);");

code("if (Multiplayer == false) {");
code("for(y=0; <2) {");
code("savedata = 0;");
code("for(x=8; >0) {");
code("currentdata = 1*xsMin(10, 1*trQuestVarGet(\"class\"+(x+8*y)+\"level\"));");
code("savedata = savedata * 11 + currentdata;");
code("}");
code("trSetCurrentScenarioUserData(10 + y, savedata);");
code("}");
code("}");

code("savedata = 0;");
code("currentdata = xsMin(10, trQuestVarGet(\"chestCount\"));");
code("savedata = savedata * 11 + currentdata;");
code("currentdata = xsMin(9, trQuestVarGet(\"zenoQuiz\"));");
code("savedata = savedata * 10 + currentdata;");
code("currentdata = xsMin(10, trQuestVarGet(\"questCount\"));");
code("savedata = savedata * 11 + currentdata;");
code("currentdata = xsMin(100, trQuestVarGet(\"giantKills\"));");
code("savedata = savedata * 101 + currentdata;");
code("currentdata = xsMin(5, trQuestVarGet(\"bossKills\"));");
code("savedata = savedata * 6 + currentdata;");
code("currentdata = trQuestVarGet(\"playerHasHosted\");");
code("savedata = savedata * 2 + currentdata;");
code("trSetCurrentScenarioUserData(8, savedata);");

code("savedata = 0;");
code("for(x=12; >=0) {");
code("currentdata = trQuestVarGet(\"boonUnlocked\"+x);");
code("savedata = savedata * 2 + currentdata;");
code("}");
code("trSetCurrentScenarioUserData(7, savedata);");

code("savedata = 0;");
code("for(x=5; >0) {");
code("currentdata = trQuestVarGet(\"p\"+p+\"runestone\"+x);");
code("savedata = savedata * 2 + currentdata;");
code("}");
code("currentdata = trQuestVarGet(\"yeebHit\");");
code("savedata = savedata * 2 + currentdata;");
code("currentdata = trQuestVarGet(\"p\"+p+\"nickEquipped\");");
code("savedata = savedata * 2 + currentdata;");
code("currentdata = trQuestVarGet(\"p\"+p+\"nickQuestProgress\");");
code("savedata = savedata * 7 + currentdata;");
code("trSetCurrentScenarioUserData(4, savedata);");
code("}");

code("void showLoadProgress() {");
code("trSoundPlayFN(\"default\",\"1\",-1,\"Loading Data:\"+100 * loadProgress / 20,\"icons\god power reverse time icons 64\");");
code("}");

code("rule data_load_00");
code("highFrequency");
code("inactive");
code("{");
code("int proto = 0;");
code("if (trGetScenarioUserData(VERSION_NUMBER) == 0) {");
code("for(y=0; < 4) {");
code("savedata = trGetScenarioUserData(12 + y);");
code("if (savedata < 0) {");
code("savedata = 0;");
code("}");
code("for(x=1; < 9) {");
code("trQuestVarSet(\"ownedRelics\"+(x+8*y), iModulo(11, savedata));");
code("savedata = savedata / 11;");
code("}");
code("}");
code("} else {");
code("for(y=0; < 4) {");
code("savedata = trGetScenarioUserData(12 + y);");
code("if (savedata < 0) {");
code("savedata = 0;");
code("}");
code("for(x=1; < 9) {");
code("trQuestVarSet(\"ownedRelics\"+(x+8*y), iModulo(13, savedata));");
code("savedata = savedata / 13;");
code("}");
code("}");
code("}");

code("savedata = trGetScenarioUserData(9);");
code("if (savedata < 0) {");
code("savedata = 0;");
code("}");
code("for(x=0; <3) {");
code("trQuestVarSet(\"gemstone\"+x, iModulo(100, savedata));");
code("savedata = savedata / 100;");
code("}");
code("trQuestVarSet(\"dreamGogglesCount\", iModulo(11, savedata));");
code("savedata = savedata / 11;");
code("savedata = trGetScenarioUserData(8);");
code("if (savedata < 0) {");
code("savedata = 0;");
code("}");
code("trQuestVarSet(\"playerHasHosted\", iModulo(2, savedata));");
code("savedata = savedata / 2;");
code("trQuestVarSet(\"bossKills\", iModulo(6, savedata));");
code("savedata = savedata / 6;");
code("trQuestVarSet(\"giantKills\", iModulo(101, savedata));");
code("savedata = savedata / 101;");
code("trQuestVarSet(\"questCount\", iModulo(11, savedata));");
code("savedata = savedata / 11;");
code("trQuestVarSet(\"zenoQuiz\", iModulo(10, savedata));");
code("savedata = savedata / 10;");
code("trQuestVarSet(\"chestCount\", iModulo(11, savedata));");
code("savedata = savedata / 11;");

code("if ((trCurrentPlayer() == 1) && Multiplayer) {");
code("trQuestVarSet(\"playerHasHosted\", 1);");
code("}");

code("savedata = trGetScenarioUserData(7);");
code("if (savedata < 0) {");
code("savedata = 0;");
code("}");
code("for(x=0; <= 12) {");
code("trQuestVarSet(\"boonUnlocked\"+x, iModulo(2, savedata));");
code("savedata = savedata / 2;");
code("}");

code("if (Multiplayer) {");

code("int posX = 10;");

code("for(p=1; < ENEMY_PLAYER) {");
code("trModifyProtounit(\"Swordsman Hero\", p, 6, -100);");
code("trModifyProtounit(\"Swordsman Hero\", p, 16, 9999999999999999999.0);");
code("trModifyProtounit(\"Swordsman Hero\", p, 17, 9999999999999999999.0);");
code("trModifyProtounit(\"Swordsman Hero\", p, 18, 9999999999999999999.0);");
code("trModifyProtounit(\"Swordsman Hero\", p, 19, 9999999999999999999.0);");
code("trModifyProtounit(\"Swordsman Hero\", p, 16, -9999999999999999999.0);");
code("trModifyProtounit(\"Swordsman Hero\", p, 17, -9999999999999999999.0);");
code("trModifyProtounit(\"Swordsman Hero\", p, 18, -9999999999999999999.0);");
code("trModifyProtounit(\"Swordsman Hero\", p, 19, -9999999999999999999.0);");
code("trArmyDispatch(\"\"+p+\",0\",\"Swordsman\", 32, posX,0,10,0,true);");
code("posX = posX + 10;");
code("}");

code("trBlockAllSounds(true);");
code("xsEnableRule(\"data_load_01_ready\");");
code("} else {");
code("trForbidProtounit(1, \"Swordsman Hero\");");

code("savedata = trGetScenarioUserData(0);");
code("if (savedata < 0) {");
code("savedata = 0;");
code("}");
code("trQuestVarSet(\"p1progress\", iModulo(10, savedata));");
code("savedata = savedata / 10;");
code("trQuestVarSet(\"p1level\", iModulo(10, savedata));");
code("savedata = savedata / 10;");
code("trQuestVarSet(\"p1godBoon\", iModulo(13, savedata));");
code("savedata = savedata / 13;");
code("trQuestVarSet(\"p1class\", iModulo(100, savedata));");

code("savedata = trGetScenarioUserData(1);");
code("if (savedata < 0) {");
code("savedata = 0;");
code("}");
code("trQuestVarSet(\"p1gold\", savedata);");
code("trQuestVarSet(\"p1startinggold\", savedata);");

code("for(y=0; <2) {");
code("savedata = trGetScenarioUserData(2 + y);");
code("if (savedata < 0) {");
code("savedata = 0;");
code("}");
code("for(x=1; <7) {");
code("trQuestVarSet(\"p1relic\"+(x+6*y), iModulo(31, savedata));");
code("savedata = savedata / 31;");
code("}");
code("}");

code("for(y=0; <2) {");
code("savedata = trGetScenarioUserData(10 + y);");
code("if (savedata < 0) {");
code("savedata = 0;");
code("}");
code("for(x=1; <9) {");
code("trQuestVarSet(\"class\"+(x+8*y)+\"level\", iModulo(11, savedata));");
code("savedata = savedata / 11;");
code("}");
code("}");

code("savedata = trGetScenarioUserData(4);");
code("if (savedata < 0) {");
code("savedata = 0;");
code("}");
code("trQuestVarSet(\"p1nickQuestProgress\", iModulo(7, savedata));");
code("savedata = savedata / 7;");
code("trQuestVarSet(\"p1nickEquipped\", iModulo(2, savedata));");
code("savedata = savedata / 2;");
code("trQuestVarSet(\"p1yeebHit\", iModulo(2, savedata));");
code("trQuestVarSet(\"yeebHit\", trQuestVarGet(\"p1yeebHit\"));");
code("savedata = savedata / 2;");
code("for(x=5; >0) {");
code("trQuestVarSet(\"p1runestone\"+x, iModulo(2, savedata));");
code("savedata = savedata / 2;");
code("}");

code("xsEnableRule(\"singleplayer_init\");");
code("}");
code("trQuestVarSet(\"enemyVictoryMarker\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Victory Marker\",1,1,0,1,0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(ENEMY_PLAYER);");
code("xsDisableSelf();");
code("}");

code("rule data_load_01_ready");
code("highFrequency");
code("inactive");
code("{");
code("int swordsmen = 0;");
code("int total = 32 * (cNumberPlayers - 2);");
code("for(p=1; < ENEMY_PLAYER) {");
code("swordsmen = swordsmen + trPlayerUnitCountSpecific(p, \"Swordsman\");");
code("}");
code("if (swordsmen == total) {");
code("savedata = trGetScenarioUserData(0);");
code("if (savedata < 0) {");
code("savedata = 0;");
code("}");
code("currentdata = iModulo(10, savedata);");
code("savedata = savedata / 10;");

code("xsEnableRule(\"data_load_01_load_data\");");
code("xsEnableRule(\"data_load_02_detect_data\");");
code("xsEnableRule(\"data_load_emergency_exit\");");
code("xsDisableSelf();");
code("}");
code("}");

code("rule data_load_01_load_data");
code("highFrequency");
code("inactive");
code("{");
code("trLetterBox(false);");
code("trBlockAllSounds(true);");
code("if (currentdata >= 32) {");
code("trSoundPlayFN(\"cantdothat.wav\",\"1\",-1,\"Invalid code at \" + loadProgress + \"!\",\"\");");
code("}");
code("trUnitSelectClear();");
code("trUnitSelectByID(currentdata + 32 * (trCurrentPlayer() - 1));");
code("for(i=32; >0) {");
code("if (trUnitIsSelected() == false) {");
code("uiFindType(\"Swordsman\");");
code("} else {");
code("break;");
code("}");
code("}");
code("uiTransformSelectedUnit(\"Swordsman Hero\");");
code("trForceNonCinematicModels(true);");

code("trLetterBox(true);");

code("showLoadProgress();");
code("xsDisableSelf();");
code("}");

code("rule data_load_02_detect_data");
code("highFrequency");
code("inactive");
code("{");
code("int swordsmen = 0;");
code("for(p=1; < ENEMY_PLAYER) {");
code("swordsmen = swordsmen + trPlayerUnitCountSpecific(p, \"Swordsman Hero\");");
code("}");
code("if (swordsmen == cNumberPlayers - 2) {");
code("for(p=1; < ENEMY_PLAYER) {");
code("swordsmen = 32 * (p - 1);");
code("for(x=0; < 32) {");
code("if (kbGetUnitBaseTypeID(x + swordsmen) == kbGetProtoUnitID(\"Swordsman Hero\")) {");
code("if (loadProgress == 0) {");
code("trQuestVarSet(\"p\"+p+\"progress\", x);");
code("} else if (loadProgress == 1) {");
code("trQuestVarSet(\"p\"+p+\"level\", x);");
code("} else if (loadProgress == 2) {");
code("trQuestVarSet(\"p\"+p+\"godBoon\", x);");
code("} else if (loadProgress == 3) {");
code("trQuestVarSet(\"p\"+p+\"class\", x);");
code("} else if (loadProgress == 4) {");
code("trQuestVarSet(\"p\"+p+\"gold\", x);");
code("} else if (loadProgress == 5) {");
code("trQuestVarSet(\"p\"+p+\"gold\", trQuestVarGet(\"p\"+p+\"gold\") + 32 * x);");
code("} else if (loadProgress < 18) {");
code("trQuestVarSet(\"p\"+p+\"relic\"+(loadProgress - 5), x);");
code("} else if (loadProgress == 18) {");
code("currentdata = x;");
code("trQuestVarSet(\"p\"+p+\"nickQuestProgress\", iModulo(7, currentdata));");
code("currentdata = currentdata / 7;");
code("trQuestVarSet(\"p\"+p+\"nickEquipped\", iModulo(2, currentdata));");
code("currentdata = currentdata / 2;");
code("trQuestVarSet(\"p\"+p+\"yeebHit\", iModulo(2, currentdata));");
code("} else if (loadProgress == 19) {");
code("currentdata = x;");
code("for(i=5; >0) {");
code("trQuestVarSet(\"p\"+p+\"runestone\"+i, iModulo(2, currentdata));");
code("currentdata = currentdata / 2;");
code("}");
code("}");
code("trUnitSelectClear();");
code("trUnitSelectByID(x + swordsmen);");
code("trMutateSelected(kbGetProtoUnitID(\"Swordsman\"));");
code("break;");
code("}");
code("}");
code("}");
code("loadProgress = loadProgress + 1;");
code("showLoadProgress();");
code("if (loadProgress == 20) {");
code("xsDisableSelf();");
code("xsEnableRule(\"data_load_03_done\");");
code("} else {");
code("xsEnableRule(\"data_load_01_load_data\");");
code("switch(loadProgress)");
code("{");
code("case 4:");
code("{");
code("savedata = trGetScenarioUserData(1);");
code("if (savedata < 0) {");
code("savedata = 0;");
code("} else if (savedata > 1000) {");
code("savedata = 1000;");
code("}");
code("}");
code("case 6:");
code("{");
code("savedata = trGetScenarioUserData(2);");
code("if (savedata < 0) {");
code("savedata = 0;");
code("}");
code("}");
code("case 12:");
code("{");
code("savedata = trGetScenarioUserData(3);");
code("if (savedata < 0) {");
code("savedata = 0;");
code("}");
code("}");
code("case 18:");
code("{");
code("savedata = trGetScenarioUserData(4);");
code("if (savedata < 0) {");
code("savedata = 0;");
code("}");
code("}");
code("}");
code("if (loadProgress == 18) {");
code("currentdata = iModulo(28, savedata);");
code("savedata = savedata / 28;");
code("} else if (loadProgress >= 6 && trGetScenarioUserData(VERSION_NUMBER) > 0) {");
code("currentdata = iModulo(31, savedata);");
code("savedata = savedata / 31;");
code("} else if (loadProgress >=3) {");
code("if ((trGetScenarioUserData(VERSION_NUMBER) == 0) && (loadProgress == 3)) {");
code("currentdata = savedata;");
code("} else {");
code("currentdata = iModulo(32, savedata);");
code("savedata = savedata / 32;");
code("}");
code("} else if (loadProgress == 2) {");
code("if (trGetScenarioUserData(VERSION_NUMBER) > 0) {");
code("currentdata = iModulo(13, savedata);");
code("savedata = savedata / 13;");
code("} else {");
code("currentdata = 0;");
code("}");
code("} else {");
code("currentdata = iModulo(10, savedata);");
code("savedata = savedata / 10;");
code("}");
code("}");
code("}");
code("}");


code("rule data_load_03_done");
code("highFrequency");
code("inactive");
code("{");
code("for(x=0; < trQuestVarGet(\"enemyVictoryMarker\")) {");
code("trUnitSelectClear();");
code("trUnitSelectByID(x);");
code("trUnitDestroy();");
code("}");
code("int class = 0;");
code("int proto = 0;");
code("for(p=1; < ENEMY_PLAYER) {");
code("trForbidProtounit(p, \"Swordsman Hero\");");
code("trQuestVarSet(\"p\"+p+\"victoryMarker\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\",\"Victory Marker\",1,1,0,1,0,true);");
code("class = trQuestVarGet(\"p\"+p+\"class\");");
code("proto = trQuestVarGet(\"class\"+class+\"proto\");");
code("trModifyProtounit(kbGetProtoUnitName(proto), p, 5, trQuestVarGet(\"p\"+p+\"level\"));");
code("if (trQuestVarGet(\"p\"+p+\"godBoon\") == BOON_TWO_RELICS) {");
code("trModifyProtounit(kbGetProtoUnitName(proto), p, 5, 2);");
code("} else if (trQuestVarGet(\"p\"+p+\"godBoon\") == BOON_DOUBLE_FAVOR) {");
code("trSetCivAndCulture(p, 0, 0);");
code("}");
code("if (trQuestVarGet(\"p\"+p+\"class\") == 0) {");
code("trQuestVarSet(\"newPlayers\", 1);");
code("trQuestVarSet(\"p\"+p+\"noob\", 1);");
code("}");
code("if (trQuestVarGet(\"p\"+p+\"nickQuestProgress\") == 0) {");
code("trQuestVarSet(\"nickQuestSpawn\", 1);");
code("}");
code("if (trQuestVarGet(\"p\"+p+\"yeebHit\") == 1) {");
code("trQuestVarSet(\"yeebBossFight\", p);");
code("}");
code("trPlayerGrantResources(p, \"Gold\", trQuestVarGet(\"p\"+p+\"gold\"));");
code("trQuestVarSet(\"p\"+p+\"startingGold\", trQuestVarGet(\"p\"+p+\"gold\"));");
code("}");
code("if (trQuestVarGet(\"p\"+trCurrentPlayer()+\"yeebHit\") == 1) {");
code("trQuestVarSet(\"yeebHit\", 1);");
code("}");
code("trUnblockAllSounds();");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"Done!\",\"icons\god power reverse time icons 64\");");
code("xsDisableSelf();");
code("xsEnableRule(\"Z_cin_00\");");
code("}");

code("rule data_load_emergency_exit");
code("highFrequency");
code("inactive");
code("{");
code("if (trTime() > cActivationTime + 8) {");
code("xsDisableSelf();");
code("if (loadProgress == 0) {");
code("int x = 0;");
code("for(p=1; < ENEMY_PLAYER) {");
code("x = x + trPlayerUnitCountSpecific(p, \"Swordsman Hero\");");
code("}");
code("if (x <= 1) {");
code("trSoundPlayFN(\"default\",\"1\",-1,");
code("\"Zenophobia: Hmm, looks like AoM has sent everyone into singleplayer. Returning you to main menu now.\",");
code("\"icons\infantry g hoplite icon 64\");");
code("if (trCurrentPlayer() == 1) {");
code("xsEnableRule(\"data_load_emergency_exit_01\");");
code("} else {");
code("xsEnableRule(\"data_load_emergency_exit_02\");");
code("}");
code("}");
code("}");
code("}");
code("}");

code("rule data_load_emergency_exit_01");
code("highFrequency");
code("inactive");
code("{");
code("if (trTime() > cActivationTime + 5) {");
code("xsDisableSelf();");
code("xsEnableRule(\"data_load_emergency_exit_02\");");
code("trSoundPlayFN(\"default\",\"1\",-1,");
code("\"Zenophobia:Host, make sure all spots are filled and the last player is a CPU.\",");
code("\"icons\infantry g hoplite icon 64\");");
code("}");
code("}");

code("rule data_load_emergency_exit_02");
code("highFrequency");
code("inactive");
code("{");
code("if (trTime() > cActivationTime + 7) {");
code("xsDisableSelf();");
code("trModeEnter(\"Pregame\");");
code("}");
code("}");
code("string classIcon(int class = 0) {");
code("string icon = \"icons\infantry g hoplite icon 64\";");
code("switch(class)");
code("{");
code("case MOONBLADE:");
code("{");
code("icon = \"icons\hero g theseus icon 64\";");
code("}");
code("case SUNBOW:");
code("{");
code("icon = \"icons\hero g hyppolyta icon 64\";");
code("}");
code("case THUNDERRIDER:");
code("{");
code("icon = \"icons\hero g atalanta icon 64\";");
code("}");
code("case FIREKNIGHT:");
code("{");
code("icon = \"icons\cavalry x lancer hero icons 64\";");
code("}");
code("case FROSTKNIGHT:");
code("{");
code("icon = \"icons\hero g achilles icon 64\";");
code("}");
code("case BLASTMAGE:");
code("{");
code("icon = \"icons\special e priest icon 64\";");
code("}");
code("case STORMCUTTER:");
code("{");
code("icon = \"icons\archer x arcus hero icons 64\";");
code("}");
code("case ALCHEMIST:");
code("{");
code("icon = \"icons\special e pharaoh icon 64\";");
code("}");
code("case SPELLSTEALER:");
code("{");
code("icon = \"icons\infantry x murmillo hero icons 64\";");
code("}");
code("case COMMANDO:");
code("{");
code("icon = \"icons\cavalry x jav cav hero icons 64\";");
code("}");
code("case THRONESHIELD:");
code("{");
code("icon = \"icons\infantry x protector hero icons 64\";");
code("}");
code("case SAVIOR:");
code("{");
code("icon = \"icons\hero g bellerophon icon 64\";");
code("}");
code("case GARDENER:");
code("{");
code("icon = \"icons\hero g chiron icon 64\";");
code("}");
code("case NIGHTRIDER:");
code("{");
code("icon = \"icons\hero g achilles icon 64\";");
code("}");
code("case STARSEER:");
code("{");
code("icon = \"icons\infantry x oracle hero icons 64\";");
code("}");
code("case SPARKWITCH:");
code("{");
code("icon = \"icons\special g circe icon 64\";");
code("}");
code("}");
code("return(icon);");
code("}");

code("int displayNextTooltip(int class = 0, int tooltip = 0) {");
code("string icon = classIcon(class);");
code("string msg = \"\";");
code("int next = tooltip + 1;");
code("if (class > 16) {");
code("next = 0;");
code("int revealed = ((class - 17) / 4) * 2;");
code("icon = \"icons\building outpost icon 64\";");
code("msg = \"This class will be revealed when you clear Stage \" + revealed;");
code("}");
code("switch(class)");
code("{");
code("case MOONBLADE:");
code("{");
code("switch(tooltip)");
code("{");
code("case 0:");
code("{");
code("msg = \"Moonblade: A jack-of-all-trades good for beginners.\";");
code("}");
code("case 1:");
code("{");
code("msg = \"Passive: Each time you attack, restore health to all allies. Heal = 1 percent of your max health\";");
code("}");
code("case 2:");
code("{");
code("msg = \"Special Attack (7 attacks): Summon a wolf companion that fights for you.\";");
code("if (Multiplayer == false) {");
code("next = 9;");
code("}");
code("}");
code("case 3:");
code("{");
code("icon = \"icons\god power eclipse icon 64\";");
code("msg = \"(Q) Moonbeam: Create a circle that damages and silences enemies in it for several seconds.\";");
code("if (Multiplayer == false) {");
code("next = 6;");
code("}");
code("}");
code("case 4:");
code("{");
code("icon = \"icons\improvement swine array icon 64\";");
code("msg = \"(W) Crescent Strikes: Your next 3 attacks deal bonus damage and stun.\";");
code("if (Multiplayer == false) {");
code("next = 8;");
code("}");
code("}");
code("case 5:");
code("{");
code("icon = \"icons\improvement rheias gift icons 64\";");
code("msg = \"(E) Protection (Toggle): Grant all allies invulnerability. Costs 12 favor per second.\";");
code("next = 0;");
code("}");
code("case 6:");
code("{");
code("icon = \"icons\god power eclipse icon 64\";");
code("msg = \"Damage increases for each ally in the circle.\";");
code("}");
code("case 7:");
code("{");
code("icon = \"icons\god power eclipse icon 64\";");
code("msg = \"Cooldown: 18 | Duration: 6 | Radius: 6 | Damage: 20 + 10 per ally\";");
code("next = 4;");
code("}");
code("case 8:");
code("{");
code("icon = \"icons\improvement swine array icon 64\";");
code("msg = \"Cooldown: 12 | Damage: 50 | Lose one stack every 5 seconds if not used\";");
code("next = 5;");
code("}");
code("case 9:");
code("{");
code("msg = \"It has a fifth of your attack and health. Decay: 5 percent health per second\";");
code("next = 3;");
code("}");
code("}");
code("}");
code("case SUNBOW:");
code("{");
code("switch(tooltip)");
code("{");
code("case 0:");
code("{");
code("msg = \"Sunbow: A ranged healer who can also deal good damage.\";");
code("}");
code("case 1:");
code("{");
code("msg = \"Passive: You can revive allies even when enemies are nearby.\";");
code("}");
code("case 2:");
code("{");
code("icon = \"icons\god power restoration icon 64\";");
code("msg = \"(Q) Sunlight: Create a circle that heals allies for several seconds.\";");
code("if (Multiplayer == false) {");
code("next = 5;");
code("}");
code("}");
code("case 3:");
code("{");
code("icon = \"icons\improvement sun ray icon 64\";");
code("msg = \"(W) Healing Rays: For a short duration, your attacks fire rays that heal allies.\";");
code("if (Multiplayer == false) {");
code("next = 6;");
code("}");
code("}");
code("case 4:");
code("{");
code("icon = \"icons\improvement flames of typhon icon\";");
code("msg = \"(E) Searing Light (Toggle): Your heals also deal damage to enemies. Costs 5 favor per second.\";");
code("next = 0;");
code("}");
code("case 5:");
code("{");
code("icon = \"icons\god power restoration icon 64\";");
code("msg = \"Cooldown: 18 | Duration: 6 | Radius: 6 | Heal: 60\";");
code("next = 3;");
code("}");
code("case 6:");
code("{");
code("icon = \"icons\improvement sun ray icon 64\";");
code("msg = \"Cooldown: 12 | Duration: 6 | Heal: 100 | Fire rate + 0.5x Projectiles\";");
code("next = 4;");
code("}");
code("}");
code("}");
code("case THUNDERRIDER:");
code("{");
code("switch(tooltip)");
code("{");
code("case 0:");
code("{");
code("msg = \"Thunderstepper: A speedy assassin that scales off of speed.\";");
code("}");
code("case 1:");
code("{");
code("msg = \"Passive: You gain bonus attack by continuously moving. This bonus decays by 5 percent each second.\";");
code("}");
code("case 2:");
code("{");
code("msg = \"Bonus: 0.1 x Attack for every meter traveled | Decay doubles when standing still\";");
code("}");
code("case 3:");
code("{");
code("msg = \"Special Attack (5 attacks): Your attack chains to nearby enemies, damaging all of them.\";");
code("}");
code("case 4:");
code("{");
code("icon = \"icons\god power bolt icon 64\";");
code("msg = \"(Q) Blitz: Teleport towards your cursor, stunning and damaging enemies hit.\";");
code("}");
code("case 5:");
code("{");
code("icon = \"icons\god power bolt icon 64\";");
code("msg = \"If Ride the Lightning is active, this changes your direction of travel instead.\";");
code("}");
code("case 6:");
code("{");
code("icon = \"icons\god power bolt icon 64\";");
code("msg = \"Cooldown: 8 | Range: 12 | Damage: 50\";");
code("}");
code("case 7:");
code("{");
code("icon = \"icons\improvement heart of the titans icons 64\";");
code("msg = \"(W) Recharge: Consume all your bonus attack and convert it into healing and favor for yourself.\";");
code("}");
code("case 8:");
code("{");
code("icon = \"icons\improvement heart of the titans icons 64\";");
code("msg = \"Cooldown: 22 | Heal: 1x Attack | Favor Regen: 0.1x Attack\";");
code("}");
code("case 9:");
code("{");
code("icon = \"icons\god power implode icons 64\";");
code("msg = \"(E) Ride the Lightning: Become a fast-moving ball of lightning that bounces off walls\";");
code("}");
code("case 10:");
code("{");
code("icon = \"icons\god power implode icons 64\";");
code("msg = \"Damage enemies that you pass through. Damage increases with each bounce.\";");
code("}");
code("case 11:");
code("{");
code("icon = \"icons\god power implode icons 64\";");
code("msg = \"Cost: 8 favor per second | Radius: 5 | Damage: 100 + 50 per bounce\";");
code("next = 0;");
code("}");
code("}");
code("}");
code("case FIREKNIGHT:");
code("{");
code("switch(tooltip)");
code("{");
code("case 0:");
code("{");
code("msg = \"Fire Knight: A character that charges in and sacrifices health for damage.\";");
code("}");
code("case 1:");
code("{");
code("msg = \"Passive: Gain Lifesteal equal to your percentage of missing health.\";");
code("}");
code("case 2:");
code("{");
code("msg = \"Special Attack (5 attacks): Deal 50 damage to nearby enemies and yourself.\";");
code("}");
code("case 3:");
code("{");
code("icon = \"icons\special e phoenix icon 64\";");
code("msg = \"(Q) Flaming Impact: Dash to the target location, damaging enemies and dragging them with you\";");
code("}");
code("case 4:");
code("{");
code("icon = \"icons\special e phoenix icon 64\";");
code("msg = \"Cooldown: 12 | Radius: 4 | Duration: 2 | Damage: 90\";");
code("}");
code("case 5:");
code("{");
code("icon = \"icons\god power chaos icons 64\";");
code("msg = \"(W) Overheat: Set yourself on fire, damaging yourself each second.\";");
code("}");
code("case 6:");
code("{");
code("icon = \"icons\god power chaos icons 64\";");
code("msg = \"During this time, reflect all damage you receive onto nearby enemies.\";");
code("}");
code("case 7:");
code("{");
code("icon = \"icons\god power chaos icons 64\";");
code("msg = \"Cooldown: 18 | Radius: 4 | Duration: 5 | Damage: 40 per second\";");
code("}");
code("case 8:");
code("{");
code("icon = \"icons\god power firestorm icon 64\";");
code("msg = \"(E) Inferno: Unleash a ring of flames that damages enemies and heals allies for several seconds\";");
code("}");
code("case 9:");
code("{");
code("icon = \"icons\god power firestorm icon 64\";");
code("msg = \"Cost: 70 | Radius: 12 | Duration: 8 | Damage: 120 per second | Heal: 60 per second\";");
code("next = 0;");
code("}");
code("}");
code("}");
code("case FROSTKNIGHT:");
code("{");
code("switch(tooltip)");
code("{");
code("case 0:");
code("{");
code("msg = \"Frost Knight: A sturdy fighter that brings a lot of crowd control.\";");
code("}");
code("case 1:");
code("{");
code("msg = \"Passive: Each time you stun an enemy, restore 8 pecent of your health.\";");
code("}");
code("case 2:");
code("{");
code("msg = \"Special Attack (5 attacks): Summon an icicle on your target, damaging and stunning it.\";");
code("}");
code("case 3:");
code("{");
code("icon = \"icons\improvement bite of the shark icons 64\";");
code("msg = \"(Q) Icicle: Summon an icicle at the target location, dealing damage in a small area.\";");
code("}");
code("case 4:");
code("{");
code("icon = \"icons\improvement bite of the shark icons 64\";");
code("msg = \"Stuns the enemy closest to the center of the icicle.\";");
code("}");
code("case 5:");
code("{");
code("icon = \"icons\improvement bite of the shark icons 64\";");
code("msg = \"Cooldown: 4 | Radius: 1.5 | Duration: 6 | Damage: 80\";");
code("}");
code("case 6:");
code("{");
code("icon = \"icons\god power frost icon 64\";");
code("msg = \"(W) Blizzard: For a short duration, you and your summoned allies release frost, dealing damage.\";");
code("}");
code("case 7:");
code("{");
code("icon = \"icons\god power frost icon 64\";");
code("msg = \"Cooldown: 16 | Duration: 8 | Radius: 5 | Damage: 30 per second\";");
code("}");
code("case 8:");
code("{");
code("icon = \"icons\special n frost giant icon 64\";");
code("msg = \"(E) Frost Giant: Summon a Frost Giant familiar to fight for you. It copies your attack and health.\";");
code("}");
code("case 9:");
code("{");
code("icon = \"icons\special n frost giant icon 64\";");
code("msg = \"Cost: 60 | Decay: 3 percent health per second.\";");
code("next = 0;");
code("}");
code("}");
code("}");
code("case BLASTMAGE:");
code("{");
code("switch(tooltip)");
code("{");
code("case 0:");
code("{");
code("msg = \"Blastmage: A ranged fighter who commands powerful magic.\";");
code("}");
code("case 1:");
code("{");
code("msg = \"Passive: You cannot gain Projectiles. After you cast a spell, your next attack is empowered.\";");
code("}");
code("case 2:");
code("{");
code("msg = \"It will grant you 3 favor, deal damage in an area, and create a Mage Fire.\";");
code("}");
code("case 3:");
code("{");
code("msg = \"You can store up to three empowered attacks.\";");
code("}");
code("case 4:");
code("{");
code("msg = \"Damage: 60 | Radius: 4 (Increased by Projectiles)\";");
code("}");
code("case 5:");
code("{");
code("icon = \"sfx a implode lighting flair\";");
code("msg = \"Mage Fires remain on the ground for several seconds, damaging nearby enemies.\";");
code("}");
code("case 6:");
code("{");
code("icon = \"sfx a implode lighting flair\";");
code("msg = \"Duration: 10 | Radius: 4 | Damage: 10 per second\";");
code("}");
code("case 7:");
code("{");
code("icon = \"icons\god power meteor icon 64\";");
code("msg = \"(Q) Starfall: A star falls from the sky and damages enemies in an area. This creates a Mage Fire.\";");
code("}");
code("case 8:");
code("{");
code("icon = \"icons\god power meteor icon 64\";");
code("msg = \"Enemies hit by the blast will have their magic resist reduced permanently.\";");
code("}");
code("case 9:");
code("{");
code("icon = \"icons\god power meteor icon 64\";");
code("msg = \"Cooldown: 8 | Radius: 5 | Damage: 120 | Resist Reduction: 0.1\";");
code("}");
code("case 10:");
code("{");
code("icon = \"icons\god power vortex icons 64\";");
code("msg = \"(W) Warp: Teleport a short distance towards your cursor and leave behind a Mage Fire.\";");
code("}");
code("case 11:");
code("{");
code("icon = \"icons\god power vortex icons 64\";");
code("msg = \"Cooldown: 6 | Range: 8\";");
code("}");
code("case 12:");
code("{");
code("icon = \"icons\building tower mirror icons 64\";");
code("msg = \"(E) Solar Flare: Fire a laser through each of your Mage Fires, dealing damage to enemies.\";");
code("}");
code("case 13:");
code("{");
code("icon = \"icons\building tower mirror icons 64\";");
code("msg = \"Cost: 40 | Range: 40 | Damage: 90\";");
code("next = 0;");
code("}");
code("}");
code("}");
code("case STORMCUTTER:");
code("{");
code("switch(tooltip)");
code("{");
code("case 0:");
code("{");
code("msg = \"Stormcutter: An archer who commands the power of storms.\";");
code("}");
code("case 1:");
code("{");
code("msg = \"Passive: You deal more damage the further your target is. 10 percent for every 5 meters.\";");
code("}");
code("case 2:");
code("{");
code("icon = \"icons\building archery range icon 64\";");
code("msg = \"(Q) Shock Arrow: Fire an arrow at your cursor that damages and launches the first enemy hit.\";");
code("}");
code("case 3:");
code("{");
code("icon = \"icons\building archery range icon 64\";");
code("msg = \"If they are launched into a wall, they take the same amount of damage again.\";");
code("}");
code("case 4:");
code("{");
code("icon = \"icons\building archery range icon 64\";");
code("msg = \"Cooldown: 10 | Range: 30 | Damage: 100\";");
code("}");
code("case 5:");
code("{");
code("icon = \"icons\god power shifting sand icon 64\";");
code("msg = \"(W) Disengage: Stun nearby enemies and then teleport a short distance towards your cursor.\";");
code("}");
code("case 6:");
code("{");
code("icon = \"icons\god power shifting sand icon 64\";");
code("msg = \"Cooldown: 8 | Stun Radius: 4 | Teleport Range: 12\";");
code("}");
code("case 7:");
code("{");
code("icon = \"icons\god power lightning icon 64\";");
code("msg = \"(E) Rain of Lightning: Your attacks call lightning to strike your foes, dealing damage in an area\";");
code("}");
code("case 8:");
code("{");
code("icon = \"icons\god power lightning icon 64\";");
code("msg = \"The damage is multiplied by your spell power and it ignores enemy armor.\";");
code("}");
code("case 9:");
code("{");
code("icon = \"icons\god power lightning icon 64\";");
code("msg = \"Cost: 50 | Duration: 10 | Radius: 5 | Damage: Attack x Spell Power | Fire rate + 0.3x Projectiles\";");
code("next = 0;");
code("}");
code("}");
code("}");
code("case ALCHEMIST:");
code("{");
code("switch(tooltip)");
code("{");
code("case 0:");
code("{");
code("msg = \"Alchemist: A versatile support with the right tool for every situation.\";");
code("}");
code("case 1:");
code("{");
code("msg = \"Passive: Every third attack, you throw a potion with a special effect.\";");
code("}");
code("case 2:");
code("{");
code("icon = \"icons\god power frost icon 64\";");
code("msg = \"Freeze: The potion stuns your target. Additional projectiles will stun nearby enemies.\";");
code("}");
code("case 3:");
code("{");
code("icon = \"icons\god power pestilence icon 64\";");
code("msg = \"Poison: The potion spills poison on the ground, poisoning enemies in an area.\";");
code("}");
code("case 4:");
code("{");
code("icon = \"icons\god power pestilence icon 64\";");
code("msg = \"Radius: 4 | Duration: 12 | Damage: 12 x Projectiles\";");
code("}");
code("case 5:");
code("{");
code("icon = \"icons\god power restoration icon 64\";");
code("msg = \"Heal: When the potion is thrown, all allies restore 5 percent of their health\";");
code("}");
code("case 6:");
code("{");
code("icon = \"icons\improvement temple of healing icon 64\";");
code("msg = \"(Q) Elixir: Restore health to an ally and remove all status effects from them.\";");
code("}");
code("case 7:");
code("{");
code("icon = \"icons\improvement temple of healing icon 64\";");
code("msg = \"Cooldown: 12 | Heal: 200\";");
code("}");
code("case 8:");
code("{");
code("icon = \"icons\improvement salt amphora icon 64\";");
code("msg = \"(W) Swap Potion: Swap the type of potion you throw, cycling between the three options.\";");
code("}");
code("case 9:");
code("{");
code("icon = \"icons\god power call to arms icon\";");
code("msg = \"(E) Duplicate: Summon a perfect copy of an allied hero. It also casts spells with them.\";");
code("}");
code("case 10:");
code("{");
code("icon = \"icons\god power call to arms icon\";");
code("msg = \"Cost: 50 | Decay: 1 + 1 per second (percent max health)\";");
code("next = 0;");
code("}");
code("}");
code("}");
code("case SPELLSTEALER:");
code("{");
code("switch(tooltip)");
code("{");
code("case 0:");
code("{");
code("msg = \"Spellstealer: An assassin who reflects status effects onto enemies.\";");
code("}");
code("case 1:");
code("{");
code("msg = \"Passive: When you damage an enemy, the damage is doubled for each status effect on them.\";");
code("}");
code("case 2:");
code("{");
code("msg = \"Special Attack (6 attacks): Poison your target and nearby enemies.\";");
code("}");
code("case 3:");
code("{");
code("msg = \"Radius: 6 | Duration: 12 | Damage: 12\";");
code("}");
code("case 4:");
code("{");
code("icon = \"icons\god power barrage icon\";");
code("msg = \"(Q) Spellblades: Throw daggers in a cone that damage enemies.\";");
code("}");
code("case 5:");
code("{");
code("icon = \"icons\god power barrage icon\";");
code("msg = \"Cooldown: 9 | Damage: 0.5 x Attack x Spell Power | Knives: 5 + 2 x Projectiles\";");
code("}");
code("case 6:");
code("{");
code("icon = \"icons\god major leto icons 64\";");
code("msg = \"(W) Negation Cloak: For a short duration, you absorb status effects and spell damage that hits you.\";");
code("}");
code("case 7:");
code("{");
code("icon = \"icons\god major leto icons 64\";");
code("msg = \"During this time, spell damage will heal you instead of damaging you.\";");
code("}");
code("case 8:");
code("{");
code("icon = \"icons\god major leto icons 64\";");
code("msg = \"When this spell ends, your next spell will apply all the absorbed status effects.\";");
code("}");
code("case 9:");
code("{");
code("icon = \"icons\god major leto icons 64\";");
code("msg = \"Cooldown: 12 | Duration: 3\";");
code("}");
code("case 10:");
code("{");
code("icon = \"icons\improvement greatest of fifty icon 64\";");
code("msg = \"(E) Blade Dance: Teleport to an enemy and attack them. Applies on-attack effects and lifesteal\";");
code("}");
code("case 11:");
code("{");
code("icon = \"icons\improvement greatest of fifty icon 64\";");
code("msg = \"If the target is affected by a status effect, also attack nearby enemies with the same status\";");
code("}");
code("case 12:");
code("{");
code("icon = \"icons\improvement greatest of fifty icon 64\";");
code("msg = \"If this hits only one enemy, it costs half.\";");
code("}");
code("case 13:");
code("{");
code("icon = \"icons\improvement greatest of fifty icon 64\";");
code("msg = \"Cost: 20 | Radius: 15 | Damage: Attack x Spell Power\";");
code("next = 0;");
code("}");
code("}");
code("}");
code("case COMMANDO:");
code("{");
code("switch(tooltip)");
code("{");
code("case 0:");
code("{");
code("msg = \"Commando: A mid-ranged fighter that wields an arsenal of explosive weaponry.\";");
code("}");
code("case 1:");
code("{");
code("msg = \"Passive: You wield a shotgun that shoots piercing bullets in a cone.\";");
code("}");
code("case 2:");
code("{");
code("msg = \"Restore 1 favor when these bullets hit an enemy.\";");
code("}");
code("case 3:");
code("{");
code("msg = \"Damage per bullet: 0.6 x Attack | Bullets: 4 + Projectiles | Damage falls off with distance.\";");
code("}");
code("case 4:");
code("{");
code("icon = \"icons\improvement electrum bullets icon 64\";");
code("msg = \"(Q) Shrapnel Shot: Fire an explosive at your cursor.\";");
code("}");
code("case 5:");
code("{");
code("icon = \"icons\improvement electrum bullets icon 64\";");
code("msg = \"If it hits a wall, it explodes and releases a cone of shrapnel, dealing physical damage.\";");
code("}");
code("case 6:");
code("{");
code("icon = \"icons\improvement electrum bullets icon 64\";");
code("msg = \"Damage per bullet: 0.6 x Attack | Bullets: 8 + 2 x Projectiles | Damage falls off with distance.\";");
code("}");
code("case 7:");
code("{");
code("icon = \"icons\special e phoenix egg icon 64\";");
code("msg = \"(W) Echo Bomb: Attach a bomb to an enemy that records all the damage it takes for several seconds\";");
code("}");
code("case 8:");
code("{");
code("icon = \"icons\special e phoenix egg icon 64\";");
code("msg = \"When the bomb explodes, deal all the stored damage in a large radius.\";");
code("}");
code("case 9:");
code("{");
code("icon = \"icons\special e phoenix egg icon 64\";");
code("msg = \"Cooldown: 20 | Duration: 6 | Radius: 12 | An enemy can only have one Echo Bomb at a time\";");
code("}");
code("case 10:");
code("{");
code("icon = \"icons\siege x fire siphon icons 64\";");
code("msg = \"(E) Minigun: Switch to your minigun, which continuously fires bullets at longer range.\";");
code("}");
code("case 11:");
code("{");
code("icon = \"icons\siege x fire siphon icons 64\";");
code("msg = \"These bullets do not pierce through enemies or grant you favor.\";");
code("}");
code("case 12:");
code("{");
code("icon = \"icons\siege x fire siphon icons 64\";");
code("msg = \"Cost: 1 per bullet | Range: 1.5x | Damage: 1 x Attack | Fire rate: 3 + Projectiles\";");
code("next = 0;");
code("}");
code("}");
code("}");
code("case THRONESHIELD:");
code("{");
code("switch(tooltip)");
code("{");
code("case 0:");
code("{");
code("msg = \"Throne Shield: A frontline fighter that tanks damage for allies.\";");
code("}");
code("case 1:");
code("{");
code("msg = \"Passive: When you take damage, reduce it by 2 percent for every 100 health you have.\";");
code("}");
code("case 2:");
code("{");
code("msg = \"Special Attack (10 attacks): Stun your target and heal all allies for 5 percent of your health.\";");
code("}");
code("case 3:");
code("{");
code("icon = \"icons\god power ragnarok icon 64\";");
code("msg = \"(Q) Knight's Vow: Choose an allied player to be your partner.\";");
code("}");
code("case 4:");
code("{");
code("icon = \"icons\god power ragnarok icon 64\";");
code("msg = \"When they take damage, you take half of it instead. Their lifesteal will heal you as well.\";");
code("}");
code("case 5:");
code("{");
code("icon = \"icons\god power ragnarok icon 64\";");
code("msg = \"Also, their attacks will advance your special attack cooldown too.\";");
code("}");
code("case 6:");
code("{");
code("icon = \"icons\god power ragnarok icon 64\";");
code("msg = \"Cooldown: 10 | Cannot target another Throne Shield or a player that already has a Vow.\";");
code("}");
code("case 7:");
code("{");
code("icon = \"icons\god power thunder clap icons 64\";");
code("msg = \"(W) Justice: Stun nearby enemies that are not attacking you. Silence the ones that are.\";");
code("}");
code("case 8:");
code("{");
code("icon = \"icons\god power thunder clap icons 64\";");
code("msg = \"Cooldown: 10 | Radius: 8 | Stun Duration: 2 | Silence Duration: 6\";");
code("}");
code("case 9:");
code("{");
code("icon = \"icons\god power valor icons 64\";");
code("msg = \"(E) Shield of Light: Absorb all the damage you receive for a short duration.\";");
code("}");
code("case 10:");
code("{");
code("icon = \"icons\god power valor icons 64\";");
code("msg = \"Then, your next attack will fire an enormous laser that deals all the absorbed damage.\";");
code("}");
code("case 11:");
code("{");
code("icon = \"icons\god power valor icons 64\";");
code("msg = \"Cost: 60 | Duration: 6 | Absorbed damage is calculated before your passive reduction\";");
code("next = 0;");
code("}");
code("}");
code("}");
code("case SAVIOR:");
code("{");
code("switch(tooltip)");
code("{");
code("case 0:");
code("{");
code("msg = \"Savior: A high-mobility fighter that heals allies and grants them favor.\";");
code("}");
code("case 1:");
code("{");
code("msg = \"Passive: You can jump towards distant foes. When you land, stun your target.\";");
code("}");
code("case 2:");
code("{");
code("msg = \"Special Attack (3 attacks): Your spear pierces your target and hits enemies in a line.\";");
code("}");
code("case 3:");
code("{");
code("msg = \"Range: 10 | Apply on-hit effects to each enemy hit\";");
code("}");
code("case 4:");
code("{");
code("icon = \"icons\improvement heroic renewal icons 64\";");
code("msg = \"(Q) Guardian Angel: Teleport next to an ally and then heal nearby allies.\";");
code("}");
code("case 5:");
code("{");
code("icon = \"icons\improvement heroic renewal icons 64\";");
code("msg = \"You can target an area near yourself to teleport a short distance.\";");
code("}");
code("case 6:");
code("{");
code("icon = \"icons\improvement heroic renewal icons 64\";");
code("msg = \"Cooldown: 8 | Heal: 50 + 5 x distance traveled\";");
code("}");
code("case 7:");
code("{");
code("icon = \"icons\god power cease fire icon 64\";");
code("msg = \"(W) Unity: Create an aura at your cursor. Allies in the aura have 0.5x bonus magic resistance.\";");
code("}");
code("case 8:");
code("{");
code("icon = \"icons\god power cease fire icon 64\";");
code("msg = \"You have 0.5x bonus attack for each ally in the aura.\";");
code("}");
code("case 8:");
code("{");
code("icon = \"icons\god power cease fire icon 64\";");
code("msg = \"Each time you attack, heal allies in the aura and grant them 1 favor.\";");
code("}");
code("case 9:");
code("{");
code("icon = \"icons\god power cease fire icon 64\";");
code("msg = \"Cooldown: 20 | Duration: 8 | Radius: 10 | Heal: 0.5x Attack\";");
code("}");
code("case 10:");
code("{");
code("icon = \"icons\god power restoration icon 64\";");
code("msg = \"(E) Intervention: Revive all dead allies. If you die while this is ready, it auto-activates.\";");
code("}");
code("case 11:");
code("{");
code("icon = \"icons\god power restoration icon 64\";");
code("msg = \"Cost: 100 | Cooldown: 10\";");
code("next = 0;");
code("}");
code("}");
code("}");
code("case GARDENER:");
code("{");
code("switch(tooltip)");
code("{");
code("case 0:");
code("{");
code("msg = \"Gardener: A supportive archer that grows various plants to assist allies.\";");
code("}");
code("case 1:");
code("{");
code("msg = \"Passive: Your arrows drop seeds. A damaged player can consume a seed to restore health.\";");
code("}");
code("case 2:");
code("{");
code("msg = \"Heal: 30 | Duration: 15\";");
code("}");
code("case 3:");
code("{");
code("icon = \"icons\god power audrey icons 64\";");
code("msg = \"(Q) Bloodbloom: Summon a carnivorous plant with your stats at the target location.\";");
code("}");
code("case 4:");
code("{");
code("icon = \"icons\god power audrey icons 64\";");
code("msg = \"Its attacks will poison enemies and leave behind seeds.\";");
code("}");
code("case 5:");
code("{");
code("icon = \"icons\god power audrey icons 64\";");
code("msg = \"Cooldown: 15 | Decay: 8 percent per second\";");
code("}");
code("case 6:");
code("{");
code("icon = \"icons\god power uproot icon\";");
code("msg = \"(W) Stranglethorns: Cause seeds near your cursor to sprout into grasping roots that stun enemies.\";");
code("}");
code("case 7:");
code("{");
code("icon = \"icons\god power uproot icon\";");
code("msg = \"Cooldown: 12 | Range: 6 | Thorn Radius: 3 | Duration: 3 | Damage: 20 per second\";");
code("}");
code("case 8:");
code("{");
code("icon = \"icons\world berry bush icon 64\";");
code("msg = \"(E) Nature's Bounty: For a short duration, you plant Bery Bushes instead of seeds.\";");
code("}");
code("case 9:");
code("{");
code("icon = \"icons\world berry bush icon 64\";");
code("msg = \"Berry Bushes restore 4x health. Casting Stranglethorns on Berry Bushes will bring them to life.\";");
code("}");
code("case 10:");
code("{");
code("icon = \"icons\world berry bush icon 64\";");
code("msg = \"Walking Berry Bushes have half your attack and health.\";");
code("}");
code("case 11:");
code("{");
code("icon = \"icons\world berry bush icon 64\";");
code("msg = \"Cost: 60 | Duration: 12 | Heal: 120 | Decay: 4 percent per second\";");
code("next = 0;");
code("}");
code("}");
code("}");
code("case NIGHTRIDER:");
code("{");
code("switch(tooltip)");
code("{");
code("case 0:");
code("{");
code("msg = \"Nightrider: A sturdy fighter who thrives upon death of enemies and allies.\";");
code("}");
code("case 1:");
code("{");
code("msg = \"Passive: Whenever a unit dies near you, restore 5 percent health and gain 1 favor.\";");
code("}");
code("case 2:");
code("{");
code("msg = \"Special Attack (8 attacks): Curse your target with a Death Sentence.\";");
code("}");
code("case 3:");
code("{");
code("msg = \"This does not trigger if your target already has a Death Sentence.\";");
code("}");
code("case 4:");
code("{");
code("icon = \"icons\special g shade icon 64\";");
code("msg = \"Death Sentence: For a duration, the unit is poisoned and silenced and it takes double damage\";");
code("}");
code("case 5:");
code("{");
code("icon = \"icons\special g shade icon 64\";");
code("msg = \"If the cursed unit dies, the curse jumps to a nearby enemy and a Minion is summoned for you.\";");
code("}");
code("case 6:");
code("{");
code("icon = \"icons\special g shade icon 64\";");
code("msg = \"Duration: 6 | Damage: 6 | Radius: 8 | Minions have a fifth of your attack and health\";");
code("}");
code("case 7:");
code("{");
code("icon = \"icons\improvement mythic rejuvenation icons 64\";");
code("msg = \"(Q) Abduct: Summon a dark cloud that drags enemies towards you.\";");
code("}");
code("case 8:");
code("{");
code("icon = \"icons\improvement mythic rejuvenation icons 64\";");
code("msg = \"The first enemy hit is given a Death Sentence.\";");
code("}");
code("case 9:");
code("{");
code("icon = \"icons\improvement mythic rejuvenation icons 64\";");
code("msg = \"Cooldown: 15 | Range: 12\";");
code("}");
code("case 10:");
code("{");
code("icon = \"icons\god power ancestors icon 64\";");
code("msg = \"(W) Arise: Summon 3 minions and an additional one for each active Death Sentence.\";");
code("}");
code("case 11:");
code("{");
code("icon = \"icons\god power ancestors icon 64\";");
code("msg = \"Cooldown: 16 | Decay: 5 percent health\";");
code("}");
code("case 12:");
code("{");
code("icon = \"icons\god power chaos icons 64\";");
code("msg = \"(E) Doomsday: For a short duration, your attacks have the following effects:\";");
code("}");
code("case 13:");
code("{");
code("icon = \"icons\god power chaos icons 64\";");
code("msg = \"Heal yourself, summon a Minion, and grant yourself and your Minions bonus attack.\";");
code("}");
code("case 14:");
code("{");
code("icon = \"icons\god power chaos icons 64\";");
code("msg = \"Cost: 80 | Duration: 12 | Heal: 3 percent health | Bonus: 0.1x Attack\";");
code("next = 0;");
code("}");
code("}");
code("}");
code("case STARSEER:");
code("{");
code("switch(tooltip)");
code("{");
code("case 0:");
code("{");
code("msg = \"Starseer: A ranged fighter with a unique attack mechanism.\";");
code("}");
code("case 1:");
code("{");
code("msg = \"Passive: Your attack deals zero damage. Instead, three stars orbit around you, damaging enemies.\";");
code("}");
code("case 2:");
code("{");
code("msg = \"Damage: 50 | Rotation speed + 0.33x projectiles\";");
code("}");
code("case 3:");
code("{");
code("icon = \"icons\god power thunder clap icons 64\";");
code("msg = \"(Q) Repel: Launch nearby enemies away from you.\";");
code("}");
code("case 4:");
code("{");
code("icon = \"icons\god power thunder clap icons 64\";");
code("msg = \"Cooldown: 15 | Range: 15\";");
code("}");
code("case 5:");
code("{");
code("icon = \"icons\god power vision icon 64\";");
code("msg = \"(W) Realignment: Change the radius of your stars to match your cursor.\";");
code("}");
code("case 6:");
code("{");
code("icon = \"icons\god power vision icon 64\";");
code("msg = \"The closer they are, the faster you move.\";");
code("}");
code("case 7:");
code("{");
code("icon = \"icons\god power vision icon 64\";");
code("msg = \"Cooldown: 5 | Range: 2 - 15 | Speed: 1.5x - 0.5x\";");
code("}");
code("case 8:");
code("{");
code("icon = \"icons\god power eclipse icon 64\";");
code("msg = \"(E) Event Horizon: Your stars rotate at double speed and stun enemies.\";");
code("}");
code("case 9:");
code("{");
code("icon = \"icons\god power eclipse icon 64\";");
code("msg = \"Cost: 60 | Duration: 10\";");
code("next = 0;");
code("}");
code("}");
code("}");
code("case SPARKWITCH:");
code("{");
code("switch(tooltip)");
code("{");
code("case 0:");
code("{");
code("msg = \"Spark Witch: A powerful spellcaster who excels at destroying mobs of enemies.\";");
code("}");
code("case 1:");
code("{");
code("msg = \"Passive: Your attack shoots lightning that deals magic damage and bounces between enemies.\";");
code("}");
code("case 2:");
code("{");
code("msg = \"Lightning can bounce to yourself if there are no nearby targets (Doesn't deal damage to yourself)\";");
code("}");
code("case 3:");
code("{");
code("msg = \"Bounce range increased by Range. Each time you cast a spell, your next attack gains +1 bounce.\";");
code("}");
code("case 4:");
code("{");
code("msg = \"Bounce Range: 10 | Damage: 100 | Bounces: Projectiles + Spells Cast\";");
code("}");
code("case 5:");
code("{");
code("icon = \"icons\god power bolt icon 64\";");
code("msg = \"(Q) Thunderstrike: Lightning deals damage in an area. Cooldown reduced by 1 for each enemy hit\";");
code("}");
code("case 6:");
code("{");
code("icon = \"icons\god power bolt icon 64\";");
code("msg = \"Cooldown: 12 | Radius: 6 | Damage: 60\";");
code("}");
code("case 7:");
code("{");
code("icon = \"icons\special x lampades icons 64\";");
code("msg = \"(W) Hexbolt: Your next attack applies a special effect. It changes each time you cast this spell\";");
code("}");
code("case 8:");
code("{");
code("icon = \"sfx g arkantos flash\";");
code("msg = \"Electrify: Electrocutes your targets, dealing area damage per second.\";");
code("}");
code("case 9:");
code("{");
code("icon = \"icons\god power curse icon 64\";");
code("msg = \"Polymorph: Transforms your targets into pigs with 0 attack and armor.\";");
code("}");
code("case 10:");
code("{");
code("icon = \"icons\special x lampades icons 64\";");
code("msg = \"Cooldown: 18 | Duration: 4 | Electrify Damage: 20 per second\";");
code("}");
code("case 11:");
code("{");
code("icon = \"sfx x arkantos birth ring\";");
code("msg = \"(E) Vortex: Create a storm that pulls in nearby enemies.\";");
code("}");
code("case 12:");
code("{");
code("icon = \"sfx x arkantos birth ring\";");
code("msg = \"Cost: 80 | Range: 12\";");
code("next = 0;");
code("}");
code("}");
code("}");
code("}");
code("trShowImageDialog(icon, msg);");
code("return(next);");
code("}");

code("string className(int class = 0) {");
code("string name = \"N/A\";");
code("switch(class)");
code("{");
code("case MOONBLADE:");
code("{");
code("name = \"Moonblade\";");
code("}");
code("case SUNBOW:");
code("{");
code("name = \"Sunbow\";");
code("}");
code("case THUNDERRIDER:");
code("{");
code("name = \"Thunderstepper\";");
code("}");
code("case FIREKNIGHT:");
code("{");
code("name = \"Fire Knight\";");
code("}");
code("case FROSTKNIGHT:");
code("{");
code("name = \"Frost Knight\";");
code("}");
code("case BLASTMAGE:");
code("{");
code("name = \"Blastmage\";");
code("}");
code("case STORMCUTTER:");
code("{");
code("name = \"Stormcutter\";");
code("}");
code("case ALCHEMIST:");
code("{");
code("name = \"Alchemist\";");
code("}");
code("case SPELLSTEALER:");
code("{");
code("name = \"Spellstealer\";");
code("}");
code("case COMMANDO:");
code("{");
code("name = \"Commando\";");
code("}");
code("case THRONESHIELD:");
code("{");
code("name = \"Throne Shield\";");
code("}");
code("case SAVIOR:");
code("{");
code("name = \"Savior\";");
code("}");
code("case GARDENER:");
code("{");
code("name = \"Gardener\";");
code("}");
code("case NIGHTRIDER:");
code("{");
code("name = \"Nightrider\";");
code("}");
code("case STARSEER:");
code("{");
code("name = \"Starseer\";");
code("}");
code("case SPARKWITCH:");
code("{");
code("name = \"Spark Witch\";");
code("}");
code("}");
code("return(name);");
code("}");


code("void explainClass(int class = 0) {");
code("trQuestVarSet(\"explain\", 0);");
code("trQuestVarSet(\"pleaseExplain\", class);");
code("xsEnableRule(\"class_shop_explain_01\");");
code("}");

code("rule class_shop_always");
code("inactive");
code("highFrequency");
code("{");
code("int class = 0;");
code("for(i=2; >0) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"choice\"+i+\"unit\");");
code("if (trUnitIsSelected()) {");
code("trQuestVarSet(\"choice\"+i+\"selected\", 1);");
code("trQuestVarSet(\"pleaseExplain\", i);");
code("trQuestVarSet(\"explain\", 0);");
code("trDelayedRuleActivation(\"class_shop_explain_01\");");
code("reselectMyself();");
code("}");
code("trVectorSetUnitPos(\"pos\", \"choice\"+i+\"unit\");");
code("for (p=1; < ENEMY_PLAYER) {");
code("if (zDistanceToVectorSquared(\"p\"+p+\"unit\", \"pos\") < 5) {");
code("if (trQuestVarGet(\"p\"+p+\"buy\"+i) < 4 &&");
code("trTimeMS() > trQuestVarGet(\"p\"+p+\"buyNext\") &&");
code("trQuestVarGet(\"p\"+p+\"noob\") == 1) {");
code("trQuestVarSet(\"p\"+p+\"buy\"+i, trQuestVarGet(\"p\"+p+\"buy\"+i) + 1);");
code("trQuestVarSet(\"p\"+p+\"buyNext\", trTimeMS() + 1000);");
code("class = i;");
code("if (trQuestVarGet(\"p\"+p+\"buy\"+i) == 4) {");
code("trQuestVarSet(\"p\"+p+\"buy\"+i, 5);");
code("chooseClass(p, class);");
code("if (trCurrentPlayer() == p) {");
code("trChatSend(0, \"You have switched to the \" + className(class) + \" class!\");");
code("}");
code("trSoundPlayFN(\"ui\thunder5.wav\",\"1\",-1,\"\",\"\");");
code("} else if (trCurrentPlayer() == p) {");
code("trChatSend(0,\"<color=1,1,1>Switching to \"+className(class)+\" in \"+(4-trQuestVarGet(\"p\"+p+\"buy\"+i))+\"...\");");
code("}");
code("}");
code("} else {");
code("trQuestVarSet(\"p\"+p+\"buy\"+i, 0);");
code("}");
code("}");
code("}");
code("}");

code("rule class_shop_explain_01");
code("inactive");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("int i = trQuestVarGet(\"pleaseExplain\");");
code("trQuestVarSet(\"explain\",");
code("displayNextTooltip(i, 1*trQuestVarGet(\"explain\")));");
code("trDelayedRuleActivation(\"class_shop_explain_02\");");
code("}");

code("rule class_shop_explain_02");
code("inactive");
code("highFrequency");
code("{");
code("int i = trQuestVarGet(\"pleaseExplain\");");
code("if (trIsGadgetVisible(\"ShowImageBox\") == false) {");
code("if (trQuestVarGet(\"explain\") > 0) {");
code("trDelayedRuleActivation(\"class_shop_explain_01\");");
code("}");
code("xsDisableSelf();");
code("}");
code("}");
code("const int ABILITY_READY = 0;");
code("const int ABILITY_COOLDOWN = 1;");
code("const int ABILITY_COST = 2;");

code("const int ABILITY_OFF = 0;");
code("const int ABILITY_ON = 1;");

code("const int ON_HIT_NONE = 0;");
code("const int ON_HIT_JUMP = 1;");
code("const int ON_HIT_ATTACKING = 2;");
code("const int ON_HIT_NORMAL = 3;");
code("const int ON_HIT_SPECIAL = 4;");

code("const int PROJ_NONE = 0;");
code("const int PROJ_GROUND = 1;");
code("const int PROJ_FALLING = 2;");
code("const int PROJ_BOUNCE = 3;");
code("const int PROJ_REMOVE = 4;");

code("const int STATUS_NONE = 0;");
code("const int STATUS_STUN = 1;");
code("const int STATUS_POISON = 2;");
code("const int STATUS_SILENCE = 3;");

code("string wellName = \"\";");
code("string lureName = \"\";");
code("string rainName = \"\";");

code("bool wellIsUltimate = false;");
code("bool rainIsUltimate = false;");
code("bool lureIsUltimate = false;");


code("void gainFavor(int p = 0, float amt = 0) {");
code("trQuestVarSet(\"p\"+p+\"favor\", xsMin(100, xsMax(0, trQuestVarGet(\"p\"+p+\"favor\") + amt)));");
code("trPlayerGrantResources(p,\"favor\", trQuestVarGet(\"p\"+p+\"favor\") - trPlayerResourceCount(p, \"favor\"));");
code("}");

code("void spyEffect(int unit = 0, int proto = 0, string qv = \"\") {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+unit, true);");
code("if (trUnitAlive()) {");
code("int x = modularCounterNext(\"spyFind\");");
code("trQuestVarSet(\"spyEye\"+x, proto);");
code("trQuestVarSet(\"spyEye\"+x+\"unit\", unit);");
code("trStringQuestVarSet(\"spyName\"+x, qv);");
code("trTechInvokeGodPower(0, \"spy\", vector(0,0,0), vector(0,0,0));");
code("}");
code("}");

code("void silencePlayer(int p = 0, float duration = 0, bool sfx = true) {");
code("if (trQuestVarGet(\"p\"+p+\"negationCloak\") == 1) {");
code("if (getBit(STATUS_SILENCE, 1*trQuestVarGet(\"p\"+p+\"spellstealStatus\")) == false) {");
code("trQuestVarSet(\"p\"+p+\"spellstealStatus\", trQuestVarGet(\"p\"+p+\"spellstealStatus\") + xsPow(2, STATUS_SILENCE));");
code("trSoundPlayFN(\"shadeofhadesgrunt2.wav\",\"1\",-1,\"\",\"\");");
code("gainFavor(p, 5);");
code("if (trCurrentPlayer() == p) {");
code("trChatSend(0, \"<color=1,1,1>Silence absorbed! Your next spell will inflict Silence!</color>\");");
code("}");
code("}");
code("} else {");
code("float timeout = duration * 1000 * trQuestVarGet(\"p\"+p+\"silenceResistance\") + trTimeMS();");
code("if (trQuestVarGet(\"p\"+p+\"silenceTimeout\") < timeout) {");
code("trQuestVarSet(\"p\"+p+\"silenceTimeout\", timeout);");
code("}");
code("if (trQuestVarGet(\"p\"+p+\"silenced\") == 0) {");
code("trQuestVarSet(\"p\"+p+\"silenced\", 1);");
code("trSoundPlayFN(\"frostgiantmove1.wav\",\"1\",-1,\"\",\"\");");
code("trChatSend(0, \"<color={Playercolor(\"+p+\")}>{Playername(\"+p+\")}</color> has been silenced!\");");
code("trPlayerKillAllGodPowers(p);");
code("if (sfx) {");
code("if (trQuestVarGet(\"p\"+p+\"silenceSFX\") > 0) {");
code("int id = kbGetBlockID(\"\"+1*trQuestVarGet(\"p\"+p+\"silenceSFX\"));");
code("if (id == -1) {");
code("spyEffect(1*trQuestVarGet(\"p\"+p+\"unit\"), kbGetProtoUnitID(\"UI Range Indicator Egypt SFX\"), \"p\"+p+\"silenceSFX\");");
code("} else {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"silenceSFX\");");
code("trUnitChangeProtoUnit(\"UI Range Indicator Egypt SFX\");");
code("}");
code("} else {");
code("spyEffect(1*trQuestVarGet(\"p\"+p+\"unit\"), kbGetProtoUnitID(\"UI Range Indicator Egypt SFX\"), \"p\"+p+\"silenceSFX\");");
code("}");
code("}");
code("if (trCurrentPlayer() == p) {");
code("trCounterAbort(\"lure\");");
code("trCounterAbort(\"well\");");
code("trCounterAbort(\"rain\");");
code("trCounterAddTime(\"silence\", -1, -9999, \"SILENCED\");");
code("}");
code("}");
code("}");
code("}");

code("void silenceEnemy(int p = 0, float duration = 9.0) {");
code("duration = 1000 * duration * trQuestVarGet(\"p\"+p+\"spellDuration\");");
code("if (trQuestVarGet(\"p\"+p+\"godBoon\") == BOON_DOUBLE_STUN) {");
code("duration = 2.0 * duration;");
code("}");
code("if (trTimeMS() + duration > yGetVar(\"enemies\", \"silenceTimeout\")) {");
code("ySetVar(\"enemies\", \"silenceTimeout\", trTimeMS() + duration);");
code("}");
code("if (trQuestVarGet(\"enemies\") == trQuestVarGet(\"bossUnit\")) {");
code("if (trTimeMS() + duration > trQuestVarGet(\"bossCooldownTime\")) {");
code("trQuestVarSet(\"bossCooldownTime\", trTimeMS() + duration);");
code("}");
code("}");
code("if (yGetVar(\"enemies\", \"silenceStatus\") == 0) {");
code("ySetVar(\"enemies\", \"silenceStatus\", 1);");
code("if (kbGetBlockID(\"\"+1*yGetVar(\"enemies\", \"silenceSFX\")) == -1) {");
code("spyEffect(1*trQuestVarGet(\"enemies\"),");
code("kbGetProtoUnitID(\"UI Range Indicator Egypt SFX\"), yGetVarName(\"enemies\", \"silenceSFX\"));");
code("} else {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"enemies\", \"silenceSFX\"), true);");
code("trUnitChangeProtoUnit(\"UI Range Indicator Egypt SFX\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"enemies\");");
code("}");
code("}");
code("}");

code("void healUnit(int p = 0, float amt = 0, int index = -1) {");
code("int old = yGetPointer(\"playerUnits\");");
code("if (index < 0) {");
code("index = old;");
code("}");
code("if (ySetPointer(\"playerUnits\", index)) {");
code("amt = amt * trQuestVarGet(\"p\"+p+\"healBoost\");");
code("if (yGetVar(\"playerUnits\", \"poisonStatus\") == 0) {");
code("trDamageUnit(0.0 - amt);");
code("}");
code("ySetPointer(\"playerUnits\", old);");
code("}");
code("}");

code("void nightriderHarvest(string pos = \"\") {");
code("int index = yGetPointer(\"playerUnits\");");
code("for(p=1; < ENEMY_PLAYER) {");
code("if ((trQuestVarGet(\"p\"+p+\"class\") == NIGHTRIDER) &&");
code("(trQuestVarGet(\"p\"+p+\"dead\") == 0)) {");
code("if (zDistanceToVectorSquared(\"p\"+p+\"unit\", pos) < 144) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"unit\", true);");
code("ySetPointer(\"playerUnits\", 1*trQuestVarGet(\"p\"+p+\"index\"));");
code("healUnit(p, 0.05 * trQuestVarGet(\"p\"+p+\"health\") * trQuestVarGet(\"p\"+p+\"spellDamage\"));");
code("gainFavor(p, 1);");
code("}");
code("}");
code("}");
code("ySetPointer(\"playerUnits\", index);");
code("}");

code("void removeEnemy() {");
code("int bounty = yGetVar(\"enemies\", \"bounty\");");
code("yVarToVector(\"enemies\", \"pos\");");
code("nightriderHarvest(\"pos\");");
code("if (yGetVar(\"enemies\", \"bounty\") > 0) {");
code("trQuestVarSetFromRand(\"rand\", 1, yGetVar(\"enemies\", \"bounty\"), true);");
code("for(p=1; <ENEMY_PLAYER) {");
code("if (Multiplayer) {");
code("trQuestVarSet(\"p\"+p+\"gold\", trQuestVarGet(\"p\"+p+\"gold\") + bounty);");
code("trPlayerGrantResources(p, \"Gold\", bounty);");
code("if (trQuestVarGet(\"p\"+p+\"godBoon\") == BOON_MORE_GOLD) {");
code("trQuestVarSet(\"p\"+p+\"gold\", trQuestVarGet(\"p\"+p+\"gold\") + bounty);");
code("trPlayerGrantResources(p, \"Gold\", bounty);");
code("}");
code("}");
code("gainFavor(p, trQuestVarGet(\"rand\"));");
code("}");
code("}");
code("if (yGetVar(\"enemies\", \"relic\") > 0) {");
code("spawnRelicClosest(trQuestVarGet(\"posX\"), trQuestVarGet(\"posZ\"), 1*yGetVar(\"enemies\", \"relic\"));");
code("}");
code("yRemoveFromDatabase(\"enemies\");");
code("}");

code("void removePlayerUnit() {");
code("yVarToVector(\"playerUnits\", \"pos\");");
code("nightriderHarvest(\"pos\");");
code("yRemoveFromDatabase(\"playerUnits\");");
code("yRemoveUpdateVar(\"playerUnits\", \"player\");");
code("yRemoveUpdateVar(\"playerUnits\", \"currentHealth\");");
code("yRemoveUpdateVar(\"playerUnits\", \"stunStatus\");");
code("yRemoveUpdateVar(\"playerUnits\", \"stunTimeout\");");
code("yRemoveUpdateVar(\"playerUnits\", \"stunSFX\");");
code("yRemoveUpdateVar(\"playerUnits\", \"poisonStatus\");");
code("yRemoveUpdateVar(\"playerUnits\", \"poisonTimeout\");");
code("yRemoveUpdateVar(\"playerUnits\", \"poisonLast\");");
code("yRemoveUpdateVar(\"playerUnits\", \"poisonDamage\");");
code("yRemoveUpdateVar(\"playerUnits\", \"poisonSFX\");");
code("yRemoveUpdateVar(\"playerUnits\", \"decay\");");
code("yRemoveUpdateVar(\"playerUnits\", \"decayNext\");");
code("yRemoveUpdateVar(\"playerUnits\", \"hero\");");
code("yRemoveUpdateVar(\"playerUnits\", \"unity\");");
code("yRemoveUpdateVar(\"playerUnits\", \"launched\");");
code("}");

code("void removePlayerCharacter() {");
code("yRemoveFromDatabase(\"playerCharacters\");");
code("}");

code("void removePlayerSpecific(int p = 0) {");
code("if (trQuestVarGet(\"p\"+p+\"characters\") == trQuestVarGet(\"p\"+p+\"unit\")) {");
code("if (kbGetBlockID(\"\"+1*trQuestVarGet(\"p\"+p+\"silenceSFX\")) >= 0) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"silenceSFX\", true);");
code("trUnitChangeProtoUnit(\"Rocket\");");
code("}");
code("trVectorSetUnitPos(\"dead\"+p+\"pos\", \"p\"+p+\"unit\");");
code("for(x=yGetDatabaseCount(\"p\"+p+\"relics\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"relics\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");
code("}");
code("trQuestVarSet(\"p\"+p+\"dead\", 10);");
code("trQuestVarSet(\"deadPlayerCount\", 1 + trQuestVarGet(\"deadPlayerCount\"));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"unit\");");
code("trUnitOverrideAnimation(6,0,false,false,-1);");
code("trSoundPlayFN(\"aherohasfallen.wav\",\"1\",-1,\"\",\"\");");
code("trMessageSetText(trStringQuestVarGet(\"p\"+p+\"name\") + \" has fallen! Clear nearby enemies to revive them!\");");
code("silencePlayer(p, 0);");
code("trQuestVarSet(\"p\"+p+\"silenceSFX\", 0);");
code("trQuestVarSet(\"p\"+p+\"reviveBeam\", trGetNextUnitScenarioNameNumber());");
code("trVectorSetUnitPos(\"pos\", \"p\"+p+\"unit\");");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,trQuestVarGet(\"posX\"),0,trQuestVarGet(\"posZ\"),0,true);");
code("trArmySelect(\"\"+p+\",0\");");
code("trUnitChangeProtoUnit(\"Healing SFX\");");
code("if (trQuestVarGet(\"p\"+p+\"simp\") > 0) {");
code("int simp = trQuestVarGet(\"p\"+p+\"simp\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+simp+\"tether\");");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");
code("trQuestVarSet(\"p\"+simp+\"queen\", 0);");
code("trQuestVarSet(\"p\"+p+\"simp\", 0);");
code("}");
code("}");
code("yRemoveFromDatabase(\"p\"+p+\"characters\");");
code("yRemoveUpdateVar(\"p\"+p+\"Characters\", \"specialAttack\");");
code("yRemoveUpdateVar(\"p\"+p+\"Characters\", \"attacking\");");
code("yRemoveUpdateVar(\"p\"+p+\"Characters\", \"attackNext\");");
code("yRemoveUpdateVar(\"p\"+p+\"characters\", \"index\");");
code("}");

code("void equipRelicsAgain(int p = 0) {");
code("for(x=yGetDatabaseCount(\"p\"+p+\"relics\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"relics\", true);");
code("trUnitChangeProtoUnit(\"Relic\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"relics\");");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"p\"+p+\"unit\"));");
code("trMutateSelected(relicProto(1*yGetVar(\"p\"+p+\"relics\", \"type\")));");
code("if (yGetVar(\"p\"+p+\"relics\", \"type\") < KEY_RELICS) {");
code("trSetSelectedScale(0,0,-1);");
code("trUnitSetAnimationPath(\"1,0,1,1,0,0,0\");");
code("}");
code("}");
code("}");

code("vector wallNormalVector(string loc = \"\") {");
code("vector retVal = vector(1,0,0);");

code("for(x=0; <4) {");
code("trQuestVarSet(\"rotX\", trQuestVarGet(loc+\"X\") + trQuestVarGet(\"rotX\"+x));");
code("trQuestVarSet(\"rotZ\", trQuestVarGet(loc+\"Z\") + trQuestVarGet(\"rotZ\"+x));");
code("if (terrainIsType(\"rot\", TERRAIN_WALL, TERRAIN_SUB_WALL) == false) {");
code("retVal = xsVectorSet(trQuestVarGet(\"rotX\"+x),0,trQuestVarGet(\"rotZ\"+x));");
code("}");
code("}");

code("return(retVal);");
code("}");

code("bool rayCollision(string db = \"\", string start = \"\", string dir = \"\", float dist = 0, float width = 0) {");
code("trVectorSetUnitPos(\"collidePos\", db);");
code("float current = zDistanceBetweenVectors(\"collidePos\", start);");
code("if (current < dist) {");
code("trQuestVarSet(\"hitboxX\", trQuestVarGet(start+\"x\") + current * trQuestVarGet(dir+\"x\"));");
code("trQuestVarSet(\"hitboxZ\", trQuestVarGet(start+\"z\") + current * trQuestVarGet(dir+\"z\"));");
code("if (zDistanceBetweenVectorsSquared(\"collidePos\", \"hitbox\") < width) {");
code("return(true);");
code("}");
code("}");
code("return(false);");
code("}");

code("vector getBounceDir(string loc = \"\", string dir = \"\") {");
code("bool bounced = false;");
code("int xMod = 1;");
code("int zMod = 1;");
code("if (trQuestVarGet(dir+\"x\") < 0) {");
code("xMod = -1;");
code("}");
code("if (trQuestVarGet(dir+\"z\") < 0) {");
code("zMod = -1;");
code("}");
code("vector ret = trVectorQuestVarGet(dir);");
code("trQuestVarSet(\"horizontalX\", trQuestVarGet(loc+\"X\") - xMod);");
code("trQuestVarSet(\"horizontalZ\", trQuestVarGet(loc+\"Z\"));");
code("trQuestVarSet(\"verticalX\", trQuestVarGet(loc+\"X\"));");
code("trQuestVarSet(\"verticalZ\", trQuestVarGet(loc+\"Z\") - zMod);");
code("if (terrainIsType(\"horizontal\", TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("ret = xsVectorSetZ(ret, 0.0 - trQuestVarGet(dir+\"z\"));");
code("bounced = true;");
code("}");
code("if (terrainIsType(\"vertical\", TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("ret = xsVectorSetX(ret, 0.0 - trQuestVarGet(dir+\"x\"));");
code("bounced = true;");
code("}");
code("if (bounced == false) {");
code("vector a = (trVectorQuestVarGet(loc) - (trVectorQuestVarGet(loc) * 2)) / 2;");
code("vector b = xsVectorSet((1 - xMod) / 2,0,(1 - zMod) / 2);");
code("b = trVectorQuestVarGet(dir) + xsVectorNormalize(b - a);");
code("if (xsVectorGetX(b) * trQuestVarGet(dir+\"x\") < 0) {");
code("ret = xsVectorSetZ(ret, 0.0 - xsVectorGetZ(ret));");
code("} else {");
code("ret = xsVectorSetX(ret, 0.0 - xsVectorGetX(ret));");
code("}");
code("}");
code("return(ret);");
code("}");

code("void vectorSetAsTargetVector(string target = \"\", string from = \"\", string to = \"\", float dist = 40.0) {");
code("trVectorQuestVarSet(\"dirrr\", zGetUnitVector(from, to, dist));");
code("trQuestVarSet(target+\"x\", trQuestVarGet(\"dirrrx\") + trQuestVarGet(from+\"x\"));");
code("trQuestVarSet(target+\"z\", trQuestVarGet(\"dirrrz\") + trQuestVarGet(from+\"z\"));");

code("float scale = 0;");
code("if (trQuestVarGet(target+\"x\") < 0) {");
code("scale = trQuestVarGet(target+\"x\") / (trQuestVarGet(target+\"x\") - trQuestVarGet(from+\"x\"));");
code("trQuestVarSet(target+\"z\", trQuestVarGet(target+\"z\") + scale * (trQuestVarGet(from+\"z\") - trQuestVarGet(target+\"z\")));");
code("trQuestVarSet(target+\"x\", 0);");
code("} else if (trQuestVarGet(target+\"x\") > DIMENSION_X) {");
code("scale = (trQuestVarGet(target+\"x\") - DIMENSION_X) / (trQuestVarGet(target+\"x\") - trQuestVarGet(from+\"x\"));");
code("trQuestVarSet(target+\"z\", trQuestVarGet(target+\"z\") + scale * (trQuestVarGet(from+\"z\") - trQuestVarGet(target+\"z\")));");
code("trQuestVarSet(target+\"x\", DIMENSION_X);");
code("}");

code("if (trQuestVarGet(target+\"z\") < 0) {");
code("scale = trQuestVarGet(target+\"z\") / (trQuestVarGet(target+\"z\") - trQuestVarGet(from+\"z\"));");
code("trQuestVarSet(target+\"x\", trQuestVarGet(target+\"x\") + scale * (trQuestVarGet(from+\"x\") - trQuestVarGet(target+\"x\")));");
code("trQuestVarSet(target+\"z\", 0);");
code("} else if (trQuestVarGet(target+\"z\") > DIMENSION_Z) {");
code("scale = (trQuestVarGet(target+\"z\") - DIMENSION_Z) / (trQuestVarGet(target+\"z\") - trQuestVarGet(from+\"z\"));");
code("trQuestVarSet(target+\"x\", trQuestVarGet(target+\"x\") + scale * (trQuestVarGet(from+\"x\") - trQuestVarGet(target+\"x\")));");
code("trQuestVarSet(target+\"z\", DIMENSION_Z);");
code("}");
code("}");

code("void poisonUnit(string db = \"\", float duration = 0, float damage = 0, int p = 0) {");
code("bool targetPlayers = (p == 0);");
code("duration = duration * 1000;");
code("if (p > 0) {");
code("duration = duration * trQuestVarGet(\"p\"+p+\"spellDuration\") * xsPow(0.5, 1*trQuestVarGet(\"p\"+p+\"poisonSpeed\"));");
code("damage = damage * trQuestVarGet(\"p\"+p+\"spellDamage\") * xsPow(2, 1*trQuestVarGet(\"p\"+p+\"poisonSpeed\"));");
code("} else {");
code("p = yGetVar(db, \"player\");");
code("duration = duration * trQuestVarGet(\"p\"+p+\"poisonResistance\");");
code("}");
code("if (targetPlayers && (yGetVar(db, \"hero\") == 1) && (trQuestVarGet(\"p\"+p+\"negationCloak\") == 1)) {");
code("if (getBit(STATUS_POISON, 1*trQuestVarGet(\"p\"+p+\"spellstealStatus\")) == false) {");
code("trQuestVarSet(\"p\"+p+\"spellstealStatus\", trQuestVarGet(\"p\"+p+\"spellstealStatus\") + xsPow(2, STATUS_POISON));");
code("trSoundPlayFN(\"shadeofhadesgrunt2.wav\",\"1\",-1,\"\",\"\");");
code("gainFavor(p, 5);");
code("if (trCurrentPlayer() == p) {");
code("trChatSend(0, \"<color=1,1,1>Poison absorbed! Your next spell will inflict Poison!</color>\");");
code("}");
code("}");
code("} else if (trTimeMS() + duration > yGetVar(db, \"poisonTimeout\")) {");
code("if (yGetVar(db, \"poisonStatus\") == 0) {");
code("if (yGetVar(db, \"poisonSFX\") == 0) {");
code("spyEffect(1*trQuestVarGet(db), kbGetProtoUnitID(\"Poison SFX\"), yGetVarName(db, \"poisonSFX\"));");
code("} else {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(db, \"poisonSFX\"), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Poison SFX\"));");
code("}");
code("ySetVar(db, \"poisonStatus\", 1);");
code("ySetVar(db, \"poisonLast\", trTimeMS());");
code("trQuestVarSet(\"poisonSound\", 1);");
code("}");
code("ySetVar(db, \"poisonTimeout\", trTimeMS() + duration);");
code("if ((targetPlayers == false) && (trQuestVarGet(\"p\"+p+\"godBoon\") == BOON_POISON_STACKS)) {");
code("ySetVar(db, \"poisonDamage\", damage + yGetVar(db, \"poisonDamage\"));");
code("} else if (damage > yGetVar(db, \"poisonDamage\")) {");
code("ySetVar(db, \"poisonDamage\", damage);");
code("}");
code("}");
code("}");



code("float damageEnemy(int p = 0, float dmg = 0, bool spell = true, float pierce = 0) {");
code("if (spell) {");
code("dmg = dmg - dmg * yGetVar(\"enemies\", \"magicResist\") * (1.0 - pierce);");
code("} else {");
code("dmg = dmg - dmg * yGetVar(\"enemies\", \"physicalResist\") * (1.0 - pierce);");
code("}");
code("if (yGetVar(\"enemies\", \"poisonStatus\") == 1) {");
code("dmg = dmg * trQuestVarGet(\"p\"+p+\"poisonKiller\");");
code("}");
code("trDamageUnit(dmg);");
code("if (spell) {");
code("if (trQuestVarGet(\"p\"+p+\"godBoon\") == BOON_SPELL_POISON) {");
code("poisonUnit(\"enemies\", 12.0, 12.0, p);");
code("}");
code("trQuestVarSet(\"p\"+p+\"lifestealTotal\",");
code("trQuestVarGet(\"p\"+p+\"lifestealTotal\") + trQuestVarGet(\"p\"+p+\"Lifesteal\") * dmg * 0.5);");
code("} else {");
code("trQuestVarSet(\"p\"+p+\"lifestealTotal\",");
code("trQuestVarGet(\"p\"+p+\"lifestealTotal\") + trQuestVarGet(\"p\"+p+\"Lifesteal\") * dmg);");
code("}");
code("return(dmg);");
code("}");


code("void growFrostGiantsIncoming(string pos = \"\") {");
code("for(x=yGetDatabaseCount(\"frostGiantsIncoming\"); >0) {");
code("yDatabaseNext(\"frostGiantsIncoming\");");
code("if (zDistanceToVectorSquared(\"frostGiantsIncoming\", pos) < 100) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"frostGiantsIncoming\", true);");
code("trUnitHighlight(0.5, false);");
code("if (yGetVar(\"frostGiantsIncoming\", \"targetSize\") < 5) {");
code("trQuestVarSet(\"frostGiantIncomingSound\", 1);");
code("ySetVar(\"frostGiantsIncoming\", \"targetSize\", 2 + yGetVar(\"frostGiantsIncoming\", \"targetSize\"));");
code("ySetVar(\"frostGiantsIncoming\", \"targetTime\", xsMax(trTimeMS(), yGetVar(\"frostGiantsIncoming\", \"targetTime\")) + 1000);");
code("}");
code("}");
code("}");
code("}");

code("void stunUnit(string db = \"\", float duration = 0, int p = 0, bool sound = true) {");
code("int index = 0;");
code("bool targetPlayers = (p == 0);");
code("duration = duration * 1000;");
code("if (p > 0) {");
code("duration = duration * trQuestVarGet(\"p\"+p+\"spellDuration\");");
code("if (trQuestVarGet(\"p\"+p+\"godBoon\") == BOON_DOUBLE_STUN) {");
code("duration = 2.0 * duration;");
code("}");
code("if (trQuestVarGet(\"p\"+p+\"class\") == FROSTKNIGHT) {");
code("trQuestVarSet(\"p\"+p+\"lifestealTotal\", trQuestVarGet(\"p\"+p+\"lifestealTotal\") + 0.08 * trQuestVarGet(\"p\"+p+\"health\"));");
code("}");
code("trUnitSelectClear();");
code("trUnitSelectByQV(db, true);");
code("if (trQuestVarGet(\"p\"+p+\"stunDamage\") > 0) {");
code("damageEnemy(p, trQuestVarGet(\"p\"+p+\"health\") * trQuestVarGet(\"p\"+p+\"stunDamage\"), true);");
code("}");
code("} else {");
code("p = yGetVar(db, \"player\");");
code("duration = duration * trQuestVarGet(\"p\"+p+\"stunResistance\");");
code("}");
code("if (targetPlayers && (yGetVar(db, \"hero\") == 1) && (trQuestVarGet(\"p\"+p+\"negationCloak\") == 1)) {");
code("if (getBit(STATUS_STUN, 1*trQuestVarGet(\"p\"+p+\"spellstealStatus\")) == false) {");
code("trQuestVarSet(\"p\"+p+\"spellStealStatus\", trQuestVarGet(\"p\"+p+\"spellstealStatus\") + xsPow(2, STATUS_STUN));");
code("trSoundPlayFN(\"shadeofhadesgrunt2.wav\",\"1\",-1,\"\",\"\");");
code("gainFavor(p, 5);");
code("if (trCurrentPlayer() == p) {");
code("trChatSend(0, \"<color=1,1,1>Stun absorbed! Your next spell will inflict Stun!</color>\");");
code("}");
code("}");
code("} else {");
code("if (trTimeMS() + duration > yGetVar(db, \"stunTimeout\")) {");
code("if (yGetVar(db, \"stunStatus\") == 0) {");
code("trQuestVarSet(\"stunSound\", 1);");
code("if (trQuestVarGet(\"boss\") == 3) {");
code("trVectorSetUnitPos(\"stunpos\", db);");
code("growFrostGiantsIncoming(\"stunpos\");");
code("}");
code("index = yAddToDatabase(\"stunnedUnits\", db);");
code("yAddUpdateVar(\"stunnedUnits\", \"proto\", kbGetUnitBaseTypeID(kbGetBlockID(\"\"+1*trQuestVarGet(db), true)));");
code("if (yGetVar(db, \"stunSFX\") == 0) {");
code("spyEffect(1*trQuestVarGet(db), kbGetProtoUnitID(\"Shockwave stun effect\"), yGetVarName(db, \"stunSFX\"));");
code("} else {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(db, \"stunSFX\"), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Shockwave stun effect\"));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(db, true);");
code("}");
code("ySetVar(db, \"stunStatus\", index);");
code("} else if (sound) {");
code("trQuestVarSet(\"stunSound\", 1);");
code("}");
code("ySetVar(db, \"stunTimeout\", trTimeMS() + duration);");
code("}");
code("}");
code("}");

code("void processLaunchedUnit() {");
code("yDatabaseNext(\"launchedUnits\");");
code("yVarToVector(\"launchedUnits\", \"dest\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"launchedUnits\", \"unit\"));");
code("if (trUnitAlive() == false ||");
code("zDistanceToVectorSquared(\"launchedUnits\", \"dest\") < 4 ||");
code("trTimeMS() > yGetVar(\"launchedUnits\", \"timeout\")) {");
code("if (trUnitAlive()) {");
code("string db = \"playerUnits\";");
code("int p = yGetVar(\"launchedUnits\", \"player\");");
code("if (p == ENEMY_PLAYER) {");
code("db = \"enemies\";");
code("}");
code("ySetVarAtIndex(db, \"launched\", 0, 1*yGetVar(\"launchedUnits\", \"index\"));");
code("trUnitChangeProtoUnit(kbGetProtoUnitName(1*yGetVar(\"launchedUnits\", \"proto\")));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"launchedUnits\", \"unit\"));");
code("trMutateSelected(1*yGetVar(\"launchedUnits\", \"proto\"));");
code("if ((p < ENEMY_PLAYER) && (yGetVar(\"launchedUnits\", \"unit\") == trQuestVarGet(\"p\"+p+\"unit\"))) {");
code("equipRelicsAgain(p);");
code("trQuestVarSet(\"p\"+p+\"launched\", 0);");
code("}");
code("if (yGetVar(\"launchedUnits\", \"unit\") == trQuestVarGet(\"bossUnit\")) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"launchedUnits\", \"unit\"));");
code("trSetSelectedScale(trQuestVarGet(\"bossScale\"),trQuestVarGet(\"bossScale\"),trQuestVarGet(\"bossScale\"));");
code("}");
code("if (yGetVar(\"launchedUnits\", \"stun\") == 1) {");
code("int index = yGetPointer(db);");
code("if (ySetPointer(db, 1*yGetVar(\"launchedUnits\", \"index\"))) {");
code("stunUnit(db, 3.0);");
code("ySetPointer(db, index);");
code("}");
code("}");
code("} else {");
code("trUnitChangeProtoUnit(kbGetProtoUnitName(1*yGetVar(\"launchedUnits\", \"proto\")));");
code("}");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"launchedUnits\");");
code("trUnitChangeProtoUnit(\"Dust Small\");");
code("yRemoveFromDatabase(\"launchedUnits\");");
code("}");
code("}");

code("void launchUnit(string db = \"\", string dest = \"\") {");
code("int hitWall = 0;");
code("if (yGetVar(db, \"launched\") == 0) {");
code("ySetVar(db, \"launched\", 1);");
code("int type = kbGetUnitBaseTypeID(kbGetBlockID(\"\"+1*trQuestVarGet(db)));");
code("int p = ENEMY_PLAYER;");
code("trUnitSelectClear();");
code("trUnitSelectByQV(db);");
code("if (trUnitIsOwnedBy(ENEMY_PLAYER) == false) {");
code("p = yGetVar(db, \"player\");");
code("}");
code("trUnitChangeProtoUnit(\"Transport Ship Greek\");");

code("trVectorSetUnitPos(\"start\", db);");
code("trVectorQuestVarSet(\"dir\", zGetUnitVector(\"start\", dest));");

code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,1,0,1,0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\");");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(db));");
code("trUnitConvert(p);");
code("trUnitChangeProtoUnit(\"Dwarf\");");

code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\");");
code("trSetUnitOrientation(trVectorQuestVarGet(\"dir\"), vector(0,1,0), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Hero Greek Achilles\"));");

code("trUnitSelectClear();");
code("trUnitSelectByQV(db);");
code("trMutateSelected(type);");
code("trUnitOverrideAnimation(24,0,true,true,-1);");
code("trMutateSelected(kbGetProtoUnitID(\"Relic\"));");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"next\"));");
code("trMutateSelected(type);");
code("if (trQuestVarGet(db) == trQuestVarGet(\"bossUnit\")) {");
code("trSetSelectedScale(trQuestVarGet(\"bossScale\"),trQuestVarGet(\"bossScale\"),trQuestVarGet(\"bossScale\"));");
code("}");

code("float dist = zDistanceBetweenVectors(\"start\", dest);");
code("for(x=0; < dist / 2) {");
code("trQuestVarSet(\"nextx\", trQuestVarGet(\"startx\") + 2.0 * trQuestVarGet(\"dirx\"));");
code("trQuestVarSet(\"nextz\", trQuestVarGet(\"startz\") + 2.0 * trQuestVarGet(\"dirz\"));");
code("vectorToGrid(\"next\", \"loc\");");
code("if (terrainIsType(\"loc\", TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("hitWall = 1;");
code("break;");
code("} else {");
code("trQuestVarSet(\"startx\", trQuestVarGet(\"nextx\"));");
code("trQuestVarSet(\"startz\", trQuestVarGet(\"nextz\"));");
code("}");
code("}");

code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\");");
code("trMutateSelected(kbGetProtoUnitID(\"Wadjet Spit\"));");
code("trUnitMoveToPoint(trQuestVarGet(\"startx\"),0,trQuestVarGet(\"startz\"),-1,false);");

code("yAddToDatabase(\"launchedUnits\", \"next\");");
code("yAddUpdateVar(\"launchedUnits\", \"unit\", trQuestVarGet(db));");
code("yAddUpdateVar(\"launchedUnits\", \"index\", yGetPointer(db));");
code("yAddUpdateVar(\"launchedUnits\", \"player\", p);");
code("yAddUpdateVar(\"launchedUnits\", \"proto\", type);");
code("yAddUpdateVar(\"launchedUnits\", \"destX\", trQuestVarGet(\"startx\"));");
code("yAddUpdateVar(\"launchedUnits\", \"destz\", trQuestVarGet(\"startz\"));");
code("yAddUpdateVar(\"launchedUnits\", \"timeout\", trTimeMS() + 1100 * dist / 15);");
code("yAddUpdateVar(\"launchedUnits\", \"stun\", hitWall);");

code("if ((p < ENEMY_PLAYER) && (trQuestVarGet(db) == trQuestVarGet(\"p\"+p+\"unit\"))) {");
code("trQuestVarSet(\"p\"+p+\"launched\", 1);");
code("for(x=yGetDatabaseCount(\"p\"+p+\"relics\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"relics\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");
code("}");
code("}");
code("}");
code("}");

code("void damagePlayerUnit(float dmg = 0, int index = -1) {");
code("int old = yGetPointer(\"playerUnits\");");
code("if (index < 0) {");
code("index = old;");
code("}");
code("if (ySetPointer(\"playerUnits\", index)) {");
code("int p = yGetVar(\"playerUnits\", \"player\");");
code("if (trQuestVarGet(\"protectionCount\") == 0) {");
code("dmg = dmg - dmg * yGetVar(\"playerUnits\", \"magicResist\");");
code("if ((yGetVar(\"playerUnits\", \"hero\") == 1) && trQuestVarGet(\"p\"+p+\"negationCloak\") == 1) {");
code("healUnit(p, dmg);");
code("} else {");
code("trDamageUnit(dmg);");
code("}");
code("}");
code("ySetPointer(\"playerUnits\", old);");
code("}");
code("}");

code("void stunsAndPoisons(string db = \"\") {");
code("if (yGetVar(db, \"poisonStatus\") == 1) {");
code("float amt = trTimeMS() - yGetVar(db, \"poisonLast\");");
code("if (trTimeMS() > yGetVar(db, \"poisonTimeout\")) {");
code("ySetVar(db, \"poisonStatus\", 0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(db, \"poisonSFX\"), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Rocket\"));");
code("} else if (amt > 500) {");
code("trDamageUnit(amt * yGetVar(db, \"poisonDamage\") * 0.001);");
code("ySetVar(db, \"poisonLast\", yGetVar(\"poisonLast\") + trTimeMS());");
code("}");
code("}");
code("if (yGetVar(db, \"stunStatus\") >= 1) {");
code("if (trTimeMS() > yGetVar(db, \"stunTimeout\")) {");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(db, \"stunSFX\"), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Rocket\"));");
code("if (ySetPointer(\"stunnedUnits\", 1*yGetVar(db, \"stunStatus\"))) {");
code("yRemoveFromDatabase(\"stunnedUnits\");");
code("}");
code("ySetVar(db, \"stunStatus\", 0);");
code("}");
code("}");
code("if (yGetVar(db, \"silenceStatus\") == 1) {");
code("if (trTimeMS() > yGetVar(db, \"silenceTimeout\")) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(db, \"silenceSFX\"));");
code("trMutateSelected(kbGetProtoUnitID(\"Rocket\"));");
code("ySetVar(db, \"silenceStatus\", 0);");
code("}");
code("}");
code("}");

code("int CheckOnHit(int p = 0, int id = 0) {");
code("int action = kbUnitGetAnimationActionType(id);");
code("int status = ON_HIT_NONE;");
code("int class = trQuestVarGet(\"p\"+p+\"class\");");
code("int simp = 0;");
code("float amt = 0;");
code("if (action == 32) {");
code("status = ON_HIT_JUMP;");
code("} else if (yGetVar(\"p\"+p+\"characters\", \"attacking\") == 0) {");
code("if ((action == 12) || (action == 6)) {");
code("ySetVar(\"p\"+p+\"characters\", \"attackTarget\", kbUnitGetTargetUnitID(id));");
code("ySetVar(\"p\"+p+\"characters\", \"attacking\", 1);");
code("ySetVar(\"p\"+p+\"characters\", \"attackNext\", trTimeMS() + trQuestVarGet(\"p\"+p+\"firstDelay\"));");
code("ySetVar(\"p\"+p+\"characters\", \"attackTargetIndex\", 0);");
code("}");
code("} else {");
code("if ((action == 12) || (action == 6)) {");
code("if (trTimeMS() > yGetVar(\"p\"+p+\"characters\", \"attackNext\")) {");
code("gainFavor(p, trQuestVarGet(\"p\"+p+\"favorFromAttacks\"));");
code("status = ON_HIT_NORMAL;");
code("ySetVar(\"p\"+p+\"characters\", \"attackNext\",");
code("yGetVar(\"p\"+p+\"characters\", \"attackNext\") + trQuestVarGet(\"p\"+p+\"nextDelay\"));");
code("if (action == 6) {");
code("ySetVar(\"p\"+p+\"characters\", \"specialAttack\", yGetVar(\"p\"+p+\"characters\", \"specialAttack\") - 1);");
code("if (yGetVar(\"p\"+p+\"characters\", \"specialAttack\") <= 0) {");
code("ySetVar(\"p\"+p+\"characters\", \"specialAttack\", trQuestVarGet(\"p\"+p+\"specialAttackCooldown\"));");
code("status = ON_HIT_SPECIAL;");
code("}");
code("}");
code("if (trQuestVarGet(\"p\"+p+\"simp\") > 0) {");
code("simp = trQuestVarGet(\"p\"+p+\"simp\");");
code("for(x=yGetDatabaseCount(\"p\"+simp+\"characters\"); >0) {");
code("yDatabaseNext(\"p\"+simp+\"characters\");");
code("ySetVar(\"p\"+simp+\"characters\", \"specialAttack\", yGetVar(\"p\"+simp+\"characters\", \"specialAttack\") - 1);");
code("}");
code("}");
code("if (yGetVar(\"p\"+p+\"characters\", \"attackTargetIndex\") == 0) {");
code("for(x=yGetDatabaseCount(\"enemies\"); >0) {");
code("yDatabaseNext(\"enemies\");");
code("if (kbGetBlockID(\"\"+1*trQuestVarGet(\"enemies\")) == yGetVar(\"p\"+p+\"characters\", \"attackTarget\")) {");
code("ySetVar(\"p\"+p+\"characters\", \"attackTargetIndex\", yGetPointer(\"enemies\"));");
code("trQuestVarSet(\"p\"+p+\"poisonKillerActive\", yGetVar(\"enemies\", \"poisonStatus\"));");
code("break;");
code("}");
code("}");
code("} else {");
code("trQuestVarSet(\"p\"+p+\"poisonKillerActive\",");
code("yGetVarAtIndex(\"enemies\", \"poisonStatus\", 1*yGetVar(\"p\"+p+\"characters\", \"attackTargetIndex\")));");
code("}");
code("amt = trQuestVarGet(\"p\"+p+\"Lifesteal\") * trQuestVarGet(\"p\"+p+\"attack\");");
code("if (trQuestVarGet(\"p\"+p+\"poisonKillerActive\") == 1) {");
code("amt = amt * (1.0 + trQuestVarGet(\"p\"+p+\"poisonKiller\"));");
code("}");
code("trQuestVarSet(\"p\"+p+\"lifestealTotal\", trQuestVarGet(\"p\"+p+\"lifestealTotal\") + amt);");
code("} else {");
code("int target = kbUnitGetTargetUnitID(id);");
code("if (yGetVar(\"p\"+p+\"characters\", \"attackTarget\") != target) {");
code("ySetVar(\"p\"+p+\"characters\", \"attackNext\", trTimeMS() + trQuestVarGet(\"p\"+p+\"firstDelay\"));");
code("ySetVar(\"p\"+p+\"characters\", \"attackTarget\", target);");
code("ySetVar(\"p\"+p+\"characters\", \"attackTargetIndex\", 0);");
code("}");
code("status = ON_HIT_ATTACKING;");
code("}");
code("} else {");
code("ySetVar(\"p\"+p+\"characters\", \"attacking\", 0);");
code("trQuestVarSet(\"p\"+p+\"poisonKillerActive\", 0);");
code("}");
code("}");
code("return(status);");
code("}");

code("void poisonKillerBonus(int p = 0) {");
code("int class = trQuestVarGet(\"p\"+p+\"class\");");
code("float amt = trQuestVarGet(\"p\"+p+\"poisonKiller\")*trQuestVarGet(\"p\"+p+\"attack\")*trQuestVarGet(\"p\"+p+\"poisonKillerActive\");");
code("zSetProtoUnitStat(kbGetProtoUnitName(1*trQuestVarGet(\"class\"+class+\"proto\")),p,27,amt+trQuestVarGet(\"p\"+p+\"attack\"));");
code("zSetProtoUnitStat(kbGetProtoUnitName(1*trQuestVarGet(\"class\"+class+\"proto\")),p,31,amt+trQuestVarGet(\"p\"+p+\"attack\"));");
code("}");

code("float calculateDecay(int p = 0, float decay = 0) {");
code("if (trQuestVarGet(\"p\"+p+\"godBoon\") == BOON_DECAY_HALVED) {");
code("decay = decay * 0.5;");
code("}");
code("return(decay / trQuestVarGet(\"p\"+p+\"spellDuration\"));");
code("}");

code("int processGenericProj(string db = \"\") {");
code("int id = 0;");
code("int action = PROJ_NONE;");
code("float scale = 0;");
code("id = yDatabaseNext(db, true);");
code("if (id == -1) {");
code("yRemoveFromDatabase(db);");
code("action = PROJ_REMOVE;");
code("} else if (yGetVar(db, \"yeehaw\") == 1) {");
code("trMutateSelected(1*yGetVar(db, \"proto\"));");
code("trUnitOverrideAnimation(1*yGetVar(db, \"anim\"),0,true,true,-1);");
code("scale = yGetVar(db, \"scale\");");
code("trSetSelectedScale(scale,scale,scale);");
code("ySetVar(db, \"yeehaw\", 0);");
code("action = PROJ_BOUNCE;");
code("} else if (yGetVar(db, \"yeehaw\") == 2) {");
code("ySetVar(db, \"yeehaw\", 1);");
code("} else {");
code("trVectorSetUnitPos(\"pos\", db);");
code("if (trQuestVarGet(\"posY\") < worldHeight + 0.5 || yGetVar(db, \"yeehaw\") == 99) {");
code("action = PROJ_GROUND;");
code("yVarToVector(db, \"dir\");");
code("zSetProtoUnitStat(\"Kronny Flying\", ENEMY_PLAYER, 1, yGetVar(db, \"speed\"));");
code("trUnitChangeProtoUnit(\"Kronny Flying\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(db);");
code("trDamageUnitPercent(-100);");
code("trMutateSelected(kbGetProtoUnitID(\"Kronny Flying\"));");
code("trSetUnitOrientation(trVectorQuestVarGet(\"dir\"), vector(0,1,0), true);");
code("trSetSelectedScale(0,0.0-yGetVar(db, \"height\"),0);");
code("trDamageUnitPercent(100);");
code("ySetVar(db, \"yeehaw\", 1);");
code("} else {");
code("action = PROJ_FALLING;");
code("}");
code("}");

code("return(action);");
code("}");

code("int addGenericProj(string db = \"\",string start=\"\",string dir=\"\",");
code("int proto=0,int anim=0,float speed=10.0,float height=4,float scale=0, int p = 0) {");
code("if (p == 0) {");
code("p = ENEMY_PLAYER;");
code("}");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("int index = yAddToDatabase(db, \"next\");");
code("yAddUpdateVar(db, \"proto\", proto);");
code("yAddUpdateVar(db, \"anim\", anim);");
code("yAddUpdateVar(db, \"speed\", speed);");
code("yAddUpdateVar(db, \"height\", height);");
code("yAddUpdateVar(db, \"scale\", scale);");
code("yAddUpdateVar(db, \"dirX\", trQuestVarGet(dir+\"x\"));");
code("yAddUpdateVar(db, \"dirZ\", trQuestVarGet(dir+\"z\"));");
code("yAddUpdateVar(db, \"yeehaw\", 2);");

code("trArmyDispatch(\"1,0\", \"Dwarf\",1,trQuestVarGet(start+\"x\"),0,trQuestVarGet(start+\"z\"),0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Kronny Flying\"));");
code("zSetProtoUnitStat(\"Kronny Flying\", p, 1, speed);");
code("trUnitConvert(p);");
code("trSetUnitOrientation(trVectorQuestVarGet(dir), vector(0,1,0), true);");
code("trSetSelectedScale(0, 0.0 - height, 0);");
code("trDamageUnitPercent(100);");
code("return(index);");
code("}");

code("int activatePlayerUnit(string db = \"\", int p = 0, int proto = 0, float decay = 0) {");
code("int index = yAddToDatabase(\"playerUnits\", db);");
code("yAddUpdateVar(\"playerUnits\", \"player\", p);");
code("yAddUpdateVar(\"playerUnits\", \"hero\", 0);");
code("yAddUpdateVar(\"playerUnits\", \"decay\", decay);");
code("yAddUpdateVar(\"playerUnits\", \"decayNext\", trTimeMS() + 1000);");
code("yAddUpdateVar(\"playerUnits\", \"physicalResist\", trQuestVarGet(\"proto\"+proto+\"armor\"));");
code("yAddUpdateVar(\"playerUnits\", \"magicResist\", trQuestVarGet(\"proto\"+proto+\"armor\"));");
code("return(index);");
code("}");

code("int spawnPlayerUnit(int p = 0, int proto = 0, string vdb = \"\", float decay = 0) {");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("int index = activatePlayerUnit(\"next\", p, proto, decay);");
code("string pName = kbGetProtoUnitName(proto);");
code("trArmyDispatch(\"\"+p+\",0\",pName,1,trQuestVarGet(vdb+\"x\"),0,trQuestVarGet(vdb+\"z\"),0,true);");
code("return(index);");
code("}");

code("void spawnPlayerClone(int p = 0, string vdb = \"\") {");
code("int class = trQuestVarGet(\"p\"+p+\"class\");");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("yAddToDatabase(\"p\"+p+\"characters\", \"next\");");
code("yAddUpdateVar(\"p\"+p+\"characters\", \"index\", spawnPlayerUnit(p, 1*trQuestVarGet(\"class\"+class+\"proto\"), vdb));");
code("yAddUpdateVar(\"playerUnits\", \"hero\", 1);");
code("yAddToDatabase(\"playerCharacters\", \"next\");");
code("yAddUpdateVar(\"playerCharacters\", \"player\", p);");
code("yAddUpdateVar(\"playerUnits\", \"physicalResist\", trQuestVarGet(\"p\"+p+\"physicalResist\"));");
code("yAddUpdateVar(\"playerUnits\", \"magicResist\", trQuestVarGet(\"p\"+p+\"magicResist\"));");
code("}");

code("void spawnPlayer(int p = 0, string vdb = \"\") {");
code("trQuestVarSet(\"p\"+p+\"unit\", trGetNextUnitScenarioNameNumber());");
code("spawnPlayerClone(p, vdb);");
code("trQuestVarSet(\"p\"+p+\"index\", yGetNewestPointer(\"playerUnits\"));");
code("if (trCurrentPlayer() == p) {");
code("int class = trQuestVarGet(\"p\"+p+\"class\");");
code("string proto = kbGetProtoUnitName(1*trQuestVarGet(\"class\"+class+\"proto\"));");
code("uiFindType(proto);");
code("}");
code("}");

code("void revivePlayer(int p = 0) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"reviveBeam\");");
code("trUnitChangeProtoUnit(\"Rocket\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"unit\");");
code("trUnitDestroy();");
code("spawnPlayer(p, \"dead\"+p+\"pos\");");
code("trSoundPlayFN(\"herorevived.wav\",\"1\",-1,\"\",\"\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"unit\");");
code("trDamageUnitPercent(50);");
code("trQuestVarSet(\"deadPlayerCount\", trQuestVarGet(\"deadPlayerCount\") - 1);");
code("equipRelicsAgain(p);");
code("if (trCurrentPlayer() == p) {");
code("uiLookAtUnitByName(\"\"+1*trQuestVarGet(\"p\"+p+\"unit\"));");
code("}");
code("}");

code("void shootLaser(string start = \"\", string dir = \"\", float dist = -1) {");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\", \"Dwarf\",1,trQuestVarGet(start+\"x\"),0,trQuestVarGet(start+\"z\"),0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Petosuchus Projectile\"));");
code("if (dist < 0) {");
code("trSetSelectedScale(3.0,0.0,80.0);");
code("dist = 60.0;");
code("} else {");
code("trSetSelectedScale(3.0,0.0,dist * 1.3);");
code("}");
code("trSetUnitOrientation(xsVectorSet(0.0-trQuestVarGet(dir+\"x\"),0,0.0-trQuestVarGet(dir+\"z\")), xsVectorSet(0,1,0), true);");
code("yAddToDatabase(\"delayLasers\", \"next\");");
code("yAddUpdateVar(\"delayLasers\", \"dirx\", trQuestVarGet(dir+\"x\"));");
code("yAddUpdateVar(\"delayLasers\", \"dirz\", trQuestVarGet(dir+\"z\"));");
code("yAddUpdateVar(\"delayLasers\", \"next\", trTimeMS() + 2000);");
code("yAddUpdateVar(\"delayLasers\", \"phase\", 0);");
code("yAddUpdateVar(\"delayLasers\", \"dist\", dist);");
code("}");

code("rule spy_find");
code("active");
code("highFrequency");
code("{");
code("int x = 0;");
code("int id = 0;");
code("while(trQuestVarGet(\"spysearch\") < trGetNextUnitScenarioNameNumber()) {");
code("id = kbGetBlockID(\"\"+1*trQuestVarGet(\"spysearch\"), true);");
code("if (kbGetUnitBaseTypeID(id) == kbGetProtoUnitID(\"Spy Eye\")) {");
code("x = modularCounterNext(\"spyfound\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"spyEye\"+x+\"unit\");");
code("if (trUnitAlive() == false) {");
code("trQuestVarSet(trStringQuestVarGet(\"spyName\"+x), -1);");
code("} else {");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("trMutateSelected(1*trQuestVarGet(\"spyEye\"+x));");
code("trQuestVarSet(trStringQuestVarGet(\"spyName\"+x), trQuestVarGet(\"spysearch\"));");
code("}");
code("}");
code("trQuestVarSet(\"spysearch\", 1 + trQuestVarGet(\"spysearch\"));");
code("}");
code("if (trQuestVarGet(\"spyfind\") != trQuestVarGet(\"spyfound\")) {");
code("trQuestVarSet(\"spyreset\", 1 + trQuestVarGet(\"spyreset\"));");
code("if (trQuestVarGet(\"spyreset\") >= 3) {");
code("while (trQuestVarGet(\"spyfind\") != trQuestVarGet(\"spyfound\")) {");
code("x = modularCounterNext(\"spyFound\");");
code("trQuestVarSet(trStringQuestVarGet(\"spyName\"+x), -1);");
code("}");
code("debugLog(\"resetting spyfound\");");
code("}");
code("} else {");
code("trQuestVarSet(\"spyreset\", 0);");
code("}");
code("}");
code("void setupProtounitBounty(string proto = \"\", float armor = 0, int bounty = 2, float relicChance = 0, int relic = -1) {");
code("int p = kbGetProtoUnitID(proto);");
code("trQuestVarSet(\"proto\"+p+\"bounty\", bounty);");
code("trQuestVarSet(\"proto\"+p+\"relicChance\", relicChance);");
code("trQuestVarSet(\"proto\"+p+\"relic\", relic);");
code("trQuestVarSet(\"proto\"+p+\"armor\", armor);");
code("trModifyProtounit(proto, ENEMY_PLAYER, 24, -1);");
code("trModifyProtounit(proto, ENEMY_PLAYER, 25, -1);");
code("trModifyProtounit(proto, ENEMY_PLAYER, 26, -1);");
code("trModifyProtounit(proto, ENEMY_PLAYER, 24, armor);");
code("trModifyProtounit(proto, ENEMY_PLAYER, 25, armor);");
code("trModifyProtounit(proto, ENEMY_PLAYER, 26, armor);");
code("trModifyProtounit(proto, ENEMY_PLAYER, 6, 10);");
code("trModifyProtounit(proto, 1, 6, 10);");

code("trModifyProtounit(proto, ENEMY_PLAYER, 33, 9999999999999999999.0);");
code("trModifyProtounit(proto, ENEMY_PLAYER, 33, -9999999999999999999.0);");
code("trModifyProtounit(proto, ENEMY_PLAYER, 33, 1.0);");
code("trModifyProtounit(proto, ENEMY_PLAYER, 44, 9999999999999999999.0);");
code("trModifyProtounit(proto, ENEMY_PLAYER, 44, -9999999999999999999.0);");
code("trModifyProtounit(proto, ENEMY_PLAYER, 44, 1.0);");
code("trModifyProtounit(proto, ENEMY_PLAYER, 34, 9999999999999999999.0);");
code("trModifyProtounit(proto, ENEMY_PLAYER, 34, -9999999999999999999.0);");
code("trModifyProtounit(proto, ENEMY_PLAYER, 34, 1.0);");
code("trModifyProtounit(proto, ENEMY_PLAYER, 45, 9999999999999999999.0);");
code("trModifyProtounit(proto, ENEMY_PLAYER, 45, -9999999999999999999.0);");
code("trModifyProtounit(proto, ENEMY_PLAYER, 45, 1.0);");
code("}");

code("bool checkEnemyDeactivated(string db = \"\") {");
code("int index = 1*yGetVar(db, \"index\");");
code("if ((yGetVarAtIndex(\"enemies\", \"xActive\", index) == 0) ||");
code("yGetUnitAtIndex(\"enemies\", index) != trQuestVarGet(db)) {");
code("return(true);");
code("}");
code("return(false);");
code("}");

code("void activateEnemy(string db = \"\", int bounty = -1, int relic = -1) {");
code("int id = kbGetBlockID(\"\"+1*trQuestVarGet(db));");
code("int proto = kbGetUnitBaseTypeID(id);");
code("if (bounty < 0) {");
code("bounty = trQuestVarGet(\"proto\"+proto+\"bounty\");");
code("}");
code("if (relic < 0) {");
code("trQuestVarSetFromRand(\"relicChance\", 0, 1, false);");
code("if (trQuestVarGet(\"relicChance\") < trQuestVarGet(\"proto\"+proto+\"relicChance\")) {");
code("relic = trQuestVarGet(\"proto\"+proto+\"relic\");");
code("if (relic == -1) {");
code("relic = trQuestVarGet(\"stage\");");
code("}");
code("}");
code("}");

code("trVectorSetUnitPos(\"spawnPos\", db);");
code("yAddToDatabase(\"enemies\", db);");
code("trQuestVarSetFromRand(\"bounty\", bounty / 2, bounty, true);");
code("yAddUpdateVar(\"enemies\", \"bounty\", trQuestVarGet(\"bounty\"));");
code("yAddUpdateVar(\"enemies\", \"relic\", relic);");
code("yAddUpdateVar(\"enemies\", \"posX\", trQuestVarGet(\"spawnPosX\"));");
code("yAddUpdateVar(\"enemies\", \"posZ\", trQuestVarGet(\"spawnPosZ\"));");
code("yAddUpdateVar(\"enemies\", \"stunStatus\", 0);");
code("yAddUpdateVar(\"enemies\", \"stunTimeout\", 0);");
code("yAddUpdateVar(\"enemies\", \"stunSFX\", 0);");
code("yAddUpdateVar(\"enemies\", \"poisonStatus\", 0);");
code("yAddUpdateVar(\"enemies\", \"poisonTimeout\", 0);");
code("yAddUpdateVar(\"enemies\", \"poisonLast\", 0);");
code("yAddUpdateVar(\"enemies\", \"poisonDamage\", 0);");
code("yAddUpdateVar(\"enemies\", \"poisonSFX\", 0);");
code("yAddUpdateVar(\"enemies\", \"launched\", 0);");
code("yAddUpdateVar(\"enemies\", \"magicResist\", trQuestVarGet(\"proto\"+proto+\"armor\"));");
code("yAddUpdateVar(\"enemies\", \"physicalResist\", trQuestVarGet(\"proto\"+proto+\"armor\"));");
code("yAddUpdateVar(\"enemies\", \"silenceStatus\", 0);");
code("yAddUpdateVar(\"enemies\", \"silenceTimeout\", 0);");
code("yAddUpdateVar(\"enemies\", \"silenceSFX\", 0);");
code("yAddUpdateVar(\"enemies\", \"bomb\", 0);");
code("yAddUpdateVar(\"enemies\", \"deathSentence\", 0);");
code("yAddUpdateVar(\"enemies\", \"missing\", 0);");
code("for(p=1; < ENEMY_PLAYER) {");
code("if (trQuestVarGet(\"p\"+p+\"rideLightning\") == 1) {");
code("yAddToDatabase(\"p\"+p+\"rideLightningTargets\", db);");
code("yAddUpdateVar(\"p\"+p+\"rideLightningTargets\", \"index\", yGetNewestPointer(\"enemies\"));");
code("}");
code("}");

code("switch(proto)");
code("{");
code("case kbGetProtoUnitID(\"Sphinx\"):");
code("{");
code("yAddToDatabase(\"Sphinxes\", db);");
code("yAddUpdateVar(\"Sphinxes\", \"index\", yGetNewestPointer(\"enemies\"));");
code("yAddUpdateVar(\"Sphinxes\", \"step\", 0);");
code("}");
code("case kbGetProtoUnitID(\"Dryad\"):");
code("{");
code("yAddToDatabase(\"Dryads\", db);");
code("yAddUpdateVar(\"dryads\", \"index\", yGetNewestPointer(\"enemies\"));");
code("}");
code("case kbGetProtoUnitID(\"Wadjet\"):");
code("{");
code("yAddToDatabase(\"Dryads\", db);");
code("yAddUpdateVar(\"dryads\", \"index\", yGetNewestPointer(\"enemies\"));");
code("}");
code("case kbGetProtoUnitID(\"Medusa\"):");
code("{");
code("yAddToDatabase(\"Medusas\", db);");
code("yAddUpdateVar(\"Medusas\", \"index\", yGetNewestPointer(\"enemies\"));");
code("yAddUpdateVar(\"Medusas\", \"step\", 0);");
code("}");
code("case kbGetProtoUnitID(\"Mountain Giant\"):");
code("{");
code("yAddToDatabase(\"MountainGiants\", db);");
code("yAddUpdateVar(\"MountainGiants\", \"index\", yGetNewestPointer(\"enemies\"));");
code("yAddUpdateVar(\"MountainGiants\", \"step\", 0);");
code("}");
code("case kbGetProtoUnitID(\"Frost Giant\"):");
code("{");
code("yAddToDatabase(\"FrostGiants\", db);");
code("yAddUpdateVar(\"FrostGiants\", \"index\", yGetNewestPointer(\"enemies\"));");
code("yAddUpdateVar(\"FrostGiants\", \"step\", 0);");
code("}");
code("case kbGetProtoUnitID(\"Valkyrie\"):");
code("{");
code("yAddUpdateVar(\"enemies\", \"magicResist\", 1);");
code("yAddToDatabase(\"Valkyries\", db);");
code("yAddUpdateVar(\"Valkyries\", \"index\", yGetNewestPointer(\"enemies\"));");
code("yAddUpdateVar(\"Valkyries\", \"silenced\", 0);");
code("spyEffect(1*trQuestVarGet(db),");
code("kbGetProtoUnitID(\"Vortex Finish Linked\"), yGetNewVarName(\"Valkyries\", \"sfx\"));");
code("}");
code("case kbGetProtoUnitID(\"Ballista\"):");
code("{");
code("yAddToDatabase(\"ballistas\", db);");
code("yAddUpdateVar(\"ballistas\", \"index\", yGetNewestPointer(\"enemies\"));");
code("}");
code("case kbGetProtoUnitID(\"Colossus\"):");
code("{");
code("yAddUpdateVar(\"enemies\", \"magicResist\", 1);");
code("yAddToDatabase(\"Valkyries\", db);");
code("yAddUpdateVar(\"Valkyries\", \"index\", yGetNewestPointer(\"enemies\"));");
code("spyEffect(1*trQuestVarGet(db),");
code("kbGetProtoUnitID(\"Vortex Finish Linked\"), yGetNewVarName(\"Valkyries\", \"sfx\"));");
code("}");
code("case kbGetProtoUnitID(\"Fire Siphon\"):");
code("{");
code("yAddToDatabase(\"siphons\", db);");
code("yAddUpdateVar(\"siphons\", \"index\", yGetNewestPointer(\"enemies\"));");
code("}");
code("case kbGetProtoUnitID(\"Battle Boar\"):");
code("{");
code("yAddToDatabase(\"battleBoars\", db);");
code("yAddUpdateVar(\"battleBoars\", \"index\", yGetNewestPointer(\"enemies\"));");
code("yAddUpdateVar(\"battleBoars\", \"step\", 0);");
code("}");
code("case kbGetProtoUnitID(\"Automaton SPC\"):");
code("{");
code("yAddToDatabase(\"automatons\", db);");
code("yAddUpdateVar(\"automatons\", \"index\", yGetNewestPointer(\"enemies\"));");
code("}");
code("case kbGetProtoUnitID(\"Behemoth\"):");
code("{");
code("yAddUpdateVar(\"enemies\", \"physicalResist\", 1);");
code("yAddUpdateVar(\"enemies\", \"magicResist\", -1);");
code("}");
code("case kbGetProtoUnitID(\"Scarab\"):");
code("{");
code("yAddUpdateVar(\"enemies\", \"physicalResist\", 1);");
code("yAddUpdateVar(\"enemies\", \"magicResist\", -1);");
code("yAddToDatabase(\"scarabs\", db);");
code("yAddUpdateVar(\"scarabs\", \"index\", yGetNewestPointer(\"enemies\"));");
code("}");
code("case kbGetProtoUnitID(\"Satyr\"):");
code("{");
code("yAddToDatabase(\"Satyrs\", db);");
code("yAddUpdateVar(\"Satyrs\", \"index\", yGetNewestPointer(\"enemies\"));");
code("yAddUpdateVar(\"Satyrs\", \"step\", 0);");
code("}");
code("case kbGetProtoUnitID(\"Avenger\"):");
code("{");
code("yAddToDatabase(\"Avengers\", db);");
code("yAddUpdateVar(\"Avengers\", \"index\", yGetNewestPointer(\"enemies\"));");
code("yAddUpdateVar(\"Avengers\", \"step\", 0);");
code("}");
code("case kbGetProtoUnitID(\"Scorpion Man\"):");
code("{");
code("yAddToDatabase(\"ScorpionMen\", db);");
code("yAddUpdateVar(\"ScorpionMen\", \"index\", yGetNewestPointer(\"enemies\"));");
code("yAddUpdateVar(\"ScorpionMen\", \"step\", 0);");
code("}");
code("case kbGetProtoUnitID(\"Mummy\"):");
code("{");
code("yAddToDatabase(\"Mummies\", db);");
code("yAddUpdateVar(\"Mummies\", \"index\", yGetNewestPointer(\"enemies\"));");
code("yAddUpdateVar(\"Mummies\", \"step\", 0);");
code("}");
code("}");
code("}");


code("rule setup_enemies");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime) {");
code("trModifyProtounit(\"Minion\", ENEMY_PLAYER, 8, -99);");
code("trModifyProtounit(\"Minion\", 1, 8, -99);");

code("setupProtounitBounty(\"Nemean Lion\", 0, 0, 0);");
code("setupProtounitBounty(\"King Folstag\", 0, 0, 0);");
code("setupProtounitBounty(\"Chimera\", 0.25, 0, 0);");
code("setupProtounitBounty(\"Shade of Hades\", 0.25, 0, 0);");
code("setupProtounitBounty(\"Helepolis\", 0.25, 0, 0);");
code("setupProtounitBounty(\"Scylla\", 0.5, 0, 0);");
code("setupProtounitBounty(\"Theris\", 0.5, 0, 0);");
code("setupProtounitBounty(\"Pharaoh of Osiris XP\", 0.47, 0, 0);");

code("setupProtounitBounty(\"Golden Lion\", 0.3, 3);");
code("setupProtounitBounty(\"Anubite\", 0.3, 4, 0.03);");
code("setupProtounitBounty(\"Terracotta Soldier\", 0.3, 4, 0.03);");
code("setupProtounitBounty(\"Sphinx\", 0.3, 5, 0.05);");
code("setupProtounitBounty(\"Petsuchos\", 0.1, 6, 0.1, RELIC_ATTACK_RANGE);");

code("setupProtounitBounty(\"Minion\", 0.1, 2);");
code("setupProtounitBounty(\"Walking Woods Marsh\", 0.2, 3);");
code("setupProtounitBounty(\"Dryad\", 0.2, 4, 0.03);");
code("setupProtounitBounty(\"Centaur\", 0.1, 4, 0.03);");
code("setupProtounitBounty(\"Medusa\", 0.1, 8, 0.15, RELIC_SPELL_DURATION);");
code("setupProtounitBounty(\"Mountain Giant\", 0.3, 10, 0.1);");

code("setupProtounitBounty(\"Fenris Wolf\", 0.2, 4, 0.03);");
code("setupProtounitBounty(\"Valkyrie\", 0, 5, 0.05);");
code("setupProtounitBounty(\"Ballista\", 0, 4, 0.03);");
code("setupProtounitBounty(\"Frost Giant\", 0.3, 10, 0.1);");

code("setupProtounitBounty(\"Automaton SPC\", 0.5, 4, 0);");
code("setupProtounitBounty(\"Colossus\", 0.2, 10, 0.1);");
code("setupProtounitBounty(\"Battle Boar\", 0.3, 8, 0.08);");
code("setupProtounitBounty(\"Fire Siphon\", 0, 8, 0.1);");

code("setupProtounitBounty(\"Cyclops\", 0.2, 6, 0.05);");
code("setupProtounitBounty(\"Satyr\", 0.1, 4, 0.03);");
code("setupProtounitBounty(\"Behemoth\", 1, 10, 0.08);");
code("setupProtounitBounty(\"Avenger\", 0.2, 12, 0.1);");

code("setupProtounitBounty(\"Wadjet\", 0.2, 4, 0.03);");
code("setupProtounitBounty(\"Scorpion Man\", 0.3, 6, 0.05);");
code("setupProtounitBounty(\"Scarab\", 1, 10, 0.08);");
code("setupProtounitBounty(\"Mummy\", 0.6, 12, 0.1);");

code("setupProtounitBounty(\"Hero Boar\", 0, 0, 0);");
code("setupProtounitBounty(\"Hero Boar 2\", 0, 0, 0);");
code("trModifyProtounit(\"Hero Boar\", ENEMY_PLAYER, 27, -999);");
code("trModifyProtounit(\"Hero Boar 2\", ENEMY_PLAYER, 27, -999);");

code("for(class = 1; <= 16) {");
code("setupProtounitBounty(kbGetProtoUnitName(1*trQuestVarGet(\"class\"+class+\"proto\")),");
code("trQuestVarGet(\"proto\"+1*trQuestVarGet(\"class\"+class+\"proto\")+\"armor\"), 8, 0);");
code("}");

code("trModifyProtounit(\"Ballista\", ENEMY_PLAYER, 13, -3);");
code("trModifyProtounit(\"Ballista\", ENEMY_PLAYER, 11, -12);");
code("trModifyProtounit(\"Ballista Shot\", ENEMY_PLAYER, 1, -19);");
code("trModifyProtounit(\"Priest Projectile\", ENEMY_PLAYER, 1, -20);");
code("trModifyProtounit(\"Hero Greek Achilles\", ENEMY_PLAYER, 5, 99);");
code("trModifyProtounit(\"Lancer Hero\", ENEMY_PLAYER, 5, 99);");
code("trModifyProtounit(\"Behemoth\", ENEMY_PLAYER, 24, 1);");
code("trModifyProtounit(\"Behemoth\", ENEMY_PLAYER, 25, 1);");
code("trModifyProtounit(\"Behemoth\", ENEMY_PLAYER, 26, 1);");
code("trModifyProtounit(\"Scarab\", ENEMY_PLAYER, 24, 1);");
code("trModifyProtounit(\"Scarab\", ENEMY_PLAYER, 25, 1);");
code("trModifyProtounit(\"Scarab\", ENEMY_PLAYER, 26, 1);");

code("trModifyProtounit(\"Outpost\", ENEMY_PLAYER, 0, 9999999999999999999.0);");
code("trModifyProtounit(\"Outpost\", ENEMY_PLAYER, 0, -9999999999999999999.0);");
code("trModifyProtounit(\"Outpost\", ENEMY_PLAYER, 0, 47);");
code("trModifyProtounit(\"Outpost\", ENEMY_PLAYER, 24, 1);");
code("trModifyProtounit(\"Outpost\", ENEMY_PLAYER, 25, 1);");
code("trModifyProtounit(\"Outpost\", ENEMY_PLAYER, 26, 1);");

code("trModifyProtounit(\"Pharaoh of Osiris XP\", ENEMY_PLAYER, 0, 9999999999999999999.0);");
code("trModifyProtounit(\"Pharaoh of Osiris XP\", ENEMY_PLAYER, 0, -9999999999999999999.0);");
code("trModifyProtounit(\"Pharaoh of Osiris XP\", ENEMY_PLAYER, 0, 47000);");
code("trModifyProtounit(\"Pharaoh of Osiris XP\", ENEMY_PLAYER, 2, 20);");

code("trModifyProtounit(\"Stymphalian Bird\", 0, 1, 2);");

code("xsDisableSelf();");
code("}");
code("}");

code("void ballistaShotPop() {");
code("int id = 0;");
code("for(x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("id = yDatabaseNext(\"playerUnits\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (zDistanceToVectorSquared(\"playerUnits\", \"pos\") < 16) {");
code("damagePlayerUnit(200);");
code("}");
code("}");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"ballistaShots\", \"next1\"), true);");
code("trUnitSelect(\"\"+1*yGetVar(\"ballistaShots\", \"next2\"), true);");
code("trUnitDestroy();");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"ballistaShots\", true);");
code("trDamageUnitPercent(100);");
code("trUnitChangeProtoUnit(\"Meteorite\");");
code("trSoundPlayFN(\"fireball launch.wav\",\"1\",-1,\"\",\"\");");
code("yRemoveFromDatabase(\"ballistaShots\");");
code("}");

code("void enemiesAlways() {");
code("int old = xsGetContextPlayer();");
code("int p = 0;");
code("int proto = 0;");
code("int id = 0;");
code("int target = 0;");
code("int action = 0;");
code("float amt = 0;");
code("float dist = 0;");
code("float angle = 0;");
code("string pName = \"\";");
code("for (x=xsMin(5, yGetDatabaseCount(\"enemiesIncoming\")); > 0) {");
code("yDatabaseNext(\"enemiesIncoming\", true);");
code("for(p=1; < ENEMY_PLAYER) {");
code("if (trUnitHasLOS(p)) {");
code("activateEnemy(\"enemiesIncoming\");");
code("yRemoveFromDatabase(\"enemiesIncoming\");");
code("break;");
code("}");
code("}");
code("}");

code("if (yGetDatabaseCount(\"enemies\") > 0) {");
code("id = yDatabaseNext(\"enemies\", true);");
code("if ((id == -1) || (trUnitAlive() == false)) {");
code("removeEnemy();");
code("} else if ((kbUnitGetAnimationActionType(id) == 9) &&");
code("(yGetVar(\"enemies\", \"stunStatus\") + yGetVar(\"enemies\", \"poisonStatus\") + yGetVar(\"enemies\", \"silenceStatus\") == 0)) {");
code("ySetVar(\"enemies\", \"missing\", 1 + yGetVar(\"enemies\", \"missing\"));");
code("if (yGetVar(\"enemies\", \"missing\") >= 10) {");
code("for(p=1; < ENEMY_PLAYER) {");
code("if (trUnitHasLOS(p)) {");
code("ySetVar(\"enemies\", \"missing\", 0);");
code("break;");
code("}");
code("}");
code("if (yGetVar(\"enemies\", \"missing\") >= 10) {");
code("yAddToDatabase(\"enemiesIncoming\", \"enemies\");");
code("yRemoveFromDatabase(\"enemies\");");
code("}");
code("}");
code("} else {");
code("stunsAndPoisons(\"enemies\");");
code("trVectorSetUnitPos(\"pos\", \"enemies\");");
code("ySetVar(\"enemies\", \"posX\", trQuestVarGet(\"posX\"));");
code("ySetVar(\"enemies\", \"posZ\", trQuestVarGet(\"posZ\"));");
code("}");
code("}");


code("for (x=xsMin(5, yGetDatabaseCount(\"ballistaShots\")); >0) {");
code("yDatabaseNext(\"ballistaShots\", true);");
code("trVectorSetUnitPos(\"pos\", \"ballistaShots\");");
code("vectorToGrid(\"pos\", \"loc\");");
code("if (terrainIsType(\"loc\", TERRAIN_WALL, TERRAIN_SUB_WALL) || trTimeMS() > yGetVar(\"ballistaShots\", \"timeout\")) {");
code("ballistaShotPop();");
code("} else {");
code("action = 0;");
code("for(p=1; < ENEMY_PLAYER) {");
code("action = action + trCountUnitsInArea(\"\"+1*trQuestVarGet(\"ballistaShots\"),p,\"Unit\",2);");
code("}");
code("if (action > 0) {");
code("ballistaShotPop();");
code("}");
code("}");
code("}");

code("trQuestVarSet(\"sound\", 0);");
code("for(x=xsMin(10, yGetDatabaseCount(\"delayLasers\")); >0) {");
code("id = yDatabaseNext(\"delayLasers\", true);");
code("if (kbGetUnitBaseTypeID(id) == -1) {");
code("yRemoveFromDatabase(\"delayLasers\");");
code("} else if (yGetVar(\"delayLasers\", \"phase\") == 0) {");
code("if (trTimeMS() > yGetVar(\"delayLasers\", \"next\")) {");
code("ySetVar(\"delayLasers\", \"phase\", 1);");
code("ySetVar(\"delayLasers\", \"next\", trTimeMS() + 500);");
code("trSetSelectedScale(6.0,6.0,yGetVar(\"delayLasers\", \"dist\") * 1.3);");
code("trUnitHighlight(3.0,false);");
code("trQuestVarSet(\"sound\", 1);");
code("trVectorSetUnitPos(\"start\", \"delayLasers\");");
code("for(y=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("if (yDatabaseNext(\"playerUnits\", true) == -1 || trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else {");
code("trVectorSetUnitPos(\"pos\", \"playerUnits\");");
code("amt = zDistanceBetweenVectors(\"pos\", \"start\");");
code("if (amt < yGetVar(\"delayLasers\", \"dist\")) {");
code("trQuestVarSet(\"intersectX\", yGetVar(\"delayLasers\", \"dirX\") * amt + trQuestVarGet(\"startX\"));");
code("trQuestVarSet(\"intersectZ\", yGetVar(\"delayLasers\", \"dirZ\") * amt + trQuestVarGet(\"startZ\"));");
code("if (zDistanceBetweenVectorsSquared(\"pos\", \"intersect\") < 1.0) {");
code("damagePlayerUnit(300);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("} else {");
code("trQuestVarSet(\"scale\", 0.012 * (yGetVar(\"delayLasers\", \"next\") - trTimeMS()));");
code("if (trQuestVarGet(\"scale\") < 0) {");
code("trUnitDestroy();");
code("yRemoveFromDatabase(\"delayLasers\");");
code("} else {");
code("trSetSelectedScale(trQuestVarGet(\"scale\"), trQuestVarGet(\"scale\"), yGetVar(\"delayLasers\", \"dist\") * 1.3);");
code("}");
code("}");
code("}");

code("if (trQuestVarGet(\"sound\") == 1) {");
code("trSoundPlayFN(\"sky passage.wav\", \"1\", -1,\"\",\"\");");
code("trSoundPlayFN(\"phoenixattack.wav\", \"1\", -1,\"\",\"\");");
code("trQuestVarSet(\"sound\", 0);");
code("}");

code("xsSetContextPlayer(ENEMY_PLAYER);");
code("while(trQuestVarGet(\"nextProj\") < trGetNextUnitScenarioNameNumber()) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"nextProj\", true);");
code("if (trUnitIsOwnedBy(ENEMY_PLAYER)) {");
code("id = kbGetBlockID(\"\"+1*trQuestVarGet(\"nextProj\"), true);");
code("proto = kbGetUnitBaseTypeID(id);");
code("if (proto == kbGetProtoUnitID(\"Ballista Shot\")) {");
code("trVectorSetUnitPos(\"pos\", \"nextProj\");");
code("trQuestVarSet(\"closest\", 0);");
code("trQuestVarSet(\"closestName\", 0);");
code("trQuestVarSet(\"closestDistance\", 25);");
code("for (x=yGetDatabaseCount(\"ballistas\"); >0) {");
code("id = yDatabaseNext(\"ballistas\", true);");
code("if (trUnitAlive() == false) {");
code("yRemoveFromDatabase(\"ballistas\");");
code("} else if (kbUnitGetAnimationActionType(id) == 12) {");
code("trQuestVarSet(\"currentDistance\", zDistanceToVectorSquared(\"ballistas\", \"pos\"));");
code("if (trQuestVarGet(\"currentDistance\") < trQuestVarGet(\"closestDistance\")) {");
code("trQuestVarCopy(\"closestDistance\", \"currentDistance\");");
code("trQuestVarSet(\"closest\", id);");
code("trQuestVarCopy(\"closestName\", \"ballistas\");");
code("}");
code("}");
code("}");
code("trQuestVarSet(\"target\", trGetUnitScenarioNameNumber(kbUnitGetTargetUnitID(1*trQuestVarGet(\"closest\"))));");
code("trVectorSetUnitPos(\"start\", \"closestName\");");
code("trVectorSetUnitPos(\"end\", \"target\");");
code("vectorSetAsTargetVector(\"target\", \"start\", \"end\", 100.0);");

code("trUnitSelectClear();");
code("trUnitSelectByQV(\"nextProj\", true);");
code("trUnitConvert(ENEMY_PLAYER);");
code("trUnitChangeProtoUnit(\"Transport Ship Greek\");");

code("trQuestVarSet(\"next1\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\", \"Dwarf\", 1, 1,0,1,0,true);");
code("trQuestVarSet(\"next2\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\", \"Dwarf\", 1, 1,0,1,0,false);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(ENEMY_PLAYER);");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"nextProj\"));");
code("trUnitChangeProtoUnit(\"Dwarf\");");

code("yAddToDatabase(\"ballistaShots\", \"next2\");");
code("yAddUpdateVar(\"ballistaShots\", \"next1\", trQuestVarGet(\"next1\"));");
code("yAddUpdateVar(\"ballistaShots\", \"next2\", trQuestVarGet(\"nextProj\"));");
code("yAddUpdateVar(\"ballistaShots\", \"timeout\", trTimeMS() + 5000);");

code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"next1\"), true);");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"nextProj\"), true);");
code("trUnitChangeProtoUnit(\"Relic\");");

code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"next2\"), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Hero Greek Achilles\"));");

code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"next1\"), true);");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"next2\"));");

code("trMutateSelected(kbGetProtoUnitID(\"Ballista Shot\"));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"nextProj\", true);");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"next2\"));");
code("trMutateSelected(kbGetProtoUnitID(\"Fire Siphon Fire\"));");
code("trUnitConvert(0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"next2\"), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Priest Projectile\"));");
code("trSetSelectedScale(0,50,0);");
code("trSetUnitOrientation(zGetUnitVector(\"start\", \"end\"), xsVectorSet(0,1,0), true);");
code("trUnitMoveToPoint(trQuestVarGet(\"targetx\"),0,trQuestVarGet(\"targetz\"), -1, false);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"next1\"), true);");
code("trUnitConvert(0);");
code("} else if (proto == kbGetProtoUnitID(\"Fire Siphon Fire\")) {");
code("if (yGetDatabaseCount(\"siphons\") > 0) {");
code("trVectorSetUnitPos(\"pos\", \"nextProj\");");
code("trUnitChangeProtoUnit(\"Lightning sparks\");");
code("trQuestVarSet(\"closest\", -1);");
code("trQuestVarSet(\"closestName\", 0);");
code("trQuestVarSet(\"closestDistance\", 25);");
code("for (x=yGetDatabaseCount(\"siphons\"); >0) {");
code("id = yDatabaseNext(\"siphons\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("yRemoveFromDatabase(\"siphons\");");
code("} else if (kbUnitGetAnimationActionType(id) == 12) {");
code("trQuestVarSet(\"currentDistance\", zDistanceToVectorSquared(\"siphons\", \"pos\"));");
code("if (trQuestVarGet(\"currentDistance\") < trQuestVarGet(\"closestDistance\")) {");
code("trQuestVarCopy(\"closestDistance\", \"currentDistance\");");
code("trQuestVarSet(\"closest\", id);");
code("trQuestVarCopy(\"closestName\", \"siphons\");");
code("}");
code("}");
code("}");
code("if (trQuestVarGet(\"closest\") >= 0) {");
code("trQuestVarSet(\"target\", trGetUnitScenarioNameNumber(kbUnitGetTargetUnitID(1*trQuestVarGet(\"closest\"))));");
code("trSoundPlayFN(\"skypassagein.wav\",\"1\",-1,\"\",\"\");");
code("trVectorSetUnitPos(\"start\", \"closestName\");");
code("trVectorSetUnitPos(\"pos\", \"target\");");
code("trVectorQuestVarSet(\"dir\", zGetUnitVector(\"start\", \"pos\"));");
code("shootLaser(\"start\", \"dir\");");
code("}");
code("}");
code("} else if (proto == kbGetProtoUnitID(\"Mummy Flies\")) {");
code("if (yGetDatabaseCount(\"Mummies\") > 0) {");
code("trUnitChangeProtoUnit(\"Rocket\");");
code("trVectorSetUnitPos(\"pos\", \"nextProj\");");
code("trQuestVarSet(\"closest\", -1);");
code("trQuestVarSet(\"closestName\", 0);");
code("trQuestVarSet(\"closestDistance\", 25);");
code("for (x=yGetDatabaseCount(\"Mummies\"); >0) {");
code("id = yDatabaseNext(\"Mummies\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("yRemoveFromDatabase(\"Mummies\");");
code("} else if (kbUnitGetAnimationActionType(id) == 12) {");
code("trQuestVarSet(\"currentDistance\", zDistanceToVectorSquared(\"Mummies\", \"pos\"));");
code("if (trQuestVarGet(\"currentDistance\") < trQuestVarGet(\"closestDistance\")) {");
code("trQuestVarCopy(\"closestDistance\", \"currentDistance\");");
code("trQuestVarSet(\"closest\", id);");
code("trQuestVarCopy(\"closestName\", \"Mummies\");");
code("}");
code("}");
code("}");
code("if (trQuestVarGet(\"closest\") >= 0) {");
code("trQuestVarSet(\"target\", trGetUnitScenarioNameNumber(kbUnitGetTargetUnitID(1*trQuestVarGet(\"closest\"))));");
code("trVectorSetUnitPos(\"start\", \"closestName\");");
code("trVectorSetUnitPos(\"pos\", \"target\");");
code("trVectorQuestVarSet(\"dir\", zGetUnitVector(\"start\", \"pos\"));");
code("addGenericProj(\"MummyBalls\",\"start\",\"dir\",kbGetProtoUnitID(\"Kronny Birth SFX\"),2,8,4.5);");
code("yAddUpdateVar(\"MummyBalls\", \"prevX\", trQuestVarGet(\"startx\"));");
code("yAddUpdateVar(\"MummyBalls\", \"prevZ\", trQuestVarGet(\"startz\"));");
code("yAddUpdateVar(\"MummyBalls\", \"dist\", 4.0);");
code("yAddUpdateVar(\"MummyBalls\", \"type\", STATUS_SILENCE);");
code("}");
code("}");
code("}");
code("}");
code("trQuestVarSet(\"nextProj\", 1 + trQuestVarGet(\"nextProj\"));");
code("}");

code("if (yGetDatabaseCount(\"ambushRooms\") > 0) {");
code("yDatabaseNext(\"ambushRooms\");");
code("trQuestVarSet(\"posX\", yGetVar(\"ambushRooms\", \"posX\"));");
code("trQuestVarSet(\"posZ\", yGetVar(\"ambushRooms\", \"posZ\"));");
code("for(p=1; < ENEMY_PLAYER) {");
code("if (zDistanceToVectorSquared(\"p\"+p+\"unit\", \"pos\") < 100) {");
code("pName = trStringQuestVarGet(\"enemyProto\"+1*yGetVar(\"ambushRooms\", \"type\"));");
code("trQuestVarSetFromRand(\"count\", trQuestVarGet(\"stage\"), 11, true);");
code("angle = 6.283185 / trQuestVarGet(\"count\");");
code("amt = 0;");
code("trQuestVarSet(\"angle\",0);");
code("for(x=trQuestVarGet(\"count\"); >0) {");
code("trQuestVarSetFromRand(\"dist\", 6, 18, true);");
code("trVectorSetFromAngle(\"dir\", trQuestVarGet(\"angle\"));");
code("trVectorScale(\"dir\", trQuestVarGet(\"dist\"));");
code("trQuestVarSet(\"dirX\", trQuestVarGet(\"posX\") + trQuestVarGet(\"dirX\"));");
code("trQuestVarSet(\"dirZ\", trQuestVarGet(\"posZ\") + trQuestVarGet(\"dirZ\"));");
code("amt = fModulo(360.0, trQuestVarGet(\"angle\") * 180.0 / 3.141592 - 180.0);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",pName,1,trQuestVarGet(\"dirX\"),0,trQuestVarGet(\"dirZ\"),amt,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitConvert(ENEMY_PLAYER);");
code("activateEnemy(\"next\");");
code("trQuestVarSet(\"angle\", trQuestVarGet(\"angle\") + angle);");
code("}");
code("trSoundPlayFN(\"attackwarning.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"wild.wav\",\"1\",-1,\"\",\"\");");
code("yRemoveFromDatabase(\"ambushRooms\");");
code("yRemoveUpdateVar(\"ambushRooms\", \"posX\");");
code("yRemoveUpdateVar(\"ambushRooms\", \"posZ\");");
code("yRemoveUpdateVar(\"ambushRooms\", \"type\");");
code("break;");
code("}");
code("}");
code("}");

code("if (yGetDatabaseCount(\"sphinxes\") > 0) {");
code("id = yDatabaseNext(\"sphinxes\", true);");
code("if (id == -1 || trUnitAlive() == false || checkEnemyDeactivated(\"sphinxes\")) {");
code("if (trUnitAlive()) {");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("} else {");
code("trUnitChangeProtoUnit(\"Sphinx\");");
code("}");
code("yRemoveFromDatabase(\"sphinxes\");");
code("yRemoveUpdateVar(\"sphinxes\", \"step\");");
code("} else if (yGetVarAtIndex(\"enemies\", \"silenceStatus\", 1*yGetVar(\"sphinxes\", \"index\")) == 1) {");
code("ySetVar(\"sphinxes\", \"step\", 1);");
code("} else if (trTimeMS() > yGetVar(\"sphinxes\", \"next\")) {");
code("switch(1*yGetVar(\"sphinxes\", \"step\"))");
code("{");
code("case 0:");
code("{");
code("if (kbUnitGetAnimationActionType(id) == 6) {");
code("ySetVar(\"sphinxes\", \"next\", trTimeMS() + 1600);");
code("ySetVar(\"sphinxes\", \"step\", 1);");
code("trUnitOverrideAnimation(39,0,false,false,-1);");
code("trVectorSetUnitPos(\"pos\", \"sphinxes\");");
code("for(p=1; < ENEMY_PLAYER) {");
code("if (zDistanceToVectorSquared(\"p\"+p+\"unit\", \"pos\") < 16) {");
code("silencePlayer(p, 5);");
code("if ((trQuestVarGet(\"p\"+p+\"nickQuestProgress\") == 1) &&");
code("trQuestVarGet(\"p\"+p+\"nickEquipped\") == 1) {");
code("trQuestVarSet(\"p\"+p+\"nickQuestProgress\", 2);");
code("if (trCurrentPlayer() == p) {");
code("xsEnableRule(\"nick_next_dialog\");");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");
code("case 1:");
code("{");
code("ySetVar(\"sphinxes\", \"next\", trTimeMS() + 10000);");
code("ySetVar(\"sphinxes\", \"step\", 0);");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("}");
code("}");
code("}");
code("}");

code("if (yGetDatabaseCount(\"MountainGiants\") > 0) {");
code("id = yDatabaseNext(\"MountainGiants\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("trQuestVarSet(\"giantKills\", 1 + trQuestVarGet(\"giantKills\"));");
code("trUnitChangeProtoUnit(\"Mountain Giant\");");
code("yRemoveFromDatabase(\"MountainGiants\");");
code("yRemoveUpdateVar(\"MountainGiants\", \"step\");");
code("} else if (checkEnemyDeactivated(\"MountainGiants\")) {");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("yRemoveFromDatabase(\"MountainGiants\");");
code("} else if (yGetVarAtIndex(\"enemies\", \"silenceStatus\", 1*yGetVar(\"MountainGiants\", \"index\")) == 1) {");
code("ySetVar(\"MountainGiants\", \"step\", 2);");
code("} else if (trTimeMS() > yGetVar(\"MountainGiants\", \"next\")) {");
code("switch(1*yGetVar(\"MountainGiants\", \"step\"))");
code("{");
code("case 0:");
code("{");
code("if (kbUnitGetAnimationActionType(id) == 6) {");
code("target = kbUnitGetTargetUnitID(id);");
code("trVectorQuestVarSet(\"end\", kbGetBlockPosition(\"\"+trGetUnitScenarioNameNumber(target)));");
code("ySetVarFromVector(\"MountainGiants\", \"end\", \"end\");");

code("ySetVar(\"MountainGiants\", \"next\", trTimeMS() + 1800);");
code("ySetVar(\"MountainGiants\", \"step\", 1);");
code("trUnitOverrideAnimation(39,0,false,false,-1);");
code("}");
code("}");
code("case 1:");
code("{");
code("trVectorSetUnitPos(\"pos\", \"MountainGiants\");");
code("yVarToVector(\"MountainGiants\", \"end\");");
code("for(x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("id = yDatabaseNext(\"playerUnits\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (zDistanceToVectorSquared(\"playerUnits\", \"end\") < 4) {");
code("damagePlayerUnit(100 + 100 * trQuestVarGet(\"stage\"));");
code("if (yGetVar(\"playerUnits\", \"hero\") == 1 && trCurrentPlayer() == yGetVar(\"playerUnits\", \"player\")) {");
code("trCameraShake(0.7, 0.7);");
code("}");
code("}");
code("}");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"endx\"),0,trQuestVarGet(\"endz\"),45,true);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"endx\"),0,trQuestVarGet(\"endz\"),135,false);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Tartarian Gate Flame\");");
code("ySetVar(\"MountainGiants\", \"step\", 2);");
code("ySetVar(\"MountainGiants\", \"next\", yGetVar(\"MountainGiants\", \"next\") + 1200);");

code("}");
code("case 2:");
code("{");
code("ySetVar(\"MountainGiants\", \"step\", 0);");
code("ySetVar(\"MountainGiants\", \"next\", trTimeMS() + 15000);");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("}");
code("}");
code("} else {");
code("action = yGetVarAtIndex(\"enemies\", \"stunStatus\", 1*yGetVar(\"MountainGiants\", \"index\"));");
code("action = action + yGetVarAtIndex(\"enemies\", \"launched\", 1*yGetVar(\"MountainGiants\", \"index\"));");
code("if (action > 0 && yGetVar(\"MountainGiants\", \"step\") == 1) {");
code("ySetVar(\"MountainGiants\", \"step\", 0);");
code("ySetVar(\"MountainGiants\", \"next\", trTimeMS() + 15000);");
code("}");
code("}");
code("}");

code("for(x=xsMin(4, yGetDatabaseCount(\"MedusaBalls\")); >0) {");
code("action = processGenericProj(\"MedusaBalls\");");
code("trVectorSetUnitPos(\"pos\", \"MedusaBalls\");");
code("vectorToGrid(\"pos\", \"loc\");");
code("for(y=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("id = yDatabaseNext(\"playerUnits\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (zDistanceToVectorSquared(\"playerUnits\", \"pos\") < 2.0) {");
code("stunUnit(\"playerUnits\", 3.0);");
code("action = PROJ_REMOVE;");
code("break;");
code("}");
code("}");
code("if (action == PROJ_FALLING) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"MedusaBalls\", \"target\"));");
code("if (trUnitAlive()) {");
code("trVectorQuestVarSet(\"end\", kbGetBlockPosition(\"\"+1*yGetVar(\"MedusaBalls\", \"target\")));");
code("trVectorQuestVarSet(\"dir\", zGetUnitVector(\"pos\", \"end\"));");
code("ySetVarFromVector(\"MedusaBalls\", \"dir\", \"dir\");");
code("}");
code("} else if (action == PROJ_BOUNCE) {");
code("ySetVar(\"MedusaBalls\", \"bounces\", yGetVar(\"MedusaBalls\", \"bounces\") - 1);");
code("} else if (action == PROJ_REMOVE ||");
code("terrainIsType(\"loc\", TERRAIN_WALL, TERRAIN_SUB_WALL) ||");
code("yGetVar(\"MedusaBalls\", \"bounces\") <= 0) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"MedusaBalls\");");
code("trUnitChangeProtoUnit(\"Conversion SFX\");");
code("yRemoveFromDatabase(\"MedusaBalls\");");
code("}");
code("}");

code("if (yGetDatabaseCount(\"Medusas\") >0) {");
code("id = yDatabaseNext(\"Medusas\", true);");
code("if (id == -1 || trUnitAlive() == false || checkEnemyDeactivated(\"Medusas\")) {");
code("trUnitChangeProtoUnit(\"Medusa\");");
code("yRemoveFromDatabase(\"Medusas\");");
code("yRemoveUpdateVar(\"Medusas\", \"step\");");
code("} else if (yGetVarAtIndex(\"enemies\", \"silenceStatus\", 1*yGetVar(\"Medusas\", \"index\")) == 1) {");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("ySetVar(\"Medusas\", \"step\", 2);");
code("} else if (trTimeMS() > yGetVar(\"Medusas\", \"next\")) {");
code("switch(1*yGetVar(\"Medusas\", \"step\"))");
code("{");
code("case 0:");
code("{");
code("if (kbUnitGetAnimationActionType(id) == 12) {");
code("target = kbUnitGetTargetUnitID(id);");
code("ySetVar(\"Medusas\", \"target\", trGetUnitScenarioNameNumber(target));");

code("ySetVar(\"Medusas\", \"step\", 1);");
code("ySetVar(\"Medusas\", \"next\", trTimeMS() + 1200);");
code("trUnitOverrideAnimation(40,0,false,false,-1);");
code("}");
code("}");
code("case 1:");
code("{");
code("trVectorQuestVarSet(\"end\", kbGetBlockPosition(\"\"+1*yGetVar(\"Medusas\", \"target\")));");
code("trVectorSetUnitPos(\"start\", \"Medusas\");");
code("trVectorQuestVarSet(\"dir\", zGetUnitVector(\"start\", \"end\"));");
code("addGenericProj(\"MedusaBalls\",\"start\",\"dir\",kbGetProtoUnitID(\"Curse SFX\"),2,4,4.5);");
code("yAddUpdateVar(\"MedusaBalls\", \"target\", yGetVar(\"Medusas\", \"target\"));");
code("yAddUpdateVar(\"MedusaBalls\", \"bounces\", 10);");
code("ySetVar(\"Medusas\", \"step\", 2);");
code("ySetVar(\"Medusas\", \"next\", yGetVar(\"Medusas\", \"next\") + 800);");
code("}");
code("case 2:");
code("{");
code("ySetVar(\"Medusas\", \"step\", 0);");
code("ySetVar(\"Medusas\", \"next\", trTimeMS() + 18000);");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("}");
code("}");
code("} else {");
code("action = yGetVarAtIndex(\"enemies\", \"stunStatus\", 1*yGetVar(\"Medusas\", \"index\"));");
code("action = action + yGetVarAtIndex(\"enemies\", \"launched\", 1*yGetVar(\"Medusas\", \"index\"));");
code("if (action > 0 && yGetVar(\"Medusas\", \"step\") == 1) {");
code("ySetVar(\"Medusas\", \"step\", 0);");
code("ySetVar(\"Medusas\", \"next\", trTimeMS() + 18000);");
code("}");
code("}");
code("}");

code("if (yGetDatabaseCount(\"Valkyries\") > 0) {");
code("id = yDatabaseNext(\"Valkyries\", true);");
code("if (id == -1 || trUnitAlive() == false || checkEnemyDeactivated(\"Valkyries\")) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"Valkyries\", \"sfx\"), true);");
code("trUnitDestroy();");
code("yRemoveFromDatabase(\"Valkyries\");");
code("} else {");
code("id = yGetPointer(\"enemies\");");
code("if (ySetPointer(\"enemies\", 1*yGetVar(\"Valkyries\", \"index\"))) {");
code("ySetVar(\"enemies\", \"magicResist\", 1 - yGetVar(\"enemies\", \"silenceStatus\"));");
code("if (yGetVar(\"enemies\", \"silenceStatus\") != yGetVar(\"Valkyries\", \"silenced\")) {");
code("ySetVar(\"Valkyries\", \"silenced\", yGetVar(\"enemies\", \"silenceStatus\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"Valkyries\", \"sfx\"), true);");
code("if (yGetVar(\"enemies\", \"silenceStatus\") == 1) {");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");
code("} else {");
code("trMutateSelected(kbGetProtoUnitID(\"Vortex Finish Linked\"));");
code("}");
code("}");
code("ySetPointer(\"enemies\", id);");
code("}");
code("}");
code("}");

code("if (yGetDatabaseCount(\"Dryads\") > 0) {");
code("id = yDatabaseNext(\"Dryads\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("if (yGetVar(\"dryads\", \"silenceStatus\") == 0) {");
code("yVarToVector(\"Dryads\", \"pos\");");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"posX\"),0,trQuestVarGet(\"posZ\"),0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Lampades Blood\");");
code("for(x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("id = yDatabaseNext(\"playerUnits\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (zDistanceToVectorSquared(\"playerUnits\", \"pos\") < 16) {");
code("poisonUnit(\"playerUnits\", 10.0, 5.0 * trQuestVarGet(\"stage\"));");
code("}");
code("}");
code("if (trQuestVarGet(\"p\"+trCurrentPlayer()+\"nickQuestProgress\") == 2) {");
code("if (zDistanceToVectorSquared(\"p\"+trCurrentPlayer()+\"unit\", \"pos\") < 16) {");
code("trQuestVarSet(\"p\"+trCurrentPlayer()+\"nickQuestProgress\", 3);");
code("xsEnableRule(\"nick_next_dialog\");");
code("}");
code("}");
code("}");
code("yRemoveFromDatabase(\"Dryads\");");
code("} else if (checkEnemyDeactivated(\"Dryads\")) {");
code("yRemoveFromDatabase(\"Dryads\");");
code("} else {");
code("trVectorSetUnitPos(\"pos\", \"Dryads\");");
code("ySetVarFromVector(\"Dryads\", \"pos\", \"pos\");");
code("ySetVar(\"Dryads\", \"silenceStatus\", 1*yGetVarAtIndex(\"enemies\", \"silenceStatus\", 1*yGetVar(\"Dryads\", \"index\")));");
code("}");
code("}");

code("if (yGetDatabaseCount(\"scarabs\") > 0) {");
code("id = yDatabaseNext(\"scarabs\", true);");
code("if (id == -1 || trUnitAlive() == false || checkEnemyDeactivated(\"scarabs\")) {");
code("if (yGetVar(\"scarabs\", \"silenceStatus\") == 0) {");
code("yVarToVector(\"scarabs\", \"pos\");");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"posX\"),0,trQuestVarGet(\"posZ\"),0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Pestilence SFX1\");");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"posX\"),0,trQuestVarGet(\"posZ\"),0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(ENEMY_PLAYER);");
code("trUnitChangeProtoUnit(\"Victory Marker\");");
code("}");
code("yRemoveFromDatabase(\"scarabs\");");
code("} else if (checkEnemyDeactivated(\"scarabs\")) {");
code("yRemoveFromDatabase(\"scarabs\");");
code("} else {");
code("trVectorSetUnitPos(\"pos\", \"scarabs\");");
code("ySetVarFromVector(\"scarabs\", \"pos\", \"pos\");");
code("ySetVar(\"scarabs\", \"silenceStatus\", 1*yGetVarAtIndex(\"enemies\", \"silenceStatus\", 1*yGetVar(\"scarabs\", \"index\")));");
code("}");
code("}");

code("if (yGetDatabaseCount(\"automatonBombs\") > 0) {");
code("yDatabaseNext(\"automatonBombs\");");
code("if (trTimeMS() > yGetVar(\"automatonBombs\", \"timeout\")) {");
code("yVarToVector(\"automatonBombs\", \"pos\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"automatonBombs\", true);");
code("trDamageUnitPercent(-100);");
code("trUnitChangeProtoUnit(\"Tartarian Gate Flame\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"automatonBombs\", true);");
code("trDamageUnitPercent(-100);");
code("trSetSelectedScale(1.0,1.0,0.4);");
code("yRemoveFromDatabase(\"automatonBombs\");");
code("for(x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("if (yDatabaseNext(\"playerUnits\", true) == -1 || trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (zDistanceToVectorSquared(\"playerUnits\", \"pos\") < 16) {");
code("damagePlayerUnit(200);");
code("}");
code("}");
code("}");
code("}");

code("if (yGetDatabaseCount(\"automatons\") > 0) {");
code("if (yDatabaseNext(\"automatons\", true) == -1 || trUnitAlive() == false) {");
code("if (yGetVar(\"automatons\", \"silenceStatus\") == 0) {");
code("trUnitHighlight(3.0, true);");
code("trSoundPlayFN(\"gatherpoint.wav\",\"1\",-1,\"\",\"\");");
code("yAddToDatabase(\"automatonBombs\", \"automatons\");");
code("yAddUpdateVar(\"automatonBombs\", \"timeout\", trTimeMS() + 3000);");
code("yAddUpdateVar(\"automatonBombs\", \"posx\", yGetVar(\"automatons\", \"posx\"));");
code("yAddUpdateVar(\"automatonBombs\", \"posz\", yGetVar(\"automatons\", \"posz\"));");
code("}");
code("yRemoveFromDatabase(\"automatons\");");
code("} else if (checkEnemyDeactivated(\"automatons\")) {");
code("yRemoveFromDatabase(\"automatons\");");
code("} else {");
code("trVectorSetUnitPos(\"pos\", \"automatons\");");
code("ySetVarFromVector(\"automatons\", \"pos\", \"pos\");");
code("ySetVar(\"automatons\", \"silenceStatus\", 1*yGetVarAtIndex(\"enemies\", \"silenceStatus\", 1*yGetVar(\"automatons\", \"index\")));");
code("}");
code("}");

code("if(yGetDatabaseCount(\"frostGiants\") >0) {");
code("id = yDatabaseNext(\"frostGiants\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("trQuestVarSet(\"giantKills\", 1 + trQuestVarGet(\"giantKills\"));");
code("if (trQuestVarGet(\"frostGiantHunt\") == 1) {");
code("trQuestVarSet(\"frostGiantBones\", 1 + trQuestVarGet(\"frostGiantBones\"));");
code("}");
code("trUnitChangeProtoUnit(\"Frost Giant\");");
code("yRemoveFromDatabase(\"frostGiants\");");
code("yRemoveUpdateVar(\"frostGiants\", \"step\");");
code("} else if (checkEnemyDeactivated(\"frostGiants\")) {");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("yRemoveFromDatabase(\"frostGiants\");");
code("} else if (yGetVarAtIndex(\"enemies\", \"silenceStatus\", 1*yGetVar(\"frostGiants\", \"index\")) == 1) {");
code("ySetVar(\"frostGiants\", \"step\", 2);");
code("} else if (trTimeMS() > yGetVar(\"frostGiants\", \"specialnext\")) {");
code("switch(1*yGetVar(\"frostGiants\", \"step\"))");
code("{");
code("case 0:");
code("{");
code("if (kbUnitGetAnimationActionType(id) == 6) {");
code("target = kbUnitGetTargetUnitID(id);");
code("ySetVar(\"frostGiants\", \"target\", trGetUnitScenarioNameNumber(target));");
code("ySetVar(\"frostGiants\", \"step\", 1);");
code("ySetVar(\"frostGiants\", \"specialnext\", trTimeMS() + 1400);");
code("trUnitOverrideAnimation(40,0,false,false,-1);");
code("}");
code("}");
code("case 1:");
code("{");
code("action = 0;");
code("for (x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("if (yGetVar(\"frostGiants\", \"target\") == yDatabaseNext(\"playerUnits\")) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"playerUnits\");");
code("stunUnit(\"playerUnits\", 3.0);");
code("action = 1;");
code("break;");
code("}");
code("}");
code("ySetVar(\"frostGiants\", \"step\", 2);");
code("ySetVar(\"frostGiants\", \"specialnext\", yGetVar(\"frostGiants\", \"specialnext\") + 600);");
code("if (action == 0) {");
code("ySetVar(\"frostGiants\", \"target\", -1);");
code("} else if (trQuestVarGet(\"p\"+trCurrentPlayer()+\"nickQuestProgress\") == 3) {");
code("if (yGetVar(\"frostGiants\", \"target\") == trQuestVarGet(\"p\"+trCurrentPlayer()+\"unit\")) {");
code("trQuestVarSet(\"p\"+trCurrentPlayer()+\"nickQuestProgress\", 4);");
code("xsEnableRule(\"nick_next_dialog\");");
code("}");
code("}");
code("}");
code("case 2:");
code("{");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("ySetVar(\"frostGiants\", \"step\", 0);");
code("if (yGetVar(\"frostGiants\", \"target\") == -1) {");
code("ySetVar(\"frostGiants\", \"specialnext\", trTimeMS());");
code("} else {");
code("ySetVar(\"frostGiants\", \"specialnext\", trTimeMS() + 15000);");
code("}");
code("}");
code("}");
code("} else {");
code("action = yGetVarAtIndex(\"enemies\", \"stunStatus\", 1*yGetVar(\"frostGiants\", \"index\"));");
code("action = action + yGetVarAtIndex(\"enemies\", \"launched\", 1*yGetVar(\"frostGiants\", \"index\"));");
code("if (action > 0 && yGetVar(\"frostGiants\", \"step\") == 1) {");
code("ySetVar(\"frostGiants\", \"step\", 0);");
code("ySetVar(\"frostGiants\", \"next\", trTimeMS() + 18000);");
code("}");
code("}");
code("}");

code("if (yGetDatabaseCount(\"barrages\") > 0) {");
code("yDatabaseNext(\"barrages\");");
code("if (trTimeMS() > yGetVar(\"barrages\", \"next\")) {");
code("ySetVar(\"barrages\", \"next\", 300 + yGetVar(\"barrages\", \"next\"));");
code("yVarToVector(\"barrages\", \"pos\");");
code("yVarToVector(\"barrages\", \"dir\");");
code("if (yGetVar(\"barrages\", \"count\") <= 3) {");
code("for(x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("if (yDatabaseNext(\"playerUnits\", true) == -1 || trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (zDistanceToVectorSquared(\"playerUnits\", \"pos\") < 9.0) {");
code("damagePlayerUnit(100);");
code("}");
code("}");
code("}");

code("if (yGetVar(\"barrages\", \"count\") >= 0) {");
code("trQuestVarSet(\"endx\", trQuestVarGet(\"posx\") + 4.0 * trQuestVarGet(\"dirx\"));");
code("trQuestVarSet(\"endz\", trQuestVarGet(\"posz\") + 4.0 * trQuestVarGet(\"dirz\"));");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"endx\"),0,trQuestVarGet(\"endz\"),0,true);");
code("trArmySelect(\"1,0\");");
code("trSetUnitOrientation(trVectorQuestVarGet(\"dir\"),vector(0,1,0),true);");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Barrage\");");
code("}");


code("ySetVar(\"barrages\", \"count\", yGetVar(\"barrages\", \"count\") - 1);");
code("trQuestVarSet(\"posx\", trQuestVarGet(\"posx\") + 2.0 * trQuestVarGet(\"dirx\"));");
code("trQuestVarSet(\"posz\", trQuestVarGet(\"posz\") + 2.0 * trQuestVarGet(\"dirz\"));");
code("vectorToGrid(\"pos\", \"loc\");");
code("if (terrainIsType(\"loc\", TERRAIN_WALL, TERRAIN_SUB_WALL) || yGetVar(\"barrages\", \"count\") <= -2) {");
code("yRemoveFromDatabase(\"barrages\");");
code("} else {");
code("ySetVarFromVector(\"barrages\", \"pos\", \"pos\");");
code("}");
code("}");
code("}");

code("if(yGetDatabaseCount(\"Satyrs\") >0) {");
code("id = yDatabaseNext(\"Satyrs\", true);");
code("if (id == -1 || trUnitAlive() == false || checkEnemyDeactivated(\"Satyrs\")) {");
code("yRemoveFromDatabase(\"Satyrs\");");
code("yRemoveUpdateVar(\"Satyrs\", \"step\");");
code("} else if (yGetVarAtIndex(\"enemies\", \"silenceStatus\", 1*yGetVar(\"Satyrs\", \"index\")) == 1) {");
code("ySetVar(\"Satyrs\", \"specialnext\", trTimeMS() + 10000);");
code("} else if (trTimeMS() > yGetVar(\"Satyrs\", \"specialnext\")) {");
code("if (kbUnitGetAnimationActionType(id) == 12) {");
code("target = kbUnitGetTargetUnitID(id);");
code("ySetVar(\"Satyrs\", \"specialnext\", trTimeMS() + 20000);");
code("trVectorQuestVarSet(\"end\", kbGetBlockPosition(\"\"+trGetUnitScenarioNameNumber(target)));");
code("trVectorSetUnitPos(\"start\", \"Satyrs\");");
code("trVectorQuestVarSet(\"dir\", zGetUnitVector(\"start\", \"end\"));");

code("trQuestVarSetFromRand(\"sound\", 1, 3, true);");
code("trSoundPlayFN(\"rainofarrows\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");

code("yAddToDatabase(\"barrages\", \"next\");");
code("yAddUpdateVar(\"barrages\", \"dirx\", trQuestVarGet(\"dirx\"));");
code("yAddUpdateVar(\"barrages\", \"dirz\", trQuestVarGet(\"dirz\"));");
code("yAddUpdateVar(\"barrages\", \"posx\", trQuestVarGet(\"endx\") - 8.0 * trQuestVarGet(\"dirX\"));");
code("yAddUpdateVar(\"barrages\", \"posz\", trQuestVarGet(\"endz\") - 8.0 * trQuestVarGet(\"dirZ\"));");
code("yAddUpdateVar(\"barrages\", \"next\", trTimeMS());");
code("yAddUpdateVar(\"barrages\", \"count\", 5);");
code("}");
code("}");
code("}");

code("if(yGetDatabaseCount(\"battleBoars\") >0) {");
code("id = yDatabaseNext(\"battleBoars\", true);");
code("if (id == -1 || trUnitAlive() == false || checkEnemyDeactivated(\"battleBoars\")) {");
code("if (trUnitAlive()) {");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("} else {");
code("trUnitChangeProtoUnit(\"Battle Boar\");");
code("}");
code("yRemoveFromDatabase(\"battleBoars\");");
code("yRemoveUpdateVar(\"battleBoars\", \"step\");");
code("} else if (yGetVarAtIndex(\"enemies\", \"silenceStatus\", 1*yGetVar(\"battleBoars\", \"index\")) == 1) {");
code("ySetVar(\"battleBoars\", \"step\", 2);");
code("} else if (trTimeMS() > yGetVar(\"battleBoars\", \"specialnext\")) {");
code("switch(1*yGetVar(\"battleBoars\", \"step\"))");
code("{");
code("case 0:");
code("{");
code("if (kbUnitGetAnimationActionType(id) == 6) {");
code("target = kbUnitGetTargetUnitID(id);");
code("ySetVar(\"battleBoars\", \"target\", trGetUnitScenarioNameNumber(target));");
code("ySetVar(\"battleBoars\", \"step\", 1);");
code("ySetVar(\"battleBoars\", \"specialnext\", trTimeMS() + 450);");
code("trUnitOverrideAnimation(26,0,false,false,-1);");
code("}");
code("}");
code("case 1:");
code("{");
code("trVectorSetUnitPos(\"start\", \"battleBoars\");");
code("trVectorQuestVarSet(\"end\", kbGetBlockPosition(\"\"+1*yGetVar(\"battleBoars\", \"target\")));");
code("for (x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("if (yDatabaseNext(\"playerUnits\", true) == -1 || trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (zDistanceToVectorSquared(\"playerUnits\", \"end\") < 9.0) {");
code("trVectorSetUnitPos(\"pos\", \"playerUnits\");");
code("vectorSetAsTargetVector(\"target\", \"start\", \"pos\", 20.0);");
code("launchUnit(\"playerUnits\", \"target\");");
code("}");
code("}");
code("ySetVar(\"battleBoars\", \"step\", 2);");
code("ySetVar(\"battleBoars\", \"specialnext\", yGetVar(\"battleBoars\", \"specialnext\") + 300);");
code("}");
code("case 2:");
code("{");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("ySetVar(\"battleBoars\", \"step\", 0);");
code("if (yGetVar(\"battleBoars\", \"target\") == -1) {");
code("ySetVar(\"battleBoars\", \"specialnext\", trTimeMS());");
code("} else {");
code("ySetVar(\"battleBoars\", \"specialnext\", trTimeMS() + 15000);");
code("}");
code("}");
code("}");
code("} else {");
code("action = yGetVarAtIndex(\"enemies\", \"stunStatus\", 1*yGetVar(\"battleBoars\", \"index\"));");
code("action = action + yGetVarAtIndex(\"enemies\", \"launched\", 1*yGetVar(\"battleBoars\", \"index\"));");
code("if (action > 0 && yGetVar(\"battleBoars\", \"step\") == 1) {");
code("ySetVar(\"battleBoars\", \"step\", 0);");
code("ySetVar(\"battleBoars\", \"next\", trTimeMS() + 18000);");
code("}");
code("}");
code("}");

code("if (yGetDatabaseCount(\"AvengerProj\") > 0) {");
code("if (processGenericProj(\"AvengerProj\") == PROJ_FALLING) {");
code("yVarToVector(\"AvengerProj\", \"prev\");");
code("yVarToVector(\"AvengerProj\", \"dir\");");
code("trVectorSetUnitPos(\"pos\", \"AvengerProj\");");
code("amt = zDistanceBetweenVectors(\"pos\", \"prev\");");
code("if (amt > 2.0) {");
code("yVarToVector(\"AvengerProj\", \"dir\");");
code("ySetVar(\"AvengerProj\", \"currentDist\", yGetVar(\"AvengerProj\", \"currentDist\") + amt);");
code("for(x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("if (yDatabaseNext(\"playerUnits\", true) == -1 || trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else {");
code("dist = zDistanceToVector(\"playerUnits\", \"prev\");");
code("if (dist < amt + 1.0) {");
code("trQuestVarSet(\"hitboxX\", trQuestVarGet(\"prevX\") + dist * trQuestVarGet(\"dirX\"));");
code("trQuestVarSet(\"hitboxZ\", trQuestVarGet(\"prevZ\") + dist * trQuestVarGet(\"dirZ\"));");
code("if (zDistanceToVectorSquared(\"playerUnits\", \"hitbox\") < 9.0) {");
code("damagePlayerUnit(amt * 20.0);");
code("for(p=1; < ENEMY_PLAYER) {");
code("if (trQuestVarGet(\"playerUnits\") == trQuestVarGet(\"p\"+p+\"unit\")) {");
code("silencePlayer(p, 5.0);");
code("break;");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");
code("ySetVarFromVector(\"AvengerProj\", \"prev\", \"pos\");");
code("}");
code("trQuestVarSet(\"nextx\", trQuestVarGet(\"posx\") + 2.0 * trQuestVarGet(\"dirx\"));");
code("trQuestVarSet(\"nextz\", trQuestVarGet(\"posz\") + 2.0 * trQuestVarGet(\"dirz\"));");
code("vectorToGrid(\"next\", \"loc\");");
code("if (yGetVar(\"AvengerProj\", \"currentDist\") >= yGetVar(\"AvengerProj\", \"distance\") ||");
code("terrainIsType(\"loc\", TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"AvengerProj\", true);");
code("trDamageUnitPercent(-100);");
code("trUnitChangeProtoUnit(\"Avenger\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"AvengerProj\", true);");
code("trDamageUnitPercent(-100);");
code("trDamageUnitPercent(yGetVar(\"AvengerProj\", \"damaged\"));");
code("activateEnemy(\"avengerProj\");");
code("yAddUpdateVar(\"Avengers\", \"specialnext\", trTimeMS() + 10000);");
code("yRemoveFromDatabase(\"AvengerProj\");");
code("}");
code("}");
code("}");

code("if(yGetDatabaseCount(\"Avengers\") >0) {");
code("id = yDatabaseNext(\"Avengers\", true);");
code("if (id == -1 || trUnitAlive() == false || checkEnemyDeactivated(\"Avengers\")) {");
code("if (trUnitAlive()) {");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("} else {");
code("trUnitChangeProtoUnit(\"Avengers\");");
code("}");
code("yRemoveFromDatabase(\"Avengers\");");
code("yRemoveUpdateVar(\"Avengers\", \"step\");");
code("} else if (yGetVarAtIndex(\"enemies\", \"silenceStatus\", 1*yGetVar(\"Avengers\", \"index\")) == 1) {");
code("ySetVar(\"Avengers\", \"specialnext\", trTimeMS() + 10000);");
code("} else if (trTimeMS() > yGetVar(\"Avengers\", \"specialnext\")) {");
code("if (kbUnitGetActionType(id) == 6) {");
code("target = kbUnitGetTargetUnitID(id);");
code("trVectorQuestVarSet(\"end\", kbGetBlockPosition(\"\"+trGetUnitScenarioNameNumber(target)));");
code("trVectorSetUnitPos(\"start\", \"Avengers\");");
code("if (zDistanceBetweenVectorsSquared(\"start\", \"end\") < 144) {");
code("trSoundPlayFN(\"sphinxspecialattack.wav\",\"1\",-1,\"\",\"\");");
code("trVectorQuestVarSet(\"dir\", zGetUnitVector(\"start\", \"end\"));");
code("amt = trUnitPercentDamaged();");
code("trUnitChangeProtoUnit(\"Dust Large\");");
code("addGenericProj(\"avengerProj\",\"start\",\"dir\",kbGetProtoUnitID(\"Avenger\"),39,10.0,4.5,1.0);");
code("yAddUpdateVar(\"avengerProj\", \"prevX\", trQuestVarGet(\"startx\"));");
code("yAddUpdateVar(\"avengerProj\", \"prevz\", trQuestVarGet(\"startz\"));");
code("yAddUpdateVar(\"avengerProj\", \"damaged\", amt);");
code("yAddUpdateVar(\"avengerProj\", \"distance\", zDistanceBetweenVectors(\"start\",\"end\") + 5.0);");
code("yAddUpdateVar(\"avengerProj\", \"currentDist\", 0);");
code("if (ySetPointer(\"enemies\", 1*yGetVar(\"Avengers\", \"index\"))) {");
code("yRemoveFromDatabase(\"enemies\");");
code("}");
code("yRemoveFromDatabase(\"Avengers\");");
code("}");
code("}");
code("} else {");
code("action = yGetVarAtIndex(\"enemies\", \"stunStatus\", 1*yGetVar(\"Avengers\", \"index\"));");
code("action = action + yGetVarAtIndex(\"enemies\", \"launched\", 1*yGetVar(\"Avengers\", \"index\"));");
code("if (action > 0 && yGetVar(\"Avengers\", \"step\") == 1) {");
code("ySetVar(\"Avengers\", \"step\", 0);");
code("ySetVar(\"Avengers\", \"next\", trTimeMS() + 10000);");
code("}");
code("}");
code("}");

code("if (yGetDatabaseCount(\"ballistas\") > 0) {");
code("id = yDatabaseNext(\"ballistas\", true);");
code("if (id == -1 || trUnitAlive() == false || checkEnemyDeactivated(\"ballistas\")) {");
code("yRemoveFromDatabase(\"ballistas\");");
code("}");
code("}");

code("if (yGetDatabaseCount(\"siphons\") > 0) {");
code("id = yDatabaseNext(\"siphons\", true);");
code("if (id == -1 || trUnitAlive() == false || checkEnemyDeactivated(\"siphons\")) {");
code("yRemoveFromDatabase(\"siphons\");");
code("} else if (kbUnitGetAnimationActionType(id) == 9) {");
code("if (trTimeMS() > yGetVar(\"siphons\", \"next\")) {");
code("ySetVar(\"siphons\", \"next\", trTimeMS() + 3000);");
code("yDatabaseNext(\"playerUnits\");");
code("trVectorSetUnitPos(\"pos\", \"playerUnits\");");
code("trUnitMoveToPoint(trQuestVarGet(\"posx\"),0,trQuestVarGet(\"posz\"),-1,true);");
code("}");
code("}");
code("}");

code("if (yGetDatabaseCount(\"MummyBalls\") > 0) {");
code("if (processGenericProj(\"MummyBalls\") == PROJ_FALLING) {");
code("yVarToVector(\"MummyBalls\", \"prev\");");
code("yVarToVector(\"MummyBalls\", \"dir\");");
code("amt = zDistanceBetweenVectors(\"pos\", \"prev\");");
code("ySetVarFromVector(\"MummyBalls\", \"prev\", \"pos\");");
code("for(x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("if (yDatabaseNext(\"playerUnits\", true) == -1 || trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else {");
code("dist = zDistanceToVector(\"playerUnits\", \"prev\");");
code("if (dist < amt + 4.0) {");
code("trQuestVarSet(\"hitboxX\", trQuestVarGet(\"prevX\") + dist * trQuestVarGet(\"dirX\"));");
code("trQuestVarSet(\"hitboxZ\", trQuestVarGet(\"prevZ\") + dist * trQuestVarGet(\"dirZ\"));");
code("if (zDistanceToVectorSquared(\"playerUnits\", \"hitbox\") < yGetVar(\"MummyBalls\", \"dist\")) {");
code("damagePlayerUnit(xsMin(100.0, amt * 10));");
code("switch(1*yGetVar(\"MummyBalls\", \"type\"))");
code("{");
code("case STATUS_SILENCE:");
code("{");
code("target = yGetVar(\"playerUnits\", \"player\");");
code("if (trQuestVarGet(\"p\"+target+\"unit\") == trQuestVarGet(\"playerUnits\")) {");
code("silencePlayer(target, 3.0);");
code("}");
code("}");
code("case STATUS_POISON:");
code("{");
code("poisonUnit(\"playerUnits\", 10, 5.0 * trQuestVarGet(\"stage\"));");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");
code("vectorToGrid(\"pos\", \"loc\");");
code("if (terrainIsType(\"loc\", TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("yRemoveFromDatabase(\"MummyBalls\");");
code("}");
code("}");
code("}");

code("if (yGetDatabaseCount(\"Mummies\") >0) {");
code("id = yDatabaseNext(\"Mummies\", true);");
code("if (id == -1 || trUnitAlive() == false || checkEnemyDeactivated(\"Mummies\")) {");
code("if (trUnitAlive()) {");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("} else {");
code("trUnitChangeProtoUnit(\"Mummy\");");
code("}");
code("yRemoveFromDatabase(\"Mummies\");");
code("yRemoveUpdateVar(\"Mummies\", \"step\");");
code("} else if (yGetVarAtIndex(\"enemies\", \"silenceStatus\", 1*yGetVar(\"Mummies\", \"index\")) == 1) {");
code("ySetVar(\"Mummies\", \"step\", 2);");
code("} else if (trTimeMS() > yGetVar(\"Mummies\", \"next\")) {");
code("switch(1*yGetVar(\"Mummies\", \"step\"))");
code("{");
code("case 0:");
code("{");
code("if (kbUnitGetAnimationActionType(id) == 12) {");
code("target = kbUnitGetTargetUnitID(id);");
code("trVectorQuestVarSet(\"end\", kbGetBlockPosition(\"\"+trGetUnitScenarioNameNumber(target)));");
code("trVectorSetUnitPos(\"start\", \"Mummies\");");
code("trVectorQuestVarSet(\"dir\", zGetUnitVector(\"start\", \"end\"));");
code("ySetVarFromVector(\"Mummies\", \"dir\", \"dir\");");
code("ySetVarFromVector(\"Mummies\", \"start\", \"start\");");
code("ySetVar(\"Mummies\", \"step\", 1);");
code("ySetVar(\"Mummies\", \"next\", trTimeMS() + 1000);");
code("trUnitOverrideAnimation(37,0,false,false,-1);");
code("}");
code("}");
code("case 1:");
code("{");
code("yVarToVector(\"Mummies\", \"start\");");
code("yVarToVector(\"Mummies\", \"dir\");");
code("addGenericProj(\"MummyBalls\",\"start\",\"dir\",kbGetProtoUnitID(\"Lampades Blood\"),2,10,4.0);");
code("yAddUpdateVar(\"MummyBalls\", \"prevX\", trQuestVarGet(\"startx\"));");
code("yAddUpdateVar(\"MummyBalls\", \"prevZ\", trQuestVarGet(\"startz\"));");
code("yAddUpdateVar(\"MummyBalls\", \"dist\", 16);");
code("yAddUpdateVar(\"MummyBalls\", \"type\", STATUS_POISON);");
code("ySetVar(\"Mummies\", \"step\", 2);");
code("ySetVar(\"Mummies\", \"next\", yGetVar(\"Mummies\", \"next\") + 3000);");
code("}");
code("case 2:");
code("{");
code("ySetVar(\"Mummies\", \"step\", 0);");
code("ySetVar(\"Mummies\", \"next\", trTimeMS() + 18000);");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("}");
code("}");
code("} else {");
code("action = yGetVarAtIndex(\"enemies\", \"stunStatus\", 1*yGetVar(\"Mummies\", \"index\"));");
code("action = action + yGetVarAtIndex(\"enemies\", \"launched\", 1*yGetVar(\"Mummies\", \"index\"));");
code("if (action > 0 && yGetVar(\"Mummies\", \"step\") == 1) {");
code("ySetVar(\"Mummies\", \"step\", 0);");
code("ySetVar(\"Mummies\", \"next\", trTimeMS() + 18000);");
code("}");
code("}");
code("}");

code("if(yGetDatabaseCount(\"ScorpionMen\") >0) {");
code("id = yDatabaseNext(\"ScorpionMen\", true);");
code("if (id == -1 || trUnitAlive() == false || checkEnemyDeactivated(\"ScorpionMen\")) {");
code("if (trUnitAlive()) {");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("} else {");
code("trUnitChangeProtoUnit(\"Scorpion Man\");");
code("}");
code("yRemoveFromDatabase(\"ScorpionMen\");");
code("yRemoveUpdateVar(\"ScorpionMen\", \"step\");");
code("} else if (yGetVarAtIndex(\"enemies\", \"silenceStatus\", 1*yGetVar(\"ScorpionMen\", \"index\")) == 1) {");
code("ySetVar(\"ScorpionMen\", \"step\", 2);");
code("} else if (trTimeMS() > yGetVar(\"ScorpionMen\", \"specialnext\")) {");
code("switch(1*yGetVar(\"ScorpionMen\", \"step\"))");
code("{");
code("case 0:");
code("{");
code("if (kbUnitGetAnimationActionType(id) == 6) {");
code("target = kbUnitGetTargetUnitID(id);");
code("ySetVar(\"ScorpionMen\", \"target\", trGetUnitScenarioNameNumber(target));");
code("ySetVar(\"ScorpionMen\", \"step\", 1);");
code("ySetVar(\"ScorpionMen\", \"specialnext\", trTimeMS() + 500);");
code("trUnitOverrideAnimation(39,0,false,false,-1);");
code("}");
code("}");
code("case 1:");
code("{");
code("action = 0;");
code("for (x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("if (yGetVar(\"ScorpionMen\", \"target\") == yDatabaseNext(\"playerUnits\")) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"playerUnits\");");
code("poisonUnit(\"playerUnits\", 10, 5.0 * trQuestVarGet(\"stage\"));");
code("action = 1;");
code("break;");
code("}");
code("}");
code("ySetVar(\"ScorpionMen\", \"step\", 2);");
code("ySetVar(\"ScorpionMen\", \"specialnext\", yGetVar(\"ScorpionMen\", \"specialnext\") + 500);");
code("if (action == 0) {");
code("ySetVar(\"ScorpionMen\", \"target\", -1);");
code("}");
code("}");
code("case 2:");
code("{");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("ySetVar(\"ScorpionMen\", \"step\", 0);");
code("if (yGetVar(\"ScorpionMen\", \"target\") == -1) {");
code("ySetVar(\"ScorpionMen\", \"specialnext\", trTimeMS());");
code("} else {");
code("ySetVar(\"ScorpionMen\", \"specialnext\", trTimeMS() + 15000);");
code("}");
code("}");
code("}");
code("} else {");
code("action = yGetVarAtIndex(\"enemies\", \"stunStatus\", 1*yGetVar(\"ScorpionMen\", \"index\"));");
code("action = action + yGetVarAtIndex(\"enemies\", \"launched\", 1*yGetVar(\"ScorpionMen\", \"index\"));");
code("if (action > 0 && yGetVar(\"ScorpionMen\", \"step\") == 1) {");
code("ySetVar(\"ScorpionMen\", \"step\", 0);");
code("ySetVar(\"ScorpionMen\", \"next\", trTimeMS() + 18000);");
code("}");
code("}");
code("}");

code("xsSetContextPlayer(old);");
code("}");

code("const int MAP_STANDARD = 0;");
code("const int MAP_PORTALS = 1;");
code("const int MAP_OPEN = 2;");

code("const int TILE_NOT_FOUND = 0;");
code("const int TILE_FOUND = 1;");
code("const int TILE_VISITED = 2;");

code("const int EDGE_NOT_FOUND = 0;");
code("const int EDGE_NORMAL = 1;");
code("const int EDGE_BIG = 2;");
code("const int EDGE_PORTAL = 3;");
code("const int EDGE_WALL = 4;");
code("const int EDGE_MOUNTAIN = 5;");

code("const int ROOM_BASIC = 1;");
code("const int ROOM_AMBUSH = 2;");
code("const int ROOM_BOSS_ENTRANCE = 3;");
code("const int ROOM_TRANSPORTER_GUY = 4;");
code("const int ROOM_CHEST = 5;");
code("const int ROOM_STARTER = 6;");
code("const int ROOM_BOSS = 7;");
code("const int ROOM_NOTTUD = 8;");

code("const int ROOM_VILLAGE = 10;");
code("const int ROOM_TEMPLE = 50;");

code("const int ROOM_CIRCLE = 0;");
code("const int ROOM_SQUARE = 1;");

code("const int TRAP_LASERS = 1;");
code("const int TRAP_CAROUSEL = 2;");

code("void deployTownEyecandy(string proto = \"\", int x = 0, int z = 0, int heading = 0) {");
code("int n = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,x+trQuestVarGet(\"villageX\"),0,z+trQuestVarGet(\"villageZ\"),heading,true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+n, true);");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(proto);");
code("}");


code("int edgeName(int first = 0, int second = 0) {");
code("return(16 * xsMin(first, second) + xsMax(first, second));");
code("}");

code("vector randomNearEdge(int x1 = 0 , int z1 = 0, int x2 = 0, int z2 = 0) {");
code("int x0 = x2 - x1;");
code("int z0 = z2 - z1;");
code("trQuestVarSetFromRand(\"x0\", 0, x0);");
code("trQuestVarSetFromRand(\"z0\", 0, z0);");
code("trQuestVarSetFromRand(\"x1\", trQuestVarGet(\"x0\"), x0);");
code("trQuestVarSetFromRand(\"z1\", trQuestVarGet(\"z0\"), z0);");
code("trQuestVarSetFromRand(\"negative\", 0, 1, true);");
code("trQuestVarSet(\"negative\", 1 - 2 * trQuestVarGet(\"negative\"));");
code("x0 = x1 + x2 + trQuestVarGet(\"negative\") * trQuestVarGet(\"x1\");");
code("trQuestVarSetFromRand(\"negative\", 0, 1, true);");
code("trQuestVarSet(\"negative\", 1 - 2 * trQuestVarGet(\"negative\"));");
code("z0 = z1 + z2 + trQuestVarGet(\"negative\") * trQuestVarGet(\"z1\");");
code("return(xsVectorSet(x0, 0, z0));");
code("}");

code("vector randomNearEdgeOfRoom(int room = 0) {");
code("trQuestVarSetFromRand(\"rand\", 1, 2, true);");
code("int i = trQuestVarGet(\"rand\");");
code("vector ans = randomNearEdge(1*trQuestVarGet(\"room\"+room+\"bottom\"+i+\"x\"),1*trQuestVarGet(\"room\"+room+\"bottom\"+i+\"z\"),");
code("1*trQuestVarGet(\"room\"+room+\"top\"+i+\"x\"),1*trQuestVarGet(\"room\"+room+\"top\"+i+\"z\"));");
code("return(ans);");
code("}");

code("void paintRelicEdge(int x1 = 0 , int z1 = 0, int x2 = 0, int z2 = 0) {");
code("trVectorQuestVarSet(\"pos\",randomNearEdge(x1, z1, x2, z2));");
code("int count = (x2-x1) / 2;");
code("for(i = count; >0) {");
code("vectorToGrid(\"pos\", \"loc\");");
code("if (terrainIsType(\"loc\", TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("trVectorQuestVarSet(\"pos\",randomNearEdge(x1, z1, x2, z2));");
code("} else {");
code("break;");
code("}");
code("}");
code("spawnRelic(trQuestVarGet(\"posx\"), trQuestVarGet(\"posz\"));");
code("}");

code("void paintEnemies(int x0 = 0, int z0 = 0, int x1 = 0, int z1 = 0) {");
code("for(a=x0; < x1) {");
code("trQuestVarSetFromRand(\"deploy\", 0, 1, false);");
code("if (trQuestVarGet(\"deploy\") < trQuestVarGet(\"enemyDensity\")) {");
code("trQuestVarSetFromRand(\"z\", z0, z1, true);");
code("trQuestVarSet(\"posX\", a);");
code("trQuestVarSet(\"posZ\", trQuestVarGet(\"z\"));");
code("if (terrainIsType(\"pos\", TERRAIN_WALL, TERRAIN_SUB_WALL) == false) {");
code("trQuestVarSetFromRand(\"heading\", 0, 360, true);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",trStringQuestVarGet(\"enemyProto\"+randomLow(1*trQuestVarGet(\"enemyProtoCount\"))),1,");
code("2*a,0,2*trQuestVarGet(\"z\"),trQuestVarGet(\"heading\"),true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitConvert(ENEMY_PLAYER);");
code("yAddToDatabase(\"enemiesIncoming\", \"next\");");
code("}");
code("}");
code("}");
code("for(b=z0; < z1) {");
code("trQuestVarSetFromRand(\"deploy\", 0, 1, false);");
code("if (trQuestVarGet(\"deploy\") < trQuestVarGet(\"enemyDensity\")) {");
code("trQuestVarSetFromRand(\"x\", x0, x1, true);");
code("trQuestVarSet(\"posX\", trQuestVarGet(\"x\"));");
code("trQuestVarSet(\"posZ\", b);");
code("if (terrainIsType(\"pos\", TERRAIN_WALL, TERRAIN_SUB_WALL) == false) {");
code("trQuestVarSetFromRand(\"heading\", 0, 360, true);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",trStringQuestVarGet(\"enemyProto\"+randomLow(1*trQuestVarGet(\"enemyProtoCount\"))),1,");
code("2*trQuestVarGet(\"x\"),0,2*b,trQuestVarGet(\"heading\"),true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitConvert(ENEMY_PLAYER);");
code("yAddToDatabase(\"enemiesIncoming\", \"next\");");
code("}");
code("}");
code("}");
code("}");

code("void paintEyecandy(int x0 = 0, int z0 = 0, int x1 = 0, int z1 = 0, string type = \"sprite\") {");
code("float scale = trQuestVarGet(type+\"scale\");");
code("if (trQuestVarGet(type+\"Density\") > 0) {");
code("for(a=x0; < x1) {");
code("trQuestVarSetFromRand(\"deploy\", 0, 1, false);");
code("if (trQuestVarGet(\"deploy\") < trQuestVarGet(type+\"Density\")) {");
code("trQuestVarSetFromRand(\"z\", z0, z1, true);");
code("trQuestVarSet(\"locX\", a);");
code("trQuestVarSet(\"locZ\", trQuestVarGet(\"z\"));");
code("if (terrainIsType(\"loc\", TERRAIN_WALL, TERRAIN_SUB_WALL) == false) {");
code("trQuestVarSetFromRand(\"type\", 1, 3, true);");
code("trQuestVarSetFromRand(\"heading\", 0, 360, true);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",trStringQuestVarGet(type+\"Proto\"+1*trQuestVarGet(\"type\")),1,");
code("2*a,0,2*trQuestVarGet(\"z\"),trQuestVarGet(\"heading\"),true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitConvert(0);");
code("if (scale > 0) {");
code("trSetSelectedScale(scale,scale,scale);");
code("}");
code("}");
code("}");
code("}");
code("for(b=z0; < z1) {");
code("trQuestVarSetFromRand(\"deploy\", 0, 1, false);");
code("if (trQuestVarGet(\"deploy\") < trQuestVarGet(type+\"Density\")) {");
code("trQuestVarSetFromRand(\"x\", x0, x1, true);");
code("trQuestVarSet(\"locX\", trQuestVarGet(\"x\"));");
code("trQuestVarSet(\"locZ\", b);");
code("if (terrainIsType(\"loc\", TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("trQuestVarSetFromRand(\"type\", 1, 3, true);");
code("trQuestVarSetFromRand(\"heading\", 0, 360, true);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",trStringQuestVarGet(type+\"Proto\"+1*trQuestVarGet(\"type\")),1,");
code("2*trQuestVarGet(\"x\"),0,2*b,trQuestVarGet(\"heading\"),true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitConvert(0);");
code("if (scale > 0) {");
code("trSetSelectedScale(scale,scale,scale);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");

code("void paintColumns(int x0 = 0, int z0 = 0, int x1 = 0, int z1 = 0) {");
code("if (trQuestVarGet(\"columnDensity\") > 0) {");
code("for(a=x0; < x1) {");
code("trQuestVarSetFromRand(\"deploy\", 0, 1, false);");
code("if (trQuestVarGet(\"deploy\") < trQuestVarGet(\"columnDensity\")) {");
code("trQuestVarSetFromRand(\"z\", z0, z1, true);");
code("trPaintTerrain(a-1, 1*trQuestVarGet(\"z\")-1, a+1, 1*trQuestVarGet(\"z\")+1, TERRAIN_WALL, TERRAIN_SUB_WALL, false);");
code("trChangeTerrainHeight(a, 1*trQuestVarGet(\"z\"), a+1, 1*trQuestVarGet(\"z\")+1, wallHeight, false);");
code("}");
code("}");
code("for(b=z0; < z1) {");
code("trQuestVarSetFromRand(\"deploy\", 0, 1, false);");
code("if (trQuestVarGet(\"deploy\") < trQuestVarGet(\"columnDensity\")) {");
code("trQuestVarSetFromRand(\"x\", x0, x1, true);");
code("trPaintTerrain(1*trQuestVarGet(\"x\")-1, b-1, 1*trQuestVarGet(\"x\")+1, b+1, TERRAIN_WALL, TERRAIN_SUB_WALL, false);");
code("trChangeTerrainHeight(1*trQuestVarGet(\"x\"), b, 1*trQuestVarGet(\"x\")+1, b+1, wallHeight, false);");
code("}");
code("}");
code("}");
code("}");

code("int countRoomEntrances(int x = 0, int z = 0) {");
code("int room = x + 4 * z;");
code("int n = 0;");
code("int count = 0;");
code("for(a=1; >=0) {");
code("for(b=1; >=0) {");
code("trQuestVarSet(\"newX\", (1 - 2 * b) * a + x);");
code("trQuestVarSet(\"newZ\", (1 - 2 * b) * (1 - a) + z);");
code("if (trQuestVarGet(\"newX\") < 0 || trQuestVarGet(\"newZ\") < 0 ||");
code("trQuestVarGet(\"newX\") > 3 || trQuestVarGet(\"newZ\") > 3) {");
code("continue;");
code("}");
code("n = 0 + trQuestVarGet(\"newX\") + 4 * trQuestVarGet(\"newZ\");");
code("if (trQuestVarGet(\"edge\"+edgeName(room, n)) == EDGE_NOT_FOUND) {");
code("continue;");
code("} else {");
code("count = count + 1;");
code("}");
code("}");
code("}");
code("return(count);");
code("}");

code("void paintSecondary(int x0 = 0, int z0 = 0, int x1 = 0, int z1 = 0) {");
code("for(a=x0; < x1) {");
code("trQuestVarSetFromRand(\"z\", z0, z1, true);");
code("trQuestVarSet(\"locx\", a);");
code("trQuestVarSet(\"locz\", trQuestVarGet(\"z\"));");
code("if (terrainIsType(\"loc\", TERRAIN_WALL, TERRAIN_SUB_WALL) == false) {");
code("trPaintTerrain(a, 1*trQuestVarGet(\"z\"), a, 1*trQuestVarGet(\"z\"), TERRAIN_SECONDARY, TERRAIN_SUB_SECONDARY, false);");
code("}");
code("}");
code("for(b=z0; < z1) {");
code("trQuestVarSetFromRand(\"x\", x0, x1, true);");
code("trQuestVarSet(\"locx\", trQuestVarGet(\"x\"));");
code("trQuestVarSet(\"locz\", b);");
code("if (terrainIsType(\"loc\", TERRAIN_WALL, TERRAIN_SUB_WALL) == false) {");
code("trPaintTerrain(1*trQuestVarGet(\"x\"), b, 1*trQuestVarGet(\"x\"), b, TERRAIN_SECONDARY, TERRAIN_SUB_SECONDARY, false);");
code("}");
code("}");
code("}");
code("const int NPC_RELIC_TRANSPORTER = 0;");
code("const int NPC_RELIC_TRANSPORTER_WTF = 1;");

code("const int NPC_EXPLAIN_SINGLEPLAYER = 2;");

code("const int NPC_ZENO_NEXT_QUESTION = 3;");
code("const int NPC_ZENO_QUIZ_END = 4;");

code("const int NPC_BOSS_ENTRANCE = 5;");

code("const int NPC_MONSTERPEDIA = 6;");

code("const int NPC_NOTTUD = 7;");

code("const int NPC_ZENOS_PARADOX = 8;");

code("const int NPC_EXPLAIN_BOONS = 9;");

code("const int NPC_KASTOR = 10;");



code("const int NPC_QUEST = 100;");


code("const int NPC_QUEST_COMPLETE = 140;");



code("const int NPC_TEMPLE = 200;");

code("const int NPC_TEMPLE_COMPLETE = 300;");

code("const int NPC_ATE_CORPSE = 401;");
code("const int NPC_ATE_BERRIES = 402;");

code("const int NPC_NICK_NO = 403;");
code("const int NPC_NICK_START = 404;");
code("const int NPC_NICK_DROP = 409;");
code("const int NPC_NICK_NEXT = 410;");
code("const int NPC_NICK_QUEST_COMPLETE = 414;");
code("const int NPC_NICK_SLOT_MACHINE = 415;");

code("const int FETCH_NPC = 10;");
code("const int BOUNTY_NPC = 20;");
code("const int SHOP_NPC = 30;");
code("const int FETCH_GUY = 1;");
code("const int BOUNTY_GUY = 2;");
code("const int SHOP_GUY = 3;");

code("void startNPCDialog(int npc = 0) {");
code("xsEnableRule(\"npc_talk_01\");");
code("trQuestVarSet(\"currentNPC\", npc);");
code("trQuestVarSet(\"currentNPCProgress\", 0);");
code("}");

code("int npcDiag(int npc = 0, int dialog = 0) {");
code("dialog = dialog + 1;");
code("int gem = 0;");
code("string extra = \"\";");
code("switch(npc)");
code("{");
code("case NPC_RELIC_TRANSPORTER:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Relic Carrying Company, at your service! You can hire me for just 100 gold!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"I can carry up to 3 relics. After you clear this floor, I will send them to your warehouse.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"You can visit your warehouse by playing this map in singleplayer.\");");
code("}");
code("case 4:");
code("{");
code("uiMessageBox(\"To hire me, simply drop a relic next to me. I will charge you 100 gold. (The relic will be re-equipped)\");");
code("dialog = -1;");
code("}");
code("}");
code("}");
code("case NPC_RELIC_TRANSPORTER_WTF:");
code("{");
code("dialog = -1;");
code("uiMessageBox(\"You want to hire another? What happened to the last guy?!\");");
code("}");
code("case NPC_BOSS_ENTRANCE:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Find the relic matching my symbol and bring it to me to open the portal to the boss room.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");
code("case NPC_MONSTERPEDIA:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"The Monsterpedia is now open! You can see monster stats and abilities by clicking on them!\");");
code("dialog = 0;");
code("}");
code("}");
code("}");
code("case NPC_EXPLAIN_BOONS:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiLookAtUnitByName(\"\"+1*yDatabaseNext(\"boons\"));");
code("uiMessageBox(\"You have acquired a Blessing! A Blessing is a powerful passive effect.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"However, you can only have one Blessing at a time. Choose your Blessing by selecting it.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"There are more Blessings to be found in the Tower, and each one requires a unique unlock condition.\");");
code("trQuestVarSet(\"boonUnlocked0\", 1);");
code("dialog = 0;");
code("}");
code("}");
code("}");
code("case NPC_EXPLAIN_SINGLEPLAYER:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("trCameraCut(vector(90,70.710701,90), vector(0.5,-0.707107,0.5), vector(0.5,0.707107,0.5), vector(0.707107,0,-0.707107));");
code("uiMessageBox(\"Welcome to the Ascension Guild! There are many things you can do here!\");");
code("}");
code("case 2:");
code("{");
code("trCameraCut(vector(60,70.710701,90), vector(0.5,-0.707107,0.5), vector(0.5,0.707107,0.5), vector(0.707107,0,-0.707107));");
code("uiMessageBox(\"This is your relic warehouse. This is where all your spare relics are stored.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"If you drop a relic here, it will automatically be kept in the warehouse.\");");
code("}");
code("case 4:");
code("{");
code("trCameraCut(vector(90,70.710701,60), vector(0.5,-0.707107,0.5), vector(0.5,0.707107,0.5), vector(0.707107,0,-0.707107));");
code("uiMessageBox(\"This is your class selection. Click on a class to see its details or switch to it.\");");
code("}");
code("case 5:");
code("{");
code("uiMessageBox(\"Some classes are locked. Each class has a unique unlock condition.\");");
code("}");
code("case 6:");
code("{");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"levelupObelisk\");");
code("trUnitHighlight(15.0, true);");
code("uiMessageBox(\"This is your Ascension Obelisk. Click on this obelisk to level up your current hero.\");");
code("}");
code("case 7:");
code("{");
code("uiMessageBox(\"Level-ups cost gold and gemstones, which are dropped by bosses.\");");
code("}");
code("case 8:");
code("{");
code("uiMessageBox(\"Each level-up increases your hero's relic capacity by 1.\");");
code("}");
code("case 9:");
code("{");
code("uiMessageBox(\"There are more facilities, but they are locked for now. Play the game some more to unlock them!\");");
code("}");
code("case 10:");
code("{");
code("trCameraCut(vector(90,70.710701,90), vector(0.5,-0.707107,0.5), vector(0.5,0.707107,0.5), vector(0.707107,0,-0.707107));");
code("uiMessageBox(\"When you are ready to save your configuration, enter the sky passage in the center.\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"skypassage\");");
code("trUnitHighlight(5.0, true);");
code("}");
code("case 11:");
code("{");
code("dialog = 0;");
code("xsEnableRule(\"gameplay_start_2\");");
code("}");
code("}");
code("}");
code("case NPC_ZENO_NEXT_QUESTION:");
code("{");
code("if (dialog > trQuestVarGet(\"question\"+1*trQuestVarGet(\"currentQuestion\")+\"explainations\")) {");
code("dialog = 0;");
code("trShowChoiceDialog(trStringQuestVarGet(\"question\"+1*trQuestVarGet(\"currentQuestion\")),");
code("trStringQuestVarGet(\"question\"+1*trQuestVarGet(\"currentQuestion\")+\"first\"), 6001,");
code("trStringQuestVarGet(\"question\"+1*trQuestVarGet(\"currentQuestion\")+\"second\"), 6002);");
code("} else {");
code("uiMessageBox(trStringQuestVarGet(\"question\"+1*trQuestVarGet(\"currentQuestion\")+\"explain\"+dialog));");
code("}");
code("}");

code("case NPC_ZENO_QUIZ_END:");
code("{");
code("if (dialog > trQuestVarGet(\"question\"+1*trQuestVarGet(\"currentQuestion\")+\"explainations\")) {");
code("dialog = 0;");
code("uiMessageBox(\"That's all for today! I'll be back after you clear another floor!\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"zenoUnit\");");
code("trUnitChangeProtoUnit(\"Arkantos God Out\");");
code("trSoundPlayFN(\"arrkantosleave.wav\",\"1\",-1,\"\",\"\");");
code("} else {");
code("uiMessageBox(trStringQuestVarGet(\"question\"+1*trQuestVarGet(\"currentQuestion\")+\"explain\"+dialog));");
code("}");
code("}");

code("case NPC_NOTTUD:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Why hello there! It is I, nottud!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Welcome to my humble shop. Everything here costs 300 gold.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"To purchase an item, simply walk next to it and drop a relic. (The relic will be re-equipped)\");");
code("}");
code("case 4:");
code("{");
code("uiMessageBox(\"Your purchased item will be delivered to your warehouse.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_NICK_NO:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Ahhh!! I hate donkeys!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Get away from me you filthy animal!\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_NICK_START:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Oh thank goodness! Finally a human being!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Please help me! I accidentally spilled a quantum potion on myself!\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"I need to absorb some magical energies in order to return to my original form!\");");
code("}");
code("case 4:");
code("{");
code("uiMessageBox(\"You're my only hope! First, I need to absorb a Sphinx's sandstorm!\");");
code("}");
code("case 5:");
code("{");
code("trMessageSetText(\"Touch a Sphinx's sandstorm while holding the talking relic.\", -1);");
code("trSoundPlayFN(\"new_objective.wav\",\"1\",-1,\"\",\"\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_NICK_START + 1:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Remember: I need a Sphinx's sandstorm!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"There should be some Sphinxes on the first floor of the tower.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_NICK_START + 2:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"I need to absorb a Dryad's Blood.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"We can find Dryads on the second floor of the tower.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_NICK_START + 3:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"I need to absorb a Frost Giant's Breath.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"There are Frost Giants on the third floor.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_NICK_START + 4:");
code("{");
code("if (Multiplayer == false) {");
code("uiMessageBox(\"Alright, just set me down over there at the glowing spotlight.\");");
code("trMinimapFlare(1, 3.0, trVectorQuestVarGet(\"nickPos\"), true);");
code("} else {");
code("uiMessageBox(\"Let's return to the Guild to complete my transformation!\");");
code("}");
code("dialog = 0;");
code("}");

code("case NPC_NICK_NEXT:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"*cough* *cough* Oh dear, some of that got in my nose.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Wait, I don't have a nose! Oh please, I just want my body back.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"Let's hurry up and get the next ingredient! I need a Dryad's Blood!\");");
code("}");
code("case 4:");
code("{");
code("trMessageSetText(\"Absorb Dryad's Blood while holding the talking relic.\", -1);");
code("trSoundPlayFN(\"new_objective.wav\",\"1\",-1,\"\",\"\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_NICK_NEXT + 1:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Gross! Tastes awful every time.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Anyway, there's one more ingredient that I need to return to my original body.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"I need the Breath of a Frost Giant. Please help me out one more time!\");");
code("}");
code("case 4:");
code("{");
code("uiMessageBox(\"I promise I'll reward you with something good!\");");
code("}");
code("case 5:");
code("{");
code("trMessageSetText(\"Absorb a Frost Giant's breath attack while holding the talking relic.\", -1);");
code("trSoundPlayFN(\"new_objective.wav\",\"1\",-1,\"\",\"\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_NICK_NEXT + 2:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Alright! Feeling better already!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Let's return to the Guild to complete my transformation!\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_NICK_DROP:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Hey! Don't leave me!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Where are you going?!\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_NICK_QUEST_COMPLETE:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Ahh, back to my sexy body. Thank you for rescuing me, friend.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"As a reward, I'll let you use my Quantum Relic Machine.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"To use it, drop three relics in front of me and then select me to confirm.\");");
code("}");
code("case 4:");
code("{");
code("uiMessageBox(\"The three relics will be consumed and a new random relic will be generated.\");");
code("}");
code("case 5:");
code("{");
code("uiMessageBox(\"First roll is free. Let's give it a whirl!\");");
code("}");
code("case 6:");
code("{");
code("trQuestVarSet(\"p1nickQuestProgress\", 5);");
code("dialog = 0;");
code("trQuestVarSet(\"quantumSlotMachine\", 2);");
code("trQuestVarSet(\"quantumSlotMachineNext\", trTimeMS() + 3000);");
code("trQuestVarSetFromRand(\"quantumRelic\", 10, 26, true);");
code("xsEnableRule(\"quantum_slot_machine\");");
code("trSoundPlayFN(\"plentybirth.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"skypassageout.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("}");

code("case NPC_NICK_SLOT_MACHINE:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Want to spin the Quantum Slot Machine? Drop three relics here to start the machine!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"You will get a new random relic that is guaranteed to not be one of the ones you dropped.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case FETCH_NPC + 1:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Good day! Welcome to Foothill Camp!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"They call us Foothill Camp because we're at the first floor of the Tower!\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"Oh these pigs? They're not for sale. Don't touch them.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case BOUNTY_NPC + 1:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Welcome, adventurers! Are you here for some training?\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"I don't have any bounties for you today though! Check again later!\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case SHOP_NPC + 1:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"They say there are ten floors in this tower, but no one knows what's at the top.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"No adventurer has made it up there and came back down to tell the tale.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"Maybe they've been abducted by aliens!\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case FETCH_NPC + 2:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Dammit! To think I could only reach the second floor!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"I'm such a useless father!\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"Kastor! Please be safe!\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case BOUNTY_NPC + 2:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Who am I? Who are you?\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Timmy! Don't run that way! No!\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"Wait, who's Timmy?\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case SHOP_NPC + 2:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"We're lost souls. As long as that Wraithwood stands, we're trapped here.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"But I'm hoping an adventurer will come by and sell me a Resurrection Stone.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"Hey, do you have a Resurrection Stone? I'll buy it for 9000 gold.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case FETCH_NPC + 3:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"I never knew there could be native peoples living in this tower.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Turns out there are dwarves living on this floor.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"Have you checked out that dwarf's wares yet? He sells some impressive stuff!\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case BOUNTY_NPC + 3:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"These damn dwarves charge such high prices!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Where am I supposed to find five Frosted Bones to repair this axe?\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"Do they expect me to take down a Frost Giant with my bare fists?!\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case SHOP_NPC + 3:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Welcome, travelers! Come and rest a while. The ascent up this tower can be quite arduous.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"I'm forging something at the moment, but if you come back later, there might be something for sale.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"Us dwarves pride ourselves on our craftsmanship. Quality guaranteed!\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case FETCH_NPC + 4:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"The creatures on this floor are my creations. They escaped from their facility.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Try not to aggravate them. They are quite ferocious.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case BOUNTY_NPC + 4:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Greetings! I am the great wizard Akard!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Would you like to be my test subjects?\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case SHOP_NPC + 4:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Very interesting. What drives people to climb this tower?\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"They don't even know what's at the top and yet they enter without hesitation.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case SHOP_NPC + 5:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Eek! Put on your masks! There's a deadly plague on this floor!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"It deals 25 damage per second!\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case FETCH_NPC + 5:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"I'm running low on rations...\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"This is my last piece of fresh pork. The rest of it rotted away.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"Oh, I hope the next floor has something edible.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case BOUNTY_NPC + 5:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Mmm, the meat on this floor is absolutely delicious!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Much better than the junk I had back at home.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"Y'all got any more of that decaying meat?\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case FETCH_NPC + 6:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Alright, when I laugh maniacally, you quiver in fear, got it?\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"3...\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"2...\");");
code("}");
code("case 4:");
code("{");
code("uiMessageBox(\"1...\");");
code("}");
code("case 5:");
code("{");
code("uiMessageBox(\"MWUAHAHAHA!!!\");");
code("trSoundPlayFN(\"xpack\xdialog\xkri075.mp3\",\"1\",-1,\"\",\"\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case BOUNTY_NPC + 6:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"What do you want?\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Stop bothering me. I have important business to tend to.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case SHOP_NPC + 6:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Once I attain the power of RMS, I shall be unstoppable!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Ahem...\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"What? Stop staring or I'll vaporize you.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_KASTOR:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Damn, to think I could only make it up to the fifth floor...\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Now how am I going to prove my old man wrong?!\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"...Huh?\");");
code("}");
code("case 4:");
code("{");
code("uiMessageBox(\"What the hell are you looking at?\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST + SHOP_NPC + 1:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Hey! It's dangerous to go alone! Buy this!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"If you want this relic, you can buy it for 200 gold. Just drop a relic here to confirm your purchase.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"It will be sent straight to your warehouse.\");");
code("}");
code("case 4:");
code("{");
code("trShowImageDialog(relicIcon(1*trQuestVarGet(\"shopRelic\")),relicName(1*trQuestVarGet(\"shopRelic\")));");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST + SHOP_NPC + 2:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Hey you! Wanna buy this relic?\");");
code("}");
code("case 2:");
code("{");
code("trShowImageDialog(relicIcon(1*trQuestVarGet(\"shopRelic\")),relicName(1*trQuestVarGet(\"shopRelic\")));");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"It's nice and shiny! Only 200 gold!\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST + SHOP_NPC + 3:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Behold! My latest product! I worked for weeks on this!\");");
code("}");
code("case 2:");
code("{");
code("trShowImageDialog(relicIcon(1*trQuestVarGet(\"shopRelic\")),relicName(1*trQuestVarGet(\"shopRelic\")));");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"Dwarven quality goods! Expect the best! For a small sum of 200 gold, of course.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST_COMPLETE + SHOP_NPC:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"The price is 200 gold. This is what's for sale:\");");
code("}");
code("case 2:");
code("{");
code("trShowImageDialog(relicIcon(1*trQuestVarGet(\"shopRelic\")),relicName(1*trQuestVarGet(\"shopRelic\")));");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST + FETCH_NPC + 1:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Adventurers! Help! My pigs have ran off from this impenetrable enclosure!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Please, help me find my precious pigs! There are three of them in total!\");");
code("}");
code("case 3:");
code("{");
code("trSoundPlayFN(\"new_objective.wav\",\"1\",-1,\"\",\"\");");
code("trMessageSetText(\"Find three pigs and bring them to the enclosure.\", -1);");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST_COMPLETE + FETCH_NPC + 1:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"My pigs! Thank you so much!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"I didn't know what I would be eating tonight.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"Here, take this as your reward!\");");
code("}");
code("case 4:");
code("{");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"\",\"\");");
code("trShowImageDialog(\"icons\improvement tax collectors icon 64\", \"300 Gold\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST + BOUNTY_NPC + 1:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Adventurers! I have an urgent request!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"A Mummy has been spotted! Such a high-level enemy should not be on the first floor.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"Eliminate it at once! I will reward you handsomely.\");");
code("}");
code("case 4:");
code("{");
code("trMinimapFlare(trCurrentPlayer(), 10, trVectorQuestVarGet(\"bountyTargetPos\"), true);");
code("trSoundPlayFN(\"new_objective.wav\",\"1\",-1,\"\",\"\");");
code("trMessageSetText(\"Defeat the Mummy.\", -1);");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST_COMPLETE + BOUNTY_NPC + 1:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Good work defeating the Mummy. There could have been many casualties.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Here is your reward.\");");
code("}");
code("case 3:");
code("{");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"\",\"\");");
code("trShowImageDialog(gemstoneIcon(STARSTONE),gemstoneName(STARSTONE) + \" x1\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST + FETCH_NPC + 2:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Adventurers. I feel like my time is coming. I just want one last look at my family.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"I don't remember where I died, but there should be a picture of my son there. Can you retrieve it?\");");
code("}");
code("case 3:");
code("{");
code("trSoundPlayFN(\"new_objective.wav\",\"1\",-1,\"\",\"\");");
code("trMessageSetText(\"Bring back the ghost's picture.\", -1);");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST_COMPLETE + FETCH_NPC + 2:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Thank you, adventurers. This is what I was looking for.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"I don't have hands. Can you do one last thing for me? Please write this down on the picture:\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"I'm sorry. I was wrong. If we ever meet again, I'll be a proper father this time.\");");
code("}");
code("case 4:");
code("{");
code("uiMessageBox(\"...\");");
code("}");
code("case 5:");
code("{");
code("uiMessageBox(\"Thank you.\");");
code("}");
code("case 6:");
code("{");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"\",\"\");");
code("trShowImageDialog(gemstoneIcon(SOULSTONE),gemstoneName(SOULSTONE) + \" x1\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST + BOUNTY_NPC + 2:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Jimmy? Jimmy is that you?\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Jimmy you bastard! It's your fault we all died!\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"I'm going to kill you Jimmy!\");");
code("}");
code("case 4:");
code("{");
code("trSoundPlayFN(\"new_objective.wav\",\"1\",-1,\"\",\"\");");
code("trMessageSetText(\"Run!\", -1);");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST_COMPLETE + BOUNTY_NPC + 2:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"I'm sorry... my memory isn't what it used to be. I know you're not Jimmy.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Please take this as compensation... and kill Jimmy if you get the chance.\");");
code("}");
code("case 3:");
code("{");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"\",\"\");");
code("trShowImageDialog(\"icons\improvement tax collectors icon 64\", \"200 Gold\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST + FETCH_NPC + 3:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Excuse me! You there! I need your help! I'll pay you handsomely!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"I have a shipment of goods but it needs an escort. Can you bring it here?\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"Be warned! The goods smell delicious, so wolves may come and attack it!\");");
code("}");
code("case 4:");
code("{");
code("trMinimapFlare(trCurrentPlayer(), 10, trVectorQuestVarGet(\"fetchTargetPos\"), true);");
code("trSoundPlayFN(\"new_objective.wav\",\"1\",-1,\"\",\"\");");
code("trMessageSetText(\"Escort the goods to the axeman.\", -1);");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST_COMPLETE + FETCH_NPC + 3:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Thank you, adventurers. Looks like everything's intact.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Here is your reward.\");");
code("}");
code("case 3:");
code("{");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"\",\"\");");
code("trShowImageDialog(\"icons\improvement tax collectors icon 64\", \"300 Gold\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST + BOUNTY_NPC + 3:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Oh, adventurers! I'm at my wit's end! I need that dwarf to repair my axe!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"But in order to repair it, he needs five Frosted Bones! They can be collected from Frost Giants.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"But I can't kill Frost Giants without this axe! You're my only hope!\");");
code("}");
code("case 4:");
code("{");
code("uiMessageBox(\"There are Frost Giants in this canyon. Please kill them and bring their bones to me!\");");
code("}");
code("case 5:");
code("{");
code("trSoundPlayFN(\"new_objective.wav\",\"1\",-1,\"\",\"\");");
code("trMessageSetText(\"Kill five Frost Giants.\", -1);");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST_COMPLETE + BOUNTY_NPC + 3:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Frosted Bones! Thank you so much!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Now I'm going to go on a massacre! Mwuahaha!\");");
code("}");
code("case 3:");
code("{");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"\",\"\");");
code("trShowImageDialog(gemstoneIcon(MANASTONE),gemstoneName(MANASTONE) + \" x1\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST + FETCH_NPC + 4:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"This ancient tree will occasionally shed fruits of knowledge.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Bring me the fruit that solves this math problem:\");");
code("}");
code("case 3:");
code("{");
code("trSoundPlayFN(\"new_objective.wav\",\"1\",-1,\"\",\"\");");
code("trMessageSetText(\"\"+1*trQuestVarGet(\"operand1\") + \" + \" + 1*trQuestVarGet(\"operand2\") + \" = ?\", -1);");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST_COMPLETE + FETCH_NPC + 4:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Impressive. If you had brought the wrong fruit...\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Nevermind. Here's your reward.\");");
code("}");
code("case 3:");
code("{");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"\",\"\");");
code("trShowImageDialog(gemstoneIcon(STARSTONE),gemstoneName(STARSTONE) + \" x1\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST + BOUNTY_NPC + 4:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Congratulations! You have been randomly selected to be my test subjects!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Please do not resist.\");");
code("}");
code("case 3:");
code("{");
code("trSoundPlayFN(\"new_objective.wav\",\"1\",-1,\"\",\"\");");
code("trMessageSetText(\"Defeat the monsters.\", -1);");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST_COMPLETE + BOUNTY_NPC + 4:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"This has been some interesting data.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Thank you for volunteering. Here is your reward.\");");
code("}");
code("case 3:");
code("{");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"\",\"\");");
code("trShowImageDialog(\"icons\improvement tax collectors icon 64\", \"300 Gold\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_ZENOS_PARADOX:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Oh no, not like this! We've entered Zeno's Paradox!\");");
code("}");
code("case 2:");
code("{");
code("extra = \"\" + 1*trQuestVarGet(\"operand1\") + \" + \" + 1*trQuestVarGet(\"operand2\") + \" = \" + 1*trQuestVarGet(\"wrongAnswer\");");
code("uiMessageBox(\"You fools! We're now trapped in a world where \" + extra + \"!\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"We're doomed! We're doomed!\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST + FETCH_NPC + 5:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Hey... please help me... I'm starving...\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"There must be... something edible... on this floor...\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"I'll pay you anything... I just need some food...\");");
code("}");
code("case 4:");
code("{");
code("trMessageSetText(\"Find something edible for the adventurer.\", -1);");
code("trSoundPlayFN(\"new_objective.wav\",\"1\",-1,\"\",\"\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_ATE_CORPSE:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Is this all there is? Well, here goes nothing.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Hrrrk! Oh god, what is this?!\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"I'm dying!!!!!\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_ATE_BERRIES:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Berries? Thank you so much! I'll never forget this!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Wait, what's going on? What's happening to my body?\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"AaaAaAhHhhHH!!1!\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST_COMPLETE + FETCH_NPC + 5:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Oh thank goodness! I thought I was going to starve!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"This is just what I needed! Thank you so much! You're a lifesaver!\");");
code("}");
code("case 3:");
code("{");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"\",\"\");");
code("trShowImageDialog(\"icons\improvement tax collectors icon 64\", \"300 Gold\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST + BOUNTY_NPC + 5:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Hey you! I can't get enough of this marvelous meat!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"But it needs a bit more seasoning.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"Please collect some poison using this bucket and bring it back to me.\");");
code("}");
code("case 4:");
code("{");
code("trMessageSetText(\"Equip the Bucket and collect some Poison.\", -1);");
code("trSoundPlayFN(\"new_objective.wav\",\"1\",-1,\"\",\"\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST_COMPLETE + BOUNTY_NPC + 5:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Simply exquisite! This is luxury! This is true cuisine!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Would you like to have a bite?\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"No? Okay fine. Have this instead.\");");
code("}");
code("case 4:");
code("{");
code("trShowImageDialog(gemstoneIcon(SOULSTONE),gemstoneName(SOULSTONE) + \" x1\");");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"\",\"\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST + FETCH_NPC + 6:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Adventurers. I have an important task for you.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"One of my special relics has been stolen.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"Fortunately, this magic detector can tell you how far the relic is from you.\");");
code("}");
code("case 4:");
code("{");
code("uiMessageBox(\"However, this magic detector drains your favor in order to function.\");");
code("}");
code("case 5:");
code("{");
code("uiMessageBox(\"If your favor reaches zero while you hold it, it will explode!\");");
code("}");
code("case 6:");
code("{");
code("trSoundPlayFN(\"new_objective.wav\",\"1\",-1,\"\",\"\");");
code("trMessageSetText(\"Use the Magic Detector to find Yeebaagooon's missing relic and return it to him.\", -1);");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST_COMPLETE + FETCH_NPC + 6:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Excellent work. You are far more useful than those dwarves I enslaved.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"One of them betrayed me. That's his smoldering corpse over there.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"Anyway, here is your reward.\");");
code("}");
code("case 4:");
code("{");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"\",\"\");");
code("trShowImageDialog(\"icons\improvement tax collectors icon 64\", \"300 Gold\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST + BOUNTY_NPC + 6:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Ah, right on time, adventurers.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"There is a lot of useless junk in my storage. Please get rid of it.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"Don't touch anything else, however.\");");
code("}");
code("case 4:");
code("{");
code("trMessageSetText(\"Move the Worthless Junk out of Yeebaagooon's storage room.\", -1);");
code("trSoundPlayFN(\"new_objective.wav\",\"1\",-1,\"\",\"\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST_COMPLETE + BOUNTY_NPC + 6:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Excellent work. Now I can fill this place with other worthless junk.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Here is your reward.\");");
code("}");
code("case 3:");
code("{");
code("trShowImageDialog(gemstoneIcon(MANASTONE), gemstoneName(MANASTONE));");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"\",\"\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_TEMPLE + 6:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"A trial of thunder and lightning. Only the worthy may succeed.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"If you can survive 47 seconds, my power is yours.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"To begin the trial, drop a relic at my feet.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_TEMPLE_COMPLETE + 6:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"You have proven yourself worthy, and as such, I grant you this power.\");");
code("}");
code("case 2:");
code("{");
code("trShowImageDialog(boonIcon(BOON_SPELL_ATTACK), boonName(BOON_SPELL_ATTACK));");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"You can equip this Blessing in singleplayer.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_TEMPLE + 11:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"A single question, yet infinite possibilities.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Show thy mettle, and be rewarded with glorious treasure.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"What is \" + 1*trQuestVarGet(\"operand1\") + \" + \" + 1*trQuestVarGet(\"operand2\") + \"?\");");
code("dialog = 0;");
code("}");
code("}");
code("}");
code("}");
code("return(dialog);");
code("}");



code("rule relic_transporter_guy_found");
code("inactive");
code("highFrequency");
code("{");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"relicTransporterGuyName\");");
code("for(p=1; <ENEMY_PLAYER) {");
code("if (trUnitHasLOS(p)) {");
code("xsDisableSelf();");
code("xsEnableRule(\"relic_transporter_guy_always\");");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,");
code("trQuestVarGet(\"relicTransporterGuyPosx\"),0,trQuestVarGet(\"relicTransporterGuyPosz\"),0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Revealer\");");
code("trSoundPlayFN(\"villagercreate.wav\",\"1\",-1,\"\",\"\");");
code("break;");
code("}");
code("}");
code("}");

code("rule boss_entrance_found");
code("inactive");
code("highFrequency");
code("{");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossEntranceStatue\");");
code("for(p=1; <ENEMY_PLAYER) {");
code("if (trUnitHasLOS(p)) {");
code("xsDisableSelf();");
code("xsEnableRule(\"boss_entrance_always\");");
code("trVectorSetUnitPos(\"pos\", \"bossEntranceStatue\");");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,");
code("trQuestVarGet(\"Posx\"),0,trQuestVarGet(\"Posz\"),0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Revealer\");");
code("trSoundPlayFN(\"sentinelbirth.wav\",\"1\",-1,\"\",\"\");");
code("trMessageSetText(\"The boss entrance has been found!\", -1);");
code("break;");
code("}");
code("}");
code("}");


code("rule relic_transporter_guy_always");
code("inactive");
code("highFrequency");
code("{");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"relicTransporterGuyName\");");
code("if (trUnitIsSelected()) {");
code("trUnitHighlight(5.0, true);");
code("int p = trCurrentPlayer();");
code("if (trQuestVarGet(\"p\"+p+\"transporterPurchased\") == 0) {");
code("startNPCDialog(NPC_RELIC_TRANSPORTER);");
code("} else {");
code("startNPCDialog(NPC_RELIC_TRANSPORTER_WTF);");
code("}");
code("reselectMyself();");
code("}");
code("}");

code("rule npc_talk_01");
code("inactive");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("trQuestVarSet(\"currentNPCProgress\",");
code("npcDiag(1*trQuestVarGet(\"currentNPC\"), 1*trQuestVarGet(\"currentNPCProgress\")));");
code("if (trQuestVarGet(\"currentNPCProgress\") > 0) {");
code("trDelayedRuleActivation(\"npc_talk_02\");");
code("}");
code("}");

code("rule npc_talk_02");
code("inactive");
code("highFrequency");
code("{");
code("if ((trQuestVarGet(\"currentNPCProgress\") > 0) &&");
code("(trIsGadgetVisible(\"ingame-messagedialog\") == false) &&");
code("(trIsGadgetVisible(\"ShowImageBox\") == false)) {");
code("trDelayedRuleActivation(\"npc_talk_01\");");
code("xsDisableSelf();");
code("}");
code("}");

code("void questComplete(int gem = -1, int gold = -1) {");
code("if (gem >= 0) {");
code("trQuestVarSet(\"gemstone\"+gem, 1 + trQuestVarGet(\"gemstone\"+gem));");
code("}");
code("if (gold > 0) {");
code("for(p=1; < ENEMY_PLAYER) {");
code("trQuestVarSet(\"p\"+p+\"gold\", gold + trQuestVarGet(\"p\"+p+\"gold\"));");
code("trPlayerGrantResources(p, \"gold\", gold);");
code("}");
code("}");
code("trQuestVarSet(\"questCount\", 1 + trQuestVarGet(\"questCount\"));");
code("startNPCDialog(NPC_QUEST_COMPLETE + trQuestVarGet(\"stage\") + 10 * trQuestVarGet(\"localQuest\"));");
code("trQuestVarSet(\"questActive\", -1);");
code("uiLookAtUnitByName(\"\"+1*trQuestVarGet(\"questGuy\"));");
code("}");

code("rule town_always");
code("inactive");
code("highFrequency");
code("{");
code("int x = 0;");
code("int z = 0;");
code("int p = 0;");
code("int room = 0;");
code("int action = 0;");
code("float amt = 0;");
code("if (trQuestVarGet(\"townFound\") == 0) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"guy1\");");
code("for(p=1; < ENEMY_PLAYER) {");
code("if (trUnitHasLOS(p)) {");
code("trQuestVarSet(\"townFound\", 1);");
code("break;");
code("}");
code("}");
code("if (trQuestVarGet(\"townFound\") == 1) {");
code("x = trQuestVarGet(\"village\");");
code("z = x / 4;");
code("x = trQuestVarGet(\"village\") - 4 * z;");
code("trVectorQuestVarSet(\"townCenter\", xsVectorSet(70*x + 40, 0, 70*z + 40));");
code("trQuestVarSet(\"townCenter\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Revealer to Player\",1,70*x+40,0,70*z+40,225,true);");
code("trSoundPlayFN(\"settlement.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("} else {");
code("yDatabaseNext(\"npcTalk\", true);");
code("if (trUnitIsSelected()) {");
code("startNPCDialog(1*yGetVar(\"npcTalk\", \"dialog\"));");
code("reselectMyself();");
code("}");

code("if (trQuestVarGet(\"questActive\") == 0) {");
code("trVectorSetUnitPos(\"questGuyPos\", \"questGuy\");");
code("for(p=1; < ENEMY_PLAYER) {");
code("if (zDistanceToVectorSquared(\"p\"+p+\"unit\", \"questGuyPos\") < 16) {");
code("uiLookAtUnitByName(\"\"+1*trQuestVarGet(\"questGuy\"));");
code("trQuestVarSet(\"questActive\", 1);");
code("startNPCDialog(NPC_QUEST + trQuestVarGet(\"stage\") + 10 * trQuestVarGet(\"localQuest\"));");
code("break;");
code("}");
code("}");
code("} else if (trQuestVarGet(\"localQuest\") == SHOP_GUY) {");
code("switch(1*trQuestVarGet(\"questActive\"))");
code("{");
code("case 1:");
code("{");
code("trQuestVarSet(\"questActive\", 2);");
code("trQuestVarSetFromRand(\"shopRelic\", 5, 10, true);");
code("trQuestVarSet(\"shopRelic\", trQuestVarGet(\"shopRelic\") + trQuestVarGet(\"stage\"));");
code("trQuestVarSet(\"shopGuyActive\", 1);");
code("trVectorSetUnitPos(\"shopGuyPos\", \"questGuy\");");
code("}");
code("case 2:");
code("{");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"questGuy\");");
code("if (trUnitIsSelected()) {");
code("startNPCDialog(NPC_QUEST_COMPLETE + SHOP_NPC);");
code("reselectMyself();");
code("}");
code("}");
code("}");
code("} else if (trQuestVarGet(\"questActive\") > 0) {");
code("switch(1*trQuestVarGet(\"stage\") + 10 * trQuestVarGet(\"localQuest\"))");
code("{");
code("case FETCH_NPC + 1:");
code("{");
code("switch(1*trQuestVarGet(\"questActive\"))");
code("{");
code("case 1:");
code("{");
code("trQuestVarSet(\"questActive\", 2);");
code("trQuestVarSetFromRand(\"rand\", 1, 8, true);");
code("trQuestVarSet(\"pig\", trQuestVarGet(\"rand\") + trQuestVarGet(\"village\"));");
code("if (trQuestVarGet(\"pig\") > 14) {");
code("trQuestVarSet(\"pig\", trQuestVarGet(\"pig\") - 14);");
code("}");
code("trQuestVarSet(\"pig1\", trGetNextUnitScenarioNameNumber());");
code("z = trQuestVarGet(\"pig\") / 4;");
code("x = trQuestVarGet(\"pig\") - 4 * z;");
code("trArmyDispatch(\"1,0\", \"Dwarf\",1,70 * x + 40,0,70 * z + 40,0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"pig1\", true);");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Pig\");");
code("trQuestVarSetFromRand(\"rand2\", 1, 11 - trQuestVarGet(\"rand\"));");
code("trQuestVarSet(\"pig\", trQuestVarGet(\"rand2\") + trQuestVarGet(\"pig\"));");
code("if (trQuestVarGet(\"pig\") > 14) {");
code("trQuestVarSet(\"pig\", trQuestVarGet(\"pig\") - 14);");
code("}");
code("trQuestVarSet(\"pig2\", trGetNextUnitScenarioNameNumber());");
code("z = trQuestVarGet(\"pig\") / 4;");
code("x = trQuestVarGet(\"pig\") - 4 * z;");
code("trArmyDispatch(\"1,0\", \"Dwarf\",1,70 * x + 40,0,70 * z + 40,0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"pig2\", true);");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Pig\");");
code("trQuestVarSetFromRand(\"rand3\", 1, 15 - trQuestVarGet(\"rand\") - trQuestVarGet(\"rand2\"));");
code("trQuestVarSet(\"pig\", trQuestVarGet(\"rand\") + trQuestVarGet(\"pig\"));");
code("if (trQuestVarGet(\"pig\") > 14) {");
code("trQuestVarSet(\"pig\", trQuestVarGet(\"pig\") - 14);");
code("}");
code("trQuestVarSet(\"pig3\", trGetNextUnitScenarioNameNumber());");
code("z = trQuestVarGet(\"pig\") / 4;");
code("x = trQuestVarGet(\"pig\") - 4 * z;");
code("trArmyDispatch(\"1,0\", \"Dwarf\",1,70 * x + 40,0,70 * z + 40,0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"pig3\", true);");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Pig\");");
code("}");
code("case 2:");
code("{");
code("for(i=1; <4) {");
code("if (trQuestVarGet(\"pigReturned\"+i) == 0) {");
code("trVectorSetUnitPos(\"pos\", \"pig\"+i);");
code("if (vectorInRectangle(\"pos\", \"pigpenLower\", \"pigpenUpper\")) {");
code("trQuestVarSet(\"pigReturned\"+i, 1);");
code("trQuestVarSet(\"pigReturnCount\", 1 + trQuestVarGet(\"pigReturnCount\"));");
code("trChatSend(0, \"<color=1,1,1>Pig returned!</color>\");");
code("trSoundPlayFN(\"pigambient.wav\",\"1\",-1,\"\",\"\");");
code("if (trQuestVarGet(\"pigReturnCount\") == 3) {");
code("questComplete(-1, 300);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");
code("case BOUNTY_NPC + 1:");
code("{");
code("switch(1*trQuestVarGet(\"questActive\"))");
code("{");
code("case 1:");
code("{");
code("trQuestVarSet(\"questActive\", 2);");
code("trQuestVarSetFromRand(\"rand\", 6, 9, true);");
code("trQuestVarSet(\"rand\", trQuestVarGet(\"village\") + trQuestVarGet(\"rand\"));");
code("if (trQuestVarGet(\"rand\") > 14) {");
code("trQuestVarSet(\"rand\", trQuestVarGet(\"rand\") - 14);");
code("}");
code("z = trQuestVarGet(\"rand\") / 4;");
code("x = trQuestVarGet(\"rand\") - 4 * z;");
code("trVectorQuestVarSet(\"bountyTargetPos\", xsVectorSet(70*x+40,0,70*z+40));");
code("trQuestVarSet(\"bountyTarget\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\", \"Dwarf\",1,70 * x + 40,0,70 * z + 40,225,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bountyTarget\", true);");
code("trUnitConvert(ENEMY_PLAYER);");
code("trUnitChangeProtoUnit(\"Mummy\");");
code("activateEnemy(\"bountyTarget\", 100);");
code("trModifyProtounit(\"Mummy\", ENEMY_PLAYER, 0, 700);");
code("}");
code("case 2:");
code("{");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bountyTarget\", true);");
code("if (trUnitAlive() == false) {");
code("trMessageSetText(\"Bounty target defeated! Return to the quest giver for your reward!\", -1);");
code("trQuestVarSet(\"questActive\", 3);");
code("}");
code("}");
code("case 3:");
code("{");
code("trVectorSetUnitPos(\"bountyGuyPos\", \"questguy\");");
code("for(p=1; < ENEMY_PLAYER) {");
code("if (zDistanceToVectorSquared(\"p\"+p+\"unit\", \"questGuyPos\") < 16) {");
code("questComplete(STARSTONE, 0);");
code("break;");
code("}");
code("}");
code("}");
code("}");
code("}");
code("case FETCH_NPC + 2:");
code("{");
code("switch(1*trQuestVarGet(\"questActive\"))");
code("{");
code("case 1:");
code("{");
code("trQuestVarSet(\"questActive\", 2);");
code("trQuestVarSetFromRand(\"rand\", 6, 9, true);");
code("trQuestVarSet(\"rand\", trQuestVarGet(\"village\") + trQuestVarGet(\"rand\"));");
code("if (trQuestVarGet(\"rand\") > 14) {");
code("trQuestVarSet(\"rand\", trQuestVarGet(\"rand\") - 14);");
code("}");
code("z = trQuestVarGet(\"rand\") / 4;");
code("x = trQuestVarGet(\"rand\") - 4 * z;");
code("trVectorQuestVarSet(\"fetchTargetPos\", xsVectorSet(70*x+40,0,70*z+40));");
code("trQuestVarSet(\"fetchTarget\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\", \"Dwarf\",1,70 * x + 36,0,70 * z + 36,225,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"fetchTarget\", true);");
code("trUnitChangeProtoUnit(\"Relic\");");
code("yAddToDatabase(\"freeRelics\", \"fetchTarget\");");
code("yAddUpdateVar(\"freeRelics\", \"type\", RELIC_GHOST_PICTURE);");
code("}");
code("case 2:");
code("{");
code("trVectorSetUnitPos(\"pos\", \"fetchTarget\");");
code("if (zDistanceBetweenVectorsSquared(\"pos\", \"questGuyPos\") < 16.0) {");
code("questComplete(SOULSTONE, 0);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"fetchTarget\", true);");
code("trUnitChangeProtoUnit(\"Osiris Box Glow\");");
code("}");
code("}");
code("}");
code("}");
code("case BOUNTY_NPC + 2:");
code("{");
code("switch(1*trQuestVarGet(\"questActive\"))");
code("{");
code("case 1:");
code("{");
code("trQuestVarSet(\"portalsActive\", 0);");
code("trCounterAddTime(\"countdown\", 15, 1, \"The shade attacks\", -1);");
code("trQuestVarSet(\"shadeAttackTime\", trTime() + 15);");
code("trQuestVarSet(\"questActive\", 2);");
code("trModifyProtounit(\"Shade\", 0, 2, 30);");
code("trModifyProtounit(\"Shade\", 0, 27, 3000);");
code("}");
code("case 2:");
code("{");
code("if (trTime() >= trQuestVarGet(\"shadeAttackTime\")) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"questGuy\", true);");
code("trUnitMoveToPoint(0,0,0,-1,true);");
code("trSoundPlayFN(\"shadeofhadesacknowledge2.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"attackwarning.wav\",\"1\",-1,\"\",\"\");");
code("trChatSendSpoofed(0, \"Shade: JIMMY!!!!\");");
code("trQuestVarSet(\"questActive\", 3);");
code("trQuestVarSet(\"shadeAttackTime\", trTime() + 30);");
code("trCounterAddTime(\"shadecountdown\", 30, 1, \"Survive\", -1);");
code("}");
code("}");
code("case 3:");
code("{");
code("if (trTime() >= trQuestVarGet(\"shadeAttackTime\")) {");
code("trQuestVarSet(\"portalsActive\", 1);");
code("trQuestVarSet(\"questActive\", 4);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"questGuy\", true);");
code("if (trUnitAlive()) {");
code("trUnitDoWorkOnUnit(\"\"+1*trQuestVarGet(\"questGuy\"));");
code("questComplete(-1, 200);");
code("}");
code("} else {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"questGuy\", true);");
code("if (trUnitAlive() == false) {");
code("trSoundPlayFN(\"pestilencebirth.wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSet(\"questActive\", -1);");
code("trCounterAbort(\"shadecountdown\");");
code("trMessageSetText(\"Quest failed!\", -1);");
code("trQuestVarSet(\"portalsActive\", 1);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("case FETCH_NPC + 3:");
code("{");
code("switch(1*trQuestVarGet(\"questActive\"))");
code("{");
code("case 1:");
code("{");
code("trQuestVarSet(\"questActive\", 2);");
code("trQuestVarSetFromRand(\"rand\", 6, 9, true);");
code("trQuestVarSet(\"rand\", trQuestVarGet(\"village\") + trQuestVarGet(\"rand\"));");
code("if (trQuestVarGet(\"rand\") > 14) {");
code("trQuestVarSet(\"rand\", trQuestVarGet(\"rand\") - 14);");
code("}");
code("z = trQuestVarGet(\"rand\") / 4;");
code("x = trQuestVarGet(\"rand\") - 4 * z;");
code("trVectorQuestVarSet(\"fetchTargetPos\", xsVectorSet(70*x+40,0,70*z+40));");
code("trQuestVarSet(\"fetchTarget\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\", \"Dwarf\",1,70 * x + 36,0,70 * z + 36,225,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"fetchTarget\", true);");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Ox Cart\");");
code("trQuestVarSet(\"fetchWolvesSpawn\", zDistanceBetweenVectors(\"fetchTargetPos\", \"townCenter\") - 20);");
code("}");
code("case 2:");
code("{");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"fetchTarget\", true);");
code("for(p=1; < ENEMY_PLAYER) {");
code("if (trUnitHasLOS(p)) {");
code("trSoundPlayFN(\"find.wav\",\"1\",-1,\"\",\"\");");
code("trUnitConvert(p);");
code("trQuestVarSet(\"questActive\", 3);");
code("trMessageSetText(\"Bring the cart back to the town.\");");
code("break;");
code("}");
code("}");
code("}");
code("case 3:");
code("{");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"fetchTarget\", true);");
code("if (trUnitAlive() == false) {");
code("trSoundPlayFN(\"pestilencebirth.wav\",\"1\",-1,\"\",\"\");");
code("trMessageSetText(\"Quest failed!\");");
code("trQuestVarSet(\"questActive\", -1);");
code("} else if (zDistanceToVector(\"fetchTarget\", \"townCenter\") < trQuestVarGet(\"fetchWolvesSpawn\")) {");
code("trQuestVarSet(\"fetchWolvesSpawn\", trQuestVarGet(\"fetchWolvesSpawn\") - 20);");
code("trVectorSetUnitPos(\"center\", \"fetchTarget\");");
code("trQuestVarSetFromRand(\"count\", 1, ENEMY_PLAYER, true);");
code("for(x=trQuestVarGet(\"count\"); >0) {");
code("trQuestVarSetFromRand(\"angle\", 0, 6.283185, false);");
code("trVectorSetFromAngle(\"dir\", trQuestVarGet(\"angle\"));");
code("trQuestVarSet(\"heading\", 57.29578 * trQuestVarGet(\"angle\") - 180);");
code("trQuestVarSet(\"posx\", 20.0 * trQuestVarGet(\"dirx\") + trQuestVarGet(\"centerx\"));");
code("trQuestVarSet(\"posz\", 20.0 * trQuestVarGet(\"dirz\") + trQuestVarGet(\"centerz\"));");
code("trQuestVarSet(\"next\" , trGetNextUnitScenarioNameNumber());");
code("vectorToGrid(\"pos\", \"loc\");");
code("if (terrainIsType(\"loc\", TERRAIN_WALL, TERRAIN_SUB_WALL) == false) {");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"posx\"),0,trQuestVarGet(\"posz\"),trQuestVarGet(\"heading\"),true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitConvert(ENEMY_PLAYER);");
code("trUnitChangeProtoUnit(\"Fenris Wolf\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitMoveToPoint(trQuestVarGet(\"centerx\"),0,trQuestVarGet(\"centerz\"),-1,true);");
code("activateEnemy(\"next\");");
code("}");
code("}");
code("} else if (zDistanceToVectorSquared(\"fetchTarget\", \"townCenter\") < 400) {");
code("questComplete(-1, 300);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"fetchTarget\", true);");
code("trUnitConvert(0);");
code("}");
code("}");
code("}");
code("}");
code("case BOUNTY_NPC + 3:");
code("{");
code("switch(1*trQuestVarGet(\"questActive\"))");
code("{");
code("case 1:");
code("{");
code("trQuestVarSet(\"questActive\", 2);");
code("trQuestVarSet(\"frostGiantBones\", 0);");
code("trQuestVarSet(\"frostGiantBonesLast\", 0);");
code("trQuestVarSet(\"frostGiantHunt\", 1);");
code("for(i=1; < 14) {");
code("if (i == trQuestVarGet(\"village\")) {");
code("continue;");
code("} else {");
code("z = i / 4;");
code("x = i - z * 4;");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trQuestVarSetFromRand(\"heading\", 0, 360, true);");
code("trArmyDispatch(\"1,0\", \"Dwarf\", 1, 70*x+40,0,70*z+40,trQuestVarGet(\"heading\"),true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(ENEMY_PLAYER);");
code("trUnitChangeProtoUnit(\"Frost Giant\");");
code("yAddToDatabase(\"enemiesIncoming\", \"next\");");
code("}");
code("}");
code("}");
code("case 2:");
code("{");
code("if (trQuestVarGet(\"frostGiantBones\") > trQuestVarGet(\"frostGiantBonesLast\")) {");
code("if (trQuestVarGet(\"frostGiantBones\") >= 5) {");
code("trQuestVarSet(\"frostGiantHunt\", 0);");
code("trMessageSetText(\"Return to the axeman for your reward.\", -1);");
code("trQuestVarSet(\"questActive\", 3);");
code("} else {");
code("trQuestVarSet(\"frostGiantBonesLast\", trQuestVarGet(\"frostGiantBones\"));");
code("trChatSend(0, \"<color=1,1,1>Frosted Bone collected! (\"+1*trQuestVarGet(\"frostGiantBones\")+\"/5)\");");
code("}");
code("}");
code("}");
code("case 3:");
code("{");
code("trVectorSetUnitPos(\"bountyGuyPos\", \"questguy\");");
code("for(p=1; < ENEMY_PLAYER) {");
code("if (zDistanceToVectorSquared(\"p\"+p+\"unit\", \"questGuyPos\") < 16) {");
code("questComplete(MANASTONE, 0);");
code("break;");
code("}");
code("}");
code("}");
code("}");
code("}");
code("case BOUNTY_NPC + 4:");
code("{");
code("switch(1*trQuestVarGet(\"questActive\"))");
code("{");
code("case 1:");
code("{");
code("trQuestVarSet(\"questActive\", 2);");
code("trQuestVarSet(\"questSpawns\", 12);");
code("trQuestVarSetFromRand(\"questAngle\", 0, 3.14, false);");
code("trVectorSetFromAngle(\"questDir\", trQuestVarGet(\"questAngle\"));");
code("trQuestVarSet(\"questNext\", trTimeMS());");
code("trSoundPlayFN(\"changeunit.wav\",\"1\",-1,\"\",\"\");");
code("trBlockAllSounds(true);");
code("}");
code("case 2:");
code("{");
code("if (yGetDatabaseCount(\"questLeaves\") > 0) {");
code("action = processGenericProj(\"questLeaves\");");
code("if (action == PROJ_GROUND) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"questLeaves\");");
code("trUnitChangeProtoUnit(\"Dryad\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"questLeaves\");");
code("trDamageUnitPercent(-100);");
code("activateEnemy(\"questLeaves\",-1,0);");
code("yAddToDatabase(\"questTargets\", \"questLeaves\");");
code("yRemoveFromDatabase(\"questLeaves\");");
code("if (trQuestVarGet(\"questSpawns\") == 0) {");
code("trQuestVarSet(\"questActive\", 3);");
code("trUnblockAllSounds();");
code("}");
code("}");
code("}");
code("if (trQuestVarGet(\"questSpawns\") > 0) {");
code("if (trTimeMS() > trQuestVarGet(\"questNext\")) {");
code("for(i=trQuestVarGet(\"akardTower\"); < trQuestVarGet(\"akardTowerEnd\")) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+i, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");
code("}");
code("trQuestVarSet(\"questSpawns\", trQuestVarGet(\"questSpawns\") - 1);");
code("trQuestVarSet(\"questNext\", trQuestVarGet(\"questNext\") + 500);");
code("z = trQuestVarGet(\"village\") / 4;");
code("x = trQuestVarGet(\"village\") - 4 * z;");
code("trVectorQuestVarSet(\"start\", xsVectorSet(70*x+40,0,70*z+40));");
code("trQuestVarSetFromRand(\"rand\", 8, 20, false);");
code("addGenericProj(\"questLeaves\",\"start\",\"questDir\",kbGetProtoUnitID(\"Kronny Birth SFX\"),2,trQuestVarGet(\"rand\"),1);");
code("trVectorQuestVarSet(\"questDir\", rotationMatrix(\"questDir\", -0.757322, 0.653041));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"akardTower\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Tower Mirror\"));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"akardGuild1\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Guild\"));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"akardGuild2\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Guild\"));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"akardTree\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Tamarisk Tree\"));");
code("}");
code("}");
code("}");
code("case 3:");
code("{");
code("if (yGetDatabaseCount(\"questTargets\") > 0) {");
code("if (yDatabaseNext(\"questTargets\", true) == -1 || trUnitAlive() == false) {");
code("yRemoveFromDatabase(\"questTargets\");");
code("}");
code("} else {");
code("questComplete(-1, 300);");
code("}");
code("}");
code("}");
code("}");
code("case FETCH_NPC + 4:");
code("{");
code("switch(1*trQuestVarGet(\"questActive\"))");
code("{");
code("case 1:");
code("{");
code("trQuestVarSetFromRand(\"operand1\", 1, 10, true);");
code("trQuestVarSetFromRand(\"operand2\", 1, 10, true);");
code("trQuestVarSet(\"questAnswer\", trQuestVarGet(\"operand1\") + trQuestVarGet(\"operand2\"));");
code("trQuestVarSet(\"questActive\", 2);");
code("trQuestVarSet(\"questSpawns\", 20);");
code("trQuestVarSetFromRand(\"questAngle\", 0, 3.14, false);");
code("trVectorSetFromAngle(\"questDir\", trQuestVarGet(\"questAngle\"));");
code("trQuestVarSet(\"questNext\", trTimeMS());");
code("trSoundPlayFN(\"changeunit.wav\",\"1\",-1,\"\",\"\");");
code("trBlockAllSounds(true);");
code("}");
code("case 2:");
code("{");
code("if (yGetDatabaseCount(\"questLeaves\") > 0) {");
code("action = processGenericProj(\"questLeaves\");");
code("if (action == PROJ_GROUND) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"questLeaves\");");
code("trUnitChangeProtoUnit(\"Relic\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"questLeaves\");");
code("trDamageUnitPercent(-100);");
code("yAddToDatabase(\"freeRelics\", \"questLeaves\");");
code("yAddUpdateVar(\"freeRelics\", \"type\", yGetVar(\"questLeaves\", \"type\"));");
code("yAddToDatabase(\"questApples\", \"questLeaves\");");
code("yAddUpdateVar(\"questApples\", \"type\", yGetVar(\"questLeaves\", \"type\"));");
code("yRemoveFromDatabase(\"questLeaves\");");
code("if (yGetDatabaseCount(\"questLeaves\") + trQuestVarGet(\"questSpawns\") == 0) {");
code("trQuestVarSet(\"questActive\", 3);");
code("trUnblockAllSounds();");
code("}");
code("}");
code("}");
code("if (trQuestVarGet(\"questSpawns\") > 0) {");
code("if (trTimeMS() > trQuestVarGet(\"questNext\")) {");

code("for(i=trQuestVarGet(\"akardTower\"); < trQuestVarGet(\"akardTowerEnd\")) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+i, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");
code("}");

code("trQuestVarSet(\"questNext\", trQuestVarGet(\"questNext\") + 200);");
code("z = trQuestVarGet(\"village\") / 4;");
code("x = trQuestVarGet(\"village\") - 4 * z;");
code("trVectorQuestVarSet(\"start\", xsVectorSet(70*x+36,0,70*z+36));");
code("trQuestVarSetFromRand(\"rand\", 12, 16, false);");
code("addGenericProj(\"questLeaves\",\"start\",\"questDir\",kbGetProtoUnitID(\"Einheriar\"),18,trQuestVarGet(\"rand\"),1);");
code("yAddUpdateVar(\"questLeaves\", \"type\", RELIC_MATH_PROBLEM + trQuestVarGet(\"questSpawns\"));");
code("trQuestVarSet(\"questSpawns\", trQuestVarGet(\"questSpawns\") - 1);");
code("trVectorQuestVarSet(\"questDir\", rotationMatrix(\"questDir\", -0.757322, 0.653041));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"akardTower\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Tower Mirror\"));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"akardGuild1\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Guild\"));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"akardGuild2\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Guild\"));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"akardTree\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Tamarisk Tree\"));");

code("}");
code("}");
code("}");
code("case 3:");
code("{");
code("yDatabaseNext(\"questApples\");");
code("if (zDistanceToVectorSquared(\"questApples\", \"questGuyPos\") < 9) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"questApples\", true);");
code("if (yGetVar(\"questApples\", \"type\") - RELIC_MATH_PROBLEM == trQuestVarGet(\"questAnswer\")) {");
code("trUnitChangeProtoUnit(\"Osiris Box Glow\");");
code("questComplete(STARSTONE, -1);");
code("} else {");
code("trQuestVarSet(\"wrongAnswer\", yGetVar(\"questApples\", \"type\") - RELIC_MATH_PROBLEM);");
code("yClearDatabase(\"questApples\");");
code("xsDisableRule(\"gameplay_always\");");
code("xsDisableRule(\"town_always\");");
code("xsDisableRule(\"boss_entrance_always\");");
code("xsDisableRule(\"enter_boss_room\");");
code("xsDisableRule(\"nottud_always\");");
code("xsDisableRule(\"class_shop_always\");");
code("xsDisableRule(\"relic_transporter_guy_always\");");
code("xsDisableRule(\"relic_transporter_guy_found\");");
code("trUnitChangeProtoUnit(\"Dwarf\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"questApples\", true);");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Implode Sphere Effect\");");
code("trSoundPlayFN(\"wonderdeath.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"changeunit.wav\",\"1\",-1,\"\",\"\");");
code("trChatSendSpoofed(0, \"Akard: OH GOD! WHAT HAVE YOU DONE?! THAT'S THE WRONG-\");");
code("xsEnableRule(\"zenos_paradox_00\");");
code("trQuestVarSet(\"cinNext\", 0);");
code("trQuestVarSet(\"cinStep\", 0);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("case FETCH_NPC + 5:");
code("{");
code("switch(1*trQuestVarGet(\"questActive\"))");
code("{");
code("case 1:");
code("{");
code("trQuestVarSet(\"questActive\", 2);");
code("trQuestVarSetFromRand(\"rand\", 1, yGetDatabaseCount(\"basicRooms\") - 1, true);");
code("for(i=0; < trQuestVarGet(\"rand\")) {");
code("yDatabaseNext(\"basicRooms\");");
code("}");
code("room = trQuestVarGet(\"basicRooms\");");
code("trVectorQuestVarSet(\"pos\", randomNearEdgeOfRoom(room));");
code("trQuestVarSet(\"fecesRelic\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"posx\"),0,trQuestVarGet(\"posz\"),0,true);");
code("trQuestVarSetFromRand(\"rand\", 1, yGetDatabaseCount(\"basicRooms\") - 1, true);");
code("for(i=0; < trQuestVarGet(\"rand\")) {");
code("yDatabaseNext(\"basicRooms\");");
code("}");
code("room = trQuestVarGet(\"basicRooms\");");
code("trVectorQuestVarSet(\"pos\", randomNearEdgeOfRoom(room));");
code("trQuestVarSet(\"berryRelic\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"posx\"),0,trQuestVarGet(\"posz\"),0,false);");
code("trQuestVarSetFromRand(\"rand\", 1, yGetDatabaseCount(\"basicRooms\") - 1, true);");
code("for(i=0; < trQuestVarGet(\"rand\")) {");
code("yDatabaseNext(\"basicRooms\");");
code("}");
code("room = trQuestVarGet(\"basicRooms\");");
code("trVectorQuestVarSet(\"pos\", randomNearEdgeOfRoom(room));");
code("trQuestVarSet(\"corpseRelic\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"posx\"),0,trQuestVarGet(\"posz\"),0,false);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Relic\");");
code("yAddToDatabase(\"freeRelics\", \"fecesRelic\");");
code("yAddUpdateVar(\"freeRelics\", \"type\", RELIC_LITERAL_FECES);");
code("yAddToDatabase(\"freeRelics\", \"berryRelic\");");
code("yAddUpdateVar(\"freeRelics\", \"type\", RELIC_BERRY_BUSH);");
code("yAddToDatabase(\"freeRelics\", \"corpseRelic\");");
code("yAddUpdateVar(\"freeRelics\", \"type\", RELIC_A_FUCKING_CORPSE);");
code("}");
code("case 2:");
code("{");
code("if (zDistanceToVectorSquared(\"berryRelic\", \"questGuyPos\") < 16) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"berryRelic\", true);");
code("trUnitChangeProtoUnit(\"Regeneration SFX\");");
code("trQuestVarSet(\"questActive\", 4);");
code("trQuestVarSet(\"questNext\", trTime() + 5);");
code("trSoundPlayFN(\"colossuseat.wav\",\"1\",-1,\"\",\"\");");
code("startNPCDialog(NPC_ATE_BERRIES);");
code("} else if (zDistanceToVectorSquared(\"corpseRelic\", \"questGuyPos\") < 16) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"corpseRelic\", true);");
code("trUnitChangeProtoUnit(\"Scarab Blood\");");
code("trQuestVarSet(\"questActive\", 5);");
code("trQuestVarSet(\"questNext\", trTime() + 5);");
code("trSoundPlayFN(\"colossuseat.wav\",\"1\",-1,\"\",\"\");");
code("startNPCDialog(NPC_ATE_CORPSE);");
code("} else if (zDistanceToVectorSquared(\"fecesRelic\", \"questGuyPos\") < 16) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"fecesRelic\", true);");
code("trUnitChangeProtoUnit(\"Osiris Box Glow\");");
code("trSoundPlayFN(\"colossuseat.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"heal.wav\",\"1\",-1,\"\",\"\");");
code("questComplete(-1, 300);");
code("}");
code("}");
code("case 4:");
code("{");
code("if (trTime() > trQuestVarGet(\"questNext\")) {");
code("trQuestVarSet(\"questActive\", -1);");
code("trMessageSetText(\"Quest failed!\", -1);");
code("trSoundPlayFN(\"changeunit.wav\",\"1\",-1,\"\",\"\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"questGuy\", true);");
code("trUnitDestroy();");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"questGuyPosX\"),0,trQuestVarGet(\"questGuyPosZ\"),180,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\");");
code("trUnitConvert(ENEMY_PLAYER);");
code("trUnitChangeProtoUnit(\"Walking Berry Bush\");");
code("activateEnemy(\"next\", 10);");
code("}");
code("}");
code("case 5:");
code("{");
code("if (trTime() > trQuestVarGet(\"questNext\")) {");
code("trQuestVarSet(\"questActive\", -1);");
code("trMessageSetText(\"Quest failed!\", -1);");
code("trSoundPlayFN(\"argusfreezeattack.wav\",\"1\",-1,\"\",\"\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"questGuy\", true);");
code("trUnitDelete(false);");
code("}");
code("}");
code("}");
code("}");
code("case BOUNTY_NPC + 5:");
code("{");
code("switch(1*trQuestVarGet(\"questActive\"))");
code("{");
code("case 1:");
code("{");
code("trQuestVarSet(\"poisonBucket\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"questGuyPosX\") - 2,0,trQuestVarGet(\"questGuyPosZ\"),0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"poisonBucket\", true);");
code("trUnitChangeProtoUnit(\"Relic\");");
code("yAddToDatabase(\"freeRelics\", \"poisonBucket\");");
code("yAddUpdateVar(\"freeRelics\", \"type\", RELIC_POISON_BUCKET);");
code("trQuestVarSet(\"questActive\", 2);");
code("}");
code("case 2:");
code("{");
code("p = trQuestVarGet(\"poisonBucketHolder\");");
code("if (p > 0) {");
code("if (yGetVarAtIndex(\"playerUnits\", \"poisonStatus\", 1*trQuestVarGet(\"p\"+p+\"index\")) > 0) {");
code("if (trTime() > trQuestVarGet(\"poisonBucketNext\")) {");
code("trQuestVarSet(\"poisonBucketNext\", trTime());");
code("trQuestVarSet(\"poisonBucketFill\", trQuestVarGet(\"poisonBucketFill\") + 3);");
code("if (trQuestVarGet(\"poisonBucketFill\") >= 100) {");
code("trQuestVarSet(\"poisonBucketFill\", 100);");
code("trMessageSetText(\"Poison bucket has been filled. Return to the quest giver.\", -1);");
code("trQuestVarSet(\"questActive\", 3);");
code("}");
code("trChatSend(0, \"<color=0.3,1,0.5>Poison bucket: \" + 1*trQuestVarGet(\"poisonBucketFill\") + \"/100\");");
code("}");
code("}");
code("}");
code("}");
code("case 3:");
code("{");
code("if (zDistanceToVectorSquared(\"poisonBucket\", \"questGuyPos\") < 16) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"poisonBucket\", true);");
code("trUnitChangeProtoUnit(\"Lampades Blood\");");
code("trSoundPlayFN(\"lampadesblood.wav\",\"1\",-1,\"\",\"\");");
code("questComplete(SOULSTONE, -1);");
code("}");
code("}");
code("}");
code("}");
code("case FETCH_NPC + 6:");
code("{");
code("switch(1*trQuestVarGet(\"questActive\"))");
code("{");
code("case 1:");
code("{");
code("trQuestVarSetFromRand(\"rand\", 1, yGetDatabaseCount(\"basicRooms\"), true);");
code("for(i=0; < trQuestVarGet(\"rand\")) {");
code("yDatabaseNext(\"basicRooms\");");
code("}");
code("room = trQuestVarGet(\"basicRooms\");");
code("trVectorQuestVarSet(\"pos\", randomNearEdgeOfRoom(room));");
code("trQuestVarSet(\"yeebRelic\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"posx\"),0,trQuestVarGet(\"posz\"),0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Relic\");");
code("trQuestVarSet(\"questActive\", 2);");
code("trQuestVarSet(\"magicDetectorRelic\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"questGuyPosX\") - 2,0,trQuestVarGet(\"questguyposz\")-2,0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Relic\");");
code("yAddToDatabase(\"freeRelics\", \"yeebRelic\");");
code("yAddUpdateVar(\"freeRelics\", \"type\", RELIC_YEEBAAGOOON);");
code("yAddToDatabase(\"freeRelics\", \"magicDetectorRelic\");");
code("yAddUpdateVar(\"freeRelics\", \"type\", RELIC_MAGIC_DETECTOR);");
code("xsEnableRule(\"yeeb_hit_list\");");
code("}");
code("case 2:");
code("{");
code("p = trQuestVarGet(\"magicDetectorHolder\");");
code("trVectorSetUnitPos(\"pos\", \"yeebRelic\");");
code("if (zDistanceBetweenVectorsSquared(\"pos\", \"questGuyPos\") < 16) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"yeebRelic\", true);");
code("trUnitChangeProtoUnit(\"Osiris Box Glow\");");
code("questComplete(-1, 300);");
code("xsDisableRule(\"yeeb_hit_list\");");
code("trQuestVarSet(\"yeebHit\", 0);");
code("} else if (p > 0) {");
code("if (trTime() > trQuestVarGet(\"magicDetectorNext\")) {");
code("trQuestVarSet(\"magicDetectorNext\", trTime());");
code("amt = zDistanceToVector(\"magicDetectorRelic\", \"pos\");");
code("if (trCurrentPlayer() == p) {");
code("if (trPlayerResourceCount(p, \"favor\") < 10) {");
code("trChatSend(0, \"<color=1,0,0>Distance: \" + 1*amt);");
code("trSoundPlayFN(\"attackwarning.wav\",\"1\",-1,\"\",\"\");");
code("} else {");
code("trChatSend(0, \"<color=1,1,1>Distance: \" + 1*amt);");
code("}");
code("}");
code("}");
code("if (trPlayerResourceCount(p, \"favor\") == 0) {");
code("trMessageSetText(\"Quest failed!\");");
code("trQuestVarSet(\"questActive\", -1);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"yeebRelic\", true);");
code("trUnitDestroy();");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"magicDetectorRelic\", true);");
code("trUnitDestroy();");
code("trVectorSetUnitPos(\"pos\", \"p\"+p+\"unit\");");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"posx\"),0,trQuestVarGet(\"posz\"),0,true);");
code("trArmySelect(\"1,0\");");
code("trDamageUnitPercent(100);");
code("trUnitChangeProtoUnit(\"Implode Sphere Effect\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"unit\");");
code("trUnitDelete(false);");
code("trSoundPlayFN(\"cinematics\32_out\explosion.mp3\",\"1\",-1,\"\",\"\");");
code("trCameraShake(1.0, 0.5);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("case BOUNTY_NPC + 6:");
code("{");
code("switch(1*trQuestVarGet(\"questActive\"))");
code("{");
code("case 1:");
code("{");
code("xsEnableRule(\"yeeb_hit_list\");");
code("trQuestVarSet(\"questActive\", 2);");
code("}");
code("case 2:");
code("{");
code("if (yGetDatabaseCount(\"worthlessJunk\") > 0) {");
code("yDatabaseNext(\"worthlessJunk\");");
code("trVectorSetUnitPos(\"pos\", \"worthlessJunk\");");
code("if (vectorInRectangle(\"pos\", \"yeebRoomBottom\", \"yeebRoomTop\") == false) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"worthlessJunk\", true);");
code("trUnitChangeProtoUnit(\"Dust Large\");");
code("trSoundPlayFN(\"swing2.wav\",\"1\",-1,\"\",\"\");");
code("trChatSend(0, \"<color=1,1,1>Worthless junk removed.\");");
code("yRemoveFromDatabase(\"worthlessJunk\");");
code("}");
code("} else {");
code("questComplete(MANASTONE, -1);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");


code("if ((trTime() > trQuestVarGet(\"townHealNext\")) && (trQuestVarGet(\"boss\") == 0)) {");
code("trQuestVarSet(\"townHealNext\", trTime());");
code("for(p=1; < ENEMY_PLAYER) {");
code("if (zDistanceToVectorSquared(\"p\"+p+\"unit\", \"townCenter\") < 400) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"unit\");");
code("if (trUnitAlive()) {");
code("trDamageUnitPercent(-1);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");

code("rule nottud_always");
code("inactive");
code("highFrequency");
code("{");
code("int relic = 0;");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"nottud\");");
code("if (trQuestVarGet(\"nottudFound\") == 0) {");
code("for(p=1; < ENEMY_PLAYER) {");
code("if (trUnitHasLOS(p)) {");
code("trQuestVarSet(\"nottudFound\", 1);");
code("break;");
code("}");
code("}");
code("if (trQuestVarGet(\"nottudFound\") == 1) {");
code("trVectorSetUnitPos(\"pos\", \"nottud\");");
code("trArmyDispatch(\"1,0\",\"Revealer to Player\",1,trQuestVarGet(\"posx\"),0,trQuestVarGet(\"posz\"),225,true);");
code("trSoundPlayFN(\"oracledone.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("} else {");
code("if (trUnitIsSelected()) {");
code("startNPCDialog(NPC_NOTTUD);");
code("reselectMyself();");
code("}");
code("yDatabaseNext(\"nottudShop\", true);");
code("if (trUnitIsSelected()) {");
code("relic = yGetVar(\"nottudShop\", \"relic\");");
code("trShowImageDialog(relicIcon(relic), relicName(relic));");
code("reselectMyself();");
code("}");
code("}");
code("}");

code("rule zenos_paradox_00");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > trQuestVarGet(\"cinNext\")) {");
code("trQuestVarSet(\"cinStep\", 1 + trQuestVarGet(\"cinStep\"));");
code("switch(1*trQuestVarGet(\"cinStep\"))");
code("{");
code("case 1:");
code("{");
code("trUIFadeToColor(255,255,255,5000,0,true);");
code("trCameraShake(5.0, 0.3);");
code("trQuestVarSet(\"cinNext\", trTime() + 6);");
code("}");
code("case 2:");
code("{");
code("trChatHistoryClear();");
code("trQuestVarSet(\"cinNext\", trTime() + 3);");
code("trQuestVarSet(\"stage\", 11);");
code("xsEnableRule(\"rebuild_map\");");
code("trOverlayText(\"Zeno's Paradox\",3,-1,-1,-1);");
code("}");
code("case 3:");
code("{");
code("xsDisableRule(\"enter_boss_room\");");
code("xsDisableSelf();");
code("}");
code("}");
code("}");
code("}");

code("rule yeeb_hit_list");
code("inactive");
code("highFrequency");
code("{");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"yeebRelic\", true);");
code("if (trUnitIsOwnedBy(0)) {");
code("trQuestVarSet(\"yeebHit\", 0);");
code("trQuestVarSet(\"yeebBossFight\", 0);");
code("} else {");
code("trQuestVarSet(\"yeebBossFight\", 1);");
code("if (trUnitIsOwnedBy(trCurrentPlayer())) {");
code("trQuestVarSet(\"yeebHit\", 1);");
code("}");
code("}");
code("}");

code("rule nick_dialog");
code("inactive");
code("highFrequency");
code("{");
code("int p = trCurrentPlayer();");
code("if (trQuestVarGet(\"nickEquippedLocal\") != trQuestVarGet(\"p\"+p+\"nickEquipped\")) {");
code("trQuestVarSet(\"nickEquippedLocal\", trQuestVarGet(\"p\"+p+\"nickEquipped\"));");
code("if (trQuestVarGet(\"nickEquippedLocal\") == 0) {");
code("if (Multiplayer) {");
code("startNPCDialog(NPC_NICK_DROP);");
code("} else if (trQuestVarGet(\"nickQuestProgressLocal\") == 4) {");
code("if (zDistanceToVectorSquared(\"p\"+p+\"unit\", \"nickPos\") < 4) {");
code("ySetPointer(\"freeRelics\", yGetNewestPointer(\"freeRelics\"));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"freeRelics\", true);");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("trQuestVarSet(\"nickonhawk\", trQuestVarGet(\"freeRelics\"));");
code("yRemoveFromDatabase(\"freeRelics\");");
code("trQuestVarSet(\"cinTime\", trTimeMS() + 5000);");
code("trQuestVarSet(\"cinStep\", 0);");
code("xsEnableRule(\"nick_transform\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"nickSpotlight\", true);");
code("trUnitChangeProtoUnit(\"Osiris Birth\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"nickSpotlight\", true);");
code("trSetSelectedScale(0,0,0);");
code("xsDisableSelf();");
code("trSoundPlayFN(\"cinematics\24_in\magic.mp3\", \"5\", -1, \"\",\"\");");
code("}");
code("}");
code("} else {");
code("startNPCDialog(NPC_NICK_START + trQuestVarGet(\"nickQuestProgressLocal\"));");
code("if (trQuestVarGet(\"nickQuestProgressLocal\") == 0) {");
code("trQuestVarSet(\"nickQuestProgressLocal\", 1);");
code("}");
code("}");
code("}");
code("}");

code("rule nick_next_dialog");
code("inactive");
code("highFrequency");
code("{");
code("int p = trCurrentPlayer();");
code("if (trCountUnitsInArea(\"\"+1*trQuestVarGet(\"p\"+p+\"unit\"),ENEMY_PLAYER,\"Unit\",20) == 0) {");
code("xsDisableSelf();");
code("startNPCDialog(NPC_NICK_NEXT + trQuestVarGet(\"p\"+p+\"nickQuestProgress\") - 2);");
code("trQuestVarSet(\"nickQuestProgressLocal\", trQuestVarGet(\"p\"+p+\"nickQuestProgress\"));");
code("}");
code("}");
code("const int WALL_WAITING = 0;");
code("const int WALL_FALLING = 1;");

code("void processWalls() {");
code("if (yGetDatabaseCount(\"unlockWalls\") > 0) {");
code("yDatabaseNext(\"unlockWalls\");");
code("switch(1*yGetVar(\"unlockWalls\", \"state\"))");
code("{");
code("case WALL_WAITING:");
code("{");
code("trVectorQuestVarSet(\"pos\", kbGetBlockPosition(\"\"+1*yGetVar(\"unlockWalls\", \"relic\")));");
code("if ((yGetVar(\"unlockWalls\", \"posX\") - yGetVar(\"unlockWalls\", \"xMod\") - 7 < trQuestVarGet(\"posX\")) &&");
code("(yGetVar(\"unlockWalls\", \"posX\") + yGetVar(\"unlockWalls\", \"xMod\") + 7 > trQuestVarGet(\"posX\")) &&");
code("(yGetVar(\"unlockWalls\", \"posZ\") - yGetVar(\"unlockWalls\", \"zMod\") - 7 < trQuestVarGet(\"posZ\")) &&");
code("(yGetVar(\"unlockWalls\", \"posZ\") + yGetVar(\"unlockWalls\", \"zMod\") + 7 > trQuestVarGet(\"posZ\"))) {");
code("ySetVar(\"unlockWalls\", \"state\", WALL_FALLING);");
code("ySetVar(\"unlockWalls\", \"timeout\", trTimeMS() + 2500);");
code("for(x=yGetVar(\"unlockWalls\", \"greenCirclesStart\"); < yGetVar(\"unlockWalls\", \"end\")) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+x);");
code("trUnitDestroy();");
code("}");
code("for(x=yGetVar(\"unlockWalls\", \"sfxStart\"); < yGetVar(\"unlockWalls\", \"greenCirclesStart\")) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+x);");
code("trUnitChangeProtoUnit(\"Heka Shockwave SFX\");");
code("}");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"unlockWalls\", \"relic\"));");
code("trUnitChangeProtoUnit(\"Osiris Box Glow\");");
code("trSoundPlayFN(\"xpack\xcinematics\8_in\pyramidscrape.mp3\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("case WALL_FALLING:");
code("{");
code("float progress = (yGetVar(\"unlockWalls\", \"timeout\") - trTimeMS()) / 2500.0;");
code("int x0 = (yGetVar(\"unlockWalls\", \"posX\") - yGetVar(\"unlockWalls\", \"xMod\")) / 2;");
code("int x1 = (yGetVar(\"unlockWalls\", \"posX\") + yGetVar(\"unlockWalls\", \"xMod\")) / 2;");
code("int z0 = (yGetVar(\"unlockWalls\", \"posZ\") - yGetVar(\"unlockWalls\", \"zMod\")) / 2;");
code("int z1 = (yGetVar(\"unlockWalls\", \"posZ\") + yGetVar(\"unlockWalls\", \"zMod\")) / 2;");
code("if (progress > 0) {");
code("progress = progress * (wallHeight - worldHeight) + worldHeight;");
code("trChangeTerrainHeight(x0, z0, x1 + 1, z1 + 1, progress, false);");
code("} else {");
code("trChangeTerrainHeight(x0, z0, x1 + 1, z1 + 1, worldHeight, false);");
code("trPaintTerrain(x0-1,z0-1,x1+1,z1+1,TERRAIN_PRIMARY,TERRAIN_SUB_PRIMARY,false);");
code("trPaintTerrain(0,0,5,5,0,70,true);");
code("trPaintTerrain(0,0,5,5,TERRAIN_WALL,TERRAIN_SUB_WALL,false);");
code("trSoundPlayFN(\"cinematics\12_in\bang1.mp3\",\"1\",-1,\"\",\"\");");
code("for(x=yGetVar(\"unlockWalls\", \"sfxStart\"); < yGetVar(\"unlockWalls\", \"greenCirclesStart\")) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+x);");
code("trUnitDestroy();");
code("}");
code("yRemoveFromDatabase(\"unlockWalls\");");
code("}");
code("}");
code("}");
code("}");
code("}");
code("const int CHEST_STATE_CLOSED = 0;");
code("const int CHEST_STATE_UNLOCKED = 1;");
code("const int CHEST_STATE_REWARDING = 2;");
code("const int CHEST_STATE_COUNTDOWN = 3;");

code("void removeChest() {");
code("yRemoveFromDatabase(\"chests\");");
code("yRemoveUpdateVar(\"chests\", \"count\");");
code("yRemoveUpdateVar(\"chests\", \"next\");");
code("yRemoveUpdateVar(\"chests\", \"state\");");
code("yRemoveUpdateVar(\"chests\", \"type\");");
code("yRemoveUpdateVar(\"chests\", \"key\");");
code("yRemoveUpdateVar(\"chests\", \"enemiesBegin\");");
code("yRemoveUpdateVar(\"chests\", \"enemiesEnd\");");
code("yRemoveUpdateVar(\"chests\", \"indicator\");");
code("}");

code("void turnStatue(int room = 0, int index = 0, bool first = false, bool immediate = false) {");
code("int old = yGetPointer(\"statuesIn\"+room);");
code("if (index > 0) {");
code("ySetPointer(\"statuesIn\"+room, index);");
code("}");
code("ySetVar(\"statuesIn\"+room, \"angle\", fModulo(6.283185, 1.570796 + yGetVar(\"statuesIn\"+room, \"angle\")));");
code("ySetVar(\"statuesIn\"+room, \"position\", 1 + yGetVar(\"statuesIn\"+room, \"position\"));");
code("if (yGetVar(\"statuesIn\"+room, \"position\") >= 4) {");
code("ySetVar(\"statuesIn\"+room, \"position\", 0);");
code("trQuestVarSet(\"correctStatuesIn\"+room, 1 + trQuestVarGet(\"correctStatuesIn\"+room));");
code("} else if (yGetVar(\"statuesIn\"+room, \"position\") == 1) {");
code("trQuestVarSet(\"correctStatuesIn\"+room, trQuestVarGet(\"correctStatuesIn\"+room) - 1);");
code("}");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"statuesIn\"+room);");
code("trDamageUnitPercent(-100);");
code("if (immediate) {");
code("trVectorSetFromAngle(\"dir\", yGetVar(\"statuesIn\"+room, \"angle\"));");
code("trSetUnitOrientation(trVectorQuestVarGet(\"dir\"),vector(0,1,0),true);");
code("} else {");
code("trUnitConvert(0);");
code("if (yGetVar(\"statuesIn\"+room, \"state\") == 1) {");
code("ySetVar(\"statuesIn\"+room, \"timeout\", 1000 + yGetVar(\"statuesIn\"+room, \"timeout\"));");
code("} else {");
code("ySetVar(\"statuesIn\"+room, \"state\", 1);");
code("ySetVar(\"statuesIn\"+room, \"timeout\", trTimeMS() + 1000);");
code("trQuestVarSet(\"movingStatuesIn\"+room, 1 + trQuestVarGet(\"movingStatuesIn\"+room));");
code("}");
code("}");

code("if (first) {");
code("for(x=yGetVar(\"statuesIn\"+room, \"connections\"); >0) {");
code("turnStatue(room, 1*yGetVar(\"statuesIn\"+room, \"connection\"+x), false, immediate);");
code("}");
code("if (immediate == false) {");
code("trSoundPlayFN(\"trojangateopen.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");

code("if (index > 0) {");
code("ySetPointer(\"statuesIn\"+room, old);");
code("}");
code("}");

code("void processChests() {");
code("int id = 0;");
code("int room = 0;");
code("float angle = 0;");
code("for(x=yGetDatabaseCount(\"rainingRelics\"); > 0) {");
code("yDatabaseNext(\"rainingRelics\", true);");
code("if (yGetVar(\"rainingRelics\", \"morphed\") == 0) {");
code("ySetVar(\"rainingRelics\", \"morphed\", 1);");
code("trMutateSelected(kbGetProtoUnitID(\"Curse SFX\"));");
code("trUnitSetAnimationPath(\"0,0,0,0,0,0,0\");");
code("} else {");
code("trVectorSetUnitPos(\"pos\", \"rainingRelics\");");
code("if (trQuestVarGet(\"posY\") <= worldHeight + 0.3) {");
code("trUnitChangeProtoUnit(\"Relic\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"rainingRelics\", true);");
code("trDamageUnitPercent(-100);");
code("yAddToDatabase(\"freeRelics\", \"rainingRelics\");");
code("yAddUpdateVar(\"freeRelics\", \"type\", randomStageClosest(20));");
code("yRemoveFromDatabase(\"rainingRelics\");");
code("yRemoveUpdateVar(\"rainingRelics\", \"morphed\");");
code("}");
code("}");
code("}");
code("for(x=xsMin(8, yGetDatabaseCount(\"rainingFire\")); >0) {");
code("yDatabaseNext(\"rainingFire\", true);");
code("if (yGetVar(\"rainingFire\", \"morphed\") == 0) {");
code("ySetVar(\"rainingFire\", \"morphed\", 1);");
code("trMutateSelected(kbGetProtoUnitID(\"Meteorite death\"));");
code("} else {");
code("trVectorSetUnitPos(\"pos\", \"rainingFire\");");
code("vectorToGrid(\"pos\", \"loc\");");
code("if (trQuestVarGet(\"posY\") <= 0 ||");
code("terrainIsType(\"loc\", TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("trUnitChangeProtoUnit(\"Cinematic Scorch\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"rainingFire\", true);");
code("trDamageUnitPercent(-100);");
code("trUnitSetAnimationPath(\"2,0,0,0,0,0,0\");");
code("yRemoveFromDatabase(\"rainingFire\");");
code("yRemoveUpdateVar(\"rainingFire\", \"morphed\");");
code("} else {");
code("trUnitSelectClear();");
code("for(i=yGetDatabaseCount(\"rainingFireTargets\"); >0) {");
code("yDatabaseNext(\"rainingFireTargets\", true);");
code("if (zDistanceToVectorSquared(\"rainingFireTargets\", \"pos\") < 10) {");
code("if (yGetVar(\"rainingFireTargets\", \"enemy\") == 0) {");
code("damagePlayerUnit(500.0);");
code("} else {");
code("trDamageUnit(500.0);");
code("}");
code("yRemoveFromDatabase(\"rainingFireTargets\");");
code("yRemoveUpdateVar(\"rainingFireTargets\", \"enemy\");");
code("}");
code("}");
code("}");
code("}");
code("}");
code("if (yGetDatabaseCount(\"chests\") > 0) {");
code("id = yDatabaseNext(\"chests\", true);");
code("switch(1*yGetVar(\"chests\", \"state\"))");
code("{");
code("case CHEST_STATE_CLOSED:");
code("{");
code("switch(1*yGetVar(\"chests\", \"type\"))");
code("{");
code("case CHEST_KEY:");
code("{");
code("if (trUnitIsSelected()) {");
code("reselectMyself();");
code("uiMessageBox(\"Find a relic with a matching symbol and bring it here to open this chest.\");");
code("}");
code("trVectorQuestVarSet(\"pos\", kbGetBlockPosition(\"\"+1*yGetVar(\"chests\", \"key\")));");
code("if (zDistanceToVectorSquared(\"chests\", \"pos\") < 16) {");
code("ySetVar(\"chests\", \"state\", CHEST_STATE_UNLOCKED);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"chests\", \"key\"));");
code("trUnitChangeProtoUnit(\"Osiris Box Glow\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"chests\", \"indicator\"));");
code("trUnitChangeProtoUnit(\"Rocket\");");
code("}");
code("}");
code("case CHEST_STATUES:");
code("{");
code("if (trUnitIsSelected()) {");
code("reselectMyself();");
code("uiMessageBox(\"Make all the statues face the chest to open it.\");");
code("}");
code("room = yGetVar(\"chests\", \"room\");");
code("for(x=yGetDatabaseCount(\"statuesIn\"+room); >0) {");
code("yDatabaseNext(\"statuesIn\"+room, true);");
code("switch(1*yGetVar(\"statuesIn\"+room, \"state\"))");
code("{");
code("case 0:");
code("{");
code("if (trUnitPercentDamaged() > 0) {");
code("turnStatue(room,0,true,false);");
code("}");
code("}");
code("case 1:");
code("{");
code("angle = 0.001 * (yGetVar(\"statuesIn\"+room, \"timeout\") - trTimeMS());");
code("if (angle < 0) {");
code("angle = yGetVar(\"statuesIn\"+room, \"angle\");");
code("ySetVar(\"statuesIn\"+room, \"state\", 0);");
code("trUnitConvert(ENEMY_PLAYER);");
code("trDamageUnitPercent(-100);");
code("trQuestVarSet(\"movingStatuesIn\"+room, trQuestVarGet(\"movingStatuesIn\"+room) - 1);");
code("} else {");
code("angle = fModulo(6.283185, yGetVar(\"statuesIn\"+room, \"angle\") - angle * 1.570796);");
code("}");
code("trVectorSetFromAngle(\"dir\", angle);");
code("trSetUnitOrientation(trVectorQuestVarGet(\"dir\"),vector(0,1,0),true);");
code("}");
code("}");
code("}");
code("if ((trQuestVarGet(\"correctStatuesIn\"+room) == yGetDatabaseCount(\"statuesIn\"+room)) &&");
code("trQuestVarGet(\"movingStatuesIn\"+room) == 0) {");
code("ySetVar(\"chests\", \"state\", CHEST_STATE_UNLOCKED);");
code("trSoundPlayFN(\"sentinelbirth.wav\",\"1\",-1,\"\",\"\");");
code("for(x=yGetDatabaseCount(\"statuesIn\"+room); >0) {");
code("yDatabaseNext(\"statuesIn\"+room, true);");
code("trDamageUnitPercent(-100);");
code("trUnitConvert(0);");
code("}");
code("}");
code("}");
code("case CHEST_ENCOUNTER:");
code("{");
code("if (trUnitIsSelected()) {");
code("reselectMyself();");
code("uiMessageBox(\"You must defeat all the enemies in this room to open this chest.\");");
code("}");
code("trQuestVarSet(\"allDead\", 1);");
code("for(x=yGetVar(\"chests\", \"enemiesBegin\"); < yGetVar(\"chests\", \"enemiesEnd\")) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+x);");
code("if (trUnitAlive()) {");
code("trQuestVarSet(\"allDead\", 0);");
code("break;");
code("}");
code("}");
code("if (trQuestVarGet(\"allDead\") == 1) {");
code("ySetVar(\"chests\", \"state\", CHEST_STATE_UNLOCKED);");
code("}");
code("}");
code("}");
code("}");
code("case CHEST_STATE_UNLOCKED:");
code("{");
code("trQuestVarSet(\"chestCount\", 1 + trQuestVarGet(\"chestCount\"));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"chests\");");
code("trUnitSetAnimation(\"SE_Great_Box_Opening\",false,-1);");
code("trSoundPlayFN(\"siegetowerdeath.wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSetFromRand(\"rand\", 1, 10, true);");
code("if (trQuestVarGet(\"rand\") == 1) {");
code("ySetVar(\"chests\", \"state\", CHEST_STATE_COUNTDOWN);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"chests\");");
code("trUnitHighlight(4.0, true);");
code("trUnitChangeProtoUnit(\"Phoenix Egg\");");
code("ySetVar(\"chests\", \"next\", trTimeMS() + 1000);");
code("ySetVar(\"chests\", \"count\", 3);");
code("trSoundPlayFN(\"attackwarning.wav\",\"1\",-1,\"\",\"\");");
code("trMessageSetText(\"The chest was a bomb! Run!\",-1);");
code("} else {");
code("room = yGetVar(\"chests\", \"room\");");
code("trQuestVarSetFromRand(\"rand\", 1, 1*trQuestVarGet(\"rand\"), true);");
code("trQuestVarSet(\"rand\", trQuestVarGet(\"rand\") + trQuestVarGet(\"correctStatuesIn\"+room));");
code("if (trQuestVarGet(\"rand\") < ENEMY_PLAYER) {");
code("trQuestVarSet(\"rand\", ENEMY_PLAYER);");
code("}");
code("debugLog(\"Relic reward count is \" + 1*trQuestVarGet(\"rand\"));");
code("ySetVar(\"chests\", \"state\", CHEST_STATE_REWARDING);");
code("ySetVar(\"chests\", \"next\", trTimeMS());");
code("ySetVar(\"chests\", \"count\", trQuestVarGet(\"rand\"));");
code("trSoundPlayFN(\"plentybirth.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("case CHEST_STATE_REWARDING:");
code("{");
code("if (trTimeMS() > yGetVar(\"chests\", \"next\")) {");
code("if (yGetVar(\"chests\", \"count\") == 0) {");
code("removeChest();");
code("} else {");
code("trSoundPlayFN(\"tributereceived.wav\",\"1\",-1,\"\",\"\");");
code("ySetVar(\"chests\", \"next\", trTimeMS() + 500);");
code("trVectorSetUnitPos(\"pos\", \"chests\");");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trQuestVarSetFromRand(\"heading\",1,360,true);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"posX\"),0,trQuestVarGet(\"posZ\"),trQuestVarGet(\"heading\"),true);");
code("trQuestVarSetFromRand(\"speed\", 2, 10);");
code("zSetProtoUnitStat(\"Kronny Flying\", 0, 1, trQuestVarGet(\"speed\"));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitConvert(0);");
code("trMutateSelected(kbGetProtoUnitID(\"Kronny Flying\"));");
code("trDamageUnitPercent(100);");
code("trSetSelectedScale(0,-3,0);");
code("yAddToDatabase(\"rainingRelics\", \"next\");");
code("ySetVar(\"chests\", \"count\", yGetVar(\"chests\", \"count\") - 1);");
code("}");
code("}");
code("}");
code("case CHEST_STATE_COUNTDOWN:");
code("{");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"chests\");");
code("trQuestVarSet(\"scale\", 4.0 - yGetVar(\"chests\", \"count\") + 0.001 * (trTimeMS() - yGetVar(\"chests\", \"next\") + 1000));");
code("trSetSelectedScale(trQuestVarGet(\"scale\"), trQuestVarGet(\"scale\"), trQuestVarGet(\"scale\"));");
code("if (trTimeMS() > yGetVar(\"chests\", \"next\")) {");
code("ySetVar(\"chests\", \"next\", trTimeMS() + 1000);");
code("ySetVar(\"chests\", \"count\", yGetVar(\"chests\", \"count\") - 1);");
code("if (yGetVar(\"chests\", \"count\") == 0) {");
code("trVectorSetUnitPos(\"pos\", \"chests\");");
code("trQuestVarSet(\"heading\", 0);");
code("zSetProtoUnitStat(\"Kronny Flying\", 0, 1, 15);");
code("for(x=12; >0) {");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"posX\"),0,trQuestVarGet(\"posZ\"),trQuestVarGet(\"heading\"),true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitConvert(0);");
code("trDamageUnitPercent(100);");
code("trMutateSelected(kbGetProtoUnitID(\"Kronny Flying\"));");
code("trSetSelectedScale(0,-2.0,0);");
code("yAddToDatabase(\"rainingFire\", \"next\");");
code("trQuestVarSet(\"heading\", trQuestVarGet(\"heading\") + 30);");
code("}");
code("yClearDatabase(\"rainingFireTargets\");");
code("for(x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("yDatabaseNext(\"playerUnits\");");
code("if (zDistanceToVectorSquared(\"playerUnits\", \"pos\") < 720) {");
code("yAddToDatabase(\"rainingFireTargets\", \"playerUnits\");");
code("}");
code("}");
code("for(x=yGetDatabaseCount(\"enemies\"); >0) {");
code("yDatabaseNext(\"enemies\");");
code("if (zDistanceToVectorSquared(\"enemies\", \"pos\") < 720) {");
code("yAddToDatabase(\"rainingFireTargets\", \"enemies\");");
code("yAddUpdateVar(\"rainingFireTargets\", \"enemy\", 1);");
code("}");
code("}");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"chests\");");
code("trSoundPlayFN(\"cinematics\35_out\strike.mp3\",\"1\",-1,\"\",\"\");");
code("if (trUnitVisToPlayer()) {");
code("trUIFadeToColor(255,255,255,1000,0,false);");
code("trCameraShake(3.0, 0.25);");
code("}");
code("trDamageUnitPercent(100);");
code("removeChest();");
code("} else {");
code("trSoundPlayFN(\"attackwarning.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");



code("rule laser_rooms_always");
code("inactive");
code("highFrequency");
code("{");
code("int laser = 0;");
code("float scale = 0;");
code("if (yGetDatabaseCount(\"laserRooms\") > 0) {");
code("yDatabaseNext(\"laserRooms\");");
code("if (trTimeMS() > yGetVar(\"laserRooms\", \"next\")) {");
code("if (yGetVar(\"laserRooms\", \"active\") == 0) {");
code("ySetVar(\"laserRooms\", \"next\", trTimeMS() + 3000);");
code("yVarToVector(\"laserRooms\", \"pos\");");
code("for(x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("if (yDatabaseNext(\"playerUnits\", true) == -1 || trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (zDistanceToVectorSquared(\"playerUnits\", \"pos\") < 400) {");
code("ySetVar(\"laserRooms\", \"active\", 1);");
code("ySetVar(\"laserRooms\", \"next\", trTimeMS());");
code("trSoundPlayFN(\"attackwarning.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"automatonspcbirth.wav\",\"1\",-1,\"\",\"\");");
code("break;");
code("}");
code("}");
code("} else {");
code("ySetVar(\"laserRooms\", \"next\", yGetVar(\"laserRooms\", \"next\") + 200);");
code("laser = yGetVar(\"laserRooms\", \"active\");");
code("if (laser < 9) {");
code("laser = laser - 1;");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"laserRooms\");");
code("if (trUnitVisToPlayer()) {");
code("trSoundPlayFN(\"skypassagein.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("for(x=1;<=4) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+(x+trQuestVarGet(\"laserRooms\")+4*laser));");
code("trSetSelectedScale(3,0,21);");
code("}");
code("} else {");
code("laser = laser - 9;");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"laserRooms\");");
code("if (trUnitVisToPlayer()) {");
code("trSoundPlayFN(\"sky passage.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"phoenixattack.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("trQuestVarSet(\"next\", trQuestVarGet(\"laserRooms\") + 4*laser + 1);");

code("yAddToDatabase(\"shrinkingLasers\", \"next\");");
code("yAddUpdateVar(\"shrinkingLasers\", \"timeout\", trTimeMS() + 500);");

code("for(x=1;<=4) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+(x+trQuestVarGet(\"laserRooms\") + 4*laser));");
code("trUnitHighlight(3.0, false);");
code("trSetSelectedScale(6,0,21);");
code("}");
code("yVarToVector(\"laserRooms\", \"xLaser\"+laser+\"0\");");
code("yVarToVector(\"laserRooms\", \"xLaser\"+laser+\"1\");");
code("yVarToVector(\"laserRooms\", \"zLaser\"+laser+\"0\");");
code("yVarToVector(\"laserRooms\", \"zLaser\"+laser+\"1\");");
code("for(x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("if (yDatabaseNext(\"playerUnits\", true) == -1 || trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else {");
code("trVectorSetUnitPos(\"pos\", \"playerUnits\");");
code("if (vectorInRectangle(\"pos\", \"xLaser\"+laser+\"0\", \"xLaser\"+laser+\"1\")) {");
code("damagePlayerUnit(300);");
code("} else if (vectorInRectangle(\"pos\", \"zLaser\"+laser+\"0\", \"zLaser\"+laser+\"1\")) {");
code("damagePlayerUnit(300);");
code("}");
code("}");
code("}");
code("}");


code("ySetVar(\"laserRooms\", \"active\", yGetVar(\"laserRooms\", \"active\") + 1);");
code("if (yGetVar(\"laserRooms\", \"active\") == 9) {");
code("ySetVar(\"laserRooms\", \"next\", yGetVar(\"laserRooms\", \"next\") + 400);");
code("} else if (yGetVar(\"laserRooms\", \"active\") == 17) {");
code("ySetVar(\"laserRooms\", \"active\", 0);");
code("ySetVar(\"laserRooms\", \"next\", yGetVar(\"laserRooms\", \"next\") + 2000);");
code("yVarToVector(\"laserRooms\", \"pos\");");
code("for(x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("if (yDatabaseNext(\"playerUnits\", true) == -1 || trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (zDistanceToVectorSquared(\"playerUnits\", \"pos\") < 400) {");
code("ySetVar(\"laserRooms\", \"active\", 1);");
code("break;");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");
code("if (yGetDatabaseCount(\"shrinkingLasers\") > 0) {");
code("yDatabaseNext(\"shrinkingLasers\");");
code("scale = yGetVar(\"shrinkingLasers\", \"timeout\") - trTimeMS();");
code("if (scale > 0) {");
code("scale = 0.012 * scale;");
code("} else {");
code("scale = 0;");
code("yRemoveFromDatabase(\"shrinkingLasers\");");
code("}");
code("for(x=0; <4) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+(x+trQuestVarGet(\"shrinkingLasers\")), true);");
code("trSetSelectedScale(scale, scale, 21);");
code("}");
code("}");
code("}");


code("rule choose_stage_00");
code("inactive");
code("highFrequency");
code("{");
code("int n = yDatabaseNext(\"stageChoices\");");
code("if (trCountUnitsInArea(\"\"+n, 1, \"Athena\",3) == 1) {");
code("trQuestVarSet(\"stage\", yGetVar(\"stageChoices\", \"stage\"));");
code("if (trQuestVarGet(\"stage\") == 0) {");
code("xsDisableRule(\"choose_stage_01\");");
code("xsEnableRule(\"pvp_build_map\");");
code("}");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"chooser\", true);");
code("trUnitChangeProtoUnit(\"Rocket\");");
code("for(x=yGetDatabaseCount(\"stageChoices\"); >0) {");
code("yDatabaseNext(\"stageChoices\", true);");
code("trUnitDestroy();");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"stageChoices\", \"obelisk\"), true);");
code("trUnitDestroy();");
code("}");
code("yClearDatabase(\"stageChoices\");");
code("xsDisableSelf();");
code("trForceNonCinematicModels(true);");
code("trLetterBox(true);");
code("trUIFadeToColor(0,0,0,1000,0,true);");
code("trSoundPlayFN(\"ui\thunder2.wav\",\"1\",-1,\"\",\"\");");
code("trOverlayText(stageName(1*trQuestVarGet(\"stage\")), 3.0, -1, -1, -1);");
code("} else {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"stageChoices\", \"obelisk\"), true);");
code("if (trUnitIsSelected()) {");
code("uiClearSelection();");
code("trShowImageDialog(stageIcon(1*yGetVar(\"stageChoices\", \"stage\")),");
code("\"Stage \" + 1*yGetVar(\"stageChoices\", \"stage\") + \": \" + stageName(1*yGetVar(\"stageChoices\", \"stage\")));");
code("}");
code("}");
code("}");


code("void buildRoom(int x = 0, int z = 0, int type = 0) {");
code("int room = x + 4 * z;");
code("int size = 0;");
code("int x0 = 0;");
code("int z0 = 0;");
code("int x1 = 0;");
code("int z1 = 0;");
code("bool trapped = false;");
code("trQuestVarSet(\"room\"+room, type);");
code("if (type < ROOM_CHEST) {");
code("if ((trQuestVarGet(\"trapRooms\") > 0) &&");
code("(countRoomEntrances(x, z) > 1) &&");
code("(trQuestVarGet(\"relictransporterguy\") != room)) {");
code("trQuestVarSetFromRand(\"rand\", 1, 3, true);");
code("if (trQuestVarGet(\"rand\") == 1) {");
code("trQuestVarSet(\"trapRooms\", trQuestVarGet(\"trapRooms\") - 1);");
code("trapped = true;");
code("switch(1*trQuestVarGet(\"trapType\"))");
code("{");
code("case TRAP_LASERS:");
code("{");
code("x0 = x * 35 + 12;");
code("x1 = x * 35 + 28;");
code("z0 = z * 35 + 12;");
code("z1 = z * 35 + 28;");
code("trPaintTerrain(x0, z0, x1, z1, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x0, z0, x1 + 1, z1 + 1, worldHeight, false);");
code("trVectorQuestVarSet(\"room\"+room+\"top1\", xsVectorSet(x1,0,z1));");
code("trVectorQuestVarSet(\"room\"+room+\"bottom1\", xsVectorSet(x0,0,z0));");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,x*70+41,0,z*70+41,0,true);");
code("yAddToDatabase(\"laserRooms\",\"next\");");
code("yAddUpdateVar(\"laserRooms\", \"posX\", x * 70 + 40);");
code("yAddUpdateVar(\"laserRooms\", \"posZ\", z * 70 + 40);");
code("yAddUpdateVar(\"laserRooms\", \"room\", room);");
code("yAddUpdateVar(\"laserRooms\", \"active\", 0);");
code("for(a=0; <8) {");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,2*x0+4*a+3,0,2*z0+1,180,false);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,2*x0+4*a+3,0,2*z1-1,0,false);");
code("yAddUpdateVar(\"laserRooms\", \"xLaser\"+a+\"0x\", 2*x0+4*a + 2);");
code("yAddUpdateVar(\"laserRooms\", \"xLaser\"+a+\"1x\", 2*x0+4*a + 4);");
code("yAddUpdateVar(\"laserRooms\", \"xLaser\"+a+\"0z\", 2*z0);");
code("yAddUpdateVar(\"laserRooms\", \"xLaser\"+a+\"1z\", 2*z1);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,2*x0+1,0,2*z0+4*a+3,270,false);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,2*x1-1,0,2*z0+4*a+3,90,false);");
code("yAddUpdateVar(\"laserRooms\", \"zLaser\"+a+\"0x\", 2*x0);");
code("yAddUpdateVar(\"laserRooms\", \"zLaser\"+a+\"1x\", 2*x1);");
code("yAddUpdateVar(\"laserRooms\", \"zLaser\"+a+\"0z\", 2*z0+4*a + 2);");
code("yAddUpdateVar(\"laserRooms\", \"zLaser\"+a+\"1z\", 2*z0+4*a + 4);");
code("}");
code("trArmySelect(\"1,0\");");
code("trUnitSetStance(\"Passive\");");
code("trSetSelectedScale(0,0,0);");
code("trMutateSelected(kbGetProtoUnitID(\"Petosuchus Projectile\"));");

code("paintSecondary(x0, z0, x1, z1);");
code("paintEyecandy(x0, z0, x1, z1, \"tree\");");
code("paintEyecandy(x0, z0, x1, z1, \"rock\");");
code("paintEyecandy(x0, z0, x1, z1, \"sprite\");");
code("for(j=randomLow(11) - 8; >0) {");
code("paintRelicEdge(x0, z0, x1, z1);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("if (trapped == false) {");
code("if (trQuestVarGet(\"mapType\") < MAP_OPEN) {");
code("for (i=2; >0) {");
code("trQuestVarSetFromRand(\"x0\", x * 35 + 5, x * 35 + 18, true);");
code("trQuestVarSetFromRand(\"z0\", z * 35 + 5, z * 35 + 18, true);");
code("trQuestVarSetFromRand(\"x1\", x * 35 + 22, x * 35 + 35, true);");
code("trQuestVarSetFromRand(\"z1\", z * 35 + 22, z * 35 + 35, true);");
code("x0 = trQuestVarGet(\"x0\");");
code("x1 = trQuestVarGet(\"x1\");");
code("z0 = trQuestVarGet(\"z0\");");
code("z1 = trQuestVarGet(\"z1\");");
code("trPaintTerrain(x0, z0, x1, z1, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x0, z0, x1 + 1, z1 + 1, worldHeight, false);");
code("trVectorQuestVarSet(\"room\"+room+\"top\"+i, xsVectorSet(x1,0,z1));");
code("trVectorQuestVarSet(\"room\"+room+\"bottom\"+i, xsVectorSet(x0,0,z0));");
code("paintSecondary(x0, z0, x1, z1);");
code("paintEyecandy(x0, z0, x1, z1, \"tree\");");
code("paintEyecandy(x0, z0, x1, z1, \"rock\");");
code("paintEyecandy(x0, z0, x1, z1, \"sprite\");");

code("for(j=randomLow(11) - 8; >0) {");
code("paintRelicEdge(x0, z0, x1, z1);");
code("}");
code("}");
code("paintColumns(x * 35 + 5, z * 35 + 5, x * 35 + 35, z * 35 + 35);");
code("} else if (trQuestVarGet(\"mapType\") == MAP_OPEN) {");
code("paintColumns(x * 35 + 5, z * 35 + 5, x * 35 + 35, z * 35 + 35);");
code("trQuestVarSetFromRand(\"x0\", x * 35 + 5, x * 35 + 15, true);");
code("trQuestVarSetFromRand(\"z0\", z * 35 + 5, z * 35 + 15, true);");
code("trQuestVarSetFromRand(\"x1\", x * 35 + 25, x * 35 + 35, true);");
code("trQuestVarSetFromRand(\"z1\", z * 35 + 25, z * 35 + 35, true);");
code("x0 = trQuestVarGet(\"x0\");");
code("x1 = trQuestVarGet(\"x1\");");
code("z0 = trQuestVarGet(\"z0\");");
code("z1 = trQuestVarGet(\"z1\");");
code("trVectorQuestVarSet(\"room\"+room+\"top1\", xsVectorSet(x1,0,z1));");
code("trVectorQuestVarSet(\"room\"+room+\"bottom1\", xsVectorSet(x0,0,z0));");
code("paintSecondary(x0, z0, x1, z1);");
code("paintEyecandy(x0, z0, x1, z1, \"tree\");");
code("paintEyecandy(x0, z0, x1, z1, \"rock\");");
code("paintEyecandy(x0, z0, x1, z1, \"sprite\");");

code("for(j=randomLow(11) - 8; >0) {");
code("paintRelicEdge(x0, z0, x1, z1);");
code("}");
code("}");
code("}");
code("if (trQuestVarGet(\"room\"+room+\"key\") > 0) {");
code("vector v0 = randomNearEdge(x0, z0, x1, z1);");
code("ySetVarAtIndex(\"unlockWalls\", \"relic\", trGetNextUnitScenarioNameNumber(), 1*trQuestVarGet(\"room\"+room+\"index\"));");
code("spawnRelicSpecific(xsVectorGetX(v0),xsVectorGetZ(v0),1*trQuestVarGet(\"room\"+room+\"key\"));");
code("trQuestVarSet(\"room\"+room+\"key\", 0);");
code("}");
code("} else if (trQuestVarGet(\"room\"+room+\"key\") > 0) {");
code("debugLog(\"room was a special room.\");");
code("ySetVarAtIndex(\"unlockWalls\", \"relic\", trGetNextUnitScenarioNameNumber(), 1*trQuestVarGet(\"room\"+room+\"index\"));");
code("spawnRelicSpecific(70 * x + 36,70 * z + 36,1*trQuestVarGet(\"room\"+room+\"key\"));");
code("trQuestVarSet(\"room\"+room+\"key\", 0);");
code("}");
code("switch(type)");
code("{");
code("case ROOM_BASIC:");
code("{");
code("for(i = 2; >0) {");
code("x0 = trQuestVarGet(\"room\"+room+\"bottom\"+i+\"x\");");
code("z0 = trQuestVarGet(\"room\"+room+\"bottom\"+i+\"z\");");
code("x1 = trQuestVarGet(\"room\"+room+\"top\"+i+\"x\");");
code("z1 = trQuestVarGet(\"room\"+room+\"top\"+i+\"z\");");
code("paintEnemies(x0, z0, x1, z1);");
code("}");
code("trQuestVarSet(\"room\", room);");
code("yAddToDatabase(\"basicRooms\", \"room\");");
code("}");
code("case ROOM_AMBUSH:");
code("{");
code("trQuestVarSet(\"room\", room);");
code("yAddToDatabase(\"ambushRooms\", \"room\");");
code("yAddUpdateVar(\"ambushRooms\", \"posX\", x * 70 + 40);");
code("yAddUpdateVar(\"ambushRooms\", \"posZ\", z * 70 + 40);");
code("trQuestVarSetFromRand(\"type\", 1, trQuestVarGet(\"enemyProtoCount\"), true);");
code("yAddUpdateVar(\"ambushRooms\", \"type\", trQuestVarGet(\"type\"));");
code("trQuestVarSetFromRand(\"spawnRelic\", 0, 1, false);");
code("if (trQuestVarGet(\"spawnRelic\") < 0.5) {");
code("spawnRelic(x * 70 + 40, z * 70 + 40);");
code("}");
code("x0 = trQuestVarGet(\"room\"+room+\"bottom1x\");");
code("z0 = trQuestVarGet(\"room\"+room+\"bottom1z\");");
code("x1 = trQuestVarGet(\"room\"+room+\"top1x\");");
code("z1 = trQuestVarGet(\"room\"+room+\"top1z\");");
code("paintEnemies(x0, z0, x1, z1);");
code("yAddToDatabase(\"basicRooms\", \"room\");");
code("}");
code("case ROOM_BOSS_ENTRANCE:");
code("{");
code("trPaintTerrain(x * 35 + 10, z * 35 + 10, x * 35 + 25, z * 35 + 25, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x * 35 + 10, z * 35 + 10, x * 35 + 25, z * 35 + 25, worldHeight, false);");
code("paintSecondary(x * 35 + 10, z * 35 + 10, x * 35 + 25, z * 35 + 25);");
code("trQuestVarSet(\"bossEntranceStatue\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,x*70+40,0,z*70+40,225,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossEntranceStatue\", true);");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Monument 5\");");
code("trQuestVarSet(\"bossEntranceSymbol\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,x*70+36,0,z*70+36,225,true);");
code("trQuestVarSet(\"keyType\", trQuestVarGet(\"keyType\") - 1);");
code("xsEnableRule(\"boss_entrance_found\");");
code("}");
code("case ROOM_CHEST:");
code("{");
code("trQuestVarSetFromRand(\"chestType\", CHEST_KEY, CHEST_STATUES, true);");
code("if (trQuestVarGet(\"chestType\") < CHEST_STATUES) {");
code("buildRoom(x, z, ROOM_BASIC);");
code("trQuestVarSet(\"room\"+room, ROOM_CHEST);");
code("trPaintTerrain(x*35+15, z*35+15, x*35+25, z*35+25, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x*35+15, z*35+15, x*35+25, z*35+25, worldHeight, false);");
code("} else {");
code("size = 12;");
code("z0 = size;");
code("for(a=0; < size) {");
code("for(b=size; >0) {");
code("if (a*a + z0 * z0 <= size * size) {");
code("trPaintTerrain(x*35+20-a, z*35+20-z0, x*35+20+a, z*35+20+z0, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x*35+20-a, z*35+20-z0, x*35+20+a, z*35+20+z0, worldHeight, false);");
code("break;");
code("} else {");
code("z0 = z0 - 1;");
code("}");
code("}");
code("}");
code("}");

code("if (trQuestVarGet(\"chestType\") == CHEST_KEY) {");
code("if (trQuestVarGet(\"keyType\") < RELIC_KEY_GREEK) {");
code("trQuestVarSet(\"chestType\", CHEST_ENCOUNTER);");
code("} else {");
code("trQuestVarSet(\"keyType\", trQuestVarGet(\"keyType\") - 1);");
code("}");
code("}");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("yAddToDatabase(\"chests\", \"next\");");
code("yAddUpdateVar(\"chests\", \"type\", trQuestVarGet(\"chestType\"));");
code("yAddUpdateVar(\"chests\", \"room\", room);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,x * 70 + 40,0, z * 70 + 40, 135, true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Great Box\");");
code("}");
code("case ROOM_TRANSPORTER_GUY:");
code("{");
code("x0 = trQuestVarGet(\"room\"+room+\"bottom1x\");");
code("z0 = trQuestVarGet(\"room\"+room+\"bottom1z\");");
code("x1 = trQuestVarGet(\"room\"+room+\"top1x\");");
code("z1 = trQuestVarGet(\"room\"+room+\"top1z\");");
code("trPaintTerrain(x0,z0,x1,z1,TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x0,z0,x1,z1,worldHeight, false);");
code("trVectorQuestVarSet(\"center\", xsVectorSet(x0 + x1, 0, z0 + z1));");
code("trVectorQuestVarSet(\"relictransporterguypos\", randomNearEdge(x0, z0, x1, z1));");
code("trQuestVarSet(\"heading\", 180.0 / 3.141592 * angleBetweenVectors(\"relictransporterguypos\", \"center\"));");
code("trQuestVarSet(\"relicTransporterGuyName\", trGetNextUnitScenarioNameNumber());");
code("x0 = trQuestVarGet(\"relicTransporterGuyPosx\");");
code("z0 = trQuestVarGet(\"relicTransporterGuyPosz\");");
code("trArmyDispatch(\"1,0\",\"Villager Atlantean Hero\",1,x0,0,z0,trQuestVarGet(\"heading\"), true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"relicTransporterGuyName\", true);");
code("trUnitConvert(0);");
code("trArmyDispatch(\"1,0\", \"Dwarf\",1,x0,0,z0,0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Gaia Forest effect\");");
code("xsEnableRule(\"relic_transporter_guy_found\");");
code("}");
code("case ROOM_VILLAGE + 1:");
code("{");
code("trPaintTerrain(x * 35 + 10, z * 35 + 10, x * 35 + 30, z * 35 + 30, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x * 35 + 10, z * 35 + 10, x * 35 + 30, z * 35 + 30, worldHeight, false);");
code("paintSecondary(x * 35 + 10, z * 35 + 10, x * 35 + 30, z * 35 + 30);");
code("paintEyecandy(x * 35 + 10, z * 35 + 10, x * 35 + 30, z * 35 + 30, \"sprite\");");

code("trQuestVarSet(\"villageX\", 70 * x + 20);");
code("trQuestVarSet(\"villageZ\", 70 * z + 20);");

code("deployTownEyecandy(\"Savannah Tree\",15,37,0);");
code("deployTownEyecandy(\"Savannah Tree\",11,33,50);");
code("deployTownEyecandy(\"Savannah Tree\",5,21,90);");
code("deployTownEyecandy(\"Savannah Tree\",29,31,47);");
code("deployTownEyecandy(\"Savannah Tree\",33,29,127);");

code("deployTownEyecandy(\"House\",7,29,180);");
code("deployTownEyecandy(\"House\",9,15,0);");

code("deployTownEyecandy(\"Granary\",7,33,0);");
code("deployTownEyecandy(\"Dock\",9,13,0);");
code("deployTownEyecandy(\"Tower\",33,15,270);");
code("deployTownEyecandy(\"Counter Building\",23,29,180);");

code("deployTownEyecandy(\"Fence Wood\",19,15,180);");
code("deployTownEyecandy(\"Fence Wood\",19,11,180);");
code("deployTownEyecandy(\"Fence Wood\",21,9,270);");
code("deployTownEyecandy(\"Fence Wood\",25,17,270);");
code("deployTownEyecandy(\"Fence Wood\",27,15,180);");
code("deployTownEyecandy(\"Fence Wood\",27,11,180);");
code("trQuestVarSet(\"pigpenLowerX\", 19 + trQuestVarGet(\"villageX\"));");
code("trQuestVarSet(\"pigpenLowerZ\", 9 + trQuestVarGet(\"villageZ\"));");
code("trQuestVarSet(\"pigpenUpperX\", 27 + trQuestVarGet(\"villageX\"));");
code("trQuestVarSet(\"pigpenUpperZ\", 17 + trQuestVarGet(\"villageZ\"));");

code("trQuestVarSetFromRand(\"localQuest\", 1, 3, true);");

code("trQuestVarSet(\"guy\"+FETCH_GUY, trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Villager Chinese\",23,19,315);");
code("trQuestVarSet(\"guy\"+BOUNTY_GUY, trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Maceman\",19,25,225);");
code("yAddToDatabase(\"stunnedUnits\", \"guy\"+BOUNTY_GUY);");
code("yAddUpdateVar(\"stunnedUnits\", \"proto\", kbGetProtoUnitID(\"Maceman\"));");
code("trQuestVarSet(\"guy\"+SHOP_GUY, trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Villager Egyptian\",11,27,180);");

code("if (trQuestVarGet(\"localQuest\") > 1) {");
code("trQuestVarSet(\"pigStart\", trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Pig\",21,15,120);");
code("deployTownEyecandy(\"Pig\",25,13,56);");
code("deployTownEyecandy(\"Pig\",21,11,222);");
code("trQuestVarSet(\"pigEnd\", trGetNextUnitScenarioNameNumber());");
code("for(x=trQuestVarGet(\"pigStart\"); < trQuestVarGet(\"pigEnd\")) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+x, true);");
code("trUnitConvert(ENEMY_PLAYER);");
code("}");
code("}");
code("}");
code("case ROOM_VILLAGE + 2:");
code("{");
code("size = 12;");
code("z0 = size;");
code("for(a=0; < size) {");
code("for(b=size; >0) {");
code("if (a*a + z0 * z0 <= size * size) {");
code("trPaintTerrain(x*35+20-a, z*35+20-z0, x*35+20+a, z*35+20+z0, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x*35+20-a, z*35+20-z0, x*35+20+a, z*35+20+z0, worldHeight, false);");
code("break;");
code("} else {");
code("z0 = z0 - 1;");
code("}");
code("}");
code("}");
code("trQuestVarSet(\"villageX\", 70 * x + 16);");
code("trQuestVarSet(\"villageZ\", 70 * z + 16);");

code("trQuestVarSet(\"start\", trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Marsh Tree\",25,41,250);");
code("deployTownEyecandy(\"Marsh Tree\",23,41,75);");
code("deployTownEyecandy(\"Marsh Tree\",17,39,321);");
code("deployTownEyecandy(\"Marsh Tree\",13,37,266);");
code("deployTownEyecandy(\"Marsh Tree\",5,29,240);");
code("deployTownEyecandy(\"Marsh Tree\",5,21,80);");
code("deployTownEyecandy(\"Marsh Tree\",9,15,44);");
code("deployTownEyecandy(\"Marsh Tree\",9,11,280);");
code("deployTownEyecandy(\"Marsh Tree\",13,5,140);");
code("deployTownEyecandy(\"Marsh Tree\",19,7,275);");
code("deployTownEyecandy(\"Marsh Tree\",25,7,121);");
code("deployTownEyecandy(\"Marsh Tree\",29,7,100);");
code("deployTownEyecandy(\"Marsh Tree\",37,11,155);");
code("deployTownEyecandy(\"Marsh Tree\",37,17,44);");
code("deployTownEyecandy(\"Marsh Tree\",39,17,145);");
code("deployTownEyecandy(\"Marsh Tree\",39,25,131);");
code("deployTownEyecandy(\"Marsh Tree\",39,31,178);");
code("deployTownEyecandy(\"Marsh Tree\",29,37,33);");
code("for(a=trQuestVarGet(\"start\"); < trGetNextUnitScenarioNameNumber()) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+a, true);");
code("trSetSelectedScale(2,2,2);");
code("}");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Runestone\", 35,35,225);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trSetSelectedScale(2.5,2.5,2.5);");
code("deployTownEyecandy(\"Shrine\",15,31,90);");
code("deployTownEyecandy(\"Shrine\",17,11,0);");
code("deployTownEyecandy(\"Shrine\",35,15,270);");

code("trQuestVarSetFromRand(\"localQuest\", 1, 3, true);");


code("trQuestVarSet(\"guy\"+FETCH_GUY, trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Shade\",25,35,180);");
code("trQuestVarSet(\"guy\"+BOUNTY_GUY, trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Shade\",37,27,270);");
code("trQuestVarSet(\"guy\"+SHOP_GUY, trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Shade\",21,19,30);");
code("}");
code("case ROOM_VILLAGE + 3:");
code("{");
code("trPaintTerrain(x * 35 + 10, z * 35 + 10, x * 35 + 30, z * 35 + 30, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x * 35 + 10, z * 35 + 10, x * 35 + 31, z * 35 + 31, worldHeight, false);");
code("paintSecondary(x * 35 + 10, z * 35 + 10, x * 35 + 30, z * 35 + 30);");
code("paintEyecandy(x * 35 + 10, z * 35 + 10, x * 35 + 30, z * 35 + 30, \"sprite\");");

code("trQuestVarSet(\"villageX\", 70 * x + 20);");
code("trQuestVarSet(\"villageZ\", 70 * z + 20);");

code("deployTownEyecandy(\"Dwarf Foundry\",29,29,180);");
code("deployTownEyecandy(\"Dwarven Forge\", 11, 29,180);");
code("deployTownEyecandy(\"Armory\",27,9,270);");
code("deployTownEyecandy(\"Dwarven Forge\",11,11,0);");

code("trQuestVarSetFromRand(\"localQuest\", 1, 3, true);");

code("trQuestVarSet(\"guy\"+FETCH_GUY, trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Throwing Axeman\",21,9,270);");
code("trQuestVarSet(\"guy\"+BOUNTY_GUY, trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Ulfsark\",15,23,135);");
code("trQuestVarSet(\"guy\"+SHOP_GUY, trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Dwarf\",25,25,225);");
code("yAddToDatabase(\"stunnedUnits\", \"guy\"+FETCH_GUY);");
code("yAddUpdateVar(\"stunnedUnits\",\"proto\", kbGetProtoUnitID(\"Throwing Axeman\"));");
code("yAddToDatabase(\"stunnedUnits\", \"guy\"+BOUNTY_GUY);");
code("yAddUpdateVar(\"stunnedUnits\", \"proto\", kbGetProtoUnitID(\"Ulfsark\"));");
code("}");
code("case ROOM_VILLAGE + 4:");
code("{");
code("trPaintTerrain(x * 35 + 10, z * 35 + 10, x * 35 + 30, z * 35 + 30, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x * 35 + 10, z * 35 + 10, x * 35 + 30, z * 35 + 30, worldHeight, false);");
code("paintSecondary(x * 35 + 10, z * 35 + 10, x * 35 + 30, z * 35 + 30);");
code("paintEyecandy(x * 35 + 10, z * 35 + 10, x * 35 + 30, z * 35 + 30, \"sprite\");");

code("trQuestVarSet(\"villageX\", 70 * x + 24);");
code("trQuestVarSet(\"villageZ\", 70 * z + 24);");


code("trQuestVarSet(\"akardTower\", trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Tower Mirror\",12,12,0);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"akardTower\");");
code("trUnitOverrideAnimation(2,0,true,false,-1);");
code("trSetSelectedScale(2,2,2);");
code("trQuestVarSet(\"akardGuild1\", trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Guild\",16,12,180);");
code("trQuestVarSet(\"akardGuild2\", trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Guild\",12,16,270);");
code("trQuestVarSet(\"akardTree\", trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Tamarisk Tree\", 16, 16, 0);");
code("trQuestVarSet(\"akardTowerEnd\", trGetNextUnitScenarioNameNumber());");

code("trQuestVarSetFromRand(\"localQuest\", 1, 2, true);");

code("trQuestVarSet(\"guy\"+FETCH_GUY, trGetNextUnitScenarioNameNumber());");
code("trQuestVarSet(\"guy\"+BOUNTY_GUY, trGetNextUnitScenarioNameNumber());");
code("trQuestVarSet(\"guy\"+SHOP_GUY, trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Oracle Scout\",8,8,225);");
code("}");
code("case ROOM_VILLAGE + 5:");
code("{");
code("trPaintTerrain(x * 35 + 10, z * 35 + 10, x * 35 + 30, z * 35 + 30, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x * 35 + 10, z * 35 + 10, x * 35 + 31, z * 35 + 31, worldHeight, false);");
code("paintSecondary(x * 35 + 10, z * 35 + 10, x * 35 + 30, z * 35 + 30);");
code("paintEyecandy(x * 35 + 10, z * 35 + 10, x * 35 + 30, z * 35 + 30, \"sprite\");");

code("trQuestVarSet(\"villageX\", 70 * x + 20);");
code("trQuestVarSet(\"villageZ\", 70 * z + 20);");

code("deployTownEyecandy(\"Tent\", 7, 33, 45);");
code("deployTownEyecandy(\"Tent\", 31, 33, 135);");
code("deployTownEyecandy(\"Tent\", 35, 21, 180);");
code("deployTownEyecandy(\"Tent\", 19, 9, 180);");
code("deployTownEyecandy(\"Tent\", 11, 17, 90);");
code("deployTownEyecandy(\"Columns Fallen\", 5, 25, 220);");
code("deployTownEyecandy(\"Columns Fallen\", 19, 33, 150);");
code("deployTownEyecandy(\"Columns\", 33, 13, 0);");
code("deployTownEyecandy(\"Columns\", 27, 7, 0);");
code("deployTownEyecandy(\"Campfire\", 9, 7, 0);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Runestone\", 33,7,315);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trSetSelectedScale(2.5,2.5,2.5);");

code("trQuestVarSetFromRand(\"localQuest\", 1, 3, true);");

code("trQuestVarSet(\"guy\"+SHOP_GUY, trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Toxotes\",35,17,270);");
code("trQuestVarSet(\"guy\"+BOUNTY_GUY, trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Halberdier\",13,9,270);");
code("trQuestVarSet(\"guy\"+FETCH_GUY, trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Hypaspist\",9,13,180);");
code("trQuestVarSet(\"kastor\", trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Kastor\", 11, 29, 135);");
code("yAddToDatabase(\"npcTalk\", \"kastor\");");
code("yAddUpdateVar(\"npcTalk\", \"dialog\", NPC_KASTOR);");
code("yAddToDatabase(\"stunnedUnits\", \"guy\"+FETCH_GUY);");
code("yAddUpdateVar(\"stunnedUnits\",\"proto\", kbGetProtoUnitID(\"Hypaspist\"));");
code("yAddToDatabase(\"stunnedUnits\", \"guy\"+BOUNTY_GUY);");
code("yAddUpdateVar(\"stunnedUnits\", \"proto\", kbGetProtoUnitID(\"Halberdier\"));");
code("yAddToDatabase(\"stunnedUnits\", \"guy\"+SHOP_GUY);");
code("yAddUpdateVar(\"stunnedUnits\", \"proto\", kbGetProtoUnitID(\"Toxotes\"));");
code("yAddToDatabase(\"stunnedUnits\", \"kastor\");");
code("yAddUpdateVar(\"stunnedUnits\",\"proto\", kbGetProtoUnitID(\"Kastor\"));");
code("}");
code("case ROOM_VILLAGE + 6:");
code("{");
code("trPaintTerrain(x * 35 + 13, z * 35 + 13, x * 35 + 27, z * 35 + 27, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x * 35 + 13, z * 35 + 13, x * 35 + 28, z * 35 + 28, worldHeight, false);");

code("trQuestVarSet(\"villageX\", 70 * x + 26);");
code("trQuestVarSet(\"villageZ\", 70 * z + 26);");

code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Statue of Lightning\", 25, 25, 225);");
code("deployTownEyecandy(\"Statue of Lightning\", 5, 25, 135);");
code("deployTownEyecandy(\"Statue of Lightning\", 25, 5, 315);");
code("deployTownEyecandy(\"Statue of Lightning\", 5, 5, 45);");
code("for(i=trQuestVarGet(\"next\"); < trGetNextUnitScenarioNameNumber()) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+i, true);");
code("trUnitOverrideAnimation(2,0,true,false,-1);");
code("}");

code("trQuestVarSetFromRand(\"localQuest\", 1, 2, true);");

code("trQuestVarSet(\"guy\"+FETCH_GUY, trGetNextUnitScenarioNameNumber());");
code("trQuestVarSet(\"guy\"+BOUNTY_GUY, trGetNextUnitScenarioNameNumber());");
code("trQuestVarSet(\"guy\"+SHOP_GUY, trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Pharaoh of Osiris\", 19, 19, 225);");
code("yAddToDatabase(\"stunnedUnits\", \"guy\"+FETCH_GUY);");
code("yAddUpdateVar(\"stunnedUnits\",\"proto\", kbGetProtoUnitID(\"Pharaoh of Osiris\"));");

code("if (trQuestVarGet(\"localQuest\") == FETCH_GUY) {");
code("deployTownEyecandy(\"Cinematic Scorch\", 15, 9);");
code("deployTownEyecandy(\"Smoke\", 15, 9);");
code("} else {");
code("trVectorQuestVarSet(\"yeebRoomBottom\", xsVectorSet(70 * x + 26, 0, 70 * z + 26));");
code("trVectorQuestVarSet(\"yeebRoomTop\", xsVectorSet(70 * x + 56, 0, 70 * z + 56));");
code("trQuestVarSet(\"yeebRelic\", trGetNextUnitScenarioNameNumber());");
code("trVectorQuestVarSet(\"pos\", randomNearEdge(x * 35 + 15, z * 35 + 15, x * 35 + 25, z * 35 + 25));");
code("spawnRelicSpecific(trQuestVarGet(\"posX\"),trQuestVarGet(\"posZ\"), RELIC_YEEBAAGOOON);");
code("for(i=10; >0) {");
code("trVectorQuestVarSet(\"pos\", randomNearEdge(x * 35 + 15, z * 35 + 15, x * 35 + 25, z * 35 + 25));");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("yAddToDatabase(\"worthlessJunk\", \"next\");");
code("spawnRelicSpecific(trQuestVarGet(\"posX\"),trQuestVarGet(\"posZ\"), RELIC_WORTHLESS_JUNK);");
code("}");
code("xsEnableRule(\"yeeb_hit_list\");");
code("}");
code("}");
code("case ROOM_VILLAGE + 11:");
code("{");
code("");
code("trPaintTerrain(x * 35 + 13, z * 35 + 13, x * 35 + 27, z * 35 + 27, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x * 35 + 13, z * 35 + 13, x * 35 + 28, z * 35 + 28, worldHeight, false);");

code("trQuestVarSet(\"villageX\", 70 * x + 26);");
code("trQuestVarSet(\"villageZ\", 70 * z + 26);");

code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Runestone\", 15, 15, 225);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trSetSelectedScale(2.5, 2.5, 2.5);");

code("deployTownEyecandy(\"Columns\", 23, 19);");
code("deployTownEyecandy(\"Columns\", 23, 11);");

code("deployTownEyecandy(\"Columns\", 19, 23);");
code("deployTownEyecandy(\"Columns\", 11, 23);");

code("deployTownEyecandy(\"Columns\", 7, 19);");
code("deployTownEyecandy(\"Columns\", 7, 11);");

code("deployTownEyecandy(\"Columns\", 19, 7);");
code("deployTownEyecandy(\"Columns\", 11, 7);");
code("}");
code("case ROOM_STARTER:");
code("{");
code("trPaintTerrain(x * 35 + 10, z * 35 + 10, x * 35 + 30, z * 35 + 30, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x * 35 + 10, z * 35 + 10, x * 35 + 31, z * 35 + 31, worldHeight, false);");
code("paintSecondary(x * 35 + 10, z * 35 + 10, x * 35 + 30, z * 35 + 30);");
code("trVectorQuestVarSet(\"startPosition\", xsVectorSet(x*70 + 40,0,z*70+40));");
code("if (trQuestVarGet(\"newPlayers\") > 0) {");
code("trVectorQuestVarSet(\"choice1\", xsVectorSet(x*70+48,0,z*70+54));");
code("trVectorQuestVarSet(\"choice2\", xsVectorSet(x*70+54,0,z*70+48));");
code("trQuestVarSet(\"choice1unit\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\", \"Hero Greek Theseus\", 1, trQuestVarGet(\"choice1x\"),0,trQuestVarGet(\"choice1z\"),225,true);");
code("trQuestVarSet(\"choice2unit\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\", \"Hero Greek Hippolyta\", 1, trQuestVarGet(\"choice2x\"),0,trQuestVarGet(\"choice2z\"),225,false);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(0);");
code("yAddToDatabase(\"stunnedUnits\", \"choice1unit\");");
code("yAddUpdateVar(\"stunnedUnits\", \"proto\", kbGetProtoUnitID(\"Hero Greek Theseus\"));");
code("yAddToDatabase(\"stunnedUnits\", \"choice2unit\");");
code("yAddUpdateVar(\"stunnedUnits\", \"proto\", kbGetProtoUnitID(\"Hero Greek Hippolyta\"));");
code("xsEnableRule(\"class_shop_always\");");
code("}");
code("}");
code("case ROOM_BOSS:");
code("{");
code("size = trQuestVarGet(\"bossRoomSize\");");
code("if (trQuestVarGet(\"mapType\") == MAP_OPEN) {");
code("trPaintTerrain(x*35+17-size,z*35+17-size,x*35+23+size,z*35+23+size, TERRAIN_WALL, TERRAIN_SUB_WALL, false);");
code("trChangeTerrainHeight(x*35+17-size,z*35+17-size,x*35+24+size,z*35+24+size, wallHeight, false);");
code("trQuestVarSet(\"bossEntranceRadius\", xsPow(8, 2));");
code("} else {");
code("trQuestVarSet(\"bossEntranceRadius\", xsPow(2*size, 2));");
code("}");
code("switch(1*trQuestVarGet(\"bossRoomShape\"))");
code("{");
code("case ROOM_CIRCLE:");
code("{");
code("z0 = size;");
code("for(a=0; < size+3) {");
code("for(b=size+3; >0) {");
code("if (a*a + z0 * z0 <= size * size) {");
code("if (trQuestVarGet(\"stage\") == 3) {");
code("trPaintTerrain(x*35+20-a, z*35+20-z0, x*35+20+a, z*35+20+z0, 5, 0, false);");
code("} else {");
code("trPaintTerrain(x*35+20-a, z*35+20-z0, x*35+20+a, z*35+20+z0, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("}");
code("trChangeTerrainHeight(x*35+20-a, z*35+20-z0, x*35+20+a, z*35+20+z0, worldHeight, false);");
code("break;");
code("} else {");
code("z0 = z0 - 1;");
code("}");
code("}");
code("}");
code("}");
code("case ROOM_SQUARE:");
code("{");
code("trPaintTerrain(x*35+20-size,z*35+20-size,x*35+20+size,z*35+20+size, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x*35+20-size,z*35+20-size,x*35+21+size,z*35+21+size, worldHeight, false);");
code("}");

code("}");
code("paintSecondary(x*35+20-size,z*35+20-size,x*35+20+size,z*35+20+size);");
code("trVectorQuestVarSet(\"bossRoomCenter\", xsVectorSet(x * 70 + 40, 0, z * 70 + 40));");
code("trQuestVarSet(\"bossRoomLocX\", 0.5 * trQuestVarGet(\"bossRoomCenterX\"));");
code("trQuestVarSet(\"bossRoomLocZ\", 0.5 * trQuestVarGet(\"bossRoomCenterZ\"));");
code("trQuestVarSet(\"bossRoomEntranceX\", trQuestVarGet(\"bossRoomCenterX\"));");
code("trQuestVarSet(\"bossRoomEntranceZ\", trQuestVarGet(\"bossRoomCenterZ\"));");
code("xsEnableRule(\"enter_boss_room\");");
code("}");
code("case ROOM_NOTTUD:");
code("{");
code("z0 = 10;");
code("for(a=0; < 10) {");
code("for(b=8; >0) {");
code("if (a*a + z0 * z0 <= 100) {");
code("trPaintTerrain(x*35+20-a, z*35+20-z0, x*35+20+a, z*35+20+z0, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x*35+20-a, z*35+20-z0, x*35+20+a, z*35+20+z0, worldHeight, false);");
code("break;");
code("} else {");
code("z0 = z0 - 1;");
code("}");
code("}");
code("}");
code("trQuestVarSet(\"nottud\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\", \"Victory Marker\", 1, 70*x+40, 0, 70*z+40,225,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"nottud\", true);");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Minotaur\");");
code("yAddToDatabase(\"stunnedUnits\", \"nottud\");");
code("yAddUpdateVar(\"stunnedUnits\", \"proto\", kbGetProtoUnitID(\"Minotaur\"));");
code("xsEnableRule(\"nottud_always\");");
code("for(i=0; <5) {");
code("trQuestVarSet(\"choice\"+i, 21 + i);");
code("}");
code("trQuestVarSet(\"obeliskx0\", 70*x+46);");
code("trQuestVarSet(\"obeliskz0\", 70*z+46);");
code("trQuestVarSet(\"obeliskx1\", 70*x+46);");
code("trQuestVarSet(\"obeliskz1\", 70*z+34);");
code("trQuestVarSet(\"obeliskx2\", 70*x+34);");
code("trQuestVarSet(\"obeliskz2\", 70*z+46);");
code("for(i=0; <3) {");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"obeliskx\"+i),0,trQuestVarGet(\"obeliskz\"+i),225,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Osiris Box Glow\"));");
code("trSetSelectedScale(0,1,0);");
code("trSetSelectedUpVector(0,-1,0);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"obeliskx\"+i),0,trQuestVarGet(\"obeliskz\"+i),225,true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(0);");
code("trMutateSelected(kbGetProtoUnitID(\"Outpost\"));");
code("trQuestVarSetFromRand(\"rand\", 0, 4 - i, true);");
code("yAddToDatabase(\"nottudShop\", \"next\");");
code("yAddUpdateVar(\"nottudShop\", \"relic\", trQuestVarGet(\"choice\"+1*trQuestVarGet(\"rand\")));");
code("yAddUpdateVar(\"nottudShop\", \"shopPosx\", trQuestVarGet(\"obeliskx\"+i));");
code("yAddUpdateVar(\"nottudShop\", \"shopPosz\", trQuestVarGet(\"obeliskz\"+i));");
code("trQuestVarSet(\"choice\"+1*trQuestVarGet(\"rand\"), trQuestVarGet(\"choice\"+(4-i)));");
code("}");
code("}");
code("case ROOM_TEMPLE + 6:");
code("{");
code("debugLog(\"temple room is \" + room);");
code("trQuestVarSet(\"templeSize\", 16);");
code("trQuestVarSet(\"templePosX\", 70 * x + 40);");
code("trQuestVarSet(\"templePosZ\", 70 * z + 40);");
code("trQuestVarSet(\"templeRoomUpperX\", 70*x+56);");
code("trQuestVarSet(\"templeRoomUpperZ\", 70*z+56);");
code("trQuestVarSet(\"templeRoomLowerX\", 70*x+24);");
code("trQuestVarSet(\"templeRoomLowerZ\", 70*z+24);");
code("trPaintTerrain(x*35+12, z*35+12, x*35+28, z*35+28, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x*35+12, z*35+12, x*35+28, z*35+28, worldHeight, false);");
code("trQuestVarSet(\"templeRevealer\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,70*x+40,0,70*z+40,0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"templeRevealer\", true);");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("trQuestVarSet(\"temple\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,70*x+40,0,70*z+40,225,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"temple\", true);");
code("trUnitConvert(0);");
code("trMutateSelected(kbGetProtoUnitID(\"Statue of Lightning\"));");
code("trSetSelectedScale(2,2,2);");
code("trUnitOverrideAnimation(2,0,true,false,-1);");
code("trQuestVarSet(\"templeLOS\", 20);");
code("xsEnableRule(\"yeebaagooon_temple_always\");");
code("}");
code("case ROOM_TEMPLE + 11:");
code("{");
code("size = 12;");
code("z0 = size;");
code("for(a=0; < size+3) {");
code("for(b=size+3; >0) {");
code("if (a*a + z0 * z0 <= size * size) {");
code("trPaintTerrain(x*35+20-a, z*35+20-z0, x*35+20+a, z*35+20+z0, 0, 53, false);");
code("trChangeTerrainHeight(x*35+20-a, z*35+20-z0, x*35+20+a, z*35+20+z0, worldHeight, false);");
code("break;");
code("} else {");
code("z0 = z0 - 1;");
code("}");
code("}");
code("}");
code("trQuestVarSet(\"templeRevealer\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,70*x+40,0,70*z+40,0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"templeRevealer\", true);");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("trQuestVarSet(\"temple\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,70*x+40,0,70*z+40,225,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"temple\", true);");
code("trUnitConvert(0);");
code("trMutateSelected(kbGetProtoUnitID(\"Statue of Lightning\"));");
code("trSetSelectedScale(2,2,2);");
code("trUnitOverrideAnimation(2,0,true,false,-1);");
code("trQuestVarSet(\"templeLOS\", 20);");
code("trQuestVarSet(\"templePosX\", 70 * x + 40);");
code("trQuestVarSet(\"templePosY\", worldHeight + 15.0);");
code("trQuestVarSet(\"templePosZ\", 70 * z + 40);");
code("xsEnableRule(\"zeno_temple_always\");");
code("}");
code("}");
code("}");

code("int getOtherVertex(int edge = 0, int v = 0) {");
code("if (edge >= 16 * v) {");
code("return(edge - 16 * v);");
code("} else {");
code("return(edge / 16);");
code("}");
code("}");

code("void buildEdge(int edge = 0, int type = 0) {");
code("int first = edge / 16;");
code("int second = edge - 16 * first;");
code("int z0 = first / 4;");
code("int x0 = first - 4 * z0;");
code("int z1 = second / 4;");
code("int x1 = second - 4 * z1;");
code("int x = 0;");
code("int z = 0;");
code("if (trQuestVarGet(\"edge\"+edge) == EDGE_NOT_FOUND) {");
code("if (type == EDGE_MOUNTAIN) {");
code("yClearDatabase(\"edgeFrontier\");");
code("x0 = x0 * 35;");
code("z0 = z0 * 35;");
code("x1 = x1 * 35;");
code("z1 = z1 * 35;");
code("x1 = (x0 + x1) / 2 + 20;");
code("z1 = (z0 + z1) / 2 + 20;");
code("trQuestVarSet(\"next\", wallHeight - worldHeight);");
code("yAddToDatabase(\"edgeFrontier\", \"next\");");
code("yAddUpdateVar(\"edgeFrontier\", \"locx\", x1);");
code("yAddUpdateVar(\"edgeFrontier\", \"locz\", z1);");
code("trQuestVarSet(\"x\"+x1+\"z\"+z1, TILE_FOUND);");
code("trQuestVarSetFromRand(\"size\", 40, 80);");
code("for(a=trQuestVarGet(\"size\"); >0) {");
code("trQuestVarSetFromRand(\"rand\", 0, 7, true);");
code("yDatabaseNext(\"edgeFrontier\");");
code("for(b=trQuestVarGet(\"rand\"); >0) {");
code("yDatabaseNext(\"edgeFrontier\");");
code("}");
code("x0 = yGetVar(\"edgeFrontier\", \"locx\");");
code("z0 = yGetVar(\"edgeFrontier\", \"locz\");");
code("trPaintTerrain(x0-2,z0-2,x0+1,z0+1,TERRAIN_WALL, TERRAIN_SUB_WALL, false);");
code("trChangeTerrainHeight(x0-1,z0-1,x0+1,z0+1,worldHeight+trQuestVarGet(\"edgeFrontier\"),false);");
code("if (xsPow(x0-x1, 2) + xsPow(z0-z1,2) < 324) {");
code("for(b=0; < 4) {");
code("trQuestVarSetFromRand(\"next\", trQuestVarGet(\"edgeFrontier\") - 1, trQuestVarGet(\"edgeFrontier\"), true);");
code("if (trQuestVarGet(\"next\") > 0) {");
code("x = x0 + 2 * trQuestVarGet(\"rotX\"+b);");
code("z = z0 + 2 * trQuestVarGet(\"rotZ\"+b);");
code("if (trQuestVarGet(\"x\"+x+\"z\"+z) == TILE_NOT_FOUND) {");
code("yAddToDatabase(\"edgeFrontier\", \"next\");");
code("yAddUpdateVar(\"edgeFrontier\", \"locx\", x);");
code("yAddUpdateVar(\"edgeFrontier\", \"locz\", z);");
code("trQuestVarSet(\"x\"+x+\"z\"+z, TILE_FOUND);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("} else if (type == EDGE_PORTAL) {");
code("if (x0 + 4 * z0 != trQuestVarGet(\"village\")) {");
code("buildRoom(x0, z0, ROOM_BASIC);");
code("}");
code("if (x1 + 4 * z1 != trQuestVarGet(\"village\")) {");
code("buildRoom(x1, z1, ROOM_BASIC);");
code("}");
code("trQuestVarSet(\"next1\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,x0*70+40,0,z0*70+40,0,true);");
code("trQuestVarSet(\"next2\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,x1*70+40,0,z1*70+40,0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next1\", true);");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next1\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Sky Passage\"));");
code("trSetSelectedScale(0,0.2,0);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next2\", true);");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next2\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Sky Passage\"));");
code("trSetSelectedScale(0,0.2,0);");
code("yAddToDatabase(\"skyPassages\", \"next1\");");
code("yAddUpdateVar(\"skyPassages\", \"exit\", trQuestVarGet(\"next2\"));");
code("yAddToDatabase(\"skyPassages\", \"next2\");");
code("yAddUpdateVar(\"skyPassages\", \"exit\", trQuestVarGet(\"next1\"));");
code("} else {");
code("z0 = z0 * 35 + 17;");
code("x0 = x0 * 35 + 17;");
code("z1 = z1 * 35 + 23;");
code("x1 = x1 * 35 + 23;");
code("if (type == EDGE_BIG) {");
code("trQuestVarSetFromRand(\"rand\", 0, 7, true);");
code("z0 = z0 - trQuestVarGet(\"rand\");");
code("x0 = x0 - trQuestVarGet(\"rand\");");
code("trQuestVarSetFromRand(\"rand\", 0, 7, true);");
code("z1 = z1 + trQuestVarGet(\"rand\");");
code("x1 = x1 + trQuestVarGet(\"rand\");");
code("}");
code("trPaintTerrain(x0, z0, x1, z1, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x0, z0, x1 + 1, z1 + 1, worldHeight, false);");
code("paintSecondary(x0, z0, x1, z1);");

code("if ((type == EDGE_WALL) && (trQuestVarGet(\"wallEdges\") * yGetDatabaseCount(\"visited\") > 0)) {");
code("trQuestVarSetFromRand(\"rand\", 1, 16, true);");
code("for (x=trQuestVarGet(\"rand\"); >0) {");
code("yDatabaseNext(\"visited\");");
code("}");
code("trQuestVarSet(\"room\"+1*trQuestVarGet(\"visited\")+\"key\", trQuestVarGet(\"keyType\"));");
code("trQuestVarSet(\"room\"+1*trQuestVarGet(\"visited\")+\"index\", yAddToDatabase(\"unlockWalls\", \"visited\"));");
code("yAddUpdateVar(\"unlockWalls\", \"sfxStart\", trGetNextUnitScenarioNameNumber());");
code("yAddUpdateVar(\"unlockWalls\", \"posX\", x0 + x1);");
code("yAddUpdateVar(\"unlockWalls\", \"posZ\", z0 + z1);");
code("yRemoveFromDatabase(\"visited\");");

code("if (x1 - x0 > z1 - z0) {");
code("yAddUpdateVar(\"unlockWalls\", \"xMod\", 0);");
code("yAddUpdateVar(\"unlockWalls\", \"zMod\", z1 - z0);");
code("x0 = (x0 + x1);");
code("for(z=z0; <= z1) {");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,x0+2,0,2*z,0,true);");
code("trArmySelect(\"1,0\");");
code("trMutateSelected(kbGetProtoUnitID(\"UI Range Indicator Greek SFX\"));");
code("}");
code("x0 = x0 / 2;");
code("trPaintTerrain(x0-1, z0-1, x0+1, z1+1, TERRAIN_WALL, TERRAIN_SUB_WALL, false);");
code("trChangeTerrainHeight(x0, z0, x0+1, z1+1, wallHeight, false);");
code("yAddUpdateVar(\"unlockWalls\", \"greenCirclesStart\", trGetNextUnitScenarioNameNumber());");
code("x0 = x0 * 2;");
code("for(z=z0; <= z1) {");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,x0,0,2*z,270,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(kbGetProtoUnitName(relicProto(1*trQuestVarGet(\"keyType\"))));");
code("}");
code("} else {");
code("yAddUpdateVar(\"unlockWalls\", \"xMod\", x1 - x0);");
code("yAddUpdateVar(\"unlockWalls\", \"zMod\", 0);");
code("z0 = (z0 + z1);");
code("for(x=x0; <= x1) {");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,2*x,0,z0,90,true);");
code("trArmySelect(\"1,0\");");
code("trMutateSelected(kbGetProtoUnitID(\"UI Range Indicator Greek SFX\"));");
code("}");
code("z0 = z0 / 2;");
code("trPaintTerrain(x0-1, z0-1, x1+1, z0+1, TERRAIN_WALL, TERRAIN_SUB_WALL, false);");
code("trChangeTerrainHeight(x0, z0, x1+1, z0+1, wallHeight, false);");
code("yAddUpdateVar(\"unlockWalls\", \"greenCirclesStart\", trGetNextUnitScenarioNameNumber());");
code("z0 = z0 * 2;");
code("for(x=x0; <= x1) {");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,2*x,0,z0,180,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(kbGetProtoUnitName(relicProto(1*trQuestVarGet(\"keyType\"))));");
code("}");
code("}");
code("yAddUpdateVar(\"unlockWalls\", \"end\", trGetNextUnitScenarioNameNumber());");
code("trQuestVarSet(\"keyType\", trQuestVarGet(\"keyType\") - 1);");
code("trQuestVarSet(\"wallEdges\", trQuestVarGet(\"wallEdges\") - 1);");
code("}");

code("}");
code("trQuestVarSet(\"edge\"+edge, type);");
code("}");
code("}");

code("void connectStatues(int index1 = 0, int index2 = 0, int room = 0) {");
code("ySetPointer(\"statuesIn\"+room, index1);");
code("ySetVar(\"statuesIn\"+room, \"connections\", 1 + yGetVar(\"statuesIn\"+room, \"connections\"));");
code("ySetVar(\"statuesIn\"+room, \"connection\"+1*yGetVar(\"statuesIn\"+room, \"connections\"), index2);");
code("trQuestVarSet(\"pos1X\", yGetVar(\"statuesIn\"+room, \"posX\"));");
code("trQuestVarSet(\"pos1Z\", yGetVar(\"statuesIn\"+room, \"posZ\"));");

code("ySetPointer(\"statuesIn\"+room, index2);");
code("ySetVar(\"statuesIn\"+room, \"connections\", 1 + yGetVar(\"statuesIn\"+room, \"connections\"));");
code("ySetVar(\"statuesIn\"+room, \"connection\"+1*yGetVar(\"statuesIn\"+room, \"connections\"), index1);");
code("trQuestVarSet(\"pos2X\", yGetVar(\"statuesIn\"+room, \"posX\"));");
code("trQuestVarSet(\"pos2Z\", yGetVar(\"statuesIn\"+room, \"posZ\"));");

code("trVectorQuestVarSet(\"dir\", zGetUnitVector(\"pos1\", \"pos2\"));");
code("trQuestVarSet(\"temp\", trQuestVarGet(\"dirX\"));");
code("trQuestVarSet(\"dirX\", 0.0 - trQuestVarGet(\"dirZ\"));");
code("trQuestVarSet(\"dirZ\", trQuestVarGet(\"temp\"));");

code("float dist = zDistanceBetweenVectors(\"pos1\", \"pos2\");");
code("float x = 0.5 * (trQuestVarGet(\"pos1x\") + trQuestVarGet(\"pos2x\"));");
code("float z = 0.5 * (trQuestVarGet(\"pos1z\") + trQuestVarGet(\"pos2z\"));");

code("trArmyDispatch(\"1,0\",\"Dwarf\",1,1,0,1,0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(0);");
code("trSetSelectedScale(dist / 9.0, 1, 0.3);");
code("trSetUnitOrientation(trVectorQuestVarGet(\"dir\"),vector(0,1,0),true);");
code("trUnitTeleport(x,0,z);");
code("trMutateSelected(kbGetProtoUnitID(\"undermine ground decal long\"));");
code("}");

code("rule choose_stage_01");
code("inactive");
code("highFrequency");
code("{");
code("if (trQuestVarGet(\"stage\") > 0) {");
code("xsEnableRule(\"choose_stage_02\");");
code("for(i=trQuestVarGet(\"stage\"); >1) {");
code("for(j=10; >0) {");
code("trTechSetStatus(ENEMY_PLAYER, 78, 4);");
code("}");
code("}");
code("for(i=trQuestVarGet(\"stage\")/2; >0) {");
code("trTechSetStatus(ENEMY_PLAYER, 76, 4);");
code("}");
code("trQuestVarSet(\"rotX0\", -1);");
code("trQuestVarSet(\"rotX1\", 1);");
code("trQuestVarSet(\"rotX2\", 0);");
code("trQuestVarSet(\"rotX3\", 0);");
code("trQuestVarSet(\"rotZ0\", 0);");
code("trQuestVarSet(\"rotZ1\", 0);");
code("trQuestVarSet(\"rotZ2\", -1);");
code("trQuestVarSet(\"rotZ3\", 1);");
code("trStringQuestVarSet(\"advice\", \"Having difficulty at higher floors? Level up and bring some friends!\");");
code("xsDisableSelf();");
code("}");
code("}");


code("rule choose_stage_02");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 1) {");
code("xsDisableSelf();");
code("trBlockAllSounds();");

code("int chests = 3;");
code("int x = 0;");
code("int z = 0;");
code("int n = 0;");
code("int total = 0;");
code("int backtrack = 5;");

code("int room = 0;");
code("int x0 = 0;");
code("int z0 = 0;");
code("int x1 = 0;");
code("int z1 = 0;");
code("string pName = \"\";");

code("switch(1*trQuestVarGet(\"stage\"))");
code("{");
code("case 1:");
code("{");
code("trQuestVarSet(\"templeRoom\", -1);");
code("trSetCivAndCulture(0, 5, 1);");
code("trQuestVarSet(\"bossRoomSize\", 16);");
code("trQuestVarSet(\"extraEdges\", 9);");
code("TERRAIN_WALL = 2;");
code("TERRAIN_SUB_WALL = 0;");

code("TERRAIN_PRIMARY = 0;");
code("TERRAIN_SUB_PRIMARY = 34;");

code("TERRAIN_SECONDARY = 4;");
code("TERRAIN_SUB_SECONDARY = 12;");

code("trQuestVarSet(\"mapType\", MAP_OPEN);");
code("trQuestVarSet(\"treeDensity\", 0.06);");
code("trStringQuestVarSet(\"treeProto1\", \"Statue Lion Left\");");
code("trStringQuestVarSet(\"treeProto2\", \"Statue Lion Right\");");
code("trStringQuestVarSet(\"treeProto3\", \"Savannah Tree\");");
code("trQuestVarSet(\"spriteDensity\", 0.6);");
code("trStringQuestVarSet(\"spriteProto1\", \"Rock Sandstone Sprite\");");
code("trStringQuestVarSet(\"spriteProto2\", \"Grass\");");
code("trStringQuestVarSet(\"spriteProto3\", \"Rock Limestone Sprite\");");
code("trQuestVarSet(\"rockDensity\", 0.25);");
code("trStringQuestVarSet(\"rockProto1\", \"Rock Sandstone Big\");");
code("trStringQuestVarSet(\"rockProto2\", \"Rock River Sandy\");");
code("trStringQuestVarSet(\"rockProto3\", \"Rock Sandstone Small\");");

code("trQuestVarSet(\"enemyDensity\", 0.03 + 0.03 * ENEMY_PLAYER);");
code("trQuestVarSet(\"enemyProtoCount\", 5);");
code("trStringQuestVarSet(\"enemyProto1\", \"Golden Lion\");");
code("trStringQuestVarSet(\"enemyProto2\", \"Anubite\");");
code("trStringQuestVarSet(\"enemyProto3\", \"Terracotta Soldier\");");
code("trStringQuestVarSet(\"enemyProto4\", \"Sphinx\");");
code("trStringQuestVarSet(\"enemyProto5\", \"Petsuchos\");");

code("trQuestVarSet(\"columnDensity\", 0.05);");

code("trStringQuestVarSet(\"bossProto\", \"Nemean Lion\");");
code("trQuestVarSet(\"bossScale\", 2);");

code("trModifyProtounit(\"Nemean Lion\", ENEMY_PLAYER, 0, 9999999999999999999.0);");
code("trModifyProtounit(\"Nemean Lion\", ENEMY_PLAYER, 0, -9999999999999999999.0);");
code("trModifyProtounit(\"Nemean Lion\", ENEMY_PLAYER, 0, 4000 * ENEMY_PLAYER);");
code("trModifyProtounit(\"Nemean Lion\", ENEMY_PLAYER, 1, 2.4);");

code("trModifyProtounit(\"Hero Boar 2\", ENEMY_PLAYER, 0, 9999999999999999999.0);");
code("trModifyProtounit(\"Hero Boar 2\", ENEMY_PLAYER, 0, -9999999999999999999.0);");
code("trModifyProtounit(\"Hero Boar 2\", ENEMY_PLAYER, 0, 4000 * ENEMY_PLAYER);");
code("}");
code("case 2:");
code("{");
code("trQuestVarSet(\"templeRoom\", -1);");
code("trSetCivAndCulture(0, 8, 2);");
code("trQuestVarSet(\"bossRoomSize\", 12);");
code("trSetLighting(\"Fimbulwinter\", 0.1);");
code("TERRAIN_WALL = 2;");
code("TERRAIN_SUB_WALL = 4;");

code("TERRAIN_PRIMARY = 0;");
code("TERRAIN_SUB_PRIMARY = 58;");

code("TERRAIN_SECONDARY = 0;");
code("TERRAIN_SUB_SECONDARY = 22;");

code("trQuestVarSet(\"mapType\", MAP_PORTALS);");
code("trQuestVarSet(\"treeDensity\", 0.2);");
code("trQuestVarSet(\"treeScale\", 2);");
code("trStringQuestVarSet(\"treeProto1\", \"Marsh Tree\");");
code("trStringQuestVarSet(\"treeProto2\", \"Marsh Tree\");");
code("trStringQuestVarSet(\"treeProto3\", \"Marsh Tree\");");
code("trQuestVarSet(\"spriteDensity\", 0.3);");
code("trStringQuestVarSet(\"spriteProto1\", \"Rock Limestone Sprite\");");
code("trStringQuestVarSet(\"spriteProto2\", \"Water Reeds\");");
code("trStringQuestVarSet(\"spriteProto3\", \"Flowers\");");
code("trQuestVarSet(\"rockDensity\", 0.15);");
code("trStringQuestVarSet(\"rockProto1\", \"Rock Granite Big\");");
code("trStringQuestVarSet(\"rockProto2\", \"Imperial Examination\");");
code("trStringQuestVarSet(\"rockProto3\", \"Rock Granite Small\");");

code("trQuestVarSet(\"enemyDensity\", 0.02 + 0.02 * ENEMY_PLAYER);");
code("trQuestVarSet(\"enemyProtoCount\", 5);");
code("trStringQuestVarSet(\"enemyProto1\", \"Walking Woods Marsh\");");
code("trStringQuestVarSet(\"enemyProto2\", \"Centaur\");");
code("trStringQuestVarSet(\"enemyProto3\", \"Dryad\");");
code("trStringQuestVarSet(\"enemyProto4\", \"Medusa\");");
code("trStringQuestVarSet(\"enemyProto5\", \"Mountain Giant\");");

code("trQuestVarSet(\"columnDensity\", 0);");

code("trStringQuestVarSet(\"bossProto\", \"Tamarisk Tree\");");
code("trQuestVarSet(\"bossScale\", 1.5);");
code("}");
code("case 3:");
code("{");
code("trQuestVarSet(\"templeRoom\", -1);");
code("trSetCivAndCulture(0, 7, 2);");
code("trQuestVarSet(\"bossRoomSize\", 14);");
code("trQuestVarSet(\"extraEdges\", 0);");
code("trQuestVarSet(\"wallEdges\", 4);");
code("TERRAIN_WALL = 2;");
code("TERRAIN_SUB_WALL = 3;");

code("TERRAIN_PRIMARY = 0;");
code("TERRAIN_SUB_PRIMARY = 41;");

code("TERRAIN_SECONDARY = 5;");
code("TERRAIN_SUB_SECONDARY = 0;");

code("trQuestVarSet(\"mapType\", MAP_STANDARD);");
code("trQuestVarSet(\"treeDensity\", 0.1);");
code("trStringQuestVarSet(\"treeProto1\", \"Pine Snow\");");
code("trStringQuestVarSet(\"treeProto2\", \"Pine Snow\");");
code("trStringQuestVarSet(\"treeProto3\", \"Snow Drift Archery\");");
code("trQuestVarSet(\"spriteDensity\", 0.25);");
code("trStringQuestVarSet(\"spriteProto1\", \"Rock Granite Sprite\");");
code("trStringQuestVarSet(\"spriteProto2\", \"Ice Block\");");
code("trStringQuestVarSet(\"spriteProto3\", \"Rock Granite Small\");");
code("trQuestVarSet(\"rockDensity\", 0.15);");
code("trStringQuestVarSet(\"rockProto1\", \"Rock Granite Big\");");
code("trStringQuestVarSet(\"rockProto2\", \"Rock River Icy\");");
code("trStringQuestVarSet(\"rockProto3\", \"Rock River Icy\");");

code("trQuestVarSet(\"enemyDensity\", 0.02 + 0.02 * ENEMY_PLAYER);");
code("trQuestVarSet(\"enemyProtoCount\", 5);");
code("trStringQuestVarSet(\"enemyProto1\", \"Fenris Wolf\");");
code("trStringQuestVarSet(\"enemyProto2\", \"Valkyrie\");");
code("trStringQuestVarSet(\"enemyProto3\", \"Ballista\");");
code("trStringQuestVarSet(\"enemyProto4\", \"Mountain Giant\");");
code("trStringQuestVarSet(\"enemyProto5\", \"Frost Giant\");");



code("trQuestVarSet(\"columnDensity\", 0.05);");

code("trStringQuestVarSet(\"bossProto\", \"King Folstag\");");
code("trQuestVarSet(\"bossScale\", 1.25);");

code("trModifyProtounit(\"King Folstag\", ENEMY_PLAYER, 0, 9999999999999999999.0);");
code("trModifyProtounit(\"King Folstag\", ENEMY_PLAYER, 0, -9999999999999999999.0);");
code("trModifyProtounit(\"King Folstag\", ENEMY_PLAYER, 0, 8000 * ENEMY_PLAYER);");
code("trModifyProtounit(\"King Folstag\", ENEMY_PLAYER, 1, 1.075);");

code("trModifyProtounit(\"Hero Boar 2\", ENEMY_PLAYER, 0, 9999999999999999999.0);");
code("trModifyProtounit(\"Hero Boar 2\", ENEMY_PLAYER, 0, -9999999999999999999.0);");
code("trModifyProtounit(\"Hero Boar 2\", ENEMY_PLAYER, 0, 8000 * ENEMY_PLAYER);");
code("}");
code("case 4:");
code("{");
code("trQuestVarSet(\"stageTemple\", BOON_MORE_GOLD);");
code("trQuestVarSet(\"templeRoom\", -1);");
code("trQuestVarSet(\"eyecandyStart\", trGetNextUnitScenarioNameNumber());");
code("wallHeight = worldHeight + 6;");
code("trSetCivAndCulture(0, 2, 0);");
code("trQuestVarSet(\"bossRoomSize\", 14);");
code("TERRAIN_WALL = 2;");
code("TERRAIN_SUB_WALL = 1;");

code("TERRAIN_PRIMARY = 0;");
code("TERRAIN_SUB_PRIMARY = 25;");

code("TERRAIN_SECONDARY = 0;");
code("TERRAIN_SUB_SECONDARY = 3;");

code("trQuestVarSet(\"mapType\", MAP_OPEN);");
code("trQuestVarSet(\"treeDensity\", 0.3);");
code("trStringQuestVarSet(\"treeProto1\", \"Pine\");");
code("trStringQuestVarSet(\"treeProto2\", \"Pine\");");
code("trStringQuestVarSet(\"treeProto3\", \"Ruins\");");
code("trQuestVarSet(\"spriteDensity\", 0.6);");
code("trStringQuestVarSet(\"spriteProto1\", \"Flowers\");");
code("trStringQuestVarSet(\"spriteProto2\", \"Grass\");");
code("trStringQuestVarSet(\"spriteProto3\", \"Rock Limestone Sprite\");");
code("trQuestVarSet(\"rockDensity\", 0.4);");
code("trStringQuestVarSet(\"rockProto1\", \"Rock Granite Big\");");
code("trStringQuestVarSet(\"rockProto2\", \"Columns Broken\");");
code("trStringQuestVarSet(\"rockProto3\", \"Rock Granite Small\");");

code("trQuestVarSet(\"enemyDensity\", 0.045 + 0.045 * ENEMY_PLAYER);");

code("trQuestVarSet(\"enemyProtoCount\", 5);");
code("trStringQuestVarSet(\"enemyProto1\", \"Cyclops\");");
code("trStringQuestVarSet(\"enemyProto2\", \"Satyr\");");
code("trStringQuestVarSet(\"enemyProto3\", \"Behemoth\");");
code("trStringQuestVarSet(\"enemyProto4\", \"Medusa\");");
code("trStringQuestVarSet(\"enemyProto5\", \"Avenger\");");

code("trStringQuestVarSet(\"bossProto\", \"Chimera\");");
code("trQuestVarSet(\"bossScale\", 1.5);");

code("trModifyProtounit(\"Chimera\", ENEMY_PLAYER, 0, 9999999999999999999.0);");
code("trModifyProtounit(\"Chimera\", ENEMY_PLAYER, 0, -9999999999999999999.0);");
code("trModifyProtounit(\"Chimera\", ENEMY_PLAYER, 0, 12000 * ENEMY_PLAYER);");

code("trModifyProtounit(\"Hero Boar 2\", ENEMY_PLAYER, 0, 9999999999999999999.0);");
code("trModifyProtounit(\"Hero Boar 2\", ENEMY_PLAYER, 0, -9999999999999999999.0);");
code("trModifyProtounit(\"Hero Boar 2\", ENEMY_PLAYER, 0, 12000 * ENEMY_PLAYER);");
code("}");
code("case 5:");
code("{");
code("trQuestVarSet(\"templeRoom\", -1);");
code("trSetCivAndCulture(0, 3, 1);");
code("trQuestVarSet(\"bossRoomShape\", ROOM_SQUARE);");
code("trQuestVarSet(\"bossRoomSize\", 11);");
code("trSetLighting(\"dawn\", 0.1);");
code("TERRAIN_WALL = 2;");
code("TERRAIN_SUB_WALL = 11;");

code("TERRAIN_PRIMARY = 0;");
code("TERRAIN_SUB_PRIMARY = 32;");

code("TERRAIN_SECONDARY = 0;");
code("TERRAIN_SUB_SECONDARY = 33;");

code("trQuestVarSet(\"mapType\", MAP_PORTALS);");
code("trQuestVarSet(\"treeDensity\", 0.1);");
code("trStringQuestVarSet(\"treeProto1\", \"Statue Pharaoh\");");
code("trStringQuestVarSet(\"treeProto2\", \"Statue Pharaoh\");");
code("trStringQuestVarSet(\"treeProto3\", \"Statue Pharaoh\");");
code("trQuestVarSet(\"spriteDensity\", 0.3);");
code("trStringQuestVarSet(\"spriteProto1\", \"Rock Dirt Sprite\");");
code("trStringQuestVarSet(\"spriteProto2\", \"Cinematic Scorch\");");
code("trStringQuestVarSet(\"spriteProto3\", \"Skeleton\");");
code("trQuestVarSet(\"rockDensity\", 0.2);");
code("trStringQuestVarSet(\"rockProto1\", \"Rock Dirt Big\");");
code("trStringQuestVarSet(\"rockProto2\", \"Columns Broken\");");
code("trStringQuestVarSet(\"rockProto3\", \"Pestilence SFX1\");");

code("trQuestVarSet(\"enemyDensity\", 0.03 + 0.03 * ENEMY_PLAYER);");

code("trQuestVarSet(\"enemyProtoCount\", 6);");
code("trStringQuestVarSet(\"enemyProto1\", \"Dryad\");");
code("trStringQuestVarSet(\"enemyProto2\", \"Sphinx\");");
code("trStringQuestVarSet(\"enemyProto3\", \"Wadjet\");");
code("trStringQuestVarSet(\"enemyProto4\", \"Scorpion Man\");");
code("trStringQuestVarSet(\"enemyProto5\", \"Scarab\");");
code("trStringQuestVarSet(\"enemyProto6\", \"Mummy\");");

code("trQuestVarSet(\"columnDensity\", 0.1);");

code("trStringQuestVarSet(\"bossProto\", \"Shade of Hades\");");
code("trQuestVarSet(\"bossScale\", 1.5);");
code("trModifyProtounit(\"Shade of Hades\", ENEMY_PLAYER, 0, 9999999999999999999.0);");
code("trModifyProtounit(\"Shade of Hades\", ENEMY_PLAYER, 0, -9999999999999999999.0);");
code("trModifyProtounit(\"Shade of Hades\", ENEMY_PLAYER, 0, 16000 * ENEMY_PLAYER);");

code("trModifyProtounit(\"Hero Boar 2\", ENEMY_PLAYER, 0, 9999999999999999999.0);");
code("trModifyProtounit(\"Hero Boar 2\", ENEMY_PLAYER, 0, -9999999999999999999.0);");
code("trModifyProtounit(\"Hero Boar 2\", ENEMY_PLAYER, 0, 16000 * ENEMY_PLAYER);");

code("trQuestVarSet(\"pestilenceStart\", trGetNextUnitScenarioNameNumber());");
code("}");
code("case 6:");
code("{");
code("trQuestVarSet(\"stageTemple\", BOON_SPELL_ATTACK);");
code("xsEnableRule(\"laser_rooms_always\");");
code("trTechSetStatus(ENEMY_PLAYER, 59, 4);");
code("ambientColor(100,50,0);");
code("sunColor(150,150,0);");
code("trSetCloudData(1.0, 50.0, 50.0, 0.0, 1.0, 0.0);");
code("trSetCloudMap(\"shockwall\");");
code("trSetCivAndCulture(0, 4, 1);");
code("trQuestVarSet(\"bossRoomShape\", ROOM_SQUARE);");
code("trQuestVarSet(\"bossRoomSize\", 10);");
code("trQuestVarSet(\"wallEdges\", 4);");
code("trQuestVarSet(\"trapRooms\", 3);");
code("trQuestVarSet(\"trapType\", TRAP_LASERS);");
code("TERRAIN_WALL = 2;");
code("TERRAIN_SUB_WALL = 5;");

code("TERRAIN_PRIMARY = 0;");
code("TERRAIN_SUB_PRIMARY = 70;");

code("TERRAIN_SECONDARY = 0;");
code("TERRAIN_SUB_SECONDARY = 64;");

code("trQuestVarSet(\"mapType\", MAP_STANDARD);");
code("trQuestVarSet(\"spriteDensity\", 0.15);");
code("trStringQuestVarSet(\"spriteProto1\", \"Cinematic Scorch\");");
code("trStringQuestVarSet(\"spriteProto2\", \"Cinematic Scorch\");");
code("trStringQuestVarSet(\"spriteProto3\", \"Cinematic Scorch\");");

code("trQuestVarSet(\"rockDensity\", 0.1);");
code("trStringQuestVarSet(\"rockProto1\", \"Smoke\");");
code("trStringQuestVarSet(\"rockProto2\", \"Broken Siege Weapons\");");
code("trStringQuestVarSet(\"rockProto3\", \"Thor Hammer\");");

code("trQuestVarSet(\"enemyDensity\", 0.03 + 0.03 * ENEMY_PLAYER);");
code("trQuestVarSet(\"enemyProtoCount\", 5);");

code("trStringQuestVarSet(\"enemyProto1\", \"Automaton SPC\");");
code("trStringQuestVarSet(\"enemyProto2\", \"Ballista\");");
code("trStringQuestVarSet(\"enemyProto3\", \"Fire Siphon\");");
code("trStringQuestVarSet(\"enemyProto4\", \"Battle Boar\");");
code("trStringQuestVarSet(\"enemyProto5\", \"Colossus\");");

code("trStringQuestVarSet(\"bossProto\", \"Helepolis\");");
code("trQuestVarSet(\"bossScale\", 0.25);");

code("trModifyProtounit(\"Helepolis\", ENEMY_PLAYER, 0, 9999999999999999999.0);");
code("trModifyProtounit(\"Helepolis\", ENEMY_PLAYER, 0, -9999999999999999999.0);");
code("trModifyProtounit(\"Helepolis\", ENEMY_PLAYER, 0, 20000 * ENEMY_PLAYER);");

code("trModifyProtounit(\"Hero Boar 2\", ENEMY_PLAYER, 0, 9999999999999999999.0);");
code("trModifyProtounit(\"Hero Boar 2\", ENEMY_PLAYER, 0, -9999999999999999999.0);");
code("trModifyProtounit(\"Hero Boar 2\", ENEMY_PLAYER, 0, 20000 * ENEMY_PLAYER);");

code("trModifyProtounit(\"Helepolis\", ENEMY_PLAYER, 13, -2);");
code("}");
code("case 7:");
code("{");
code("trQuestVarSet(\"templeRoom\", -1);");
code("wallHeight = worldHeight + 6;");
code("trSetCivAndCulture(0, 11, 3);");
code("trQuestVarSet(\"bossRoomSize\", 12);");
code("TERRAIN_WALL = 2;");
code("TERRAIN_SUB_WALL = 1;");

code("TERRAIN_PRIMARY = 0;");
code("TERRAIN_SUB_PRIMARY = 25;");

code("TERRAIN_SECONDARY = 0;");
code("TERRAIN_SUB_SECONDARY = 3;");

code("trQuestVarSet(\"mapType\", MAP_OPEN);");
code("trQuestVarSet(\"treeDensity\", 0.3);");
code("trStringQuestVarSet(\"treeProto1\", \"Columns\");");
code("trStringQuestVarSet(\"treeProto2\", \"Broken Columns\");");
code("trStringQuestVarSet(\"treeProto3\", \"Fallen Columns\");");
code("trQuestVarSet(\"spriteDensity\", 0.7);");
code("trStringQuestVarSet(\"spriteProto1\", \"Seaweed\");");
code("trStringQuestVarSet(\"spriteProto2\", \"Water Reeds\");");
code("trStringQuestVarSet(\"spriteProto3\", \"Rock Granite Small\");");
code("trQuestVarSet(\"rockDensity\", 0.6);");
code("trStringQuestVarSet(\"rockProto1\", \"Rock Granite Big\");");
code("trStringQuestVarSet(\"rockProto2\", \"Rock Limestone Sprite\");");
code("trStringQuestVarSet(\"rockProto3\", \"Shipwreck\");");

code("trQuestVarSet(\"enemyDensity\", 0.04 + 0.04 * ENEMY_PLAYER);");

code("trQuestVarSet(\"enemyProtoCount\", 6);");
code("trStringQuestVarSet(\"enemyProto1\", \"Servant\");");
code("trStringQuestVarSet(\"enemyProto2\", \"Nereid\");");
code("trStringQuestVarSet(\"enemyProto3\", \"Wadjet\");");
code("trStringQuestVarSet(\"enemyProto4\", \"Hydra\");");
code("trStringQuestVarSet(\"enemyProto5\", \"Medusa\");");
code("trStringQuestVarSet(\"enemyProto6\", \"Lampades\");");

code("trStringQuestVarSet(\"bossProto\", \"Scylla\");");
code("trQuestVarSet(\"bossScale\", 1.5);");

code("trModifyProtounit(\"Scylla\", ENEMY_PLAYER, 0, 9999999999999999999.0);");
code("trModifyProtounit(\"Scylla\", ENEMY_PLAYER, 0, -9999999999999999999.0);");
code("trModifyProtounit(\"Scylla\", ENEMY_PLAYER, 0, 24000 * ENEMY_PLAYER);");

code("trModifyProtounit(\"Hero Boar 2\", ENEMY_PLAYER, 0, 9999999999999999999.0);");
code("trModifyProtounit(\"Hero Boar 2\", ENEMY_PLAYER, 0, -9999999999999999999.0);");
code("trModifyProtounit(\"Hero Boar 2\", ENEMY_PLAYER, 0, 24000 * ENEMY_PLAYER);");
code("}");
code("case 11:");
code("{");
code("trQuestVarSet(\"stageTemple\", BOON_MORE_GOLD);");
code("trStringQuestVarSet(\"advice\", \"And then there were none...\");");
code("xsEnableRule(\"laser_rooms_always\");");
code("trSetCivAndCulture(0, statueCiv(1*trQuestVarGet(\"stageTemple\")), statueCulture(1*trQuestVarGet(\"stageTemple\")));");
code("worldHeight = 0;");
code("wallHeight = 0;");
code("trQuestVarSet(\"bossRoomShape\", ROOM_SQUARE);");
code("trQuestVarSet(\"bossRoomSize\", 11);");
code("trSetLighting(\"eclipse\", 0.1);");

code("trQuestVarSet(\"trapRooms\", 3);");
code("trQuestVarSet(\"trapType\", TRAP_LASERS);");
code("TERRAIN_WALL = 2;");
code("TERRAIN_SUB_WALL = 13;");

code("TERRAIN_PRIMARY = 9;");
code("TERRAIN_SUB_PRIMARY = 0;");

code("TERRAIN_SECONDARY = 0;");
code("TERRAIN_SUB_SECONDARY = 73;");

code("trQuestVarSet(\"mapType\", MAP_STANDARD);");
code("trQuestVarSet(\"treeDensity\", 0.2);");
code("trStringQuestVarSet(\"treeProto1\", \"Oak Tree Burning\");");
code("trStringQuestVarSet(\"treeProto2\", \"Marsh Tree\");");
code("trStringQuestVarSet(\"treeProto3\", \"Pine Snow\");");
code("trQuestVarSet(\"spriteDensity\", 0.5);");
code("trStringQuestVarSet(\"spriteProto1\", \"Cinematic Dead Bodies\");");
code("trStringQuestVarSet(\"spriteProto2\", \"Cinematic Dead Bodies Xpack\");");
code("trStringQuestVarSet(\"spriteProto3\", \"Columns\");");
code("trQuestVarSet(\"rockDensity\", 0.2);");
code("trStringQuestVarSet(\"rockProto1\", \"Ruins\");");
code("trStringQuestVarSet(\"rockProto2\", \"Columns Broken\");");
code("trStringQuestVarSet(\"rockProto3\", \"Cinematic Dead Bodies\");");

code("trQuestVarSet(\"enemyDensity\", 0.02 + 0.02 * ENEMY_PLAYER);");


code("trQuestVarSet(\"enemyProtoCount\", ENEMY_PLAYER - 1);");
code("for(p=1; < ENEMY_PLAYER) {");
code("trStringQuestVarSet(\"enemyProto\" + p,");
code("kbGetProtoUnitName(1*trQuestVarGet(\"class\"+1*trQuestVarGet(\"p\"+p+\"class\")+\"proto\")));");
code("}");

code("for(x=1; < 20) {");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trQuestVarSetFromRand(\"rand\",1,360,true);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,150,0,150,trQuestVarGet(\"rand\"),true);");
code("yAddToDatabase(\"timeshiftHawks\", \"next\");");
code("spyEffect(1*trQuestVarGet(\"next\"), kbGetProtoUnitID(\"Timeshift In\"), yGetNewVarName(\"timeshiftHawks\", \"sfx\"));");
code("}");
code("xsEnableRule(\"zenos_paradox_build_01\");");

code("trQuestVarSet(\"templeRoom\", 5);");

code("trQuestVarSet(\"akard\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,50,0,50,225,true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Oracle Scout\");");
code("}");
code("case 0:");
code("{");
code("trQuestVarSet(\"stageTemple\", BOON_TWO_RELICS);");
code("trSetCivAndCulture(0, statueCiv(1*trQuestVarGet(\"stageTemple\")), statueCulture(1*trQuestVarGet(\"stageTemple\")));");
code("worldHeight = 0;");
code("wallHeight = 0;");
code("trQuestVarSet(\"bossRoomShape\", ROOM_SQUARE);");
code("trQuestVarSet(\"bossRoomSize\", 11);");
code("TERRAIN_WALL = 2;");
code("TERRAIN_SUB_WALL = 7;");

code("TERRAIN_PRIMARY = 4;");
code("TERRAIN_SUB_PRIMARY = 15;");

code("TERRAIN_SECONDARY = 0;");
code("TERRAIN_SUB_SECONDARY = 73;");

code("trQuestVarSet(\"mapType\", MAP_STANDARD);");
code("trQuestVarSet(\"treeDensity\", 0.1);");
code("trStringQuestVarSet(\"treeProto1\", \"Oak Tree Burning\");");
code("trStringQuestVarSet(\"treeProto2\", \"Marsh Tree\");");
code("trStringQuestVarSet(\"treeProto3\", \"Pine Snow\");");
code("trQuestVarSet(\"spriteDensity\", 0.3);");
code("trStringQuestVarSet(\"spriteProto1\", \"Imperial Examination\");");
code("trStringQuestVarSet(\"spriteProto2\", \"Healing SFX\");");
code("trStringQuestVarSet(\"spriteProto3\", \"Mist\");");
code("trQuestVarSet(\"rockDensity\", 0.2);");
code("trStringQuestVarSet(\"rockProto1\", \"Ruins\");");
code("trStringQuestVarSet(\"rockProto2\", \"Columns Broken\");");
code("trStringQuestVarSet(\"rockProto3\", \"Columns\");");

code("trQuestVarSet(\"enemyDensity\", 0);");

code("trQuestVarSet(\"templeRoom\", 1);");
code("}");
code("}");

code("trChangeTerrainHeight(0,0,145,145,wallHeight,false);");
code("trPaintTerrain(0,0,145,145,TERRAIN_WALL, TERRAIN_SUB_WALL,false);");

code("if (trQuestVarGet(\"mapType\") == MAP_OPEN) {");
code("trChangeTerrainHeight(5,5,140,140,worldHeight,false);");
code("trPaintTerrain(5,5,139,139,TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY,false);");
code("paintSecondary(5,5,139,139);");
code("}");

code("trQuestVarSet(\"keyType\", RELIC_KEY_EGYPT);");

code("bool edgeIsPortal = false;");
code("trQuestVarSet(\"tile0\", TILE_VISITED);");
code("trQuestVarSet(\"tile1\", TILE_FOUND);");
code("trQuestVarSet(\"tile4\", TILE_FOUND);");

code("trQuestVarSetFromRand(\"village\", 1, 14, true);");
code("if (trQuestVarGet(\"mapType\") == MAP_PORTALS) {");
code("trQuestVarSet(\"portalsActive\", 1);");
code("total = 1;");
code("trQuestVarSet(\"tile\"+1*trQuestVarGet(\"village\"), TILE_VISITED);");
code("trQuestVarSetFromRand(\"villageEntrance\", 1, 13, true);");
code("trQuestVarSet(\"villageEntrance\", trQuestVarGet(\"village\") + trQuestVarGet(\"villageEntrance\"));");
code("if (trQuestVarGet(\"villageEntrance\") > 14) {");
code("trQuestVarSet(\"villageEntrance\", trQuestVarGet(\"villageEntrance\") - 14);");
code("}");
code("buildEdge(edgeName(1*trQuestVarGet(\"villageEntrance\"), 1*trQuestVarGet(\"village\")), EDGE_PORTAL);");
code("} else if (trQuestVarGet(\"mapType\") == MAP_OPEN) {");
code("trQuestVarSetFromRand(\"bossRoomEntranceMod\", 1, 13, true);");
code("trQuestVarSet(\"bossEntranceRoom\", trQuestVarGet(\"village\") + trQuestVarGet(\"bossRoomEntranceMod\"));");
code("if (trQuestVarGet(\"bossEntranceRoom\") > 14) {");
code("trQuestVarSet(\"bossEntranceRoom\", trQuestVarGet(\"bossEntranceRoom\") - 14);");
code("}");
code("trQuestVarSetFromRand(\"bossKeyRoomMod\", 1, 13, true);");
code("trQuestVarSet(\"bossKeyRoom\", trQuestVarGet(\"bossEntranceRoom\") + trQuestVarGet(\"bossKeyRoomMod\"));");
code("if (trQuestVarGet(\"bossKeyRoom\") > 14) {");
code("trQuestVarSet(\"bossKeyRoom\", trQuestVarGet(\"bossKeyRoom\") - 14);");
code("}");
code("}");

code("if (trQuestVarGet(\"templeRoom\") == 0) {");
code("trQuestVarSetFromRand(\"templeRoom\", 1, 14, true);");
code("trQuestVarSet(\"templeRoom\", trQuestVarGet(\"templeRoom\") + trQuestVarGet(\"village\"));");
code("if (trQuestVarGet(\"templeRoom\") > 14) {");
code("trQuestVarSet(\"templeRoom\", trQuestVarGet(\"templeRoom\") - 14);");
code("}");
code("}");

code("if (trQuestVarGet(\"tile1\") == TILE_FOUND) {");
code("trQuestVarSet(\"next\", 1);");
code("yAddToDatabase(\"frontier\", \"next\");");
code("yAddUpdateVar(\"frontier\", \"edge\", edgeName(0, 1));");
code("yAddUpdateVar(\"frontier\", \"type\", EDGE_NORMAL);");
code("}");
code("if (trQuestVarGet(\"mapType\") == MAP_OPEN) {");
code("yAddUpdateVar(\"frontier\", \"type\", EDGE_MOUNTAIN);");
code("}");

code("if (trQuestVarGet(\"tile4\") == TILE_FOUND) {");
code("trQuestVarSet(\"next\", 4);");
code("yAddToDatabase(\"frontier\", \"next\");");
code("yAddUpdateVar(\"frontier\", \"edge\", edgeName(0, 4));");
code("yAddUpdateVar(\"frontier\", \"type\", EDGE_NORMAL);");
code("}");
code("if (trQuestVarGet(\"mapType\") == MAP_OPEN) {");
code("yAddUpdateVar(\"frontier\", \"type\", EDGE_MOUNTAIN);");
code("}");

code("trQuestVarSetFromRand(\"relicTransporterDepth\", 1, 5, true);");

code("debugLog(\"Village is \" + 1*trQuestVarGet(\"village\"));");
code("if (trQuestVarGet(\"mapType\") == MAP_PORTALS) {");
code("debugLog(\"Village entrance is \" + 1*trQuestVarGet(\"villageEntrance\"));");
code("}");

code("for(i=0; < 64) {");
code("trQuestVarSetFromRand(\"search\", 1, backtrack, true);");
code("for(j=trQuestVarGet(\"search\"); >0) {");
code("yDatabaseNext(\"frontier\", false, false);");
code("}");
code("if (trQuestVarGet(\"tile\"+1*trQuestVarGet(\"frontier\")) < TILE_VISITED) {");
code("z = 1*trQuestVarGet(\"frontier\") / 4;");
code("x = 1*trQuestVarGet(\"frontier\") - 4 * z;");
code("buildEdge(1*yGetVar(\"frontier\", \"edge\"), 1*yGetVar(\"frontier\", \"type\"));");

code("edgeIsPortal = (yGetVar(\"frontier\", \"type\") == EDGE_PORTAL);");
code("trQuestVarSet(\"tile\"+1*trQuestVarGet(\"frontier\"), TILE_VISITED);");
code("if (trQuestVarGet(\"frontier\") < 15 && trQuestVarGet(\"frontier\") != trQuestVarGet(\"village\")) {");
code("yAddToDatabase(\"visited\", \"frontier\");");
code("}");
code("if (trQuestVarGet(\"frontier\") < 15 && trQuestVarGet(\"frontier\") != trQuestVarGet(\"village\")) {");
code("for(a=1; >=0) {");
code("for(b=1; >=0) {");
code("trQuestVarSet(\"newX\", (1 - 2 * b) * a + x);");
code("trQuestVarSet(\"newZ\", (1 - 2 * b) * (1 - a) + z);");
code("if (trQuestVarGet(\"newX\") < 0 || trQuestVarGet(\"newZ\") < 0 ||");
code("trQuestVarGet(\"newX\") > 3 || trQuestVarGet(\"newZ\") > 3) {");
code("continue;");
code("}");
code("n = 0 + trQuestVarGet(\"newX\") + 4 * trQuestVarGet(\"newZ\");");
code("if (trQuestVarGet(\"tile\"+n) < TILE_VISITED) {");
code("trQuestVarSet(\"next\", n);");
code("yAddToDatabase(\"frontier\", \"next\");");
code("yAddUpdateVar(\"frontier\", \"edge\", edgeName(1*trQuestVarGet(\"frontier\"), n));");
code("yAddUpdateVar(\"frontier\", \"type\", EDGE_NORMAL);");
code("if (trQuestVarGet(\"wallEdges\") > 0 && yGetDatabaseCount(\"visited\") > 0) {");
code("trQuestVarSetFromRand(\"rand\", 1, xsMin(3, trQuestVarGet(\"wallEdges\")), true);");
code("if (trQuestVarGet(\"rand\") == 1) {");
code("yAddUpdateVar(\"frontier\", \"type\", EDGE_WALL);");
code("}");
code("}");
code("if (trQuestVarGet(\"mapType\") == MAP_OPEN) {");
code("yAddUpdateVar(\"frontier\", \"type\", EDGE_MOUNTAIN);");
code("}");
code("}");
code("}");
code("}");
code("if (edgeIsPortal == false) {");
code("trQuestVarSet(\"relicTransporterDepth\", trQuestVarGet(\"relicTransporterDepth\") - 1);");
code("if ((trQuestVarGet(\"relicTransporterDepth\") <= 0) &&");
code("(trQuestVarGet(\"relictransporterguy\") == 0) &&");
code("(trQuestVarGet(\"frontier\") != trQuestVarGet(\"villageEntrance\")) &&");
code("(trQuestVarGet(\"frontier\") != trQuestVarGet(\"bossEntranceRoom\"))) {");
code("trQuestVarSet(\"relicTransporterGuy\", trQuestVarGet(\"frontier\"));");
code("} else if (trQuestVarGet(\"mapType\") == MAP_PORTALS) {");
code("trQuestVarSetFromRand(\"rand\", 1, 14, true);");
code("n = trQuestVarGet(\"rand\");");
code("if (trQuestVarGet(\"tile\"+n) < TILE_VISITED &&");
code("n != trQuestVarGet(\"villageEntrance\") &&");
code("n != trQuestVarGet(\"relicTransporterGuy\") &&");
code("trQuestVarGet(\"villageEntrance\") != trQuestVarGet(\"frontier\")) {");
code("yAddToDatabase(\"frontier\", \"rand\");");
code("yAddUpdateVar(\"frontier\", \"edge\", edgeName(1*trQuestVarGet(\"frontier\"), n));");
code("yAddUpdateVar(\"frontier\", \"type\", EDGE_PORTAL);");
code("}");
code("}");
code("}");
code("}");

code("total = total + 1;");
code("if (total == 15) {");
code("break;");
code("}");
code("} else {");
code("backtrack = backtrack + 1;");
code("}");
code("yRemoveFromDatabase(\"frontier\");");
code("yRemoveUpdateVar(\"frontier\", \"edge\");");
code("yRemoveUpdateVar(\"frontier\", \"type\");");
code("}");

code("buildRoom(0,0, ROOM_STARTER);");
code("buildRoom(3,3, ROOM_BOSS);");

code("for(x=yGetDatabaseCount(\"skypassages\"); >0) {");
code("yDatabaseNext(\"skyPassages\");");
code("trVectorSetUnitPos(\"pos\", \"skyPassages\");");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"posX\")-4,0,trQuestVarGet(\"posZ\"),0,true);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"posX\")+4,0,trQuestVarGet(\"posZ\"),0,false);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"posX\"),0,trQuestVarGet(\"posZ\")-4,0,false);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"posX\"),0,trQuestVarGet(\"posZ\")+4,0,false);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"posX\")+3,0,trQuestVarGet(\"posZ\")+3,0,false);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"posX\")+3,0,trQuestVarGet(\"posZ\")-3,0,false);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"posX\")-3,0,trQuestVarGet(\"posZ\")+3,0,false);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"posX\")-3,0,trQuestVarGet(\"posZ\")-3,0,false);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Garrison Flag Sky Passage\");");
code("}");

code("bool nottudSpawn = false;");
code("trQuestVarSetFromRand(\"nottudSpawn\", 0, 20, true);");
code("if (trQuestVarGet(\"nottudSpawn\") < trQuestVarGet(\"stage\")) {");
code("nottudSpawn = true;");
code("}");

code("if (trQuestVarGet(\"stage\") > 10) {");
code("trQuestVarSet(\"relicTransporterGuy\", -1);");
code("trQuestVarSet(\"village\", -1);");
code("trQuestVarSet(\"bossEntranceRoom\", -1);");
code("chests = 0;");
code("nottudSpawn = false;");
code("}");

code("for (i=1; < 15) {");
code("z = i / 4;");
code("x = i - z * 4;");
code("if (trQuestVarGet(\"room\"+i) == 0) {");
code("if (chests > 0) {");
code("trQuestVarSetFromRand(\"chestRand\", 1, 12 - trQuestVarGet(\"stage\"), true);");
code("} else {");
code("trQuestVarSet(\"chestRand\", 0);");
code("}");
code("if (i == 1*trQuestVarGet(\"bossEntranceRoom\")) {");
code("buildRoom(x, z, ROOM_BOSS_ENTRANCE);");
code("} else if (i == 1*trQuestVarGet(\"relicTransporterGuy\")) {");
code("buildRoom(x, z, ROOM_TRANSPORTER_GUY);");
code("} else if (i == 1*trQuestVarGet(\"village\")) {");
code("xsEnableRule(\"town_always\");");
code("buildRoom(x, z, ROOM_VILLAGE + trQuestVarGet(\"stage\"));");
code("for(x=3; >0) {");
code("if (trQuestVarGet(\"localQuest\") == x) {");
code("trVectorSetUnitPos(\"pos\", \"guy\"+x);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"posX\"),0,trQuestVarGet(\"posZ\"),0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Healing SFX\");");
code("trQuestVarSet(\"questGuy\", trQuestVarGet(\"guy\"+x));");
code("} else {");
code("yAddToDatabase(\"npcTalk\", \"guy\"+x);");
code("yAddUpdateVar(\"npcTalk\", \"dialog\", 10 * x + trQuestVarGet(\"stage\"));");
code("}");
code("}");
code("} else if (nottudSpawn && (countRoomEntrances(x, z) == 1)) {");
code("buildRoom(x, z, ROOM_NOTTUD);");
code("nottudSpawn = false;");
code("} else if (trQuestVarGet(\"templeRoom\") == i) {");
code("xsEnableRule(\"find_temple\");");
code("buildRoom(x, z, ROOM_TEMPLE + trQuestVarGet(\"stage\"));");
code("} else if (trQuestVarGet(\"chestRand\") == 1) {");
code("chests = chests - 1;");
code("buildRoom(x, z, ROOM_CHEST);");
code("} else {");
code("trQuestVarSetFromRand(\"roomType\", ROOM_BASIC, ROOM_AMBUSH, true);");
code("trQuestVarSetFromRand(\"roomType2\", ROOM_BASIC, ROOM_AMBUSH, true);");
code("if (trQuestVarGet(\"roomType2\") < trQuestVarGet(\"roomType\")) {");
code("trQuestVarSet(\"roomType\", trQuestVarGet(\"roomType2\"));");
code("}");
code("buildRoom(x, z, 1*trQuestVarGet(\"roomType\"));");
code("}");
code("}");
code("}");

code("trQuestVarSet(\"keyType\", RELIC_KEY_GREEK);");
code("for(i=yGetDatabaseCount(\"chests\"); >0) {");
code("yDatabaseNext(\"chests\");");
code("room = yGetVar(\"chests\", \"room\");");
code("x0 = trQuestVarGet(\"room\"+room+\"bottom1x\");");
code("z0 = trQuestVarGet(\"room\"+room+\"bottom1z\");");
code("x1 = trQuestVarGet(\"room\"+room+\"top1x\");");
code("z1 = trQuestVarGet(\"room\"+room+\"top1z\");");
code("switch(1*yGetVar(\"chests\", \"type\"))");
code("{");
code("case CHEST_KEY:");
code("{");
code("ySetVar(\"chests\", \"keyType\", trQuestVarGet(\"keyType\"));");
code("paintEnemies(x0, z0, x1, z1);");
code("trQuestVarSetFromRand(\"key\", 1, 14, true);");
code("for(j=trQuestVarGet(\"key\"); >0) {");
code("room = yDatabaseNext(\"basicRooms\");");
code("}");
code("x0 = trQuestVarGet(\"room\"+room+\"bottom1x\");");
code("z0 = trQuestVarGet(\"room\"+room+\"bottom1z\");");
code("x1 = trQuestVarGet(\"room\"+room+\"top1x\");");
code("z1 = trQuestVarGet(\"room\"+room+\"top1z\");");
code("trVectorQuestVarSet(\"pos\", randomNearEdge(x0, z0, x1, z1));");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Militia\",1,trQuestVarGet(\"posX\"),0,trQuestVarGet(\"posZ\"),0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitChangeProtoUnit(\"Relic\");");
code("yAddToDatabase(\"freeRelics\", \"next\");");
code("yAddUpdateVar(\"freeRelics\", \"type\", trQuestVarGet(\"keyType\"));");
code("ySetVar(\"chests\", \"key\", trQuestVarGet(\"next\"));");

code("trVectorSetUnitPos(\"pos\", \"chests\");");
code("trQuestVarSet(\"posX\", trQuestVarGet(\"posX\") - 2);");
code("trQuestVarSet(\"posZ\", trQuestVarGet(\"posZ\") - 2);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"posX\"),0,trQuestVarGet(\"posZ\"),225,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(kbGetProtoUnitName(relicProto(1*trQuestVarGet(\"keyType\"))));");
code("ySetVar(\"chests\", \"indicator\", trQuestVarGet(\"next\"));");

code("trQuestVarSet(\"keyType\", 1 + trQuestVarGet(\"keyType\"));");
code("}");
code("case CHEST_STATUES:");
code("{");
code("trVectorSetUnitPos(\"pos\", \"chests\");");
code("trQuestVarSetFromRand(\"rand\", 4, 7, true);");
code("trQuestVarSet(\"angle\", 0.785398);");
code("trQuestVarSet(\"angleMod\", 6.283185 / trQuestVarGet(\"rand\"));");
code("for(x=0; < trQuestVarGet(\"rand\")) {");
code("trVectorSetFromAngle(\"dir\", trQuestVarGet(\"angle\"));");
code("trQuestVarSet(\"statueX\", trQuestVarGet(\"posX\") - 10.0 * trQuestVarGet(\"dirX\"));");
code("trQuestVarSet(\"statueZ\", trQuestVarGet(\"posZ\") - 10.0 * trQuestVarGet(\"dirZ\"));");


code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,1,0,1,180,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitConvert(ENEMY_PLAYER);");
code("trUnitTeleport(trQuestVarGet(\"statueX\"),0,trQuestVarGet(\"statueZ\"));");
code("trMutateSelected(kbGetProtoUnitID(\"Monument 2\"));");
code("trSetUnitOrientation(trVectorQuestVarGet(\"dir\"),vector(0,1,0),true);");

code("trQuestVarSet(\"index\", yAddToDatabase(\"statuesIn\"+room, \"next\"));");
code("yAddUpdateVar(\"statuesIn\"+room, \"angle\", trQuestVarGet(\"angle\"));");
code("yAddUpdateVar(\"statuesIn\"+room, \"posX\", trQuestVarGet(\"statueX\"));");
code("yAddUpdateVar(\"statuesIn\"+room, \"posZ\", trQuestVarGet(\"statueZ\"));");
code("yAddToDatabase(\"statuesReady\", \"index\");");

code("trQuestVarSetFromRand(\"jump\", 1, 2, true);");
code("for (y=trQuestVarGet(\"jump\"); >0) {");
code("yDatabaseNext(\"statuesReady\");");
code("}");

code("trQuestVarSet(\"angle\", fModulo(6.283185, trQuestVarGet(\"angle\") + trQuestVarGet(\"angleMod\")));");
code("}");

code("for(x=trQuestVarGet(\"rand\"); >0) {");
code("yDatabaseNext(\"statuesReady\");");
code("trQuestVarSet(\"start\", yGetPointer(\"statuesReady\"));");
code("trQuestVarSetFromRand(\"jump\", 1, (trQuestVarGet(\"rand\") - 1) / 2, true);");
code("for(y=trQuestVarGet(\"jump\"); >0) {");
code("yDatabaseNext(\"statuesReady\");");
code("}");
code("connectStatues(yGetUnitAtIndex(\"statuesReady\", 1*trQuestVarGet(\"start\")), 1*trQuestVarGet(\"statuesReady\"), room);");
code("ySetPointer(\"statuesReady\", 1*trQuestVarGet(\"start\"));");
code("}");
code("trQuestVarSet(\"correctStatuesIn\"+room, trQuestVarGet(\"rand\"));");
code("for(x=trQuestVarGet(\"rand\"); >1) {");
code("yDatabaseNext(\"statuesIn\"+room);");
code("trQuestVarSetFromRand(\"amt\",1,3,true);");
code("for(y=trQuestVarGet(\"amt\"); >0) {");
code("turnStatue(room, 0, true, true);");
code("}");
code("}");
code("yClearDatabase(\"statuesReady\");");
code("}");
code("case CHEST_ENCOUNTER:");
code("{");
code("ySetVar(\"chests\", \"enemiesBegin\", trGetNextUnitScenarioNameNumber());");
code("pName = trStringQuestVarGet(\"enemyProto\"+1*trQuestVarGet(\"enemyProtoCount\"));");
code("trQuestVarSetFromRand(\"count\", 1, 6, true);");
code("for(j=trQuestVarGet(\"count\"); >0) {");
code("trQuestVarSetFromRand(\"x0\", 2*x0, 2*x1, true);");
code("trQuestVarSetFromRand(\"z0\", 2*z0, 2*z1, true);");
code("trQuestVarSetFromRand(\"heading\", 1, 360, true);");
code("trQuestVarSet(\"posX\", trQuestVarGet(\"x0\"));");
code("trQuestVarSet(\"posZ\", trQuestVarGet(\"z0\"));");
code("vectorToGrid(\"pos\", \"pos\");");
code("if (terrainIsType(\"pos\", TERRAIN_WALL, TERRAIN_SUB_WALL) == false) {");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",pName,1,trQuestVarGet(\"x0\"),0,trQuestVarGet(\"z0\"),trQuestVarGet(\"heading\"),true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(ENEMY_PLAYER);");
code("yAddToDatabase(\"enemiesIncoming\", \"next\");");
code("}");
code("}");
code("x0 = trQuestVarGet(\"room\"+room+\"bottom2x\");");
code("z0 = trQuestVarGet(\"room\"+room+\"bottom2z\");");
code("x1 = trQuestVarGet(\"room\"+room+\"top2x\");");
code("z1 = trQuestVarGet(\"room\"+room+\"top2z\");");
code("trQuestVarSetFromRand(\"count\", 1, 6, true);");
code("for(j=trQuestVarGet(\"count\"); >0) {");
code("trQuestVarSetFromRand(\"x0\", 2*x0, 2*x1, true);");
code("trQuestVarSetFromRand(\"z0\", 2*z0, 2*z1, true);");
code("trQuestVarSetFromRand(\"heading\", 1, 360, true);");
code("trQuestVarSet(\"posX\", trQuestVarGet(\"x0\"));");
code("trQuestVarSet(\"posZ\", trQuestVarGet(\"z0\"));");
code("vectorToGrid(\"pos\", \"pos\");");
code("if (terrainIsType(\"pos\", TERRAIN_WALL, TERRAIN_SUB_WALL) == false) {");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",pName,1,trQuestVarGet(\"x0\"),0,trQuestVarGet(\"z0\"),trQuestVarGet(\"heading\"),true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(ENEMY_PLAYER);");
code("yAddToDatabase(\"enemiesIncoming\", \"next\");");
code("}");
code("}");
code("ySetVar(\"chests\", \"enemiesEnd\", trGetNextUnitScenarioNameNumber());");
code("}");
code("}");
code("}");

code("if (trQuestVarGet(\"mapType\") == MAP_OPEN) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossEntranceSymbol\", true);");
code("trUnitChangeProtoUnit(kbGetProtoUnitName(relicProto(1*trQuestVarGet(\"keyType\"))));");

code("i = trQuestVarGet(\"bossKeyRoom\");");
code("z = i / 4;");
code("x = i - z * 4;");
code("trQuestVarSet(\"bossKey\", trGetNextUnitScenarioNameNumber());");
code("spawnRelicSpecific(x * 70 + 40, z * 70 + 40, 1*trQuestVarGet(\"keyType\"));");
code("trQuestVarSet(\"keyType\", 1 + trQuestVarGet(\"keyType\"));");
code("}");

code("if (trQuestVarGet(\"pestilenceStart\") > 0) {");
code("for(x=trQuestVarGet(\"pestilenceStart\"); < trGetNextUnitScenarioNameNumber()) {");
code("if (kbGetUnitBaseTypeID(kbGetBlockID(\"\"+x)) == kbGetProtoUnitID(\"Pestilence SFX1\")) {");
code("trQuestVarSet(\"next\", x);");
code("trVectorSetUnitPos(\"pos\", \"next\");");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"posx\"),0,trQuestVarGet(\"posz\"),0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(ENEMY_PLAYER);");
code("trUnitChangeProtoUnit(\"Victory Marker\");");
code("}");
code("}");
code("}");

code("if ((trQuestVarGet(\"nickQuestSpawn\") == 1) &&");
code("(trQuestVarGet(\"stage\") < 6)) {");
code("trQuestVarSetFromRand(\"rand\", 1, yGetDatabaseCount(\"basicRooms\"));");
code("for(x=trQuestVarGet(\"rand\"); >0) {");
code("yDatabaseNext(\"basicRooms\");");
code("}");
code("trVectorQuestVarSet(\"pos\", randomNearEdgeOfRoom(1*trQuestVarGet(\"basicRooms\")));");
code("trQuestVarSet(\"nickonhawkRelicObject\", trGetNextUnitScenarioNameNumber());");
code("spawnRelicSpecific(trQuestVarGet(\"posx\"),trQuestVarGet(\"posz\"), RELIC_NICKONHAWK);");
code("debugLog(\"Nickonhawk room is \" + 1*trQuestVarGet(\"basicRooms\"));");
code("}");

code("trUnblockAllSounds();");
code("if (trQuestVarGet(\"newPlayers\") > 0) {");
code("xsEnableRule(\"choose_stage_03\");");
code("trSoundPlayFN(\"default\",\"1\",-1,");
code("\"Zenophobia: Looks like we have some new faces today!\", \"icons\infantry g hoplite icon 64\");");
code("} else if (trQuestVarGet(\"yeebBossFight\") > 0) {");
code("xsEnableRule(\"yeeb_boss_message\");");
code("trQuestVarSet(\"yeebStep\", 0);");
code("trPaintTerrain(30, 5, 32, 30, TERRAIN_WALL, TERRAIN_SUB_WALL, false);");
code("trPaintTerrain(5, 30, 30, 32, TERRAIN_WALL, TERRAIN_SUB_WALL, false);");
code("trChangeTerrainHeight(31, 5, 32, 32, wallHeight, false);");
code("trChangeTerrainHeight(5, 31, 32, 32, wallHeight, false);");
code("} else {");
code("xsEnableRule(\"gameplay_start\");");
code("trUIFadeToColor(0,0,0,1000,0,false);");
code("trLetterBox(false);");
code("}");

code("trPaintTerrain(0,0,5,5,0,70,true);");
code("trPaintTerrain(0,0,5,5,TERRAIN_WALL,TERRAIN_SUB_WALL,false);");
code("}");
code("}");

code("rule choose_stage_03");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 5) {");
code("trSoundPlayFN(\"default\",\"1\",-1,");
code("\"Zenophobia: I'll let you have the starter characters for free.\", \"icons\infantry g hoplite icon 64\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"choice1\", true);");
code("trUnitSetStance(\"Passive\");");
code("trUnitHighlight(15.0, true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"choice2\", true);");
code("trUnitSetStance(\"Passive\");");
code("trUnitHighlight(15.0, true);");
code("xsEnableRule(\"choose_stage_04\");");
code("xsDisableSelf();");
code("}");
code("}");

code("rule choose_stage_04");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 6) {");
code("trUIFadeToColor(0,0,0,1000,0,false);");
code("trLetterBox(false);");
code("xsEnableRule(\"gameplay_start\");");
code("xsDisableSelf();");
code("}");
code("}");

code("rule zenos_paradox_build_01");
code("inactive");
code("highFrequency");
code("{");
code("if (trQuestVarGet(\"spyfound\") == trQuestVarGet(\"spyfind\")) {");
code("for(x=yGetDatabaseCount(\"timeshiftHawks\"); >0) {");
code("yDatabaseNext(\"timeshiftHawks\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Hawk\"));");
code("trSetSelectedScale(0,0,0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"timeshiftHawks\", \"sfx\"), true);");
code("trUnitSetAnimationPath(\"0,1,1,0,0,0,0\");");
code("}");
code("xsDisableSelf();");

code("int jump = yGetDatabaseCount(\"enemiesIncoming\") / 20;");
code("for(x=20; >0) {");
code("for(i=jump; >0) {");
code("yDatabaseNext(\"enemiesIncoming\");");
code("}");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,1,0,1,0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitChangeProtoUnit(\"Relic\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"enemiesIncoming\"));");
code("yAddToDatabase(\"zenoRelicsIncoming\", \"next\");");
code("yAddUpdateVar(\"zenoRelicsIncoming\", \"type\", RELIC_MATH_PROBLEM + x);");
code("}");
code("}");
code("}");

code("rule rebuild_map");
code("inactive");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("trQuestVarSet(\"play\", 0);");
code("trQuestVarSet(\"yeebBossFight\", 0);");
code("for(p=1; < ENEMY_PLAYER) {");
code("trQuestVarSet(\"p\"+p+\"unit\", 0);");
code("yClearDatabase(\"p\"+p+\"characters\");");
code("yClearDatabase(\"p\"+p+\"relics\");");
code("yClearDatabase(\"p\"+p+\"warehouse\");");
code("}");
code("yClearDatabase(\"freeRelics\");");
code("yClearDatabase(\"enemies\");");
code("yClearDatabase(\"enemiesIncoming\");");
code("yClearDatabase(\"ambushRooms\");");
code("yClearDatabase(\"playerCharacters\");");
code("yClearDatabase(\"playerUnits\");");
code("yClearDatabase(\"chests\");");
code("yClearDatabase(\"frontier\");");
code("yClearDatabase(\"visited\");");
code("for(i = trQuestVarGet(\"eyecandyStart\"); < trGetNextUnitScenarioNameNumber()) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+i, true);");
code("trUnitDestroy();");
code("}");
code("int x = 0;");
code("int z = 0;");
code("for(i = 0; <16) {");
code("trQuestVarSet(\"tile\"+i, 0);");
code("trQuestVarSet(\"room\"+i, 0);");
code("z = i / 4;");
code("x = i - z * 4;");
code("for(j=0; <4) {");
code("trQuestVarSet(\"edge\"+edgeName(i, x + trQuestVarGet(\"rotX\"+j) + 4 * (z + trQuestVarGet(\"rotZ\"+j))), EDGE_NOT_FOUND);");
code("}");
code("}");
code("xsEnableRule(\"choose_stage_02\");");
code("}");
code("void removeMoonblade(int p = 0) {");
code("removePlayerSpecific(p);");
code("yRemoveUpdateVar(\"p\"+p+\"characters\", \"crescentCount\");");
code("yRemoveUpdateVar(\"p\"+p+\"characters\", \"crescentDamage\");");
code("yRemoveUpdateVar(\"p\"+p+\"characters\", \"crescentTimeout\");");
code("yRemoveUpdateVar(\"p\"+p+\"characters\", \"crescentSFX\");");
code("yRemoveUpdateVar(\"p\"+p+\"characters\", \"crescentOn\");");
code("}");

code("void moonbladeAlways(int eventID = -1) {");
code("int p = eventID - 12 * MOONBLADE;");
code("int id = 0;");
code("int hit = 0;");
code("int target = 0;");
code("int index = yGetPointer(\"enemies\");");
code("float angle = 0;");
code("float posX = 0;");
code("float posZ = 0;");
code("int old = xsGetContextPlayer();");
code("xsSetContextPlayer(p);");
code("if (yGetDatabaseCount(\"p\"+p+\"characters\") > 0) {");
code("id = yDatabaseNext(\"p\"+p+\"characters\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeMoonblade(p);");
code("} else {");
code("hit = CheckOnHit(p, id);");
code("if (hit > ON_HIT_ATTACKING) {");
code("if (yGetVar(\"p\"+p+\"characters\", \"crescentCount\") > 0) {");
code("ySetVar(\"p\"+p+\"characters\", \"crescentCount\", yGetVar(\"p\"+p+\"characters\", \"crescentCount\") - 1);");
code("ySetVar(\"p\"+p+\"characters\", \"crescentTimeout\", trTimeMS() + 5000);");
code("target = yGetPointer(\"enemies\");");
code("if (ySetPointer(\"enemies\", 1*yGetVar(\"p\"+p+\"characters\", \"attackTargetIndex\"))) {");
code("stunUnit(\"enemies\", 2.0, p);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"enemies\");");
code("damageEnemy(p, 50*trQuestVarGet(\"p\"+p+\"spellDamage\"), false);");
code("trVectorSetUnitPos(\"pos\", \"enemies\");");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"posx\"),0,trQuestVarGet(\"posz\"),0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Lightning Sparks Ground\");");
code("gainFavor(p, 3);");
code("}");
code("}");
code("angle = trQuestVarGet(\"p\"+p+\"health\") * trQuestVarGet(\"p\"+p+\"spellDamage\") * 0.01;");
code("for(x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("yDatabaseNext(\"playerUnits\", true);");
code("healUnit(p, angle);");
code("}");
code("if (hit == ON_HIT_SPECIAL) {");
code("if (trCurrentPlayer() == p) {");
code("trSoundPlayFN(\"mythcreate.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("trVectorSetUnitPos(\"pos\", \"p\"+p+\"characters\");");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("yAddToDatabase(\"p\"+p+\"wolves\", \"next\");");
code("spawnPlayerUnit(p, kbGetProtoUnitID(\"Wolf\"), \"pos\", calculateDecay(p, 5.0));");
code("}");
code("}");
code("if ((yGetVar(\"p\"+p+\"characters\", \"crescentCount\") > 0) &&");
code("(trTimeMS() > yGetVar(\"p\"+p+\"characters\", \"crescentTimeout\"))) {");
code("ySetVar(\"p\"+p+\"characters\", \"crescentTimeout\", trTimeMS() + 5000);");
code("ySetVar(\"p\"+p+\"characters\", \"crescentCount\", yGetVar(\"p\"+p+\"characters\", \"crescentCount\") - 1);");
code("}");

code("if ((yGetVar(\"p\"+p+\"characters\", \"crescentOn\") == 1) && (yGetVar(\"p\"+p+\"characters\", \"crescentCount\") == 0)) {");
code("ySetVar(\"p\"+p+\"characters\", \"crescentOn\", 0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"p\"+p+\"characters\", \"crescentSFX\"), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");
code("}");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"wellStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"wellStatus\", ABILITY_OFF);");
code("trSoundPlayFN(\"eclipsebirth.wav\",\"1\",-1,\"\",\"\");");
code("vectorSnapToGrid(\"p\"+p+\"wellPos\");");
code("posX = trQuestVarGet(\"p\"+p+\"wellPosx\");");
code("posZ = trQuestVarGet(\"p\"+p+\"wellPosz\");");
code("yAddToDatabase(\"p\"+p+\"moonbeams\", \"next\");");
code("yAddUpdateVar(\"p\"+p+\"moonbeams\", \"radius\", xsPow(trQuestVarGet(\"moonbeamRadius\")*trQuestVarGet(\"p\"+p+\"spellRange\"),2));");
code("yAddUpdateVar(\"p\"+p+\"moonbeams\", \"damage\", trQuestVarGet(\"moonbeamDamage\") * trQuestVarGet(\"p\"+p+\"spellDamage\"));");
code("yAddUpdateVar(\"p\"+p+\"moonbeams\", \"damageBoost\",");
code("trQuestVarGet(\"moonbeamDamageBoost\") * trQuestVarGet(\"p\"+p+\"spellDamage\"));");
code("yAddUpdateVar(\"p\"+p+\"moonbeams\", \"timeout\",");
code("trTimeMS() + 1000 * trQuestVarGet(\"moonbeamDuration\") * trQuestVarGet(\"p\"+p+\"spellDuration\"));");
code("yAddUpdateVar(\"p\"+p+\"moonbeams\", \"start\", trGetNextUnitScenarioNameNumber());");
code("yAddUpdateVar(\"p\"+p+\"moonbeams\", \"posx\", posX);");
code("yAddUpdateVar(\"p\"+p+\"moonbeams\", \"posz\", posZ);");
code("yAddUpdateVar(\"p\"+p+\"moonbeams\", \"next\", trTimeMS());");
code("for(x=0; <16) {");
code("trVectorSetFromAngle(\"dir\", angle);");
code("angle = angle + 6.283185 / 16;");
code("trQuestVarSet(\"dirx\",");
code("trQuestVarGet(\"dirx\") * trQuestVarGet(\"moonbeamRadius\") * trQuestVarGet(\"p\"+p+\"spellRange\") + posX);");
code("trQuestVarSet(\"dirz\",");
code("trQuestVarGet(\"dirz\") * trQuestVarGet(\"moonbeamRadius\") * trQuestVarGet(\"p\"+p+\"spellRange\") + posZ);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,trQuestVarGet(\"dirx\"),0,trQuestVarGet(\"dirz\"),0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Healing SFX\"));");
code("}");
code("yAddUpdateVar(\"p\"+p+\"moonbeams\", \"end\", trGetNextUnitScenarioNameNumber());");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"lureStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"lureStatus\", ABILITY_OFF);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"lureObject\", true);");
code("trUnitDestroy();");
code("trQuestVarSet(\"p\"+p+\"crescentStarted\", 1);");
code("trSoundPlayFN(\"olympustemplesfx.wav\",\"1\",-1,\"\",\"\");");
code("for(x=yGetDatabaseCount(\"p\"+p+\"Characters\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"Characters\");");
code("ySetVar(\"p\"+p+\"Characters\", \"crescentCount\", yGetVar(\"p\"+p+\"Characters\", \"crescentCount\") + 3);");
code("ySetVar(\"p\"+p+\"Characters\", \"crescentDamage\", trQuestVarGet(\"crescentDamage\") * trQuestVarGet(\"p\"+p+\"spellDamage\"));");
code("ySetVar(\"p\"+p+\"Characters\", \"crescentTimeout\", trTimeMS() + 5000);");
code("ySetVar(\"p\"+p+\"characters\", \"crescentOn\", 1);");
code("if ((yGetVar(\"p\"+p+\"Characters\", \"crescentSFX\") == 0) ||");
code("(kbGetBlockID(\"\"+1*yGetVar(\"p\"+p+\"characters\", \"crescentSFX\")) == -1)) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"characters\", true);");
code("spyEffect(1*trQuestVarGet(\"p\"+p+\"Characters\"),");
code("kbGetProtoUnitID(\"Rocket\"), yGetVarName(\"p\"+p+\"characters\", \"crescentSFX\"));");
code("}");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"rainStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"rainStatus\", ABILITY_OFF);");
code("trQuestVarSet(\"p\"+p+\"protection\", 1 - trQuestVarGet(\"p\"+p+\"protection\"));");
code("if (trQuestVarGet(\"p\"+p+\"protection\") == 1) {");
code("if (trPlayerResourceCount(p, \"favor\") < 1) {");
code("if (trCurrentPlayer() == p) {");
code("trSoundPlayFN(\"cantdothat.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("trQuestVarSet(\"p\"+p+\"protection\", 0);");
code("} else {");
code("trQuestVarSet(\"protectionCount\", 1 + trQuestVarGet(\"protectionCount\"));");
code("trQuestVarSet(\"p\"+p+\"protectionNext\",");
code("trTimeMS() + trQuestVarGet(\"protectionDelay\") / trQuestVarGet(\"p\"+p+\"ultimateCost\"));");
code("trSoundPlayFN(\"bronzebirth.wav\",\"1\",-1,\"\",\"\");");
code("for(x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("id = yDatabaseNext(\"playerUnits\", true);");
code("xsSetContextPlayer(1*yGetVar(\"playerUnits\", \"player\"));");
code("ySetVar(\"playerUnits\", \"currentHealth\", kbUnitGetCurrentHitpoints(id));");
code("}");
code("}");
code("} else {");
code("trQuestVarSet(\"protectionCount\", trQuestVarGet(\"protectionCount\") - 1);");
code("if (trCurrentPlayer() == p) {");
code("trSoundPlayFN(\"godpowerfailed.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("}");

code("if ((trQuestVarGet(\"p\"+p+\"crescentStarted\") == 1) && (trQuestVarGet(\"spyFind\") == trQuestVarGet(\"spyFound\"))) {");
code("for(x=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"characters\");");
code("if (yGetVar(\"p\"+p+\"characters\", \"crescentSFX\") < 0) {");
code("ySetVar(\"p\"+p+\"characters\", \"crescentSFX\", trQuestVarGet(\"spyEye\"+(0-yGetVar(\"p\"+p+\"characters\", \"crescentSFX\"))));");
code("}");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"p\"+p+\"characters\", \"crescentSFX\"), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Outpost\"));");
code("trSetSelectedScale(0.0,0.0,0.0);");
code("}");
code("trQuestVarSet(\"p\"+p+\"crescentStarted\", 0);");
code("}");

code("if (yGetDatabaseCount(\"p\"+p+\"moonbeams\") > 0) {");
code("target = 0;");
code("yDatabaseNext(\"p\"+p+\"moonbeams\");");
code("if (trTimeMS() > yGetVar(\"p\"+p+\"moonbeams\", \"next\")) {");
code("ySetVar(\"p\"+p+\"moonbeams\", \"next\", trTimeMS() + 500);");
code("trQuestVarSet(\"centerX\", yGetVar(\"p\"+p+\"moonbeams\", \"posX\"));");
code("trQuestVarSet(\"centerZ\", yGetVar(\"p\"+p+\"moonbeams\", \"posZ\"));");
code("angle = yGetVar(\"p\"+p+\"moonbeams\", \"radius\");");
code("for(x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("yDatabaseNext(\"playerUnits\");");
code("if (zDistanceToVectorSquared(\"playerUnits\", \"center\") < angle) {");
code("target = target + 1;");
code("}");
code("}");
code("posX = yGetVar(\"p\"+p+\"moonbeams\", \"damage\") + target * yGetVar(\"p\"+p+\"moonbeams\", \"damageBoost\");");
code("posX = posX * 0.5;");
code("for(x=yGetDatabaseCount(\"enemies\"); >0) {");
code("id = yDatabaseNext(\"enemies\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (zDistanceToVectorSquared(\"enemies\", \"center\") < angle) {");
code("silenceEnemy(p, 1.0);");
code("damageEnemy(p, posX);");
code("}");
code("}");
code("if (trTimeMS() > yGetVar(\"p\"+p+\"moonbeams\", \"timeout\")) {");
code("for(x=yGetVar(\"p\"+p+\"moonbeams\", \"start\"); < yGetVar(\"p\"+p+\"moonbeams\", \"end\")) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+x, true);");
code("trUnitDestroy();");
code("}");
code("yRemoveFromDatabase(\"p\"+p+\"moonbeams\");");
code("yRemoveUpdateVar(\"p\"+p+\"moonbeams\", \"radius\");");
code("yRemoveUpdateVar(\"p\"+p+\"moonbeams\", \"damage\");");
code("yRemoveUpdateVar(\"p\"+p+\"moonbeams\", \"damageBoost\");");
code("yRemoveUpdateVar(\"p\"+p+\"moonbeams\", \"timeout\");");
code("yRemoveUpdateVar(\"p\"+p+\"moonbeams\", \"posX\");");
code("yRemoveUpdateVar(\"p\"+p+\"moonbeams\", \"posZ\");");
code("yRemoveUpdateVar(\"p\"+p+\"moonbeams\", \"next\");");
code("yRemoveUpdateVar(\"p\"+p+\"moonbeams\", \"start\");");
code("yRemoveUpdateVar(\"p\"+p+\"moonbeams\", \"end\");");
code("}");
code("}");
code("}");

code("if (yGetDatabaseCount(\"p\"+p+\"wolves\") > 0) {");
code("yDatabaseNext(\"p\"+p+\"wolves\", true);");
code("if (trUnitAlive() == false) {");
code("yAddToDatabase(\"decayingWolves\", \"p\"+p+\"wolves\");");
code("yAddUpdateVar(\"decayingWolves\", \"timeout\", 3000 + trTimeMS());");
code("yRemoveFromDatabase(\"p\"+p+\"wolves\");");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"protection\") == 1) {");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"protectionNext\")) {");
code("trQuestVarSet(\"p\"+p+\"protectionNext\",");
code("trQuestVarGet(\"p\"+p+\"protectionNext\") + trQuestVarGet(\"protectionDelay\") / trQuestVarGet(\"p\"+p+\"ultimateCost\"));");
code("gainFavor(p, 0 - 1);");
code("if (trPlayerResourceCount(p, \"favor\") < 1) {");
code("trQuestVarSet(\"p\"+p+\"protection\", 0);");
code("trQuestVarSet(\"protectionCount\", trQuestVarGet(\"protectionCount\") - 1);");
code("trSoundPlayFN(\"godpowerfailed.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("}");
code("ySetPointer(\"enemies\", index);");
code("poisonKillerBonus(p);");
code("xsSetContextPlayer(old);");
code("}");

code("void chooseMoonblade(int eventID = -1) {");
code("int p = eventID - 1000 - 12 * MOONBLADE;");
code("if (trCurrentPlayer() == p) {");
code("map(\"q\", \"game\", \"uiSetSpecialPower(133) uiSpecialPowerAtPointer\");");
code("wellName = \"(Q) Moonbeam\";");
code("wellIsUltimate = false;");
code("map(\"e\", \"game\", \"uiSetSpecialPower(156) uiSpecialPowerAtPointer\");");
code("rainName = \"(E) Protection\";");
code("rainIsUltimate = false;");
code("map(\"w\", \"game\", \"uiSetSpecialPower(227) uiSpecialPowerAtPointer\");");
code("lureName = \"(W) Crescent Strikes\";");
code("lureIsUltimate = false;");
code("}");
code("trQuestVarSet(\"p\"+p+\"wellCooldown\", trQuestVarGet(\"moonbeamCooldown\"));");
code("trQuestVarSet(\"p\"+p+\"wellCost\", 0);");
code("trQuestVarSet(\"p\"+p+\"lureCooldown\", trQuestVarGet(\"crescentCooldown\"));");
code("trQuestVarSet(\"p\"+p+\"lureCost\", 0);");
code("trQuestVarSet(\"p\"+p+\"rainCooldown\", 1);");
code("trQuestVarSet(\"p\"+p+\"rainCost\", 0);");
code("}");

code("void moonbladeModify(int eventID = -1) {");
code("int p = eventID - 5000 - 12 * MOONBLADE;");
code("zSetProtoUnitStat(\"Wolf\", p, 0, 0.2 * trQuestVarGet(\"p\"+p+\"health\"));");
code("zSetProtoUnitStat(\"Wolf\", p, 27, 0.2 * trQuestVarGet(\"p\"+p+\"baseAttack\"));");
code("}");

code("rule moonblade_init");
code("active");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("for(p=1; < ENEMY_PLAYER) {");
code("trEventSetHandler(12 * MOONBLADE + p, \"moonbladeAlways\");");
code("trEventSetHandler(1000 + 12 * MOONBLADE + p, \"chooseMoonblade\");");
code("trEventSetHandler(5000 + 12 * MOONBLADE + p, \"moonbladeModify\");");
code("}");
code("trQuestVarSet(\"moonbeamCooldown\", 18);");
code("trQuestVarSet(\"moonbeamDamage\", 20);");
code("trQuestVarSet(\"moonbeamDamageBoost\", 10);");
code("trQuestVarSet(\"moonbeamDuration\", 6);");
code("trQuestVarSet(\"moonbeamRadius\", 6);");

code("trQuestVarSet(\"crescentCooldown\", 12);");
code("trQuestVarSet(\"crescentCount\", 3);");
code("trQuestVarSet(\"crescentDamage\", 50);");

code("trQuestVarSet(\"protectionCost\", 12);");
code("trQuestVarSet(\"protectionDelay\", 1000.0 / trQuestVarGet(\"protectionCost\"));");
code("}");
code("void removeSunbow(int p = 0) {");
code("removePlayerSpecific(p);");
code("yRemoveUpdateVar(\"p\"+p+\"characters\", \"searingSFX\");");
code("}");

code("void sunbowAlways(int eventID = -1) {");
code("int p = eventID - 12 * SUNBOW;");
code("int id = 0;");
code("int hit = 0;");
code("int target = 0;");
code("int index = yGetPointer(\"enemies\");");
code("float amt = 0;");
code("float dist = 0;");
code("float posX = 0;");
code("float posZ = 0;");
code("int old = xsGetContextPlayer();");
code("xsSetContextPlayer(p);");
code("if (yGetDatabaseCount(\"p\"+p+\"characters\") > 0) {");
code("id = yDatabaseNext(\"p\"+p+\"characters\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeSunbow(p);");
code("} else {");
code("hit = CheckOnHit(p, id);");
code("if (hit == ON_HIT_NORMAL) {");
code("if (trQuestVarGet(\"p\"+p+\"healingRays\") == 1) {");
code("hit = 0;");
code("target = trGetUnitScenarioNameNumber(1*yGetVar(\"p\"+p+\"characters\", \"attackTarget\"));");
code("trVectorQuestVarSet(\"end\", kbGetBlockPosition(\"\"+target));");
code("trVectorSetUnitPos(\"start\", \"p\"+p+\"characters\");");
code("trVectorQuestVarSet(\"dir\", zGetUnitVector(\"start\", \"end\"));");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,trQuestVarGet(\"startx\"),0,trQuestVarGet(\"startz\"),0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Petosuchus Projectile\"));");
code("trUnitHighlight(1.0, false);");
code("trSetUnitOrientation(xsVectorSet(0.0 - trQuestVarGet(\"dirx\"),0, 0.0 - trQuestVarGet(\"dirz\")), vector(0,1,0), true);");
code("yAddToDatabase(\"playerLasers\", \"next\");");
code("yAddUpdateVar(\"playerLasers\", \"timeout\", trTimeMS() + 500);");
code("yAddUpdateVar(\"playerLasers\", \"range\", trQuestVarGet(\"p\"+p+\"range\") * 1.4);");
code("amt = trQuestVarGet(\"healingRaysPower\") * trQuestVarGet(\"p\"+p+\"spellDamage\");");
code("for(x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("if (yDatabaseNext(\"playerUnits\", true) == -1 || trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else {");
code("dist = zDistanceToVector(\"playerUnits\", \"start\");");
code("if (dist < trQuestVarGet(\"p\"+p+\"range\") + 3) {");
code("trQuestVarSet(\"hitboxX\", trQuestVarGet(\"startX\") + dist * trQuestVarGet(\"dirx\"));");
code("trQuestVarSet(\"hitboxZ\", trQuestVarGet(\"startZ\") + dist * trQuestVarGet(\"dirz\"));");
code("if (zDistanceToVectorSquared(\"playerUnits\", \"hitbox\") < 9) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"playerUnits\", true);");
code("healUnit(p, amt);");
code("hit = hit + 1;");
code("}");
code("}");
code("}");
code("}");
code("if (trQuestVarGet(\"p\"+p+\"searing\") == 1) {");
code("amt = amt * trQuestVarGet(\"p\"+p+\"healBoost\");");
code("for(x=yGetDatabaseCount(\"enemies\"); >0) {");
code("if (yDatabaseNext(\"enemies\", true) == -1 || trUnitAlive() == false) {");
code("removeEnemy();");
code("} else {");
code("dist = zDistanceToVector(\"enemies\", \"start\");");
code("if (dist < trQuestVarGet(\"p\"+p+\"range\") + 3) {");
code("trQuestVarSet(\"hitboxX\", trQuestVarGet(\"startX\") + dist * trQuestVarGet(\"dirx\"));");
code("trQuestVarSet(\"hitboxZ\", trQuestVarGet(\"startZ\") + dist * trQuestVarGet(\"dirz\"));");
code("if (zDistanceToVectorSquared(\"enemies\", \"hitbox\") < 9) {");
code("hit = hit + 1;");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"enemies\", true);");
code("damageEnemy(p, amt, true);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("gainFavor(p, hit);");
code("}");
code("}");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"wellStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"wellStatus\", ABILITY_OFF);");
code("trSoundPlayFN(\"restorationbirth.wav\",\"1\",-1,\"\",\"\");");
code("vectorSnapToGrid(\"p\"+p+\"wellPos\");");
code("posX = trQuestVarGet(\"p\"+p+\"wellPosx\");");
code("posZ = trQuestVarGet(\"p\"+p+\"wellPosz\");");
code("yAddToDatabase(\"p\"+p+\"sunlights\", \"next\");");
code("yAddUpdateVar(\"p\"+p+\"sunlights\", \"radius\", xsPow(trQuestVarGet(\"sunlightRadius\")*trQuestVarGet(\"p\"+p+\"spellRange\"),2));");
code("yAddUpdateVar(\"p\"+p+\"sunlights\", \"power\", trQuestVarGet(\"sunlightPower\") * trQuestVarGet(\"p\"+p+\"spellDamage\"));");
code("yAddUpdateVar(\"p\"+p+\"sunlights\", \"timeout\",");
code("trTimeMS() + 1000 * trQuestVarGet(\"sunlightDuration\") * trQuestVarGet(\"p\"+p+\"spellDuration\"));");
code("yAddUpdateVar(\"p\"+p+\"sunlights\", \"start\", trGetNextUnitScenarioNameNumber());");
code("yAddUpdateVar(\"p\"+p+\"sunlights\", \"posx\", posX);");
code("yAddUpdateVar(\"p\"+p+\"sunlights\", \"posz\", posZ);");
code("yAddUpdateVar(\"p\"+p+\"sunlights\", \"next\", trTimeMS());");
code("for(x=0; <16) {");
code("trVectorSetFromAngle(\"dir\", amt);");
code("amt = amt + 6.283185 / 16;");
code("trQuestVarSet(\"dirx\",");
code("trQuestVarGet(\"dirx\") * trQuestVarGet(\"sunlightRadius\") * trQuestVarGet(\"p\"+p+\"spellRange\") + posX);");
code("trQuestVarSet(\"dirz\",");
code("trQuestVarGet(\"dirz\") * trQuestVarGet(\"sunlightRadius\") * trQuestVarGet(\"p\"+p+\"spellRange\") + posZ);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,trQuestVarGet(\"dirx\"),0,trQuestVarGet(\"dirz\"),0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitChangeProtoUnit(\"Relic\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Hero Birth\"));");
code("}");
code("yAddUpdateVar(\"p\"+p+\"sunlights\", \"end\", trGetNextUnitScenarioNameNumber());");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"lureStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"lureStatus\", ABILITY_OFF);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"lureObject\", true);");
code("trUnitDestroy();");
code("trQuestVarSet(\"p\"+p+\"healingrays\", 1);");
code("trQuestVarSet(\"p\"+p+\"healingRaysTimeout\",");
code("trTimeMS() + 1000 * trQuestVarGet(\"healingRaysDuration\") * trQuestVarGet(\"p\"+p+\"spellDuration\"));");
code("trSoundPlayFN(\"skypassagein.wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSet(\"p\"+p+\"nextDelay\",");
code("trQuestVarGet(\"class\"+SUNBOW+\"nextDelay\") * 2.0 / (1.0 + trQuestVarGet(\"p\"+p+\"projectiles\")));");
code("}");

code("if ((trQuestVarGet(\"p\"+p+\"healingRays\") == 1) && (trTimeMS() > trQuestVarGet(\"p\"+p+\"healingRaysTimeout\"))) {");
code("trQuestVarSet(\"p\"+p+\"healingRays\", 0);");
code("trSoundPlayFN(\"godpowerfailed.wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSet(\"p\"+p+\"nextDelay\", trQuestVarGet(\"class\"+SUNBOW+\"nextDelay\"));");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"rainStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"rainStatus\", ABILITY_OFF);");
code("trQuestVarSet(\"p\"+p+\"searingStarted\", 1);");
code("trQuestVarSet(\"p\"+p+\"searing\", 1 - trQuestVarGet(\"p\"+p+\"searing\"));");
code("if (trQuestVarGet(\"p\"+p+\"searing\") == 1) {");
code("if (trPlayerResourceCount(p, \"favor\") < 1) {");
code("if (trCurrentPlayer() == p) {");
code("trSoundPlayFN(\"cantdothat.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("trQuestVarSet(\"p\"+p+\"searing\", 0);");
code("} else {");
code("trQuestVarSet(\"p\"+p+\"searingNext\",");
code("trTimeMS() + trQuestVarGet(\"searingDelay\") / trQuestVarGet(\"p\"+p+\"ultimateCost\"));");
code("trSoundPlayFN(\"forestfirebirth.wav\",\"1\",-1,\"\",\"\");");
code("for(x=yGetDatabaseCount(\"p\"+p+\"Characters\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"Characters\");");
code("if ((yGetVar(\"p\"+p+\"Characters\", \"searingSFX\") == 0) ||");
code("(kbGetBlockID(\"\"+1*yGetVar(\"p\"+p+\"characters\", \"searingSFX\")) == -1)) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"characters\", true);");
code("spyEffect(1*trQuestVarGet(\"p\"+p+\"Characters\"),");
code("kbGetProtoUnitID(\"Rocket\"), yGetVarName(\"p\"+p+\"characters\", \"searingSFX\"));");
code("}");
code("}");
code("}");
code("} else {");
code("if (trCurrentPlayer() == p) {");
code("trSoundPlayFN(\"godpowerfailed.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"searing\") == 1) {");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"searingNext\")) {");
code("trQuestVarSet(\"p\"+p+\"searingNext\",");
code("trQuestVarGet(\"p\"+p+\"searingNext\") + trQuestVarGet(\"searingDelay\") / trQuestVarGet(\"p\"+p+\"ultimateCost\"));");
code("gainFavor(p, 0 - 1);");
code("if (trPlayerResourceCount(p, \"favor\") < 1) {");
code("trQuestVarSet(\"p\"+p+\"searing\", 0);");
code("trQuestVarSet(\"p\"+p+\"searingStarted\", 1);");
code("trSoundPlayFN(\"godpowerfailed.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("}");

code("if ((trQuestVarGet(\"p\"+p+\"searingStarted\") == 1) && (trQuestVarGet(\"spyFind\") == trQuestVarGet(\"spyFound\"))) {");
code("for(x=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"characters\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"p\"+p+\"characters\", \"searingSFX\"), true);");
code("if (trQuestVarGet(\"p\"+p+\"searing\") == 1) {");
code("trMutateSelected(kbGetProtoUnitID(\"Ball of Fire Impact\"));");
code("} else {");
code("trMutateSelected(kbGetProtoUnitID(\"Rocket\"));");
code("}");
code("}");
code("trQuestVarSet(\"p\"+p+\"searingStarted\", 0);");
code("}");

code("if (yGetDatabaseCount(\"p\"+p+\"sunlights\") > 0) {");
code("target = 0;");
code("yDatabaseNext(\"p\"+p+\"sunlights\");");
code("if (trTimeMS() > yGetVar(\"p\"+p+\"sunlights\", \"next\")) {");
code("gainFavor(p, 1);");
code("ySetVar(\"p\"+p+\"sunlights\", \"next\", trTimeMS() + 500);");
code("trQuestVarSet(\"centerX\", yGetVar(\"p\"+p+\"sunlights\", \"posX\"));");
code("trQuestVarSet(\"centerZ\", yGetVar(\"p\"+p+\"sunlights\", \"posZ\"));");
code("amt = yGetVar(\"p\"+p+\"sunlights\", \"radius\");");
code("posX = yGetVar(\"p\"+p+\"sunlights\", \"power\");");
code("posX = posX * 0.5;");

code("for (x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("id = yDatabaseNext(\"playerUnits\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (zDistanceToVectorSquared(\"playerUnits\", \"center\") < amt) {");
code("healUnit(p, posX);");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"searing\") == 1) {");
code("for(x=yGetDatabaseCount(\"enemies\"); >0) {");
code("id = yDatabaseNext(\"enemies\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (zDistanceToVectorSquared(\"enemies\", \"center\") < amt) {");
code("damageEnemy(p, posX * trQuestVarGet(\"p\"+p+\"healBoost\"));");
code("}");
code("}");
code("}");

code("if (trTimeMS() > yGetVar(\"p\"+p+\"sunlights\", \"timeout\")) {");
code("for(x=yGetVar(\"p\"+p+\"sunlights\", \"start\"); < yGetVar(\"p\"+p+\"sunlights\", \"end\")) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+x, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Rocket\"));");
code("trUnitDestroy();");
code("}");
code("yRemoveFromDatabase(\"p\"+p+\"sunlights\");");
code("yRemoveUpdateVar(\"p\"+p+\"sunlights\", \"radius\");");
code("yRemoveUpdateVar(\"p\"+p+\"sunlights\", \"power\");");
code("yRemoveUpdateVar(\"p\"+p+\"sunlights\", \"timeout\");");
code("yRemoveUpdateVar(\"p\"+p+\"sunlights\", \"posX\");");
code("yRemoveUpdateVar(\"p\"+p+\"sunlights\", \"posZ\");");
code("yRemoveUpdateVar(\"p\"+p+\"sunlights\", \"next\");");
code("yRemoveUpdateVar(\"p\"+p+\"sunlights\", \"start\");");
code("yRemoveUpdateVar(\"p\"+p+\"sunlights\", \"end\");");
code("}");
code("}");
code("}");

code("ySetPointer(\"enemies\", index);");
code("poisonKillerBonus(p);");
code("xsSetContextPlayer(old);");
code("}");

code("void chooseSunbow(int eventID = -1) {");
code("int p = eventID - 1000 - 12 * SUNBOW;");
code("if (trCurrentPlayer() == p) {");
code("map(\"q\", \"game\", \"uiSetSpecialPower(133) uiSpecialPowerAtPointer\");");
code("wellName = \"(Q) Sunlight\";");
code("wellIsUltimate = false;");
code("map(\"e\", \"game\", \"uiSetSpecialPower(156) uiSpecialPowerAtPointer\");");
code("rainName = \"(E) Searing Light\";");
code("rainIsUltimate = false;");
code("map(\"w\", \"game\", \"uiSetSpecialPower(227) uiSpecialPowerAtPointer\");");
code("lureName = \"(W) Healing Rays\";");
code("lureIsUltimate = false;");
code("}");
code("trQuestVarSet(\"p\"+p+\"wellCooldown\", trQuestVarGet(\"sunlightCooldown\"));");
code("trQuestVarSet(\"p\"+p+\"wellCost\", 0);");
code("trQuestVarSet(\"p\"+p+\"lureCooldown\", trQuestVarGet(\"healingRaysCooldown\"));");
code("trQuestVarSet(\"p\"+p+\"lureCost\", 0);");
code("trQuestVarSet(\"p\"+p+\"rainCooldown\", 1);");
code("trQuestVarSet(\"p\"+p+\"rainCost\", 0);");
code("}");

code("void modifySunbow(int eventID = -1) {");
code("int p = eventID - 5000 - 12 * SUNBOW;");
code("if (trQuestVarGet(\"p\"+p+\"healingRays\") == 1) {");
code("trQuestVarSet(\"p\"+p+\"nextDelay\",");
code("trQuestVarGet(\"class\"+SUNBOW+\"nextDelay\") * 2.0 / (1.0 + trQuestVarGet(\"p\"+p+\"projectiles\")));");
code("}");
code("}");

code("rule sunbow_init");
code("active");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("for(p=1; < ENEMY_PLAYER) {");
code("trEventSetHandler(12 * SUNBOW + p, \"sunbowAlways\");");
code("trEventSetHandler(1000 + 12 * SUNBOW + p, \"chooseSunbow\");");
code("trEventSetHandler(5000 + 12 * SUNBOW + p, \"modifySunbow\");");
code("}");

code("trQuestVarSet(\"sunlightCooldown\", 18);");
code("trQuestVarSet(\"sunlightRadius\", 6);");
code("trQuestVarSet(\"sunlightDuration\", 6);");
code("trQuestVarSet(\"sunlightPower\", 60);");

code("trQuestVarSet(\"healingRaysCooldown\", 12);");
code("trQuestVarSet(\"healingRaysPower\", 100);");
code("trQuestVarSet(\"healingRaysDuration\", 6);");

code("trQuestVarSet(\"searingCost\", 5);");
code("trQuestVarSet(\"searingDelay\", 1000.0 / trQuestVarGet(\"searingCost\"));");
code("}");
code("void removeStormcutter(int p = 0) {");
code("removePlayerSpecific(p);");
code("yRemoveUpdateVar(\"p\"+p+\"characters\", \"rainSFX\");");
code("}");

code("void stormcutterAlways(int eventID = -1) {");
code("int p = eventID - 12 * STORMCUTTER;");
code("int id = 0;");
code("int hit = 0;");
code("int target = 0;");
code("int index = yGetPointer(\"enemies\");");
code("float amt = 0;");
code("float dist = 0;");
code("float current = 0;");
code("int old = xsGetContextPlayer();");
code("xsSetContextPlayer(p);");
code("if (yGetDatabaseCount(\"p\"+p+\"characters\") > 0) {");
code("id = yDatabaseNext(\"p\"+p+\"characters\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeStormcutter(p);");
code("} else {");
code("hit = CheckOnHit(p, id);");
code("if (hit == ON_HIT_NORMAL) {");
code("target = yGetVar(\"p\"+p+\"characters\", \"attackTarget\");");
code("trVectorSetUnitPos(\"pos\", \"p\"+p+\"characters\");");
code("trVectorQuestVarSet(\"target\", kbGetBlockPosition(\"\"+trGetUnitScenarioNameNumber(target)));");
code("dist = zDistanceBetweenVectors(\"pos\", \"target\");");
code("trQuestVarSet(\"p\"+p+\"stormbonus\", dist * 0.02);");
code("trQuestVarSet(\"p\"+p+\"attack\", trQuestVarGet(\"p\"+p+\"baseAttack\") * (1.0 + trQuestVarGet(\"p\"+p+\"stormbonus\")));");
code("zSetProtoUnitStat(\"Archer Atlantean Hero\", p, 31, trQuestVarGet(\"p\"+p+\"attack\"));");
code("if (trQuestVarGet(\"p\"+p+\"rainOfLightning\") == 1) {");
code("gainFavor(p, 1);");
code("trChatSetStatus(false);");
code("trDelayedRuleActivation(\"enable_chat\");");
code("trUnitSelectClear();");
code("trUnitSelectByID(target);");
code("trTechInvokeGodPower(0, \"bolt\", vector(0,0,0), vector(0,0,0));");
code("dist = xsPow(trQuestVarGet(\"rainOfLightningRadius\") * trQuestVarGet(\"p\"+p+\"spellRange\"), 2);");
code("amt = trQuestVarGet(\"p\"+p+\"attack\") * trQuestVarGet(\"p\"+p+\"spellDamage\");");
code("for(x=yGetDatabaseCount(\"enemies\"); >0) {");
code("id = yDatabaseNext(\"enemies\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (zDistanceToVectorSquared(\"enemies\", \"target\") < dist) {");
code("trUnitHighlight(0.2, false);");
code("damageEnemy(p, amt, false, 1.0);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"wellStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"wellStatus\", ABILITY_OFF);");
code("dist = trQuestVarGet(\"disengageRadius\") * trQuestVarGet(\"p\"+p+\"spellRange\");");
code("for(x=yGetDatabaseCount(\"enemies\"); >0) {");
code("id = yDatabaseNext(\"enemies\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (trCountUnitsInArea(\"\"+1*trQuestVarGet(\"enemies\"),p,\"Archer Atlantean Hero\", dist) >0) {");
code("stunUnit(\"enemies\", 2.0, p);");
code("gainFavor(p, 1.0);");
code("}");
code("}");
code("trSoundPlayFN(\"sphinxteleportout.wav\",\"1\",-1,\"\",\"\");");
code("for(x=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("id = yDatabaseNext(\"p\"+p+\"characters\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeStormcutter(p);");
code("} else {");
code("trVectorSetUnitPos(\"pos\", \"p\"+p+\"characters\");");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,trQuestVarGet(\"posX\"),0,trQuestVarGet(\"posZ\"),0,true);");
code("trArmySelect(\"\"+p+\",0\");");
code("trUnitChangeProtoUnit(\"Dust Large\");");
code("target = 1 + xsMin(trQuestVarGet(\"disengageRange\") * trQuestVarGet(\"p\"+p+\"spellRange\"),");
code("zDistanceBetweenVectors(\"pos\", \"p\"+p+\"wellPos\")) / 2;");
code("trVectorQuestVarSet(\"step\", zGetUnitVector(\"pos\", \"p\"+p+\"wellPos\"));");
code("for(i=target; >0) {");
code("trQuestVarSet(\"posx\", trQuestVarGet(\"posx\") + 2.0 * trQuestVarGet(\"stepx\"));");
code("trQuestVarSet(\"posz\", trQuestVarGet(\"posz\") + 2.0 * trQuestVarGet(\"stepz\"));");
code("vectorToGrid(\"pos\", \"loc\");");
code("if (terrainIsType(\"loc\", TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("break;");
code("}");
code("}");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\", \"Transport Ship Greek\", 1, trQuestVarGet(\"posX\"),0,trQuestVarGet(\"posZ\"),0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"characters\");");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"next\"));");
code("trMutateSelected(kbGetProtoUnitID(\"Siege Tower\"));");
code("trUnitChangeProtoUnit(\"Archer Atlantean Hero\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"characters\");");
code("trSetUnitOrientation(trVectorQuestVarGet(\"step\"), vector(0,1,0), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Archer Atlantean Hero\"));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitChangeProtoUnit(\"Lightning Sparks\");");
code("}");
code("}");
code("equipRelicsAgain(p);");
code("}");

code("if (yGetDatabaseCount(\"p\"+p+\"spearedUnits\") > 0) {");
code("yDatabaseNext(\"p\"+p+\"spearedUnits\");");
code("if (yGetVarAtIndex(\"enemies\", \"launched\", 1*yGetVar(\"p\"+p+\"spearedUnits\", \"index\")) == 0) {");
code("if (yGetVarAtIndex(\"enemies\", \"stunStatus\", 1*yGetVar(\"p\"+p+\"spearedUnits\", \"index\")) > 0) {");
code("if (ySetPointer(\"enemies\", 1*yGetVar(\"p\"+p+\"spearedUnits\", \"index\"))) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"enemies\");");
code("damageEnemy(p, 100.0 * trQuestVarGet(\"p\"+p+\"spellDamage\") * (1.0 + 0.02 * yGetVar(\"p\"+p+\"spearedUnits\", \"dist\")));");
code("}");
code("}");
code("yRemoveFromDatabase(\"p\"+p+\"spearedUnits\");");
code("} else {");
code("yVarToVector(\"p\"+p+\"spearedUnits\", \"prev\");");
code("trVectorSetUnitPos(\"pos\", \"p\"+p+\"spearedUnits\");");
code("dist = zDistanceBetweenVectors(\"pos\", \"prev\");");
code("if (dist > 2.0) {");
code("ySetVar(\"p\"+p+\"spearedUnits\", \"dist\", yGetVar(\"p\"+p+\"spearedUnits\", \"dist\") + dist);");
code("yVarToVector(\"p\"+p+\"spearedUnits\", \"dir\");");
code("for(x=dist / 2; >0) {");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"prevx\"),0,trQuestVarGet(\"prevz\"),0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Lightning Sparks\");");
code("trQuestVarSet(\"prevx\", trQuestVarGet(\"prevx\") + 2.0 * trQuestVarGet(\"dirx\"));");
code("trQuestVarSet(\"prevz\", trQuestVarGet(\"prevz\") + 2.0 * trQuestVarGet(\"dirz\"));");
code("}");
code("ySetVarFromVector(\"p\"+p+\"spearedUnits\", \"prev\", \"pos\");");
code("}");
code("}");
code("}");

code("if (yGetDatabaseCount(\"p\"+p+\"shockArrows\") > 0) {");
code("yDatabaseNext(\"p\"+p+\"shockArrows\");");
code("trVectorSetUnitPos(\"pos\", \"p\"+p+\"shockArrows\");");
code("yVarToVector(\"p\"+p+\"shockArrows\", \"prev\");");
code("yVarToVector(\"p\"+p+\"shockArrows\", \"dir\");");
code("yVarToVector(\"p\"+p+\"shockArrows\", \"dest\");");
code("dist = zDistanceBetweenVectors(\"pos\", \"prev\");");
code("hit = 0;");
code("if (dist > 2.0) {");
code("ySetVar(\"p\"+p+\"shockArrows\", \"dist\", yGetVar(\"p\"+p+\"shockArrows\", \"dist\") + dist);");
code("if (yGetVar(\"p\"+p+\"shockArrows\", \"timeout\") == -1) {");
code("ySetVar(\"p\"+p+\"shockArrows\", \"timeout\", trTimeMS() + 1000 * trQuestVarGet(\"p\"+p+\"spellRange\"));");
code("}");
code("for(x=yGetDatabaseCount(\"enemies\"); >0) {");
code("if (yDatabaseNext(\"enemies\", true) == -1 || trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (rayCollision(\"enemies\", \"prev\", \"dir\", dist + 1.0, 2.0)) {");
code("hit = 1;");
code("gainFavor(p, 5.0);");
code("trQuestVarSetFromRand(\"sound\", 1, 2, true);");
code("if (trUnitVisToPlayer()) {");
code("trSoundPlayFN(\"titanpunch\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("}");
code("damageEnemy(p, 100.0 * trQuestVarGet(\"p\"+p+\"spellDamage\") * (1.0 + 0.02 * yGetVar(\"p\"+p+\"shockArrows\", \"dist\")));");
code("if (trUnitAlive()) {");
code("yAddToDatabase(\"p\"+p+\"spearedUnits\", \"enemies\");");
code("yAddUpdateVar(\"p\"+p+\"spearedUnits\", \"index\", yGetPointer(\"enemies\"));");
code("yAddUpdateVar(\"p\"+p+\"spearedUnits\", \"prevx\", trQuestVarGet(\"posx\"));");
code("yAddUpdateVar(\"p\"+p+\"spearedUnits\", \"prevz\", trQuestVarGet(\"posz\"));");
code("yAddUpdateVar(\"p\"+p+\"spearedUnits\", \"dirx\", trQuestVarGet(\"dirx\"));");
code("yAddUpdateVar(\"p\"+p+\"spearedUnits\", \"dirz\", trQuestVarGet(\"dirz\"));");
code("yAddUpdateVar(\"p\"+p+\"spearedUnits\", \"dist\", yGetVar(\"p\"+p+\"shockArrows\", \"dist\"));");
code("launchUnit(\"enemies\", \"dest\");");
code("}");

code("break;");
code("}");
code("}");
code("for (x=dist/2; >0) {");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"prevx\"),0,trQuestVarGet(\"prevz\"),0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Lightning Sparks\");");
code("trQuestVarSet(\"prevx\", trQuestVarGet(\"prevx\") + 2.0 * trQuestVarGet(\"dirx\"));");
code("trQuestVarSet(\"prevz\", trQuestVarGet(\"prevz\") + 2.0 * trQuestVarGet(\"dirz\"));");
code("}");
code("ySetVarFromVector(\"p\"+p+\"shockArrows\", \"prev\", \"pos\");");
code("vectorToGrid(\"pos\", \"loc\");");
code("if (terrainIsType(\"loc\", TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("hit = 2;");
code("}");
code("} else if ((trTimeMS() > yGetVar(\"p\"+p+\"shockArrows\", \"timeout\")) && (yGetVar(\"p\"+p+\"shockArrows\", \"timeout\") > 0)) {");
code("hit = 1;");
code("} else if (zDistanceToVectorSquared(\"pos\", \"dest\") < 1.0) {");
code("hit = 1;");
code("}");

code("if (hit >= 1) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"shockArrows\");");
code("trUnitChangeProtoUnit(\"Dust Small\");");
code("yRemoveFromDatabase(\"p\"+p+\"shockArrows\");");
code("if (hit == 2) {");
code("trQuestVarSetFromRand(\"sound\", 1, 3, true);");
code("trSoundPlayFN(\"mine\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"lureStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"lureStatus\", ABILITY_OFF);");
code("trSoundPlayFN(\"ui\thunder2.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"ui\lightning4.wav\",\"1\",-1,\"\",\"\");");
code("trVectorSetUnitPos(\"target\", \"p\"+p+\"lureObject\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"lureObject\");");
code("trUnitDestroy();");
code("for(x=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("if (yDatabaseNext(\"p\"+p+\"characters\") == -1 || trUnitAlive() == false) {");
code("removeStormcutter(p);");
code("} else {");
code("trVectorSetUnitPos(\"pos\", \"p\"+p+\"characters\");");
code("trVectorQuestVarSet(\"dir\", zGetUnitVector(\"pos\", \"target\"));");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,trQuestVarGet(\"posx\"),0,trQuestVarGet(\"posz\"),0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\");");
code("trMutateSelected(kbGetProtoUnitID(\"Ballista Shot\"));");
code("trSetUnitOrientation(trVectorQuestVarGet(\"dir\"),vector(0,1,0),true);");
code("vectorSetAsTargetVector(\"dest\",\"pos\",\"target\",30.0 * trQuestVarGet(\"p\"+p+\"spellRange\"));");
code("trUnitMoveToPoint(trQuestVarGet(\"destx\"),0,trQuestVarGet(\"destz\"));");
code("yAddToDatabase(\"p\"+p+\"shockArrows\", \"next\");");
code("yAddUpdateVar(\"p\"+p+\"shockArrows\", \"prevx\", trQuestVarGet(\"posx\"));");
code("yAddUpdateVar(\"p\"+p+\"shockArrows\", \"prevz\", trQuestVarGet(\"posz\"));");
code("yAddUpdateVar(\"p\"+p+\"shockArrows\", \"destx\", trQuestVarGet(\"destx\"));");
code("yAddUpdateVar(\"p\"+p+\"shockArrows\", \"destz\", trQuestVarGet(\"destz\"));");
code("yAddUpdateVar(\"p\"+p+\"shockArrows\", \"dirx\", trQuestVarGet(\"dirx\"));");
code("yAddUpdateVar(\"p\"+p+\"shockArrows\", \"dirz\", trQuestVarGet(\"dirz\"));");
code("yAddUpdateVar(\"p\"+p+\"shockArrows\", \"timeout\", -1);");
code("yAddUpdateVar(\"p\"+p+\"shockArrows\", \"dist\", 0);");
code("}");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"rainOfLightning\") == 2) {");
code("trQuestVarSet(\"p\"+p+\"rainOfLightning\", 1);");
code("for(x=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("if (yDatabaseNext(\"p\"+p+\"characters\", true) == -1 || trUnitAlive() == false) {");
code("removeStormcutter(p);");
code("} else {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"p\"+p+\"characters\", \"rainSFX\"), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Arkantos God\"));");
code("trSetSelectedScale(0,0,0);");
code("}");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"rainStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"rainStatus\", ABILITY_OFF);");
code("gainFavor(p, 0.0 - trQuestVarGet(\"rainOfLightningCost\") * trQuestVarGet(\"p\"+p+\"ultimateCost\"));");
code("trSoundPlayFN(\"lightningbirth.wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSet(\"p\"+p+\"rainOfLightning\", 2);");
code("trQuestVarSet(\"p\"+p+\"rainOfLightningTimeout\",");
code("trTimeMS() + 1000 * trQuestVarGet(\"rainOfLightningDuration\") * trQuestVarGet(\"p\"+p+\"spellDuration\"));");
code("trQuestVarSet(\"p\"+p+\"nextDelay\",");
code("trQuestVarGet(\"class\"+STORMCUTTER+\"nextDelay\") * 2.0 / (1.0 + trQuestVarGet(\"p\"+p+\"projectiles\")));");
code("zSetProtoUnitStat(\"Archer Atlantean Hero\", p, 13, 1);");
code("trQuestVarSet(\"p\"+p+\"arrowNext\", trGetNextUnitScenarioNameNumber() - 1);");
code("for(x=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("if (yDatabaseNext(\"p\"+p+\"characters\", true) == -1 || trUnitAlive() == false) {");
code("removeStormcutter(p);");
code("} else if (kbGetBlockID(\"\"+1*yGetVar(\"p\"+p+\"characters\", \"rainSFX\")) == -1) {");
code("spyEffect(1*trQuestVarGet(\"p\"+p+\"characters\"),kbGetProtoUnitID(\"Cinematic Block\"),");
code("yGetVarName(\"p\"+p+\"characters\", \"rainSFX\"));");
code("}");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"rainOfLightning\") == 1) {");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"rainOfLightningTimeout\")) {");
code("trQuestVarSet(\"p\"+p+\"rainOfLightning\", 0);");
code("trQuestVarSet(\"p\"+p+\"nextDelay\", trQuestVarGet(\"class\"+STORMCUTTER+\"nextDelay\"));");
code("zSetProtoUnitStat(\"Archer Atlantean Hero\", p, 13, trQuestVarGet(\"p\"+p+\"projectiles\"));");
code("for(x=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("if (yDatabaseNext(\"p\"+p+\"characters\", true) == -1 || trUnitAlive() == false) {");
code("removeStormcutter(p);");
code("} else {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"p\"+p+\"characters\", \"rainSFX\"), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");
code("}");
code("}");
code("}");
code("id = yFindLatest(\"p\"+p+\"arrowNext\", \"Arrow Flaming\", p);");
code("if (id > 0) {");
code("trUnitDestroy();");
code("}");
code("}");

code("ySetPointer(\"enemies\", index);");
code("poisonKillerBonus(p);");
code("xsSetContextPlayer(old);");
code("}");

code("void chooseStormcutter(int eventID = -1) {");
code("int p = eventID - 1000 - 12 * STORMCUTTER;");
code("if (trCurrentPlayer() == p) {");
code("map(\"w\", \"game\", \"uiSetSpecialPower(133) uiSpecialPowerAtPointer\");");
code("wellName = \"(W) Disengage\";");
code("wellIsUltimate = false;");
code("map(\"e\", \"game\", \"uiSetSpecialPower(156) uiSpecialPowerAtPointer\");");
code("rainName = \"(E) Rain of Lightning\";");
code("rainIsUltimate = true;");
code("map(\"q\", \"game\", \"uiSetSpecialPower(227) uiSpecialPowerAtPointer\");");
code("lureName = \"(Q) Shock Arrow\";");
code("lureIsUltimate = false;");
code("}");
code("trQuestVarSet(\"p\"+p+\"wellCooldown\", trQuestVarGet(\"disengageCooldown\"));");
code("trQuestVarSet(\"p\"+p+\"wellCost\", 0);");
code("trQuestVarSet(\"p\"+p+\"lureCooldown\", trQuestVarGet(\"shockArrowCooldown\"));");
code("trQuestVarSet(\"p\"+p+\"lureCost\", 0);");
code("trQuestVarSet(\"p\"+p+\"rainCooldown\", 1);");
code("trQuestVarSet(\"p\"+p+\"rainCost\", trQuestVarGet(\"rainOfLightningCost\"));");
code("}");

code("void modifyStormcutter(int eventID = -1) {");
code("int p = eventID - 5000 - 12 * STORMCUTTER;");
code("if (trQuestVarGet(\"p\"+p+\"rainOfLightning\") == 1) {");
code("zSetProtoUnitStat(\"Archer Atlantean Hero\", p, 13, 1);");
code("trQuestVarSet(\"p\"+p+\"nextDelay\",");
code("trQuestVarGet(\"class\"+STORMCUTTER+\"nextDelay\") * 2.0 / (1.0 + trQuestVarGet(\"p\"+p+\"projectiles\")));");
code("}");
code("}");

code("rule stormcutter_init");
code("active");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("for(p=1; < ENEMY_PLAYER) {");
code("trEventSetHandler(12 * STORMCUTTER + p, \"stormcutterAlways\");");
code("trEventSetHandler(1000 + 12 * STORMCUTTER + p, \"chooseStormcutter\");");
code("trEventSetHandler(5000 + 12 * STORMCUTTER + p, \"modifyStormcutter\");");
code("}");

code("trQuestVarSet(\"rainOfLightningCost\", 50);");
code("trQuestVarSet(\"rainOfLightningDuration\", 10);");
code("trQuestVarSet(\"rainOfLightningRadius\", 5);");

code("trQuestVarSet(\"disengageCooldown\", 8);");
code("trQuestVarSet(\"disengageRadius\", 4);");
code("trQuestVarSet(\"disengageRange\", 12);");

code("trQuestVarSet(\"shockArrowCooldown\", 10);");
code("trQuestVarSet(\"shockArrowRange\", 30);");
code("trQuestVarSet(\"shockArrowDamage\", 50);");
code("}");
code("const int POTION_STUN = 0;");
code("const int POTION_POISON = 1;");
code("const int POTION_HEAL = 2;");

code("void removeAlchemist(int p = 0) {");
code("removePlayerSpecific(p);");
code("yRemoveUpdateVar(\"p\"+p+\"characters\", \"potion\");");
code("}");

code("void alchemistAlways(int eventID = -1) {");
code("int p = eventID - 12 * ALCHEMIST;");
code("int id = 0;");
code("int hit = 0;");
code("int target = 0;");
code("int index = yGetPointer(\"enemies\");");
code("float amt = 0;");
code("float dist = 0;");
code("float current = 0;");
code("int old = xsGetContextPlayer();");
code("xsSetContextPlayer(p);");
code("if (yGetDatabaseCount(\"p\"+p+\"characters\") > 0) {");
code("id = yDatabaseNext(\"p\"+p+\"characters\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeAlchemist(p);");
code("} else {");
code("hit = CheckOnHit(p, id);");
code("if (hit == ON_HIT_NORMAL) {");
code("target = yGetVar(\"p\"+p+\"characters\", \"attackTarget\");");
code("ySetVar(\"p\"+p+\"characters\", \"potion\", 1+yGetVar(\"p\"+p+\"characters\", \"potion\"));");
code("if (yGetVar(\"p\"+p+\"characters\", \"potion\") == 3) {");
code("gainFavor(p, trQuestVarGet(\"p\"+p+\"projectiles\"));");
code("ySetVar(\"p\"+p+\"characters\", \"potion\", 0);");
code("if (trQuestVarGet(\"p\"+p+\"potion\") == POTION_HEAL) {");
code("amt = trQuestVarGet(\"potionHeal\") * trQuestVarGet(\"p\"+p+\"spellDamage\") * trQuestVarGet(\"p\"+p+\"projectiles\");");
code("for(x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("id = yDatabaseNext(\"playerUnits\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (yGetVar(\"playerUnits\", \"poisonStatus\") == 0) {");
code("trDamageUnitPercent(0.0 - amt * trQuestVarGet(\"p\"+p+\"spellDamage\") * trQuestVarGet(\"p\"+p+\"healBoost\"));");
code("}");
code("}");
code("xsSetContextPlayer(p);");
code("} else {");
code("yAddToDatabase(\"p\"+p+\"potions\", yGetVarName(\"p\"+p+\"characters\", \"attackTarget\"));");
code("yAddUpdateVar(\"p\"+p+\"potions\", \"type\", trQuestVarGet(\"p\"+p+\"potion\"));");
code("yAddUpdateVar(\"p\"+p+\"potions\", \"target\", trGetUnitScenarioNameNumber(target));");
code("trVectorSetUnitPos(\"start\", \"p\"+p+\"characters\");");
code("trVectorQuestVarSet(\"end\", kbGetBlockPosition(\"\"+trGetUnitScenarioNameNumber(target)));");
code("yAddUpdateVar(\"p\"+p+\"potions\", \"timeout\", trTimeMS() + zDistanceBetweenVectors(\"start\", \"end\") * 32);");
code("yAddUpdateVar(\"p\"+p+\"potions\", \"posx\", trQuestVarGet(\"endx\"));");
code("yAddUpdateVar(\"p\"+p+\"potions\", \"posz\", trQuestVarGet(\"endz\"));");
code("}");
code("}");

code("}");
code("}");
code("}");

code("if (yGetDatabaseCount(\"p\"+p+\"potions\") >0) {");
code("yDatabaseNext(\"p\"+p+\"potions\");");
code("if (trTimeMS() > yGetVar(\"p\"+p+\"potions\", \"timeout\")) {");
code("yVarToVector(\"p\"+p+\"potions\", \"pos\");");
code("switch(1*yGetVar(\"p\"+p+\"potions\", \"type\"))");
code("{");
code("case POTION_STUN:");
code("{");
code("hit = trQuestVarGet(\"p\"+p+\"projectiles\") - 1;");
code("for (x=yGetDatabaseCount(\"enemies\"); >0) {");
code("id = yDatabaseNext(\"enemies\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (id == 1*trQuestVarGet(\"p\"+p+\"potions\")) {");
code("stunUnit(\"enemies\", 2.0, p);");
code("break;");
code("}");
code("}");
code("if (hit > 0) {");
code("for (x=yGetDatabaseCount(\"enemies\") - 1; >0) {");
code("id = yDatabaseNext(\"enemies\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (zDistanceToVectorSquared(\"enemies\", \"pos\") < 16) {");
code("stunUnit(\"enemies\", 2.0, p);");
code("hit = hit - 1;");
code("if (hit == 0) {");
code("break;");
code("}");
code("}");
code("}");
code("}");
code("}");
code("case POTION_POISON:");
code("{");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"posX\"),0,trQuestVarGet(\"posZ\"),0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Lampades Blood\");");
code("for(x=yGetDatabaseCount(\"enemies\"); >0) {");
code("id = yDatabaseNext(\"enemies\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (zDistanceToVectorSquared(\"enemies\", \"pos\") < 16) {");
code("poisonUnit(\"enemies\", 12,12 * trQuestVarGet(\"p\"+p+\"projectiles\"), p);");
code("}");
code("}");
code("}");
code("}");
code("yRemoveFromDatabase(\"p\"+p+\"potions\");");
code("}");
code("}");

code("for(y=trQuestVarGet(\"p\"+p+\"projectiles\"); >0) {");
code("if (yFindLatest(\"p\"+p+\"latestProj\", \"Priest Projectile\", p) > 0) {");
code("for (x=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("id = yDatabaseNext(\"p\"+p+\"characters\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeAlchemist(p);");
code("} else if (kbUnitGetAnimationActionType(id) == 12) {");
code("if (yGetVar(\"p\"+p+\"characters\", \"potion\") == 2) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"latestProj\", true);");
code("switch(1*trQuestVarGet(\"p\"+p+\"potion\"))");
code("{");
code("case POTION_STUN:");
code("{");
code("trMutateSelected(kbGetProtoUnitID(\"Lampades Bolt\"));");
code("}");
code("case POTION_POISON:");
code("{");
code("trMutateSelected(kbGetProtoUnitID(\"Poison SFX\"));");
code("}");
code("case POTION_HEAL:");
code("{");
code("trMutateSelected(kbGetProtoUnitID(\"Curse SFX\"));");
code("}");
code("}");
code("}");
code("break;");
code("}");
code("}");
code("} else {");
code("break;");
code("}");
code("}");


code("if (trQuestVarGet(\"p\"+p+\"wellStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"wellStatus\", ABILITY_OFF);");
code("dist = 100;");
code("hit = -1;");
code("for(x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("id = yDatabaseNext(\"playerUnits\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else {");
code("amt = zDistanceToVectorSquared(\"playerUnits\", \"p\"+p+\"wellPos\");");
code("if (amt < dist) {");
code("dist = amt;");
code("hit = yGetPointer(\"playerUnits\");");
code("}");
code("}");
code("}");
code("if (hit > 0) {");
code("ySetPointer(\"playerUnits\", hit);");
code("target = yGetVar(\"playerUnits\", \"player\");");
code("ySetVar(\"playerUnits\", \"poisonTimeout\", 0);");
code("ySetVar(\"playerUnits\", \"stunTimeout\", 0);");
code("if (trQuestVarGet(\"playerUnits\") == trQuestVarGet(\"p\"+target+\"unit\")) {");
code("trQuestVarSet(\"p\"+target+\"silenceTimeout\", 0);");
code("}");
code("trSoundPlayFN(\"recreation.wav\",\"1\",-1,\"\",\"\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetUnitAtIndex(\"playerUnits\", hit));");
code("healUnit(p, trQuestVarGet(\"elixirHeal\") * trQuestVarGet(\"p\"+p+\"spellDamage\"), hit);");
code("trVectorSetUnitPos(\"pos\", \"playerUnits\");");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"posX\"),0,trQuestVarGet(\"posZ\"),0,true);");
code("trArmySelect(\"1,0\");");
code("if (Multiplayer) {");
code("trUnitChangeProtoUnit(\"Recreation\");");
code("} else {");
code("trUnitChangeProtoUnit(\"Hero Birth\");");
code("}");
code("} else {");
code("if (trCurrentPlayer() == p) {");
code("trCounterAbort(\"well\");");
code("trSoundPlayFN(\"cantdothat.wav\",\"1\",-1,\"\",\"\");");
code("trChatSend(0, \"You must target an ally!\");");
code("}");
code("trQuestVarSet(\"p\"+p+\"wellCooldownStatus\", ABILITY_COST);");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"lureStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"lureStatus\", ABILITY_OFF);");
code("trVectorSetUnitPos(\"pos\", \"p\"+p+\"lureObject\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"lureObject\", true);");
code("trUnitDestroy();");
code("dist = 81;");
code("hit = -1;");
code("for(x=yGetDatabaseCount(\"playerCharacters\"); >0) {");
code("id = yDatabaseNext(\"playerCharacters\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removePlayerCharacter();");
code("} else {");
code("amt = zDistanceToVectorSquared(\"playerCharacters\", \"pos\");");
code("if (amt < dist) {");
code("dist = amt;");
code("hit = yGetPointer(\"playerCharacters\");");
code("}");
code("}");
code("}");
code("if (hit > 0) {");
code("gainFavor(p, 0.0 - trQuestVarGet(\"duplicateCost\") * trQuestVarGet(\"p\"+p+\"ultimateCost\"));");
code("ySetPointer(\"playerCharacters\", hit);");
code("trVectorSetUnitPos(\"pos\", \"playerCharacters\");");
code("spawnPlayerClone(1*yGetVar(\"playerCharacters\", \"player\"), \"pos\");");
code("yAddToDatabase(\"p\"+p+\"duplicates\", \"next\");");
code("yAddUpdateVar(\"p\"+p+\"duplicates\", \"index\", yGetNewestPointer(\"playerUnits\"));");
code("yAddUpdateVar(\"p\"+p+\"duplicates\", \"decay\", 0);");
code("yAddUpdateVar(\"p\"+p+\"duplicates\", \"decayNext\", trTime());");
code("trSoundPlayFN(\"changeunit.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"sonofosirisbirth.wav\",\"1\",-1,\"\",\"\");");
code("if (trCurrentPlayer() == 1*yGetVar(\"playerCharacters\", \"player\")) {");
code("trMessageSetText(trStringQuestVarGet(\"p\"+p+\"name\") + \" has summoned a copy of you!\");");
code("}");
code("} else if (trCurrentPlayer() == p) {");
code("trSoundPlayFN(\"cantdothat.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");


code("if (trQuestVarGet(\"p\"+p+\"rainStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"rainStatus\", ABILITY_OFF);");
code("trQuestVarSet(\"p\"+p+\"potion\", 1 + trQuestVarGet(\"p\"+p+\"potion\"));");
code("if (trQuestVarGet(\"p\"+p+\"potion\") > 2) {");
code("trQuestVarSet(\"p\"+p+\"potion\", 0);");
code("}");
code("if (trCurrentPlayer() == p) {");
code("switch(1*trQuestVarGet(\"p\"+p+\"potion\"))");
code("{");
code("case POTION_POISON:");
code("{");
code("trSetCounterDisplay(\"Potion: POISON\");");
code("trSoundPlayFN(\"lampadesblood.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("case POTION_STUN:");
code("{");
code("trSetCounterDisplay(\"Potion: FREEZE\");");
code("trSoundPlayFN(\"icestereo.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("case POTION_HEAL:");
code("{");
code("trSetCounterDisplay(\"Potion: HEAL\");");
code("trSoundPlayFN(\"heal.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("}");
code("}");

code("if (yGetDatabaseCount(\"p\"+p+\"duplicates\") > 0) {");
code("id = yDatabaseNext(\"p\"+p+\"duplicates\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("yRemoveFromDatabase(\"p\"+p+\"duplicates\");");
code("} else if (trTime() > yGetVar(\"p\"+p+\"duplicates\", \"decayNext\")) {");
code("ySetVar(\"p\"+p+\"duplicates\", \"decayNext\", 1 + yGetVar(\"p\"+p+\"duplicates\", \"decayNext\"));");
code("ySetVar(\"p\"+p+\"duplicates\", \"decay\", yGetVar(\"p\"+p+\"duplicates\", \"decay\") + calculateDecay(p, 1.0));");
code("trDamageUnitPercent(yGetVar(\"p\"+p+\"duplicates\", \"decay\"));");
code("}");
code("}");

code("ySetPointer(\"enemies\", index);");
code("poisonKillerBonus(p);");
code("xsSetContextPlayer(old);");
code("}");

code("void chooseAlchemist(int eventID = -1) {");
code("int p = eventID - 1000 - 12 * ALCHEMIST;");
code("trQuestVarSet(\"p\"+p+\"latestProj\", trGetNextUnitScenarioNameNumber() - 1);");
code("if (trCurrentPlayer() == p) {");
code("map(\"q\", \"game\", \"uiSetSpecialPower(133) uiSpecialPowerAtPointer\");");
code("wellName = \"(Q) Elixir\";");
code("wellIsUltimate = false;");
code("map(\"w\", \"game\", \"uiSetSpecialPower(156) uiSpecialPowerAtPointer\");");
code("rainName = \"(W) Swap Potion\";");
code("rainIsUltimate = false;");
code("map(\"e\", \"game\", \"uiSetSpecialPower(227) uiSpecialPowerAtPointer\");");
code("lureName = \"(E) Duplicate\";");
code("lureIsUltimate = true;");
code("trSetCounterDisplay(\"Potion: FREEZE\");");
code("}");
code("trQuestVarSet(\"p\"+p+\"potion\", POTION_STUN);");
code("trQuestVarSet(\"p\"+p+\"wellCooldown\", trQuestVarGet(\"elixirCooldown\"));");
code("trQuestVarSet(\"p\"+p+\"wellCost\", 0);");
code("trQuestVarSet(\"p\"+p+\"lureCooldown\", 1);");
code("trQuestVarSet(\"p\"+p+\"lureCost\", trQuestVarGet(\"duplicateCost\"));");
code("trQuestVarSet(\"p\"+p+\"rainCooldown\", 1);");
code("trQuestVarSet(\"p\"+p+\"rainCost\", 0);");
code("}");


code("rule alchemist_init");
code("active");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("for(p=1; < ENEMY_PLAYER) {");
code("trEventSetHandler(12 * ALCHEMIST + p, \"alchemistAlways\");");
code("trEventSetHandler(1000 + 12 * ALCHEMIST + p, \"chooseAlchemist\");");
code("}");

code("trQuestVarSet(\"potionHeal\", 5);");

code("trQuestVarSet(\"elixirCooldown\", 12);");
code("trQuestVarSet(\"elixirHeal\", 200);");

code("trQuestVarSet(\"duplicateCost\", 50);");
code("}");
code("void removeSpellstealer(int p = 0) {");
code("removePlayerSpecific(p);");
code("yRemoveUpdateVar(\"p\"+p+\"characters\", \"cloakSFX\");");
code("}");

code("void spellstealerAlways(int eventID = -1) {");
code("int p = eventID - 12 * SPELLSTEALER;");
code("int id = 0;");
code("int hit = 0;");
code("int target = 0;");
code("int index = yGetPointer(\"enemies\");");
code("int stunned = 0;");
code("int poisoned = 0;");
code("int silenced = 0;");
code("float amt = 0;");
code("float dist = 0;");
code("float current = 0;");
code("int old = xsGetContextPlayer();");
code("xsSetContextPlayer(p);");

code("if (yGetDatabaseCount(\"p\"+p+\"characters\") > 0) {");
code("id = yDatabaseNext(\"p\"+p+\"characters\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeSpellstealer(p);");
code("} else {");
code("hit = CheckOnHit(p, id);");
code("if (hit >= ON_HIT_NORMAL) {");
code("if (ySetPointer(\"enemies\", 1*yGetVar(\"p\"+p+\"characters\", \"attackTargetIndex\"))) {");
code("amt = 1;");
code("if (yGetVar(\"enemies\", \"poisonStatus\") > 0) {");
code("amt = amt * 2;");
code("}");
code("if (yGetVar(\"enemies\", \"stunStatus\") > 0) {");
code("amt = amt * 2;");
code("}");
code("if (yGetVar(\"enemies\", \"silencestatus\") > 0) {");
code("amt = amt * 2;");
code("}");
code("amt = amt - 1;");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"enemies\", true);");
code("damageEnemy(p, amt * trQuestVarGet(\"p\"+p+\"baseAttack\"), false);");
code("if (hit == ON_HIT_SPECIAL) {");
code("trVectorSetUnitPos(\"pos\", \"enemies\");");
code("dist = xsPow(trQuestVarGet(\"spellstealerPassiveRadius\") * trQuestVarGet(\"p\"+p+\"spellRange\"), 2);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"posX\"),0,trQuestVarGet(\"posZ\"),0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Lampades Blood\");");
code("for(x=yGetDatabaseCount(\"enemies\"); >0) {");
code("id = yDatabaseNext(\"enemies\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (zDistanceToVectorSquared(\"enemies\", \"pos\") < dist) {");
code("poisonUnit(\"enemies\", 12.0, 12.0, p);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"lureStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"lureStatus\", ABILITY_OFF);");
code("trVectorSetUnitPos(\"pos\", \"p\"+p+\"lureObject\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"lureObject\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Rocket\"));");
code("trUnitDestroy();");
code("dist = xsPow(trQuestVarGet(\"bladeDanceRadius\") * trQuestVarGet(\"p\"+p+\"spellRange\"), 2);");
code("amt = dist;");
code("target = -1;");
code("for(x=yGetDatabaseCount(\"enemies\"); >0) {");
code("id = yDatabaseNext(\"enemies\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeEnemy();");
code("} else {");
code("current = zDistanceToVectorSquared(\"enemies\", \"pos\");");
code("if (current < dist) {");
code("yAddToDatabase(\"p\"+p+\"bladeDanceTargets\", \"enemies\");");
code("yAddUpdateVar(\"p\"+p+\"bladeDanceTargets\", \"index\", yGetPointer(\"enemies\"));");
code("if (current < amt) {");
code("amt = current;");
code("target = yGetNewestPointer(\"p\"+p+\"bladeDanceTargets\");");
code("}");
code("}");
code("}");
code("}");
code("if (target > 0) {");
code("for(x=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("id = yDatabaseNext(\"p\"+p+\"characters\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeSpellstealer(p);");
code("} else {");
code("trMutateSelected(kbGetProtoUnitID(\"Revealer to Player\"));");
code("}");
code("}");
code("trQuestVarSet(\"p\"+p+\"launched\", 1);");

code("amt = trQuestVarGet(\"bladeDanceCost\") * trQuestVarGet(\"p\"+p+\"ultimateCost\");");

code("ySetPointer(\"p\"+p+\"bladeDanceTargets\", target);");
code("ySetVar(\"p\"+p+\"bladeDanceTargets\", \"status\", trQuestVarGet(\"p\"+p+\"spellstealStatus\"));");
code("if (ySetPointer(\"enemies\", 1*yGetVar(\"p\"+p+\"bladeDanceTargets\", \"index\"))) {");
code("stunned = yGetVar(\"enemies\", \"stunStatus\");");
code("poisoned = yGetVar(\"enemies\", \"poisonStatus\");");
code("silenced = yGetVar(\"enemies\", \"silenceStatus\");");
code("}");

code("for(x=yGetDatabaseCount(\"p\"+p+\"bladeDanceTargets\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"bladeDanceTargets\");");
code("if (target != yGetPointer(\"p\"+p+\"bladeDanceTargets\")) {");
code("id = yGetVar(\"p\"+p+\"bladeDanceTargets\", \"index\");");
code("hit = yGetVarAtIndex(\"enemies\", \"stunStatus\", id) * stunned;");
code("hit = hit + yGetVarAtIndex(\"enemies\", \"poisonStatus\", id) * poisoned;");
code("if ((hit == 0) || (trPlayerResourceCount(p, \"favor\") < 2.0 * amt)) {");
code("yRemoveFromDatabase(\"p\"+p+\"bladeDanceTargets\");");
code("} else {");
code("ySetVar(\"p\"+p+\"bladeDanceTargets\", \"status\", trQuestVarGet(\"p\"+p+\"spellstealStatus\"));");
code("}");
code("}");
code("}");
code("trQuestVarSet(\"p\"+p+\"spellstealStatus\", 0);");
code("trQuestVarSet(\"p\"+p+\"bladeDanceNext\", trTimeMS() - 1);");
code("ySetPointer(\"p\"+p+\"bladeDanceTargets\", target);");

code("if (yGetDatabaseCount(\"p\"+p+\"bladeDanceTargets\") > 1) {");
code("amt = amt * 2;");
code("}");
code("gainFavor(p, 0.0 - amt);");
code("} else {");
code("yClearDatabase(\"p\"+p+\"bladeDanceTargets\");");
code("trQuestVarSet(\"p\"+p+\"lureReadyTime\", 0);");
code("if (trCurrentPlayer() == p) {");
code("trSoundPlayFN(\"cantdothat.wav\",\"1\",-1,\"\",\"\");");
code("trChatSend(0, \"There are no enemies near your cursor!\");");
code("}");
code("}");
code("}");

code("if (yGetDatabaseCount(\"p\"+p+\"bladeDanceTargets\") > 0) {");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"bladeDanceNext\")) {");
code("trQuestVarSet(\"p\"+p+\"bladeDanceNext\", trQuestVarGet(\"p\"+p+\"bladeDanceNext\") + 300);");
code("for(x=yGetDatabaseCount(\"p\"+p+\"bladeDanceTargets\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"bladeDanceTargets\", true);");
code("if (trUnitAlive() == false) {");
code("yRemoveFromDatabase(\"p\"+p+\"bladeDanceTargets\");");
code("} else if (ySetPointer(\"enemies\", 1*yGetVar(\"p\"+p+\"bladeDanceTargets\", \"index\"))) {");
code("gainFavor(p, trQuestVarGet(\"p\"+p+\"favorFromAttacks\"));");
code("trSoundPlayFN(\"shadeofhadesacknowledge2.wav\",\"1\",-1,\"\",\"\");");
code("hit = yGetVar(\"p\"+p+\"bladeDanceTargets\", \"status\");");
code("amt = 1;");
code("if (hit >= xsPow(2, STATUS_SILENCE)) {");
code("hit = hit - xsPow(2, STATUS_SILENCE);");
code("silenceEnemy(p, 9.0);");
code("}");
code("if (hit >= xsPow(2, STATUS_POISON)) {");
code("hit = hit - xsPow(2, STATUS_POISON);");
code("poisonUnit(\"enemies\", 12.0, 12.0, p);");
code("}");
code("if (hit >= xsPow(2, STATUS_STUN)) {");
code("hit = hit - xsPow(2, STATUS_STUN);");
code("stunUnit(\"enemies\", 2.0, p);");
code("}");
code("if (yGetVar(\"enemies\", \"stunstatus\") > 0) {");
code("amt = amt * 2;");
code("}");
code("if (yGetVar(\"enemies\", \"poisonstatus\") > 0) {");
code("amt = amt * 2;");
code("}");
code("if (yGetVar(\"enemies\", \"silencestatus\") > 0) {");
code("amt = amt * 2;");
code("}");
code("amt = amt * trQuestVarGet(\"p\"+p+\"baseAttack\") * trQuestVarGet(\"p\"+p+\"spellDamage\");");
code("trVectorSetUnitPos(\"pos\", \"enemies\");");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\", \"Dwarf\",1,trQuestVarGet(\"posX\"),0,trQuestVarGet(\"posZ\"),0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"bladeDanceTargets\");");
code("damageEnemy(p, amt, false);");
code("yRemoveFromDatabase(\"p\"+p+\"bladeDanceTargets\");");
code("break;");
code("}");
code("}");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("if (yGetDatabaseCount(\"p\"+p+\"bladeDanceTargets\") == 0) {");
code("trUnitChangeProtoUnit(\"Transport Ship Greek\");");
code("for(x=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"characters\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Dwarf\"));");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"next\"));");
code("trUnitChangeProtoUnit(\"Swordsman Hero\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"characters\");");
code("trMutateSelected(kbGetProtoUnitID(\"Swordsman Hero\"));");
code("}");
code("trQuestVarSet(\"p\"+p+\"launched\", 0);");
code("equipRelicsAgain(p);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitChangeProtoUnit(\"Kronny Birth SFX\");");
code("} else {");
code("trUnitChangeProtoUnit(\"Kronny Birth SFX\");");
code("}");
code("}");
code("}");

code("for(y=xsMin(2, yGetDatabaseCount(\"p\"+p+\"spellblades\")); >0) {");
code("hit = 0;");
code("yDatabaseNext(\"p\"+p+\"spellblades\");");
code("yVarToVector(\"p\"+p+\"spellblades\", \"prev\");");
code("yVarToVector(\"p\"+p+\"spellblades\", \"dir\");");
code("dist = zDistanceToVector(\"p\"+p+\"spellblades\", \"prev\");");
code("for(x=yGetDatabaseCount(\"enemies\"); >0) {");
code("if ((yDatabaseNext(\"enemies\", true) == -1) || trUnitAlive() == false) {");
code("removeEnemy();");
code("} else {");
code("trVectorSetUnitPos(\"pos\", \"enemies\");");
code("current = zDistanceBetweenVectors(\"pos\", \"prev\");");
code("if (current < dist + 3.0) {");
code("trQuestVarSet(\"hitboxX\", trQuestVarGet(\"prevX\") + current * trQuestVarGet(\"dirX\"));");
code("trQuestVarSet(\"hitboxZ\", trQuestVarGet(\"prevZ\") + current * trQuestVarGet(\"dirZ\"));");
code("if (zDistanceBetweenVectorsSquared(\"pos\", \"hitbox\") < 9.0) {");
code("trQuestVarSet(\"spellsound\", 2);");
code("amt = 0.5;");
code("hit = yGetVar(\"p\"+p+\"spellblades\", \"status\");");
code("if (hit >= xsPow(2, STATUS_SILENCE)) {");
code("hit = hit - xsPow(2, STATUS_SILENCE);");
code("silenceEnemy(p, 9.0);");
code("}");
code("if (hit >= xsPow(2, STATUS_POISON)) {");
code("hit = hit - xsPow(2, STATUS_POISON);");
code("poisonUnit(\"enemies\", 12.0, 12.0, p);");
code("}");
code("if (hit >= xsPow(2, STATUS_STUN)) {");
code("hit = hit - xsPow(2, STATUS_STUN);");
code("stunUnit(\"enemies\", 2.0, p);");
code("}");
code("if (yGetVar(\"enemies\", \"stunstatus\") > 0) {");
code("amt = amt * 2;");
code("}");
code("if (yGetVar(\"enemies\", \"poisonstatus\") > 0) {");
code("amt = amt * 2;");
code("}");
code("if (yGetVar(\"enemies\", \"silencestatus\") > 0) {");
code("amt = amt * 2;");
code("}");
code("amt = amt * trQuestVarGet(\"p\"+p+\"baseAttack\") * trQuestVarGet(\"p\"+p+\"spellDamage\");");
code("damageEnemy(p, amt, true);");
code("hit = 1;");
code("}");
code("}");
code("}");
code("}");
code("if (hit == 0) {");
code("trVectorSetUnitPos(\"pos\", \"p\"+p+\"spellblades\");");
code("vectorToGrid(\"pos\", \"loc\");");
code("if (terrainIsType(\"loc\", TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("hit = 1;");
code("trQuestVarSet(\"spellsound\", 1);");
code("} else {");
code("ySetVarFromVector(\"p\"+p+\"spellblades\", \"prev\", \"pos\");");
code("}");
code("}");

code("if (hit == 1) {");
code("gainFavor(p, 1);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"spellblades\");");
code("trUnitChangeProtoUnit(\"Lightning Sparks Ground\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"spellblades\");");
code("trDamageUnitPercent(-100);");
code("yRemoveFromDatabase(\"p\"+p+\"spellblades\");");
code("}");
code("}");

code("if (trQuestVarGet(\"spellsound\") == 1) {");
code("trQuestVarSetFromRand(\"sound\", 1, 3, true);");
code("trSoundPlayFN(\"mine\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("} else if (trQuestVarGet(\"spellsound\") == 2) {");
code("trQuestVarSetFromRand(\"sound\", 1,4,true);");
code("trSoundPlayFN(\"arrowonflesh\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("}");
code("trQuestVarSet(\"spellsound\", 0);");

code("if (trQuestVarGet(\"p\"+p+\"wellStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"wellStatus\", ABILITY_OFF);");
code("trSoundPlayFN(\"manticorespecialattack.wav\",\"1\",-1,\"\",\"\");");
code("for(y=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("id = yDatabaseNext(\"p\"+p+\"characters\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeSpellstealer(p);");
code("} else {");
code("trVectorSetUnitPos(\"start\", \"p\"+p+\"characters\");");
code("hit = trQuestVarGet(\"spellbladesCount\") + 2 * trQuestVarGet(\"p\"+p+\"projectiles\");");
code("amt = angleBetweenVectors(\"start\", \"p\"+p+\"wellPos\");");
code("amt = fModulo(6.283185, amt - 0.196349 * (hit - 1) * 0.5);");
code("for(x=hit; >0) {");
code("trVectorSetFromAngle(\"dir\", amt);");
code("trQuestVarSet(\"endx\", trQuestVarGet(\"startx\") + trQuestVarGet(\"dirx\"));");
code("trQuestVarSet(\"endz\", trQuestVarGet(\"startz\") + trQuestVarGet(\"dirz\"));");
code("vectorSetAsTargetVector(\"target\",\"start\",\"end\",300.0);");
code("amt = fModulo(6.283185, amt + 0.196349);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,trQuestVarGet(\"startx\"),0,trQuestVarGet(\"startz\"),0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Stymph Bird Feather\"));");
code("trSetUnitOrientation(trVectorQuestVarGet(\"dir\"),vector(0,1,0),true);");
code("trUnitMoveToPoint(trQuestVarGet(\"targetx\"),0,trQuestVarGet(\"targetz\"));");
code("yAddToDatabase(\"p\"+p+\"spellblades\",\"next\");");
code("yAddUpdateVar(\"p\"+p+\"spellblades\",\"prevX\", trQuestVarGet(\"startX\"));");
code("yAddUpdateVar(\"p\"+p+\"spellblades\",\"prevZ\", trQuestVarGet(\"startZ\"));");
code("yAddUpdateVar(\"p\"+p+\"spellblades\",\"dirX\", trQuestVarGet(\"dirX\"));");
code("yAddUpdateVar(\"p\"+p+\"spellblades\",\"dirZ\", trQuestVarGet(\"dirZ\"));");
code("yAddUpdateVar(\"p\"+p+\"spellblades\",\"status\", trQuestVarGet(\"p\"+p+\"spellstealStatus\"));");
code("}");
code("}");
code("}");
code("trQuestVarSet(\"p\"+p+\"spellstealStatus\", 0);");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"rainStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"rainStatus\", ABILITY_OFF);");
code("trQuestVarSet(\"p\"+p+\"negationCloak\", 1);");
code("trQuestVarSet(\"p\"+p+\"negationCloakTimeout\",");
code("trTimeMS() + 1000 * trQuestVarGet(\"negationCloakDuration\") * trQuestVarGet(\"p\"+p+\"spellDuration\"));");
code("trSoundPlayFN(\"spybirth.wav\",\"1\",-1,\"\",\"\");");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"negationCloak\") == 1) {");
code("if (trTime() > trQuestVarGet(\"p\"+p+\"negationCloakNext\")) {");
code("trQuestVarSet(\"p\"+p+\"negationCloakNext\", trTime());");
code("for(x=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("id = yDatabaseNext(\"p\"+p+\"characters\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeSpellstealer(p);");
code("} else {");
code("if (kbGetBlockID(\"\"+1*yGetVar(\"p\"+p+\"characters\", \"cloakSFX\")) == -1) {");
code("spyEffect(1*trQuestVarGet(\"p\"+p+\"characters\"),");
code("kbGetProtoUnitID(\"Kronny Birth SFX\"), yGetVarName(\"p\"+p+\"characters\", \"cloakSFX\"));");
code("} else {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"p\"+p+\"characters\", \"cloakSFX\"), true);");
code("trUnitChangeProtoUnit(\"Kronny Birth SFX\");");
code("}");
code("}");
code("}");
code("}");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"negationCloakTimeout\")) {");
code("trSoundPlayFN(\"godpowerfailed.wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSet(\"p\"+p+\"negationCloak\", 0);");
code("for(x=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("if ((yDatabaseNext(\"p\"+p+\"characters\", true) == -1) || (trUnitAlive() == false)) {");
code("removeSpellstealer(p);");
code("} else {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"p\"+p+\"characters\", \"cloakSFX\"), true);");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("}");
code("}");
code("}");
code("}");

code("ySetPointer(\"enemies\", index);");
code("poisonKillerBonus(p);");
code("xsSetContextPlayer(old);");
code("}");

code("void chooseSpellstealer(int eventID = -1) {");
code("int p = eventID - 1000 - 12 * SPELLSTEALER;");
code("if (trCurrentPlayer() == p) {");
code("map(\"q\", \"game\", \"uiSetSpecialPower(133) uiSpecialPowerAtPointer\");");
code("wellName = \"(Q) Spellblades\";");
code("wellIsUltimate = false;");
code("map(\"w\", \"game\", \"uiSetSpecialPower(156) uiSpecialPowerAtPointer\");");
code("rainName = \"(W) Negation Cloak\";");
code("rainIsUltimate = false;");
code("map(\"e\", \"game\", \"uiSetSpecialPower(227) uiSpecialPowerAtPointer\");");
code("lureName = \"(E) Blade Dance\";");
code("lureIsUltimate = true;");
code("}");
code("trQuestVarSet(\"p\"+p+\"wellCooldown\", trQuestVarGet(\"spellbladesCooldown\"));");
code("trQuestVarSet(\"p\"+p+\"wellCost\", 0);");
code("trQuestVarSet(\"p\"+p+\"lureCooldown\", 1);");
code("trQuestVarSet(\"p\"+p+\"lureCost\", trQuestVarGet(\"bladeDanceCost\"));");
code("trQuestVarSet(\"p\"+p+\"rainCooldown\", trQuestVarGet(\"negationCloakCooldown\"));");
code("trQuestVarSet(\"p\"+p+\"rainCost\", 0);");
code("}");


code("rule spellstealer_init");
code("active");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("for(p=1; < ENEMY_PLAYER) {");
code("trEventSetHandler(12 * SPELLSTEALER + p, \"spellstealerAlways\");");
code("trEventSetHandler(1000 + 12 * SPELLSTEALER + p, \"chooseSpellstealer\");");
code("}");
code("trQuestVarSet(\"spellstealerPassiveRadius\", 6);");

code("trQuestVarSet(\"bladeDanceCost\", 10);");
code("trQuestVarSet(\"bladeDanceRadius\", 15);");

code("trQuestVarSet(\"negationCloakDuration\", 3);");
code("trQuestVarSet(\"negationCloakCooldown\", 12);");

code("trQuestVarSet(\"spellbladesCooldown\", 9);");
code("trQuestVarSet(\"spellbladesCount\", 3);");

code("}");
code("void removeCommando(int p = 0) {");
code("for(y=3; >0) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"p\"+p+\"characters\", \"chimera\"+y));");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");
code("}");
code("removePlayerSpecific(p);");
code("}");

code("void minigunOff(int p = 0) {");
code("trQuestVarSet(\"p\"+p+\"minigun\", 0);");
code("trQuestVarSet(\"p\"+p+\"firstDelay\", 1000);");
code("trQuestVarSet(\"p\"+p+\"nextDelay\", 2000);");
code("zSetProtoUnitStat(\"Javelin Cavalry Hero\", p, 11, trQuestVarGet(\"p\"+p+\"RANGE\"));");
code("if (trCurrentPlayer() == p) {");
code("trSetCounterDisplay(\"Minigun: OFF\");");
code("}");
code("}");

code("void shootShotgun(int p = 0, string start = \"\", string dir = \"\", int count = 3) {");
code("float amt = angleOfVector(dir);");
code("float dist = 0.5 * (3.0 + count) / 7.0;");
code("amt = fModulo(6.283185, amt - 0.5 * dist);");
code("dist = dist / (count - 1);");
code("yAddToDatabase(\"p\"+p+\"shotgunHitboxes\",\"next\");");
code("yAddUpdateVar(\"p\"+p+\"shotgunHitboxes\", \"damage\", 0.6 * trQuestVarGet(\"p\"+p+\"attack\") * count);");
code("yAddUpdateVar(\"p\"+p+\"shotgunHitboxes\", \"startx\", trQuestVarGet(start+\"x\"));");
code("yAddUpdateVar(\"p\"+p+\"shotgunHitboxes\", \"startz\", trQuestVarGet(start+\"Z\"));");
code("yAddUpdateVar(\"p\"+p+\"shotgunHitboxes\", \"angle1\", amt);");
code("for(x=count; >0) {");
code("trVectorSetFromAngle(\"dir\", amt);");
code("amt = fModulo(6.283185, amt + dist);");
code("addGenericProj(\"p\"+p+\"pelletsIncoming\",start,dir,kbGetProtoUnitID(\"Thor Hammer\"),2,30.0,4.5,0.3, p);");
code("yAddUpdateVar(\"p\"+p+\"pelletsIncoming\", \"type\", 0);");
code("yAddUpdateVar(\"p\"+p+\"pelletsIncoming\", \"startx\", trQuestVarGet(start+\"x\"));");
code("yAddUpdateVar(\"p\"+p+\"pelletsIncoming\", \"startz\", trQuestVarGet(start+\"z\"));");
code("yAddUpdateVar(\"p\"+p+\"pelletsIncoming\", \"start\", trTimeMS());");
code("}");
code("yAddUpdateVar(\"p\"+p+\"shotgunHitboxes\", \"angle2\", amt);");
code("yAddUpdateVar(\"p\"+p+\"shotgunHitboxes\", \"dist\", 0);");
code("yAddUpdateVar(\"p\"+p+\"shotgunHitboxes\", \"startTime\", trTimeMS());");
code("}");

code("void commandoAlways(int eventID = -1) {");
code("int p = eventID - 12 * COMMANDO;");
code("int id = 0;");
code("int hit = 0;");
code("int target = 0;");
code("int index = yGetPointer(\"enemies\");");
code("float amt = 0;");
code("float dist = 0;");
code("float current = 0;");
code("int old = xsGetContextPlayer();");
code("xsSetContextPlayer(p);");

code("if (yFindLatest(\"p\"+p+\"latestProj\", \"Javelin Flaming\", p) > 0) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"latestProj\", true);");
code("trUnitChangeProtoUnit(\"Rocket\");");
code("}");

code("for(y=xsMin(3 + trQuestVarGet(\"p\"+p+\"projectiles\"), yGetDatabaseCount(\"p\"+p+\"pellets\")); >0) {");
code("yDatabaseNext(\"p\"+p+\"pellets\");");
code("yVarToVector(\"p\"+p+\"pellets\", \"dir\");");
code("yVarToVector(\"p\"+p+\"pellets\", \"start\");");
code("dist = 0.03 * (trTimeMS() - yGetVar(\"p\"+p+\"pellets\", \"start\"));");
code("trQuestVarSet(\"posx\", trQuestVarGet(\"startx\") + dist * trQuestVarGet(\"dirx\"));");
code("trQuestVarSet(\"posz\", trQuestVarGet(\"startz\") + dist * trQuestVarGet(\"dirz\"));");

code("vectorToGrid(\"pos\", \"loc\");");
code("if (terrainIsType(\"loc\", TERRAIN_WALL, TERRAIN_SUB_WALL) || dist > 30.0) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"pellets\", true);");
code("trUnitChangeProtoUnit(\"Dust Small\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"pellets\", true);");
code("trDamageUnitPercent(-100);");
code("if (dist < 30.0) {");
code("trQuestVarSet(\"minesound\", 1);");
code("}");
code("yRemoveFromDatabase(\"p\"+p+\"pellets\");");
code("} else if (yGetVar(\"p\"+p+\"pellets\",\"type\") == 1) {");
code("hit = 0;");
code("yVarToVector(\"p\"+p+\"pellets\", \"prev\");");
code("current = dist - yGetVar(\"p\"+p+\"pellets\", \"dist\");");
code("for(x=yGetDatabaseCount(\"enemies\"); >0) {");
code("if (yDatabaseNext(\"enemies\", true) == -1 || trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (rayCollision(\"enemies\", \"prev\", \"dir\", current + 2.0, 4.0)) {");
code("hit = 1;");
code("damageEnemy(p, trQuestVarGet(\"p\"+p+\"attack\"), false);");
code("}");
code("}");
code("if (hit == 1) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"pellets\", true);");
code("trUnitChangeProtoUnit(\"Lightning Sparks Ground\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"pellets\", true);");
code("trDamageUnitPercent(-100);");
code("yRemoveFromDatabase(\"p\"+p+\"pellets\");");
code("} else {");
code("ySetVar(\"p\"+p+\"pellets\", \"dist\", dist);");
code("ySetVarFromVector(\"p\"+p+\"pellets\", \"prev\", \"pos\");");
code("}");
code("}");
code("}");

code("if (trQuestVarGet(\"minesound\") == 1) {");
code("trQuestVarSet(\"minesound\", 0);");
code("trQuestVarSetFromRand(\"sound\", 1, 3, true);");
code("trSoundPlayFN(\"mine\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("}");

code("for(x=yGetDatabaseCount(\"p\"+p+\"pelletsIncoming\"); >0) {");
code("if (processGenericProj(\"p\"+p+\"pelletsIncoming\") == PROJ_BOUNCE) {");
code("trSetSelectedScale(0.3,0.3,-0.2);");
code("trUnitSetAnimationPath(\"3,0,0,0,0,0,0\");");
code("yAddToDatabase(\"p\"+p+\"pellets\", \"p\"+p+\"pelletsIncoming\");");
code("yAddUpdateVar(\"p\"+p+\"pellets\", \"type\", yGetVar(\"p\"+p+\"pelletsIncoming\", \"type\"));");
code("yAddUpdateVar(\"p\"+p+\"pellets\", \"dirx\", yGetVar(\"p\"+p+\"pelletsIncoming\", \"dirx\"));");
code("yAddUpdateVar(\"p\"+p+\"pellets\", \"dirz\", yGetVar(\"p\"+p+\"pelletsIncoming\", \"dirz\"));");
code("yAddUpdateVar(\"p\"+p+\"pellets\", \"prevx\", yGetVar(\"p\"+p+\"pelletsIncoming\", \"startx\"));");
code("yAddUpdateVar(\"p\"+p+\"pellets\", \"prevz\", yGetVar(\"p\"+p+\"pelletsIncoming\", \"startz\"));");
code("yAddUpdateVar(\"p\"+p+\"pellets\", \"startx\", yGetVar(\"p\"+p+\"pelletsIncoming\", \"startx\"));");
code("yAddUpdateVar(\"p\"+p+\"pellets\", \"startz\", yGetVar(\"p\"+p+\"pelletsIncoming\", \"startz\"));");
code("yAddUpdateVar(\"p\"+p+\"pellets\", \"dist\", 0);");
code("yAddUpdateVar(\"p\"+p+\"pellets\", \"start\", yGetVar(\"p\"+p+\"pelletsIncoming\", \"start\"));");
code("yRemoveFromDatabase(\"p\"+p+\"pelletsIncoming\");");
code("}");
code("}");

code("if (yGetDatabaseCount(\"p\"+p+\"shotgunHitboxes\") > 0) {");
code("yDatabaseNext(\"p\"+p+\"shotgunHitboxes\");");
code("yVarToVector(\"p\"+p+\"shotgunHitboxes\", \"start\");");
code("trVectorSetFromAngle(\"dir1\", yGetVar(\"p\"+p+\"shotgunHitboxes\", \"angle1\"));");
code("trVectorSetFromAngle(\"dir2\", yGetVar(\"p\"+p+\"shotgunHitboxes\", \"angle2\"));");
code("trQuestVarSet(\"angleDiff\", dotProduct(\"dir1\", \"dir2\"));");
code("dist = (trTimeMS() - yGetVar(\"p\"+p+\"shotgunHitboxes\", \"startTime\")) * 0.03;");
code("if (dist < 4.0) {");
code("trQuestVarSet(\"dir2X\", 0.0 - trQuestVarGet(\"dir1X\"));");
code("trQuestVarSet(\"dir2Z\", 0.0 - trQuestVarGet(\"dir1Z\"));");
code("trQuestVarSet(\"angleDiff\", -1);");
code("}");
code("trQuestVarSet(\"curDist\", dist);");
code("amt = yGetVar(\"p\"+p+\"shotgunHitboxes\", \"damage\");");
code("trQuestVarSet(\"outer\", dist * dist);");
code("trQuestVarSet(\"inner\", xsPow(yGetVar(\"p\"+p+\"shotgunHitboxes\", \"dist\"), 2));");
code("dist = yGetVar(\"p\"+p+\"shotgunHitboxes\", \"dist\");");
code("target = 0;");
code("for(x=yGetDatabaseCount(\"enemies\"); >0) {");
code("id = yDatabaseNext(\"enemies\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeEnemy();");
code("} else {");
code("current = zDistanceToVectorSquared(\"enemies\", \"start\");");
code("if (current < trQuestVarGet(\"outer\") && current > trQuestVarGet(\"inner\")) {");
code("trVectorSetUnitPos(\"pos\", \"enemies\");");
code("trVectorQuestVarSet(\"dir\", zGetUnitVector(\"start\", \"pos\"));");
code("trQuestVarSet(\"curDiff\", dotProduct(\"dir\", \"dir1\"));");
code("if (trQuestVarGet(\"curDiff\") > trQuestVarGet(\"angleDiff\")) {");
code("if (dotProduct(\"dir\", \"dir2\") > trQuestVarGet(\"angleDiff\")) {");
code("current = xsSqrt(current);");
code("dist = xsMax(current, dist);");
code("damageEnemy(p, (30.0 - current) / 30.0 * amt, false);");
code("target = 1;");
code("gainFavor(p, 1);");
code("}");
code("}");
code("}");
code("}");
code("}");

code("if (trTimeMS() > yGetVar(\"p\"+p+\"shotgunHitboxes\", \"startTime\") + 1000) {");
code("yRemoveFromDatabase(\"p\"+p+\"shotgunHitboxes\");");
code("} else if (target == 1) {");
code("ySetVar(\"p\"+p+\"shotgunHitboxes\", \"dist\", 0.5 * (trQuestVarGet(\"curDist\") + dist));");
code("trQuestVarSetFromRand(\"sound\", 1,4,true);");
code("trSoundPlayFN(\"arrowonflesh\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("} else if (trQuestVarGet(\"curDist\") > yGetVar(\"p\"+p+\"shotgunHitboxes\", \"dist\") + 2.0) {");
code("ySetVar(\"p\"+p+\"shotgunHitboxes\", \"dist\", trQuestVarGet(\"curDist\"));");
code("}");
code("}");

code("if (yGetDatabaseCount(\"p\"+p+\"characters\") > 0) {");
code("id = yDatabaseNext(\"p\"+p+\"characters\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeCommando(p);");
code("} else {");
code("hit = CheckOnHit(p, id);");
code("trVectorSetUnitPos(\"start\", \"p\"+p+\"characters\");");
code("if (hit == ON_HIT_NORMAL) {");
code("if (ySetPointer(\"enemies\", 1*yGetVar(\"p\"+p+\"characters\", \"attackTargetIndex\"))) {");
code("trVectorSetUnitPos(\"end\", \"enemies\");");
code("trVectorQuestVarSet(\"dir\", zGetUnitVector(\"start\", \"end\"));");
code("trSoundPlayFN(\"titanfall.wav\",\"1\",-1,\"\",\"\");");
code("if (trQuestVarGet(\"p\"+p+\"minigun\") == 1) {");
code("gainFavor(p, 0.0 - trQuestVarGet(\"p\"+p+\"ultimateCost\"));");
code("if (trPlayerResourceCount(p, \"favor\") == 0) {");
code("minigunOff(p);");
code("}");
code("addGenericProj(\"p\"+p+\"pelletsIncoming\",\"start\",\"dir\",kbGetProtoUnitID(\"Thor Hammer\"),2,30.0,4.5,0.3, p);");
code("yAddUpdateVar(\"p\"+p+\"pelletsIncoming\", \"type\", 1);");
code("yAddUpdateVar(\"p\"+p+\"pelletsIncoming\", \"startx\", trQuestVarGet(\"startx\"));");
code("yAddUpdateVar(\"p\"+p+\"pelletsIncoming\", \"startz\", trQuestVarGet(\"startz\"));");
code("yAddUpdateVar(\"p\"+p+\"pelletsIncoming\", \"start\", trTimeMS());");
code("} else {");
code("trSoundPlayFN(\"implode start.wav\",\"1\",-1,\"\",\"\");");
code("shootShotgun(p, \"start\", \"dir\", 3 + trQuestVarGet(\"p\"+p+\"projectiles\"));");
code("}");
code("}");
code("}");
code("}");
code("}");


code("if (yGetDatabaseCount(\"p\"+p+\"shrapnelShots\") > 0) {");
code("hit = 0;");
code("yDatabaseNext(\"p\"+p+\"shrapnelShots\");");
code("yVarToVector(\"p\"+p+\"shrapnelShots\", \"prev\");");
code("yVarToVector(\"p\"+p+\"shrapnelShots\", \"dir\");");

code("trVectorSetUnitPos(\"pos\", \"p\"+p+\"shrapnelShots\");");
code("vectorToGrid(\"pos\", \"loc\");");
code("if (terrainIsType(\"loc\", TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("hit = 1;");
code("trVectorQuestVarSet(\"dir\", getBounceDir(\"loc\",\"dir\"));");
code("} else {");
code("ySetVarFromVector(\"p\"+p+\"shrapnelShots\", \"prev\", \"pos\");");
code("}");


code("if (hit == 1) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"shrapnelShots\");");
code("trDamageUnitPercent(100);");
code("trUnitChangeProtoUnit(\"Meteorite\");");
code("yRemoveFromDatabase(\"p\"+p+\"shrapnelShots\");");
code("shootShotgun(p, \"prev\", \"dir\", 6 + 2 * trQuestVarGet(\"p\"+p+\"projectiles\"));");
code("trSoundPlayFN(\"shockwave.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"wellStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"wellStatus\", ABILITY_OFF);");
code("trSoundPlayFN(\"catapultattack.wav\",\"1\",-1,\"\",\"\");");
code("for(x=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("id = yDatabaseNext(\"p\"+p+\"characters\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeCommando(p);");
code("} else {");
code("trVectorSetUnitPos(\"start\", \"p\"+p+\"characters\");");
code("trVectorQuestVarSet(\"dir\", zGetUnitVector(\"start\", \"p\"+p+\"wellpos\"));");
code("vectorSetAsTargetVector(\"target\", \"start\", \"p\"+p+\"wellPos\", 300.0);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,trQuestVarGet(\"startx\"),0,trQuestVarGet(\"startz\"),0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Ball of Fire\"));");
code("trUnitOverrideAnimation(18,0,true,false,-1);");
code("trSetSelectedScale(0.5,0.5,0.5);");
code("trUnitMoveToPoint(trQuestVarGet(\"targetx\"),0,trQuestVarGet(\"targetz\"),-1, false);");
code("yAddToDatabase(\"p\"+p+\"shrapnelShots\",\"next\");");
code("yAddUpdateVar(\"p\"+p+\"shrapnelShots\", \"dirx\", trQuestVarGet(\"dirx\"));");
code("yAddUpdateVar(\"p\"+p+\"shrapnelShots\", \"dirz\", trQuestVarGet(\"dirz\"));");
code("yAddUpdateVar(\"p\"+p+\"shrapnelShots\", \"prevx\", trQuestVarGet(\"startx\"));");
code("yAddUpdateVar(\"p\"+p+\"shrapnelShots\", \"prevz\", trQuestVarGet(\"startz\"));");
code("yAddUpdateVar(\"p\"+p+\"shrapnelShots\", \"timeout\", trTimeMS() + 3000);");
code("}");
code("}");
code("}");

code("if (yGetDatabaseCount(\"p\"+p+\"fireharpies\") > 0) {");
code("for (x=yGetDatabaseCount(\"p\"+p+\"fireharpies\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"fireharpies\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Harpy\"));");
code("trUnitOverrideAnimation(1,0,false,false,-1);");
code("}");
code("yClearDatabase(\"p\"+p+\"fireharpies\");");
code("}");

code("if (yGetDatabaseCount(\"p\"+p+\"echoBombs\") > 0) {");
code("yDatabaseNext(\"p\"+p+\"echoBombs\");");
code("hit = 0;");
code("if (trQuestVarGet(\"p\"+p+\"echoBombs\") > 0) {");
code("target = 1*yGetVar(\"p\"+p+\"echoBombs\", \"unit\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+target);");
code("if (trUnitAlive() == false) {");
code("hit = 1;");
code("amt = yGetVar(\"p\"+p+\"echoBombs\", \"health\");");
code("} else {");
code("trVectorQuestVarSet(\"pos\", kbGetBlockPosition(\"\"+target));");
code("ySetVarFromVector(\"p\"+p+\"echoBombs\", \"pos\", \"pos\");");
code("xsSetContextPlayer(ENEMY_PLAYER);");
code("amt = kbUnitGetCurrentHitpoints(kbGetBlockID(\"\"+target));");
code("if (trTimeMS() > yGetVar(\"p\"+p+\"echoBombs\", \"timeout\")) {");
code("amt = yGetVar(\"p\"+p+\"echoBombs\", \"health\") - amt;");
code("hit = 1;");
code("if (ySetPointer(\"enemies\", 1*yGetVar(\"p\"+p+\"echoBombs\", \"index\"))) {");
code("ySetVar(\"enemies\", \"bomb\", 0);");
code("}");
code("} else if (amt < yGetVar(\"p\"+p+\"echoBombs\", \"currenthealth\")) {");
code("ySetVar(\"p\"+p+\"echoBombs\", \"size\",");
code("yGetVar(\"p\"+p+\"echoBombs\", \"size\") + 0.002 * (yGetVar(\"p\"+p+\"echoBombs\", \"currenthealth\") - amt));");
code("ySetVar(\"p\"+p+\"echoBombs\", \"currenthealth\", amt);");
code("amt = xsSqrt(yGetVar(\"p\"+p+\"echoBombs\", \"size\"));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"echoBombs\", true);");
code("trSetSelectedScale(amt, amt, amt);");
code("trUnitHighlight(0.2, false);");
code("}");
code("xsSetContextPlayer(p);");
code("}");
code("if (hit == 1) {");
code("yVarToVector(\"p\"+p+\"echoBombs\", \"pos\");");
code("amt = amt * trQuestVarGet(\"p\"+p+\"spellDamage\");");
code("dist = xsPow(trQuestVarGet(\"echoBombRadius\") * trQuestVarGet(\"p\"+p+\"spellRange\"), 2);");
code("for(x=yGetDatabaseCount(\"enemies\"); >0) {");
code("if (yDatabaseNext(\"enemies\", true) == -1 || trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (zDistanceToVectorSquared(\"enemies\", \"pos\") < dist) {");
code("damageEnemy(p, amt);");
code("}");
code("}");

code("if (amt < 1000) {");
code("trSoundPlayFN(\"meteorbighit.wav\",\"1\",-1,\"\",\"\");");
code("} else {");
code("trSoundPlayFN(\"cinematics\35_out\strike.mp3\",\"1\",-1,\"\",\"\");");
code("trCameraShake(0.5, 0.3);");
code("}");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"echoBombs\", true);");
code("trUnitDestroy();");

code("zSetProtoUnitStat(\"Kronny Flying\", p, 1, 0.01);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,trQuestVarGet(\"posX\"),0,trQuestVarGet(\"posZ\"),0,true);");
code("yAddToDatabase(\"p\"+p+\"fireHarpies\", \"next\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"next\"), true);");
code("trUnitChangeProtoUnit(\"Kronny Flying\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"next\"), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Kronny Flying\"));");
code("trSetSelectedScale(0,-5.0,0);");
code("trDamageUnitPercent(100);");

code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,trQuestVarGet(\"posX\"),0,trQuestVarGet(\"posZ\"),0,true);");
code("trArmySelect(\"\"+p+\",0\");");
code("trUnitChangeProtoUnit(\"Meteor Impact Ground\");");
code("yRemoveFromDatabase(\"p\"+p+\"echoBombs\");");
code("}");
code("}");
code("}");


code("if (trQuestVarGet(\"p\"+p+\"lureStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"lureStatus\", ABILITY_OFF);");
code("trVectorSetUnitPos(\"pos\", \"p\"+p+\"lureObject\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"lureObject\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Rocket\"));");
code("trUnitDestroy();");
code("dist = xsPow(12, 2);");
code("target = 0;");
code("for(x=yGetDatabaseCount(\"enemies\"); >0) {");
code("id = yDatabaseNext(\"enemies\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeEnemy();");
code("} else {");
code("current = zDistanceToVectorSquared(\"enemies\", \"pos\");");
code("if (current < dist) {");
code("hit = id;");
code("target = yGetPointer(\"enemies\");");
code("dist = current;");
code("}");
code("}");
code("}");
code("if (target > 0 && ySetPointer(\"enemies\", target) && yGetVar(\"enemies\", \"bomb\") == 0) {");
code("trVectorSetUnitPos(\"pos\", \"enemies\");");
code("trQuestVarSet(\"next\", -1);");
code("yAddToDatabase(\"p\"+p+\"echoBombs\", \"next\");");
code("yAddUpdateVar(\"p\"+p+\"echoBombs\", \"unit\", trQuestVarGet(\"enemies\"));");
code("spyEffect(1*trQuestVarGet(\"enemies\"),kbGetProtoUnitID(\"Phoenix Egg\"),yGetNewestName(\"p\"+p+\"echoBombs\"));");
code("xsSetContextPlayer(ENEMY_PLAYER);");
code("amt = kbUnitGetCurrentHitpoints(hit);");
code("yAddUpdateVar(\"p\"+p+\"echoBombs\", \"health\", amt);");
code("yAddUpdateVar(\"p\"+p+\"echoBombs\", \"currenthealth\", amt);");
code("yAddUpdateVar(\"p\"+p+\"echoBombs\", \"size\", 1.0);");
code("yAddUpdateVar(\"p\"+p+\"echoBombs\", \"posx\", trQuestVarGet(\"posx\"));");
code("yAddUpdateVar(\"p\"+p+\"echoBombs\", \"posz\", trQuestVarGet(\"posz\"));");
code("yAddUpdateVar(\"p\"+p+\"echoBombs\", \"index\", target);");
code("yAddUpdateVar(\"p\"+p+\"echoBombs\", \"timeout\",");
code("trTimeMS() + 1000 * trQuestVarGet(\"echoBombDuration\") * trQuestVarGet(\"p\"+p+\"spellDuration\"));");
code("xsSetContextPlayer(p);");
code("trSoundPlayFN(\"siegeselect.wav\", \"1\", -1, \"\",\"\");");
code("trSoundPlayFN(\"gatherpoint.wav\",\"1\",-1,\"\",\"\");");
code("} else {");
code("if (trCurrentPlayer() == p) {");
code("trSoundPlayFN(\"cantdothat.wav\",\"1\",-1,\"\",\"\");");
code("if (target > 0) {");
code("trChatSend(0, \"An enemy can only have one Echo Bomb on it at a time!\");");
code("} else {");
code("trChatSend(0, \"You must target an enemy with this ability!\");");
code("}");
code("}");
code("trQuestVarSet(\"p\"+p+\"lureCooldownStatus\", ABILITY_COST);");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"rainStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"rainStatus\", ABILITY_OFF);");
code("trQuestVarSet(\"p\"+p+\"minigun\", 1 - trQuestVarGet(\"p\"+p+\"minigun\"));");
code("if (trQuestVarGet(\"p\"+p+\"minigun\") == 1) {");
code("if (trPlayerResourceCount(p, \"favor\") == 0) {");
code("trQuestVarSet(\"p\"+p+\"minigun\", 0);");
code("if (trCurrentPlayer() == p) {");
code("trSoundPlayFN(\"cantdothat.wav\",\"1\",-1,\"\",\"\");");
code("trChatSend(0, \"Not enough favor to activate minigun!\");");
code("}");
code("} else {");
code("trSoundPlayFN(\"storehouse.wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSet(\"p\"+p+\"firstDelay\", 1000 / (2.0 + trQuestVarGet(\"p\"+p+\"projectiles\")));");
code("trQuestVarSet(\"p\"+p+\"nextDelay\", trQuestVarGet(\"p\"+p+\"firstDelay\"));");
code("zSetProtoUnitStat(\"Javelin Cavalry Hero\", p, 11, trQuestVarGet(\"p\"+p+\"RANGE\") * 1.5);");
code("if (trCurrentPlayer() == p) {");
code("trSetCounterDisplay(\"Minigun: ON\");");
code("}");
code("}");
code("} else {");
code("minigunOff(p);");
code("}");
code("}");

code("ySetPointer(\"enemies\", index);");
code("poisonKillerBonus(p);");
code("xsSetContextPlayer(old);");
code("}");

code("void chooseCommando(int eventID = -1) {");
code("int p = eventID - 1000 - 12 * COMMANDO;");
code("if (trCurrentPlayer() == p) {");
code("map(\"q\", \"game\", \"uiSetSpecialPower(133) uiSpecialPowerAtPointer\");");
code("wellName = \"(Q) Shrapnel Shot\";");
code("wellIsUltimate = false;");
code("map(\"e\", \"game\", \"uiSetSpecialPower(156) uiSpecialPowerAtPointer\");");
code("rainName = \"(E) Minigun\";");
code("rainIsUltimate = false;");
code("map(\"w\", \"game\", \"uiSetSpecialPower(227) uiSpecialPowerAtPointer\");");
code("lureName = \"(W) Echo Bomb\";");
code("lureIsUltimate = false;");
code("trSetCounterDisplay(\"Minigun: OFF\");");
code("}");
code("trQuestVarSet(\"p\"+p+\"wellCooldown\", trQuestVarGet(\"shrapnelCooldown\"));");
code("trQuestVarSet(\"p\"+p+\"wellCost\", 0);");
code("trQuestVarSet(\"p\"+p+\"lureCooldown\", trQuestVarGet(\"echoBombCooldown\"));");
code("trQuestVarSet(\"p\"+p+\"lureCost\", 0);");
code("trQuestVarSet(\"p\"+p+\"rainCooldown\", 1);");
code("trQuestVarSet(\"p\"+p+\"rainCost\", 0);");
code("}");

code("void modifyCommando(int eventID = -1) {");
code("int p = eventID - 5000 - 12 * COMMANDO;");
code("zSetProtoUnitStat(\"Javelin Cavalry Hero\", p, 13, 1);");
code("if (trQuestVarGet(\"p\"+p+\"minigun\") == 1) {");
code("zSetProtoUnitStat(\"Javelin Cavalry Hero\", p, 11, trQuestVarGet(\"p\"+p+\"RANGE\") * 1.5);");
code("}");
code("}");

code("rule commando_init");
code("active");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("for(p=1; < ENEMY_PLAYER) {");
code("trEventSetHandler(12 * COMMANDO + p, \"commandoAlways\");");
code("trEventSetHandler(1000 + 12 * COMMANDO + p, \"chooseCommando\");");
code("trEventSetHandler(5000 + 12 * COMMANDO + p, \"modifyCommando\");");
code("}");

code("trQuestVarSet(\"shrapnelCooldown\", 10);");

code("trQuestVarSet(\"echoBombCooldown\", 20);");
code("trQuestVarSet(\"echoBombDuration\", 6);");
code("trQuestVarSet(\"echoBombRadius\", 12);");

code("trQuestVarSet(\"minigunRange\", 1.5);");
code("}");
code("void removeSavior(int p = 0) {");
code("removePlayerSpecific(p);");

code("}");

code("void saviorAlways(int eventID = -1) {");
code("int p = eventID - 12 * SAVIOR;");
code("int id = 0;");
code("int hit = 0;");
code("int target = 0;");
code("int index = yGetPointer(\"enemies\");");
code("float amt = 0;");
code("float dist = 0;");
code("float current = 0;");
code("int old = xsGetContextPlayer();");
code("xsSetContextPlayer(p);");

code("if (trQuestVarGet(\"p\"+p+\"wellStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"wellStatus\", ABILITY_OFF);");

code("dist = xsPow(2 * trQuestVarGet(\"guardianAngelRange\") * trQuestVarGet(\"p\"+p+\"spellRange\"), 2);");
code("hit = -1;");
code("for(x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("id = yDatabaseNext(\"playerUnits\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else {");
code("amt = zDistanceToVectorSquared(\"playerUnits\", \"p\"+p+\"wellPos\");");
code("if (amt < dist) {");
code("dist = amt;");
code("hit = yGetPointer(\"playerUnits\");");
code("}");
code("}");
code("}");

code("if (hit > 0) {");
code("gainFavor(p, 5);");
code("ySetPointer(\"playerUnits\", hit);");
code("trVectorSetUnitPos(\"pos\", \"playerUnits\");");
code("trVectorQuestVarSet(\"dir\", zGetUnitVector(\"pos\", \"p\"+p+\"wellPos\", 2.0));");
code("dist = xsMin(trQuestVarGet(\"guardianAngelRange\") * trQuestVarGet(\"p\"+p+\"spellRange\"),");
code("zDistanceBetweenVectors(\"p\"+p+\"wellPos\", \"pos\")) / 2;");
code("for(x=dist; >0) {");
code("trQuestVarSet(\"tempx\", trQuestVarGet(\"posX\") + trQuestVarGet(\"dirX\"));");
code("trQuestVarSet(\"tempZ\", trQuestVarGet(\"posZ\") + trQuestVarGet(\"dirZ\"));");
code("vectorToGrid(\"temp\", \"loc\");");
code("if (terrainIsType(\"loc\", TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("break;");
code("} else {");
code("trQuestVarSet(\"posX\", trQuestVarGet(\"tempX\"));");
code("trQuestVarSet(\"posZ\", trQuestVarGet(\"tempZ\"));");
code("}");
code("}");
code("amt = 0;");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,trQuestVarGet(\"posx\"),0,trQuestVarGet(\"posz\"),180,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Transport Ship Greek\"));");
code("for(x=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("if (yDatabaseNext(\"p\"+p+\"characters\", true) == -1 || trUnitAlive() == false) {");
code("removeSavior(p);");
code("} else {");
code("trVectorSetUnitPos(\"start\", \"p\"+p+\"characters\");");
code("trVectorQuestVarSet(\"dir\", zGetUnitVector(\"start\", \"pos\"));");
code("amt = amt + zDistanceToVector(\"p\"+p+\"characters\", \"pos\");");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"next\"));");
code("trUnitChangeProtoUnit(\"Hero Greek Bellerophon\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"characters\");");
code("trSetUnitOrientation(trVectorQuestVarGet(\"dir\"),vector(0,1,0),true);");
code("}");
code("}");
code("equipRelicsAgain(p);");

code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitChangeProtoUnit(\"Arkantos God Out\");");
code("trSoundPlayFN(\"arkantosarrive.wav\",\"1\",-1,\"\",\"\");");

code("amt = trQuestVarGet(\"guardianAngelHeal\") * (1.0 + 0.1 * amt);");
code("dist = xsPow(trQuestVarGet(\"guardianAngelRange\") * trQuestVarGet(\"p\"+p+\"spellRange\"), 2);");

code("for(x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("yDatabaseNext(\"playerUnits\");");
code("if (zDistanceToVectorSquared(\"playerUnits\", \"pos\") < dist) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"playerUnits\", true);");
code("healUnit(p, amt * trQuestVarGet(\"p\"+p+\"spellDamage\"));");
code("}");
code("}");
code("} else {");
code("trQuestVarSet(\"p\"+p+\"wellCooldownStatus\", ABILITY_COST);");
code("if (trCurrentPlayer() == p) {");
code("trCounterAbort(\"well\");");
code("trChatSend(0, \"You must choose a unit to teleport to!\");");
code("trSoundPlayFN(\"cantdothat.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"lureStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"lureStatus\", ABILITY_OFF);");
code("if (trQuestVarGet(\"p\"+p+\"unity\") == 1) {");
code("for(x=trQuestVarGet(\"p\"+p+\"unityNext\"); < trQuestVarGet(\"p\"+p+\"unityend\")) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+x, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Rocket\"));");
code("trUnitDestroy();");
code("}");
code("}");
code("trVectorSetUnitPos(\"pos\", \"p\"+p+\"lureObject\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"lureObject\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Rocket\"));");
code("trUnitDestroy();");
code("vectorSnapToGrid(\"pos\");");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",8,trQuestVarGet(\"posX\"),0,trQuestVarGet(\"posZ\"),0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("for(x=trQuestVarGet(\"next\"); < trGetNextUnitScenarioNameNumber()) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+x, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Valkyrie\"));");
code("trSetSelectedScale(0,0,0);");
code("trUnitSetAnimationPath(\"1,0,0,0,0,0,0\");");
code("trUnitOverrideAnimation(15,0,true,false,-1);");
code("}");
code("trSoundPlayFN(\"gaiasparkle3.wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSet(\"p\"+p+\"unity\", 1);");
code("trQuestVarSet(\"p\"+p+\"unityNext\", trQuestVarGet(\"next\"));");
code("trQuestVarSet(\"p\"+p+\"unityEnd\", trGetNextUnitScenarioNameNumber());");
code("trQuestVarSet(\"p\"+p+\"unityTimeout\",");
code("trTimeMS() + 1000 * trQuestVarGet(\"unityDuration\") * trQuestVarGet(\"p\"+p+\"spellDuration\"));");
code("trQuestVarSet(\"p\"+p+\"unityLast\", trTimeMS());");
code("trQuestVarSet(\"p\"+p+\"unityradius\", trQuestVarGet(\"unityRadius\") * trQuestVarGet(\"p\"+p+\"spellRange\"));");
code("trQuestVarSet(\"p\"+p+\"unityangle\", 0);");
code("trQuestVarSet(\"p\"+p+\"unityposX\", trQuestVarGet(\"posX\"));");
code("trQuestVarSet(\"p\"+p+\"unityposZ\", trQuestVarGet(\"posZ\"));");
code("trQuestVarSet(\"p\"+p+\"unityLast\", trTimeMS());");
code("trQuestVarSet(\"p\"+p+\"unitySearch\", p);");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"unity\") == 1) {");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"unitytimeout\")) {");
code("for(x=trQuestVarGet(\"p\"+p+\"unityNext\"); < trQuestVarGet(\"p\"+p+\"unityend\")) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+x, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Rocket\"));");
code("trUnitDestroy();");
code("}");
code("zSetProtoUnitStat(\"Hero Greek Bellerophon\", p, 27, trQuestVarGet(\"p\"+p+\"baseAttack\"));");
code("trQuestVarSet(\"p\"+p+\"attack\", trQuestVarGet(\"p\"+p+\"baseAttack\"));");
code("trQuestVarSet(\"p\"+p+\"unity\", 0);");
code("for (x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("yDatabaseNext(\"playerUnits\");");
code("if (getBit(p, 1*yGetVar(\"playerUnits\", \"unity\")) == true) {");
code("ySetVar(\"playerUnits\", \"unity\", yGetVar(\"playerUnits\", \"unity\") - xsPow(2, p));");
code("ySetVar(\"playerUnits\", \"magicResist\", calculateArmor(yGetVar(\"playerUnits\", \"magicResist\"), -1.0));");
code("}");
code("}");
code("} else {");
code("dist = trTimeMS() - trQuestVarGet(\"p\"+p+\"unitylast\");");
code("amt = trQuestVarGet(\"p\"+p+\"unityangle\");");
code("amt = fModulo(6.283185, amt + dist * 0.001);");
code("trQuestVarSet(\"p\"+p+\"unitylast\", trTimeMS());");
code("trQuestVarSet(\"p\"+p+\"unityangle\", amt);");
code("trVectorSetFromAngle(\"dir1\", amt);");
code("trQuestVarSet(\"dir2x\", 0.707107 * (trQuestVarGet(\"dir1x\") - trQuestVarGet(\"dir1z\")));");
code("trQuestVarSet(\"dir2z\", 0.707107 * (trQuestVarGet(\"dir1x\") + trQuestVarGet(\"dir1z\")));");
code("amt = trQuestVarGet(\"p\"+p+\"unityradius\");");
code("dist = amt * amt;");
code("amt = 0.5 * amt;");
code("for(x=0; <4) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+(x+trQuestVarGet(\"p\"+p+\"unityNext\")), true);");
code("trSetSelectedUpVector(amt * trQuestVarGet(\"dir1x\"),0,amt * trQuestVarGet(\"dir1z\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+(4+x+trQuestVarGet(\"p\"+p+\"unityNext\")), true);");
code("trSetSelectedUpVector(amt * trQuestVarGet(\"dir2x\"),0,amt * trQuestVarGet(\"dir2z\"));");
code("vectorRotate90Deg(\"dir1\");");
code("vectorRotate90Deg(\"dir2\");");
code("}");
code("if (trTime() > trQuestVarGet(\"p\"+p+\"unityTime\")) {");
code("trQuestVarSet(\"p\"+p+\"unityTime\", trTime());");
code("hit = 0;");
code("for (x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("yDatabaseNext(\"playerUnits\");");
code("if (zDistanceToVectorSquared(\"playerUnits\", \"p\"+p+\"unitypos\") < dist) {");
code("hit = hit + 1;");
code("if (getBit(p, 1*yGetVar(\"playerUnits\", \"unity\")) == false) {");
code("ySetVar(\"playerUnits\", \"unity\", yGetVar(\"playerUnits\", \"unity\") + xsPow(2, p));");
code("ySetVar(\"playerUnits\", \"magicResist\", calculateArmor(yGetVar(\"playerUnits\", \"magicResist\"), 0.5));");
code("}");
code("} else if (getBit(p, 1*yGetVar(\"playerUnits\", \"unity\")) == true) {");
code("ySetVar(\"playerUnits\", \"unity\", yGetVar(\"playerUnits\", \"unity\") - xsPow(2, p));");
code("ySetVar(\"playerUnits\", \"magicResist\", calculateArmor(yGetVar(\"playerUnits\", \"magicResist\"), -1.0));");
code("}");
code("}");

code("trQuestVarSet(\"p\"+p+\"unityBuff\", trQuestVarGet(\"unityBonus\") * hit);");
code("trQuestVarSet(\"p\"+p+\"attack\", trQuestVarGet(\"p\"+p+\"baseAttack\") * (1.0 + trQuestVarGet(\"p\"+p+\"unityBuff\")));");
code("zSetProtoUnitStat(\"Hero Greek Bellerophon\", p, 27, trQuestVarGet(\"p\"+p+\"attack\"));");
code("}");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"rainStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"rainStatus\", ABILITY_OFF);");
code("trQuestVarSet(\"p\"+p+\"intervention\", 1);");
code("}");


code("if (yGetDatabaseCount(\"p\"+p+\"characters\") > 0) {");
code("id = yDatabaseNext(\"p\"+p+\"characters\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeSavior(p);");
code("} else {");
code("hit = CheckOnHit(p, id);");
code("if (hit == ON_HIT_JUMP) {");
code("if (yGetVar(\"p\"+p+\"characters\", \"jumping\") == 0) {");
code("ySetVar(\"p\"+p+\"characters\", \"jumping\", 1);");
code("ySetVar(\"p\"+p+\"characters\", \"attackTarget\", kbUnitGetTargetUnitID(id));");
code("for(x=yGetDatabaseCount(\"enemies\"); >0) {");
code("yDatabaseNext(\"enemies\");");
code("if (kbGetBlockID(\"\"+1*trQuestVarGet(\"enemies\")) == yGetVar(\"p\"+p+\"characters\", \"attackTarget\")) {");
code("ySetVar(\"p\"+p+\"characters\", \"attackTargetIndex\", yGetPointer(\"enemies\"));");
code("trQuestVarSet(\"p\"+p+\"poisonKillerActive\", yGetVar(\"enemies\", \"poisonStatus\"));");
code("break;");
code("}");
code("}");
code("}");
code("} else if (yGetVar(\"p\"+p+\"characters\", \"jumping\") == 1) {");
code("ySetVar(\"p\"+p+\"characters\", \"jumping\", 0);");
code("if (ySetPointer(\"enemies\", 1*yGetVar(\"p\"+p+\"characters\", \"attackTargetIndex\"))) {");
code("stunUnit(\"enemies\", 1.5, p);");
code("}");
code("} else if (hit >= ON_HIT_NORMAL) {");
code("target = 1;");
code("if (hit == ON_HIT_SPECIAL) {");
code("if (ySetPointer(\"enemies\", 1*yGetVar(\"p\"+p+\"characters\", \"attackTargetIndex\"))) {");
code("trVectorSetUnitPos(\"start\", \"p\"+p+\"characters\");");
code("trVectorSetUnitPos(\"end\", \"enemies\");");
code("trVectorQuestVarSet(\"dir\", zGetUnitVector(\"start\", \"end\"));");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,trQuestVarGet(\"startx\"),0,trQuestVarGet(\"startz\"),0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Petosuchus Projectile\"));");
code("trUnitHighlight(1.0, false);");
code("trSetUnitOrientation(xsVectorSet(0.0 - trQuestVarGet(\"dirx\"),0, 0.0 - trQuestVarGet(\"dirz\")), vector(0,1,0), true);");
code("dist = 10.0 + trQuestVarGet(\"p\"+p+\"attackRange\");");
code("yAddToDatabase(\"playerLasers\", \"next\");");
code("yAddUpdateVar(\"playerLasers\", \"timeout\", trTimeMS() + 500);");
code("yAddUpdateVar(\"playerLasers\", \"range\", dist * 1.3);");
code("amt = trQuestVarGet(\"p\"+p+\"attack\");");
code("for(x=yGetDatabaseCount(\"enemies\"); >1) {");
code("if (yDatabaseNext(\"enemies\", true) == -1 || trUnitAlive() == false) {");
code("removeEnemy();");
code("} else {");
code("current = zDistanceToVector(\"enemies\", \"start\");");
code("if (current < dist) {");
code("trQuestVarSet(\"hitboxX\", trQuestVarGet(\"startX\") + current * trQuestVarGet(\"dirx\"));");
code("trQuestVarSet(\"hitboxZ\", trQuestVarGet(\"startZ\") + current * trQuestVarGet(\"dirz\"));");
code("if (zDistanceToVectorSquared(\"enemies\", \"hitbox\") < 9) {");
code("damageEnemy(p, amt, false);");
code("target = 1 + target;");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");
code("if (trQuestVarGet(\"p\"+p+\"unity\") == 1) {");
code("amt = trQuestVarGet(\"p\"+p+\"attack\") * trQuestVarGet(\"unityHeal\") * target;");
code("dist = xsPow(trQuestVarGet(\"unityRadius\") * trQuestVarGet(\"p\"+p+\"spellRange\"), 2);");
code("gainFavor(p, 1);");
code("for(x=yGetDatabaseCount(\"playerUnits\"); >0) {");
code("if (yDatabaseNext(\"playerUnits\", true) == -1 || trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (zDistanceToVectorSquared(\"playerUnits\", \"p\"+p+\"unityPos\") < dist) {");
code("healUnit(p, amt);");
code("if (yGetVar(\"playerUnits\", \"hero\") == 1) {");
code("trPlayerGrantResources(1*yGetVar(\"playerUnits\",\"player\"), \"favor\", target);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"dead\") > 0 &&");
code("trPlayerResourceCount(p, \"favor\") >= trQuestVarGet(\"interventionCost\") * trQuestVarGet(\"p\"+p+\"ultimateCost\")) {");
code("trQuestVarSet(\"p\"+p+\"intervention\", 1);");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"intervention\") == 1) {");
code("for(x=yGetDatabaseCount(\"playerCharacters\"); >0) {");
code("if (yDatabaseNext(\"playerCharacters\", true) == -1 || trUnitAlive() == false) {");
code("removePlayerCharacter();");
code("}");
code("}");
code("for(x=1; < ENEMY_PLAYER) {");
code("if (trQuestVarGet(\"p\"+x+\"dead\") > 0) {");
code("revivePlayer(x);");
code("trQuestVarSet(\"p\"+x+\"dead\", 0);");
code("}");
code("}");
code("gainFavor(p, 0.0 - trQuestVarGet(\"interventionCost\") * trQuestVarGet(\"p\"+p+\"ultimateCost\"));");
code("trQuestVarSet(\"p\"+p+\"rainCooldownStatus\", ABILITY_COOLDOWN);");
code("trChatSend(0, \"<color=1,1,1>Intervention!</color>\");");
code("trSoundPlayFN(\"restorationbirth.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"herobirth3.wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSet(\"p\"+p+\"intervention\", 0);");
code("}");

code("ySetPointer(\"enemies\", index);");
code("poisonKillerBonus(p);");
code("xsSetContextPlayer(old);");
code("}");

code("void chooseSavior(int eventID = -1) {");
code("int p = eventID - 1000 - 12 * SAVIOR;");
code("if (trCurrentPlayer() == p) {");
code("map(\"q\", \"game\", \"uiSetSpecialPower(133) uiSpecialPowerAtPointer\");");
code("wellName = \"(Q) Guardian Angel\";");
code("wellIsUltimate = false;");
code("map(\"e\", \"game\", \"uiSetSpecialPower(156) uiSpecialPowerAtPointer\");");
code("rainName = \"(E) Intervention\";");
code("rainIsUltimate = true;");
code("map(\"w\", \"game\", \"uiSetSpecialPower(227) uiSpecialPowerAtPointer\");");
code("lureName = \"(W) Unity\";");
code("lureIsUltimate = false;");
code("}");
code("trQuestVarSet(\"p\"+p+\"wellCooldown\", trQuestVarGet(\"guardianAngelCooldown\"));");
code("trQuestVarSet(\"p\"+p+\"wellCost\", 0);");
code("trQuestVarSet(\"p\"+p+\"lureCooldown\", trQuestVarGet(\"unityCooldown\"));");
code("trQuestVarSet(\"p\"+p+\"lureCost\", trQuestVarGet(\"unityCost\"));");
code("trQuestVarSet(\"p\"+p+\"rainCooldown\", trQuestVarGet(\"interventionCooldown\"));");
code("trQuestVarSet(\"p\"+p+\"rainCost\", trQuestVarGet(\"interventionCost\"));");
code("}");

code("void modifySavior(int eventID = -1) {");
code("int p = eventID - 5000 - 12 * SAVIOR;");
code("if (yGetDatabaseCount(\"p\"+p+\"unityAuras\") >0) {");
code("trQuestVarSet(\"p\"+p+\"attack\", trQuestVarGet(\"p\"+p+\"baseAttack\") * (1.0 + trQuestVarGet(\"p\"+p+\"unityBuff\")));");
code("zSetProtoUnitStat(\"Hero Greek Bellerophon\", p, 27, trQuestVarGet(\"p\"+p+\"attack\"));");
code("}");
code("}");

code("rule savior_init");
code("active");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("for(p=1; < ENEMY_PLAYER) {");
code("trEventSetHandler(12 * SAVIOR + p, \"saviorAlways\");");
code("trEventSetHandler(1000 + 12 * SAVIOR + p, \"chooseSavior\");");
code("trEventSetHandler(5000 + 12 * SAVIOR + p, \"modifySavior\");");
code("}");

code("trQuestVarSet(\"guardianAngelCooldown\", 8);");
code("trQuestVarSet(\"guardianAngelHeal\", 50);");
code("trQuestVarSet(\"guardianAngelRange\", 10);");

code("trQuestVarSet(\"unityCooldown\", 20);");
code("trQuestVarSet(\"unityRadius\", 10);");
code("trQuestVarSet(\"unityDuration\", 8);");
code("trQuestVarSet(\"unityBonus\", 0.5);");
code("trQuestVarSet(\"unityHeal\", 0.5);");

code("trQuestVarSet(\"interventionCost\", 100);");
code("trQuestVarSet(\"interventionCooldown\", 10);");
code("}");
code("void removeGardener(int p = 0) {");
code("removePlayerSpecific(p);");
code("}");

code("void plantSeed(string next = \"\", int p = 0) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(next), true);");
code("trUnitChangeProtoUnit(\"Rock Granite Small\");");
code("yAddToDatabase(\"p\"+p+\"seeds\", next);");
code("yAddUpdateVar(\"p\"+p+\"seeds\", \"ready\", trTimeMS() + 2000);");
code("yAddUpdateVar(\"p\"+p+\"seeds\", \"timeout\",");
code("trTimeMS() + 1000 * trQuestVarGet(\"seedDuration\") * trQuestVarGet(\"p\"+p+\"spellDuration\"));");
code("yAddUpdateVar(\"p\"+p+\"seeds\", \"type\", trQuestVarGet(\"p\"+p+\"natureBounty\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(next), true);");
code("if (trQuestVarGet(\"p\"+p+\"natureBounty\") == 0) {");
code("trUnitSetAnimationPath(\"1,0,0,0,0\");");
code("} else {");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"next\"), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Berry Bush\"));");
code("}");
code("if (trCurrentPlayer() == p) {");
code("trUnitHighlight(trQuestVarGet(\"seedDuration\") * trQuestVarGet(\"p\"+p+\"spellDuration\"), true);");
code("}");
code("}");

code("void gardenerAlways(int eventID = -1) {");
code("int p = eventID - 12 * GARDENER;");
code("int id = 0;");
code("int hit = 0;");
code("int target = 0;");
code("float amt = 0;");
code("float dist = 0;");
code("float current = 0;");
code("int old = xsGetContextPlayer();");
code("xsSetContextPlayer(p);");
code("if (yGetDatabaseCount(\"p\"+p+\"characters\") > 0) {");
code("id = yDatabaseNext(\"p\"+p+\"characters\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeGardener(p);");
code("} else {");
code("hit = CheckOnHit(p, id);");
code("}");
code("}");

code("current = trQuestVarGet(\"seedDuration\") * trQuestVarGet(\"p\"+p+\"spellDuration\");");
code("amt = trQuestVarGet(\"seedHeal\");");
code("target = trQuestVarGet(\"p\"+p+\"seedHealPlayer\") + 1;");
code("if (target >= ENEMY_PLAYER) {");
code("target = 1;");
code("}");
code("if (trQuestVarGet(\"p\"+target+\"dead\") == 0) {");
code("for (y=yGetDatabaseCount(\"p\"+p+\"seeds\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"seeds\");");
code("hit = 0;");
code("dist = yGetVar(\"p\"+p+\"seeds\", \"timeout\") - trTimeMS();");
code("if (dist > 0) {");
code("dist = 0.001 * dist / current;");
code("trVectorSetUnitPos(\"pos\", \"p\"+p+\"seeds\");");
code("if (zDistanceToVectorSquared(\"p\"+target+\"unit\", \"pos\") < 1) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+target+\"unit\");");
code("if (trUnitPercentDamaged() > 0) {");
code("if (yGetVar(\"p\"+p+\"seeds\", \"type\") == 1) {");
code("healUnit(p, 4.0 * amt, 1*trQuestVarGet(\"p\"+target+\"index\"));");
code("} else {");
code("healUnit(p, amt, 1*trQuestVarGet(\"p\"+target+\"index\"));");
code("}");
code("hit = 1;");
code("}");
code("}");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"seeds\", true);");
code("if (hit == 1) {");
code("trQuestVarSet(\"eatSound\", 1);");
code("trUnitChangeProtoUnit(\"Regeneration SFX\");");
code("} else {");
code("dist = 0.5 + 0.5 * dist;");
code("trSetSelectedScale(dist, dist, dist);");
code("}");
code("} else {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"seeds\", true);");
code("trUnitChangeProtoUnit(\"Dust Small\");");
code("yRemoveFromDatabase(\"p\"+p+\"seeds\");");
code("}");
code("}");
code("}");

code("trQuestVarSet(\"p\"+p+\"seedHealPlayer\", target);");

code("if (trQuestVarGet(\"eatSound\") == 1) {");
code("trQuestVarSet(\"eatSound\", 0);");
code("trSoundPlayFN(\"colossuseat.wav\",\"1\",-1,\"\",\"\");");
code("}");

code("if (yGetDatabaseCount(\"p\"+p+\"lifeArrows\") > 0) {");
code("id = yDatabaseNext(\"p\"+p+\"lifeArrows\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("yVarToVector(\"p\"+p+\"lifeArrows\", \"pos\");");
code("yRemoveFromDatabase(\"p\"+p+\"lifeArrows\");");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,trQuestVarGet(\"posx\"),0,trQuestVarGet(\"posz\"),0,true);");
code("plantSeed(\"next\", p);");
code("} else {");
code("trVectorSetUnitPos(\"pos\", \"p\"+p+\"lifeArrows\");");
code("if (trQuestVarGet(\"posy\") < worldHeight + 0.3) {");
code("trMutateSelected(kbGetProtoUnitID(\"Transport Ship Greek\"));");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,1,0,1,0,true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"next\"), true);");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"p\"+p+\"lifeArrows\"));");
code("trUnitChangeProtoUnit(\"Rock Granite Small\");");

code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"p\"+p+\"lifeArrows\"), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Arrow Flaming\"));");
code("yRemoveFromDatabase(\"p\"+p+\"lifeArrows\");");

code("plantSeed(\"next\", p);");
code("}");
code("}");
code("}");

code("for(y=trQuestVarGet(\"p\"+p+\"projectiles\"); >0) {");
code("if (yFindLatest(\"p\"+p+\"latestProj\", \"Arrow Flaming\", p) > 0) {");
code("trVectorSetUnitPos(\"start\", \"p\"+p+\"latestProj\");");
code("target = 0;");
code("dist = 25;");
code("for (x=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("id = yDatabaseNext(\"p\"+p+\"characters\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeGardener(p);");
code("} else if (kbUnitGetAnimationActionType(id) == 12) {");
code("current = zDistanceToVectorSquared(\"p\"+p+\"characters\", \"start\");");
code("if (current < dist) {");
code("dist = current;");
code("target = yGetPointer(\"p\"+p+\"characters\");");
code("}");
code("}");
code("}");
code("if (target > 0) {");
code("ySetPointer(\"p\"+p+\"characters\", target);");
code("target = trGetUnitScenarioNameNumber(1*yGetVar(\"p\"+p+\"characters\", \"attackTarget\"));");
code("trVectorQuestVarSet(\"pos\", kbGetBlockPosition(\"\"+target));");
code("yAddToDatabase(\"p\"+p+\"lifeArrows\", \"p\"+p+\"latestProj\");");
code("yAddUpdateVar(\"p\"+p+\"lifeArrows\", \"posx\", trQuestVarGet(\"posx\"));");
code("yAddUpdateVar(\"p\"+p+\"lifeArrows\", \"posz\", trQuestVarGet(\"posz\"));");
code("} else {");
code("break;");
code("}");
code("} else {");
code("break;");
code("}");
code("}");

code("if (yGetDatabaseCount(\"p\"+p+\"bloodblooms\") > 0) {");
code("id = yDatabaseNext(\"p\"+p+\"bloodblooms\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+(1+trQuestVarGet(\"p\"+p+\"bloodblooms\")), true);");
code("trDamageUnitPercent(100);");
code("yRemoveFromDatabase(\"p\"+p+\"bloodblooms\");");
code("} else if (kbUnitGetAnimationActionType(id) == 6) {");
code("if (yGetVar(\"p\"+p+\"bloodblooms\", \"attacking\") == 0) {");
code("ySetVar(\"p\"+p+\"bloodblooms\", \"attacking\", 1);");
code("ySetVar(\"p\"+p+\"bloodblooms\", \"attackNext\", trTimeMS() + 600);");
code("} else if (trTimeMS() > yGetVar(\"p\"+p+\"bloodblooms\", \"attackNext\")) {");
code("ySetVar(\"p\"+p+\"bloodblooms\", \"attackNext\", yGetVar(\"p\"+p+\"bloodblooms\", \"attackNext\") + 1300);");
code("target = kbUnitGetTargetUnitID(id);");
code("for(x=yGetDatabaseCount(\"enemies\"); >0) {");
code("if (yDatabaseNext(\"enemies\", true) == target) {");
code("gainFavor(p, 1);");
code("poisonUnit(\"enemies\", 12.0, 12.0, p);");
code("trVectorSetUnitPos(\"pos\", \"enemies\");");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,trQuestVarGet(\"posX\"),0,trQuestVarGet(\"posZ\"),0,true);");
code("plantSeed(\"next\", p);");
code("trSoundPlayFN(\"farming1.wav\",\"1\",-1,\"\",\"\");");
code("break;");
code("}");
code("}");
code("}");
code("} else if (yGetVar(\"p\"+p+\"bloodblooms\", \"attacking\") == 1) {");
code("ySetVar(\"p\"+p+\"bloodblooms\", \"attacking\", 0);");
code("}");
code("}");

code("hit = yGetDatabaseCount(\"p\"+p+\"stranglethorns\");");
code("if (hit > 0) {");
code("current = 1000.0 / hit;");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"stranglethornsNext\") + current) {");
code("trQuestVarSet(\"p\"+p+\"stranglethornsNext\", trQuestVarGet(\"p\"+p+\"stranglethornsNext\") + current);");
code("yDatabaseNext(\"p\"+p+\"stranglethorns\", true);");
code("if (trTimeMS() > yGetVar(\"p\"+p+\"stranglethorns\", \"timeout\")) {");
code("trDamageUnitPercent(100);");
code("yRemoveFromDatabase(\"p\"+p+\"stranglethorns\");");
code("} else {");
code("yVarToVector(\"p\"+p+\"stranglethorns\", \"pos\");");
code("dist = xsPow(trQuestVarGet(\"stranglethornsRadius\") * trQuestVarGet(\"p\"+p+\"spellRange\"), 2);");
code("amt = trQuestVarGet(\"stranglethornsDamage\") * trQuestVarGet(\"p\"+p+\"spellDamage\");");
code("for (x=yGetDatabaseCount(\"enemies\"); >0) {");
code("if (yDatabaseNext(\"enemies\", true) == -1 || trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (zDistanceToVectorSquared(\"enemies\", \"pos\") < dist) {");
code("stunUnit(\"enemies\", 1.0, p, false);");
code("damageEnemy(p, amt);");
code("}");
code("}");
code("}");
code("}");
code("} else {");
code("trQuestVarSet(\"p\"+p+\"stranglethornsNext\", trTimeMS());");
code("}");


code("if (trQuestVarGet(\"p\"+p+\"wellStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"wellStatus\", ABILITY_OFF);");

code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,trQuestVarGet(\"p\"+p+\"wellPosx\"),0,trQuestVarGet(\"p\"+p+\"wellPosz\"),0,true);");
code("trArmySelect(\"\"+p+\",0\");");
code("trUnitChangeProtoUnit(\"Heavenlight\");");
code("dist = xsPow(trQuestVarGet(\"stranglethornsRange\") * trQuestVarGet(\"p\"+p+\"spellRange\"), 2);");
code("for(x=yGetDatabaseCount(\"p\"+p+\"seeds\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"seeds\");");
code("if (zDistanceToVectorSquared(\"p\"+p+\"seeds\", \"p\"+p+\"wellPos\") < dist) {");
code("gainFavor(p, 1);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"seeds\", true);");
code("trUnitHighlight(0.01,false);");
code("if (yGetVar(\"p\"+p+\"seeds\", \"type\") == 1) {");
code("trUnitChangeProtoUnit(\"Walking Berry Bush\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"seeds\", true);");
code("trUnitConvert(p);");
code("trUnitChangeProtoUnit(\"Walking Berry Bush\");");
code("activatePlayerUnit(\"p\"+p+\"seeds\", p, kbGetProtoUnitID(\"Walking Berry Bush\"), calculateDecay(p, 5.0));");
code("yAddUpdateVar(\"playerUnits\", \"decayNext\", trTimeMS() + 5000);");
code("} else {");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Uproot 2x2\");");
code("trQuestVarSetFromRand(\"angle\", 0, 3.14, false);");
code("trVectorSetFromAngle(\"dir\", trQuestVarGet(\"angle\"));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"seeds\", true);");
code("trSetUnitOrientation(trVectorQuestVarGet(\"dir\"),vector(0,1,0),true);");
code("trSetSelectedScale(trQuestVarGet(\"p\"+p+\"spellRange\"),1,trQuestVarGet(\"p\"+p+\"spellRange\"));");
code("trVectorSetUnitPos(\"pos\", \"p\"+p+\"seeds\");");
code("yAddToDatabase(\"p\"+p+\"stranglethorns\", \"p\"+p+\"seeds\");");
code("yAddUpdateVar(\"p\"+p+\"stranglethorns\", \"posx\", trQuestVarGet(\"posx\"));");
code("yAddUpdateVar(\"p\"+p+\"stranglethorns\", \"posZ\", trQuestVarGet(\"posZ\"));");
code("yAddUpdateVar(\"p\"+p+\"stranglethorns\", \"timeout\", trTimeMS() + 1000 * trQuestVarGet(\"stranglethornsDuration\"));");
code("}");
code("yRemoveFromDatabase(\"p\"+p+\"seeds\");");
code("}");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"lureStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"lureStatus\", ABILITY_OFF);");
code("trVectorSetUnitPos(\"pos\", \"p\"+p+\"lureObject\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"lureObject\", true);");
code("trUnitDestroy();");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",2,trQuestVarGet(\"posx\"),0,trQuestVarGet(\"posz\"),0,true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+(1+trQuestVarGet(\"next\")), true);");
code("trUnitChangeProtoUnit(\"Audrey Base\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitChangeProtoUnit(\"Audrey\");");
code("yAddToDatabase(\"p\"+p+\"bloodblooms\", \"next\");");
code("activatePlayerUnit(\"next\", p, kbGetProtoUnitID(\"Audrey\"), calculateDecay(p, 8.0));");
code("yAddUpdateVar(\"playerUnits\", \"decayNext\", trTimeMS() + 2000);");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"natureBounty\") == 1) {");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"natureBountyTimeout\")) {");
code("trQuestVarSet(\"p\"+p+\"natureBounty\", 0);");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"rainStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"rainStatus\", ABILITY_OFF);");
code("trSoundPlayFN(\"walkingwoods1.wav\", \"1\", -1, \"\", \"\");");
code("trSoundPlayFN(\"gaiaforest.wav\", \"1\", -1, \"\", \"\");");
code("gainFavor(p, 0.0 - trQuestVarGet(\"natureBountyCost\") * trQuestVarGet(\"p\"+p+\"ultimateCost\"));");
code("trQuestVarSet(\"p\"+p+\"natureBounty\", 1);");
code("trQuestVarSet(\"p\"+p+\"natureBountyTimeout\",");
code("trTimeMS() + 1000 * trQuestVarGet(\"natureBountyDuration\") * trQuestVarGet(\"p\"+p+\"spellDuration\"));");
code("}");


code("poisonKillerBonus(p);");
code("xsSetContextPlayer(old);");
code("}");

code("void chooseGardener(int eventID = -1) {");
code("int p = eventID - 1000 - 12 * GARDENER;");
code("trQuestVarSet(\"p\"+p+\"latestProj\", trGetNextUnitScenarioNameNumber() - 1);");
code("if (trCurrentPlayer() == p) {");
code("map(\"w\", \"game\", \"uiSetSpecialPower(133) uiSpecialPowerAtPointer\");");
code("wellName = \"(W) Stranglethorns\";");
code("wellIsUltimate = false;");
code("map(\"e\", \"game\", \"uiSetSpecialPower(156) uiSpecialPowerAtPointer\");");
code("rainName = \"(E) Nature's Bounty\";");
code("rainIsUltimate = true;");
code("map(\"q\", \"game\", \"uiSetSpecialPower(227) uiSpecialPowerAtPointer\");");
code("lureName = \"(Q) Bloodbloom\";");
code("lureIsUltimate = false;");
code("}");
code("trQuestVarSet(\"p\"+p+\"wellCooldown\", trQuestVarGet(\"stranglethornsCooldown\"));");
code("trQuestVarSet(\"p\"+p+\"wellCost\", 0);");
code("trQuestVarSet(\"p\"+p+\"lureCooldown\", trQuestVarGet(\"bloodbloomCooldown\"));");
code("trQuestVarSet(\"p\"+p+\"lureCost\", 0);");
code("trQuestVarSet(\"p\"+p+\"rainCooldown\", 1);");
code("trQuestVarSet(\"p\"+p+\"rainCost\", trQuestVarGet(\"natureBountyCost\"));");
code("}");

code("void modifyGardener(int eventID = -1) {");
code("int p = eventID - 5000 - 12 * GARDENER;");
code("zSetProtoUnitStat(\"Walking Berry Bush\", p, 0, 0.5 * trQuestVarGet(\"p\"+p+\"health\"));");
code("zSetProtoUnitStat(\"Walking Berry Bush\", p, 27, 0.5 * trQuestVarGet(\"p\"+p+\"attack\"));");
code("zSetProtoUnitStat(\"Audrey\", p, 0, trQuestVarGet(\"p\"+p+\"health\"));");
code("zSetProtoUnitStat(\"Audrey\", p, 27, trQuestVarGet(\"p\"+p+\"attack\"));");
code("}");


code("rule gardener_init");
code("active");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("for(p=1; < ENEMY_PLAYER) {");
code("trEventSetHandler(12 * GARDENER + p, \"gardenerAlways\");");
code("trEventSetHandler(1000 + 12 * GARDENER + p, \"chooseGardener\");");
code("trEventSetHandler(5000 + 12 * GARDENER + p, \"modifyGardener\");");
code("}");

code("trQuestVarSet(\"seedHeal\", 30);");
code("trQuestVarSet(\"seedDuration\", 15);");

code("trQuestVarSet(\"bloodbloomCooldown\", 15);");

code("trQuestVarSet(\"stranglethornsCooldown\", 12);");
code("trQuestVarSet(\"stranglethornsRange\", 6);");
code("trQuestVarSet(\"stranglethornsRadius\", 3);");
code("trQuestVarSet(\"stranglethornsDuration\", 3);");
code("trQuestVarSet(\"stranglethornsDamage\", 20);");

code("trQuestVarSet(\"natureBountyCost\", 60);");
code("trQuestVarSet(\"natureBountyDuration\", 12);");
code("}");


code("void removeNightrider(int p = 0) {");
code("removePlayerSpecific(p);");
code("yRemoveUpdateVar(\"p\"+p+\"characters\", \"doomsdaySFX\");");
code("}");

code("void spawnMinion(int p = 0, string pos = \"\", float heading = 0) {");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\",\"Minion\",1,trQuestVarGet(pos+\"x\"),0,trQuestVarGet(pos+\"z\"),heading,true);");
code("activatePlayerUnit(\"next\", p, kbGetProtoUnitID(\"Minion\"), calculateDecay(p, 5.0));");
code("}");

code("void castDeathSentence(int p = 0) {");
code("trSoundPlayFN(\"shadeofhadesbirth.wav\",\"1\",-1,\"\",\"\");");
code("trVectorSetUnitPos(\"pos\", \"enemies\");");

code("ySetVar(\"enemies\", \"deathSentence\", 1);");
code("poisonUnit(\"enemies\", trQuestVarGet(\"deathSentenceDuration\"), trQuestVarGet(\"deathSentenceDamage\"), p);");
code("silenceEnemy(p, trQuestVarGet(\"deathSentenceDuration\"));");
code("trQuestVarSet(\"poisonSound\", 0);");
code("yAddToDatabase(\"p\"+p+\"Sentences\", \"enemies\");");
code("yAddUpdateVar(\"p\"+p+\"Sentences\", \"index\", yGetPointer(\"enemies\"));");
code("yAddUpdateVar(\"p\"+p+\"sentences\", \"posx\", trQuestVarGet(\"posx\"));");
code("yAddUpdateVar(\"p\"+p+\"sentences\", \"posz\", trQuestVarGet(\"posz\"));");
code("yAddUpdateVar(\"p\"+p+\"sentences\", \"timeout\",");
code("trTimeMS() + 1000 * trQuestVarGet(\"deathSentenceDuration\") * trQuestVarGet(\"p\"+p+\"spellDuration\"));");

code("xsSetContextPlayer(ENEMY_PLAYER);");
code("yAddUpdateVar(\"p\"+p+\"sentences\", \"health\", kbUnitGetCurrentHitpoints(kbGetBlockID(\"\"+1*trQuestVarGet(\"enemies\"))));");
code("xsSetContextPlayer(p);");

code("spyEffect(1*trQuestVarGet(\"enemies\"),kbGetProtoUnitID(\"Shade\"),yGetNewVarName(\"p\"+p+\"sentences\", \"SFX\"));");
code("}");

code("void nightriderAlways(int eventID = -1) {");
code("int p = eventID - 12 * NIGHTRIDER;");
code("int id = 0;");
code("int hit = 0;");
code("int target = 0;");
code("int index = yGetPointer(\"enemies\");");
code("float amt = 0;");
code("float dist = 0;");
code("float current = 0;");
code("int old = xsGetContextPlayer();");
code("xsSetContextPlayer(p);");

code("if (yGetDatabaseCount(\"p\"+p+\"characters\") > 0) {");
code("id = yDatabaseNext(\"p\"+p+\"characters\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeNightrider(p);");
code("} else {");
code("hit = CheckOnHit(p, id);");

code("if (trQuestVarGet(\"p\"+p+\"doomsday\") == 1) {");
code("amt = xsSqrt(trQuestVarGet(\"p\"+p+\"doomsdayBonus\"));");
code("trSetSelectedScale(amt, amt, amt);");
code("if (hit >= ON_HIT_NORMAL) {");
code("if (trQuestVarGet(\"p\"+p+\"doomsday\") == 1) {");
code("trQuestVarSet(\"p\"+p+\"lifestealTotal\", trQuestVarGet(\"p\"+p+\"lifestealTotal\") + 0.03 * trQuestVarGet(\"p\"+p+\"health\"));");
code("trVectorSetUnitPos(\"pos\", \"p\"+p+\"characters\");");
code("trQuestVarSetFromRand(\"heading\", 1, 360, true);");
code("spawnMinion(p, \"pos\", trQuestVarGet(\"heading\"));");
code("trQuestVarSet(\"p\"+p+\"doomsdayBonus\", trQuestVarGet(\"p\"+p+\"doomsdayBonus\") + 0.1);");
code("trQuestVarSet(\"p\"+p+\"attack\", trQuestVarGet(\"p\"+p+\"baseAttack\") * trQuestVarGet(\"p\"+p+\"doomsdayBonus\"));");
code("zSetProtoUnitStat(\"Minion\", p, 27, (0.2 + trQuestVarGet(\"p\"+p+\"doomsdayBonus\")) * trQuestVarGet(\"p\"+p+\"baseAttack\"));");
code("zSetProtoUnitStat(\"Hero Greek Achilles\", p, 27, trQuestVarGet(\"p\"+p+\"Attack\"));");
code("}");
code("}");
code("}");


code("if (hit == ON_HIT_SPECIAL) {");
code("target = yGetPointer(\"enemies\");");
code("if (ySetPointer(\"enemies\", 1*yGetVar(\"p\"+p+\"characters\", \"attackTargetIndex\"))) {");
code("if (yGetVar(\"enemies\", \"deathSentence\") == 0) {");
code("castDeathSentence(p);");
code("} else {");
code("ySetVar(\"p\"+p+\"characters\", \"specialAttack\", 0);");
code("}");
code("ySetPointer(\"enemies\", target);");
code("}");
code("}");
code("if (kbGetBlockID(\"\"+1*yGetVar(\"p\"+p+\"characters\", \"doomsdaySFX\")) == -1) {");
code("spyEffect(1*trQuestVarGet(\"p\"+p+\"characters\"),");
code("kbGetProtoUnitID(\"Cinematic Block\"),yGetVarName(\"p\"+p+\"characters\",\"doomsdaySFX\"));");
code("}");

code("}");
code("}");

code("if (yGetDatabaseCount(\"p\"+p+\"sentences\") > 0) {");
code("xsSetContextPlayer(ENEMY_PLAYER);");
code("if (yDatabaseNext(\"p\"+p+\"Sentences\", true) == -1 || trUnitAlive() == false) {");
code("yVarToVector(\"p\"+p+\"Sentences\", \"pos\");");
code("hit = 0;");
code("dist = 100;");
code("for(x=yGetDatabaseCount(\"enemies\"); >0) {");
code("if (yDatabaseNext(\"enemies\", true) == -1 || trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (yGetVar(\"enemies\", \"deathSentence\") == 0) {");
code("current = zDistanceToVectorSquared(\"enemies\", \"Pos\");");
code("if (current < dist) {");
code("dist = current;");
code("hit = yGetPointer(\"enemies\");");
code("}");
code("}");
code("}");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"p\"+p+\"sentences\", \"SFX\"), true);");
code("trUnitChangeProtoUnit(\"Kronny Birth SFX\");");
code("yRemoveFromDatabase(\"p\"+p+\"sentences\");");
code("trQuestVarSetFromRand(\"heading\",1,360,false);");
code("spawnMinion(p, \"pos\", trQuestVarGet(\"heading\"));");
code("if (hit > 0) {");
code("ySetPointer(\"enemies\", hit);");
code("castDeathSentence(p);");
code("}");
code("} else {");
code("hit = yGetPointer(\"enemies\");");
code("if (ySetPointer(\"enemies\", 1*yGetVar(\"p\"+p+\"sentences\", \"index\"))) {");
code("if (trTimeMS() > yGetVar(\"p\"+p+\"sentences\", \"timeout\")) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"p\"+p+\"sentences\", \"SFX\"));");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");
code("ySetVar(\"enemies\", \"deathSentence\", 0);");
code("yRemoveFromDatabase(\"p\"+p+\"sentences\");");
code("} else {");
code("trVectorSetUnitPos(\"pos\", \"enemies\");");
code("ySetVarFromVector(\"p\"+p+\"sentences\", \"pos\", \"pos\");");
code("amt = kbUnitGetCurrentHitpoints(kbGetBlockID(\"\"+1*trQuestVarGet(\"enemies\")));");
code("dist = yGetVar(\"p\"+p+\"sentences\", \"health\") - amt;");
code("if (dist > 0) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"enemies\");");
code("trDamageUnit(dist);");
code("ySetVar(\"p\"+p+\"sentences\", \"health\", amt - dist);");
code("} else {");
code("ySetVar(\"p\"+p+\"sentences\", \"health\", amt);");
code("}");
code("}");
code("ySetPointer(\"enemies\", hit);");
code("}");
code("}");
code("xsSetContextPlayer(p);");
code("}");

code("for (x=yGetDatabaseCount(\"p\"+p+\"abducts\"); > 0) {");
code("if (processGenericProj(\"p\"+p+\"abducts\") == PROJ_FALLING) {");
code("yVarToVector(\"p\"+p+\"abducts\", \"prev\");");
code("yVarToVector(\"p\"+p+\"abducts\", \"dir\");");
code("yVarToVector(\"p\"+p+\"abducts\", \"dest\");");
code("dist = zDistanceBetweenVectors(\"pos\", \"prev\") + 3.0;");
code("if (zDistanceBetweenVectorsSquared(\"pos\", \"dest\") < dist &&");
code("zDistanceBetweenVectorsSquared(\"prev\", \"dest\") < dist) {");
code("trUnitChangeProtoUnit(\"Kronny Birth SFX\");");
code("yRemoveFromDatabase(\"p\"+p+\"abducts\");");
code("} else {");
code("for(y=yGetDatabaseCount(\"enemies\"); >0) {");
code("if (yDatabaseNext(\"enemies\", true) == -1 || trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (yGetVar(\"enemies\", \"launched\") == 0) {");
code("trVectorSetUnitPos(\"target\", \"enemies\");");
code("current = zDistanceBetweenVectors(\"target\", \"prev\");");
code("if (current < dist) {");
code("trQuestVarSet(\"hitboxX\", trQuestVarGet(\"prevX\") + current * trQuestVarGet(\"dirX\"));");
code("trQuestVarSet(\"hitboxZ\", trQuestVarGet(\"prevZ\") + current * trQuestVarGet(\"dirZ\"));");
code("if (zDistanceBetweenVectorsSquared(\"target\", \"hitbox\") < 9.0) {");
code("gainFavor(p, 1);");
code("trQuestVarSet(\"destX\", trQuestVarGet(\"destX\") + trQuestVarGet(\"targetX\") - trQuestVarGet(\"hitboxX\"));");
code("trQuestVarSet(\"destZ\", trQuestVarGet(\"destZ\") + trQuestVarGet(\"targetZ\") - trQuestVarGet(\"hitboxZ\"));");
code("if ((yGetVar(\"p\"+p+\"abducts\", \"curse\") == 1) &&");
code("yGetVar(\"enemies\", \"deathSentence\") == 0) {");
code("castDeathSentence(p);");
code("ySetVar(\"p\"+p+\"abducts\", \"curse\", 0);");
code("}");
code("launchUnit(\"enemies\", \"dest\");");
code("}");
code("}");
code("}");
code("}");
code("ySetVarFromVector(\"p\"+p+\"abducts\", \"prev\", \"pos\");");
code("}");
code("}");
code("}");

code("dist = trQuestVarGet(\"abductRange\") * trQuestVarGet(\"p\"+p+\"spellRange\");");
code("if (trQuestVarGet(\"p\"+p+\"wellStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"wellStatus\", ABILITY_OFF);");
code("for(x=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("if (yDatabaseNext(\"p\"+p+\"characters\", true) == -1 || trUnitAlive() == false) {");
code("removeNightrider(p);");
code("} else {");
code("trVectorSetUnitPos(\"pos\", \"p\"+p+\"characters\");");
code("trVectorQuestVarSet(\"dir\", zGetUnitVector(\"p\"+p+\"wellPos\", \"pos\"));");
code("trQuestVarSet(\"startx\", trQuestVarGet(\"posx\") - dist * trQuestVarGet(\"dirx\"));");
code("trQuestVarSet(\"startz\", trQuestVarGet(\"posz\") - dist * trQuestVarGet(\"dirz\"));");
code("addGenericProj(\"p\"+p+\"abducts\",\"start\",\"dir\",kbGetProtoUnitID(\"Kronny Birth SFX\"),2,15.0,4.5,0,p);");
code("yAddUpdateVar(\"p\"+p+\"abducts\", \"prevx\", trQuestVarGet(\"startx\"));");
code("yAddUpdateVar(\"p\"+p+\"abducts\", \"prevz\", trQuestVarGet(\"startz\"));");
code("yAddUpdateVar(\"p\"+p+\"abducts\", \"destx\", trQuestVarGet(\"posx\"));");
code("yAddUpdateVar(\"p\"+p+\"abducts\", \"destz\", trQuestVarGet(\"posz\"));");
code("yAddUpdateVar(\"p\"+p+\"abducts\", \"curse\", 1);");
code("}");
code("}");
code("trSoundPlayFN(\"changeunit.wav\",\"1\",-1,\"\",\"\");");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"rainStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"rainStatus\", ABILITY_OFF);");
code("trQuestVarSet(\"p\"+p+\"ariseCount\", trQuestVarGet(\"p\"+p+\"ariseCount\") + 3 + yGetDatabaseCount(\"p\"+p+\"sentences\"));");
code("trQuestVarSetFromRand(\"p\"+p+\"ariseAngle\", 0, 3.14, false);");
code("trQuestVarSet(\"p\"+p+\"ariseDist\", 2);");
code("trQuestVarSet(\"p\"+p+\"ariseNext\", trTimeMS());");
code("trSoundPlayFN(\"ancestorsbirth.wav\", \"1\", -1, \"\",\"\");");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"ariseCount\") > 0) {");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"ariseNext\")) {");
code("trVectorSetFromAngle(\"dir\", trQuestVarGet(\"p\"+p+\"ariseAngle\"));");
code("amt = trQuestVarGet(\"p\"+p+\"ariseAngle\") * 57.295;");
code("for(x=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("if (yDatabaseNext(\"p\"+p+\"characters\", true) == -1 || trUnitAlive() == false) {");
code("removeNightrider(p);");
code("} else {");
code("trVectorSetUnitPos(\"pos\", \"p\"+p+\"characters\");");
code("trQuestVarSet(\"posx\", trQuestVarGet(\"posx\") + trQuestVarGet(\"p\"+p+\"ariseDist\") * trQuestVarGet(\"dirX\"));");
code("trQuestVarSet(\"posz\", trQuestVarGet(\"posz\") + trQuestVarGet(\"p\"+p+\"ariseDist\") * trQuestVarGet(\"dirZ\"));");
code("spawnMinion(p, \"pos\", amt);");
code("}");
code("}");
code("trQuestVarSet(\"p\"+p+\"ariseDist\", 0.5 + trQuestVarGet(\"p\"+p+\"ariseDist\"));");
code("trQuestVarSet(\"p\"+p+\"ariseAngle\", 2.43 + trQuestVarGet(\"p\"+p+\"ariseAngle\"));");
code("trQuestVarSet(\"p\"+p+\"ariseCount\", trQuestVarGet(\"p\"+p+\"ariseCount\") - 1);");
code("trQuestVarSet(\"p\"+p+\"ariseNext\", trQuestVarGet(\"p\"+p+\"ariseNext\") + 200);");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"doomsday\") == 1) {");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"doomsdayTimeout\")) {");
code("trQuestVarSet(\"p\"+p+\"doomsday\", 0);");
code("for(x=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"characters\", true);");
code("trSetSelectedScale(1,1,1);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"p\"+p+\"characters\", \"doomsdaySFX\"));");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");
code("}");
code("trModifyProtounit(\"Minion\", p, 27, 4.25);");
code("trModifyProtounit(\"Minion\", p, 1, 1);");
code("trTechSetStatus(p, 377, 0);");
code("zSetProtoUnitStat(\"Minion\", p, 27, 0.2 * trQuestVarGet(\"p\"+p+\"baseAttack\"));");
code("zSetProtoUnitStat(\"Hero Greek Achilles\", p, 27, trQuestVarGet(\"p\"+p+\"baseAttack\"));");
code("trQuestVarSet(\"p\"+p+\"attack\", trQuestVarGet(\"p\"+p+\"baseAttack\"));");
code("trQuestVarSet(\"p\"+p+\"doomsdayBonus\", 0);");
code("trSoundPlayFN(\"godpowerfailed.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"lureStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"lureStatus\", ABILITY_OFF);");
code("gainFavor(p, 0.0 - trQuestVarGet(\"doomsdayCost\") * trQuestVarGet(\"p\"+p+\"ultimateCost\"));");
code("trQuestVarSet(\"p\"+p+\"doomsday\", 1);");
code("trQuestVarSet(\"p\"+p+\"doomsdayBonus\", 1);");
code("trQuestVarSet(\"p\"+p+\"doomsdayTimeout\",");
code("trTimeMS() + 1000 * trQuestVarGet(\"doomsdayDuration\") * trQuestVarGet(\"p\"+p+\"spellDuration\"));");
code("for(x=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"characters\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"p\"+p+\"characters\", \"doomsdaySFX\"));");
code("trMutateSelected(kbGetProtoUnitID(\"Tartarian Gate\"));");
code("trSetSelectedScale(0,0,0);");
code("trUnitOverrideAnimation(6,0,false,true,-1);");
code("}");
code("trModifyProtounit(\"Minion\", p, 27, -4.25);");
code("trModifyProtounit(\"Minion\", p, 1, -1);");
code("trTechSetStatus(p, 377, 4);");
code("trSoundPlayFN(\"tartariangateselect.wav\",\"1\",-1,\"\",\"\");");
code("}");

code("ySetPointer(\"enemies\", index);");
code("poisonKillerBonus(p);");
code("xsSetContextPlayer(old);");
code("}");

code("void chooseNightrider(int eventID = -1) {");
code("int p = eventID - 1000 - 12 * NIGHTRIDER;");
code("if (trCurrentPlayer() == p) {");
code("map(\"q\", \"game\", \"uiSetSpecialPower(133) uiSpecialPowerAtPointer\");");
code("wellName = \"(Q) Abduct\";");
code("wellIsUltimate = false;");
code("map(\"w\", \"game\", \"uiSetSpecialPower(156) uiSpecialPowerAtPointer\");");
code("rainName = \"(W) Arise\";");
code("rainIsUltimate = false;");
code("map(\"e\", \"game\", \"uiSetSpecialPower(227) uiSpecialPowerAtPointer\");");
code("lureName = \"(E) Doomsday\";");
code("lureIsUltimate = true;");
code("}");
code("trQuestVarSet(\"p\"+p+\"wellCooldown\", trQuestVarGet(\"abductCooldown\"));");
code("trQuestVarSet(\"p\"+p+\"wellCost\", 0);");
code("trQuestVarSet(\"p\"+p+\"lureCooldown\", 1);");
code("trQuestVarSet(\"p\"+p+\"lureCost\", trQuestVarGet(\"doomsdayCost\"));");
code("trQuestVarSet(\"p\"+p+\"rainCooldown\", trQuestVarGet(\"ariseCooldown\"));");
code("trQuestVarSet(\"p\"+p+\"rainCost\", 0);");
code("}");

code("void nightriderModify(int eventID = -1) {");
code("int p = eventID - 5000 - 12 * NIGHTRIDER;");
code("zSetProtoUnitStat(\"Minion\", p, 0, 0.2 * trQuestVarGet(\"p\"+p+\"health\"));");
code("trQuestVarSet(\"p\"+p+\"attack\", trQuestVarGet(\"p\"+p+\"baseAttack\"));");
code("if (trQuestVarGet(\"p\"+p+\"doomsday\") == 1) {");
code("trQuestVarSet(\"p\"+p+\"attack\", trQuestVarGet(\"p\"+p+\"baseAttack\") * trQuestVarGet(\"p\"+p+\"doomsdayBonus\"));");
code("}");
code("zSetProtoUnitStat(\"Minion\", p, 27, 0.2 * trQuestVarGet(\"p\"+p+\"Attack\"));");
code("zSetProtoUnitStat(\"Hero Greek Achilles\", p, 27, trQuestVarGet(\"p\"+p+\"Attack\"));");
code("}");

code("rule nightrider_init");
code("active");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("for(p=1; < ENEMY_PLAYER) {");
code("trEventSetHandler(12 * NIGHTRIDER + p, \"nightriderAlways\");");
code("trEventSetHandler(1000 + 12 * NIGHTRIDER + p, \"chooseNightrider\");");
code("trEventSetHandler(5000 + 12 * NIGHTRIDER + p, \"nightriderModify\");");
code("}");

code("trQuestVarSet(\"abductRange\", 12);");
code("trQuestVarSet(\"abductCooldown\", 15);");

code("trQuestVarSet(\"deathSentenceDamage\", 6);");
code("trQuestVarSet(\"deathSentenceDuration\", 6);");
code("trQuestVarSet(\"deathSentenceRadius\", 8);");

code("trQuestVarSet(\"ariseCooldown\", 16);");

code("trQuestVarSet(\"doomsdayCost\", 80);");
code("trQuestVarSet(\"doomsdayDuration\", 12);");
code("}");
code("void removeSparkWitch(int p = 0) {");
code("removePlayerSpecific(p);");
code("yRemoveUpdateVar(\"p\"+p+\"characters\", \"attacking\");");
code("}");

code("void sparkWitchAlways(int eventID = -1) {");
code("int p = eventID - 12 * SPARKWITCH;");
code("int id = 0;");
code("int hit = 0;");
code("int target = 0;");
code("int index = yGetPointer(\"enemies\");");
code("float amt = 0;");
code("float dist = 0;");
code("float current = 0;");
code("int old = xsGetContextPlayer();");
code("xsSetContextPlayer(p);");
code("for (y=yGetDatabaseCount(\"p\"+p+\"characters\"); > 0) {");
code("id = yDatabaseNext(\"p\"+p+\"characters\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeSparkWitch(p);");
code("} else {");
code("if (kbUnitGetAnimationActionType(id) == 59) {");
code("ySetVar(\"p\"+p+\"characters\", \"attacking\", 1);");
code("ySetVar(\"p\"+p+\"characters\", \"attackTarget\", trGetUnitScenarioNameNumber(kbUnitGetTargetUnitID(id)));");
code("ySetVar(\"p\"+p+\"characters\", \"attackNext\", trTimeMS() + trQuestVarGet(\"p\"+p+\"firstDelay\"));");
code("trUnitOverrideAnimation(19,0,false,false,-1);");
code("}");
code("switch(1*yGetVar(\"p\"+p+\"characters\", \"attacking\"))");
code("{");
code("case 1:");
code("{");
code("if (trTimeMS() > yGetVar(\"p\"+p+\"characters\", \"attackNext\")) {");
code("ySetVar(\"p\"+p+\"characters\", \"attacking\", 2);");
code("ySetVar(\"p\"+p+\"characters\", \"attackNext\",");
code("yGetVar(\"p\"+p+\"characters\", \"attackNext\") + trQuestVarGet(\"p\"+p+\"firstDelay\"));");

code("trVectorSetUnitPos(\"pos\", \"p\"+p+\"characters\");");
code("trQuestVarSet(\"next\", yGetVar(\"p\"+p+\"characters\", \"attackTarget\"));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\");");
code("if (trUnitAlive()) {");
code("trVectorSetUnitPos(\"end\", \"next\");");
code("yAddToDatabase(\"p\"+p+\"zaps\", \"next\");");
code("yAddUpdateVar(\"p\"+p+\"zaps\", \"startx\", trQuestVarGet(\"posx\"));");
code("yAddUpdateVar(\"p\"+p+\"zaps\", \"startz\", trQuestVarGet(\"posz\"));");
code("yAddUpdateVar(\"p\"+p+\"zaps\", \"endx\", trQuestVarGet(\"endx\"));");
code("yAddUpdateVar(\"p\"+p+\"zaps\", \"endz\", trQuestVarGet(\"endz\"));");
code("yAddUpdateVar(\"p\"+p+\"zaps\", \"startTime\", trTimeMS());");
code("yAddUpdateVar(\"p\"+p+\"zaps\", \"next\", 0);");
code("yAddUpdateVar(\"p\"+p+\"zaps\", \"hex\", yGetVar(\"p\"+p+\"characters\", \"hex\"));");
code("yAddUpdateVar(\"p\"+p+\"zaps\", \"bounces\", trQuestVarGet(\"p\"+p+\"projectiles\") + yGetVar(\"p\"+p+\"characters\", \"bounces\"));");
code("if (yGetVar(\"p\"+p+\"characters\", \"hex\") == 2) {");
code("trSoundPlayFN(\"pigpower.wav\",\"1\",-1,\"\",\"\");");
code("} else if (yGetVar(\"p\"+p+\"characters\",\"hex\") == 1) {");
code("trSoundPlayFN(\"lightningbirth.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("ySetVar(\"p\"+p+\"characters\", \"bounces\", 0);");
code("ySetVar(\"p\"+p+\"characters\", \"hex\", 0);");
code("for(x=yGetDatabaseCount(\"enemies\"); >0) {");
code("if (yDatabaseNext(\"enemies\") == trQuestVarGet(\"next\")) {");
code("yAddUpdateVar(\"p\"+p+\"zaps\", \"index\", yGetPointer(\"enemies\"));");
code("break;");
code("}");
code("}");
code("if (trQuestVarGet(\"p\"+p+\"characters\") == trQuestVarGet(\"p\"+p+\"unit\")) {");
code("if (trCurrentPlayer() == p) {");
code("trClearCounterDisplay();");
code("}");
code("}");
code("}");
code("} else if (kbUnitGetAnimationActionType(id) != 16) {");
code("ySetVar(\"p\"+p+\"characters\", \"attacking\", 0);");
code("}");
code("}");
code("case 2:");
code("{");
code("if (trTimeMS() > yGetVar(\"p\"+p+\"characters\", \"attackNext\")) {");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("ySetVar(\"p\"+p+\"characters\", \"attacking\", 0);");
code("}");
code("}");
code("}");
code("}");
code("}");

code("if (yGetDatabaseCount(\"p\"+p+\"witchPigs\") > 0) {");
code("id = yDatabaseNext(\"p\"+p+\"witchPigs\", true);");
code("if ((yGetVar(\"p\"+p+\"witchPigs\", \"proto\") == kbGetProtoUnitID(\"Hero Boar\")) ||");
code("(yGetVar(\"p\"+p+\"witchPigs\", \"proto\") == kbGetProtoUnitID(\"Hero Boar 2\"))) {");
code("yRemoveFromDatabase(\"p\"+p+\"witchPigs\");");
code("} else if (id == -1 || trUnitAlive() == false) {");
code("trUnitChangeProtoUnit(kbGetProtoUnitName(1*yGetVar(\"p\"+p+\"witchPigs\", \"proto\")));");
code("yRemoveFromDatabase(\"p\"+p+\"witchPigs\");");
code("} else if (trTimeMS() > yGetVar(\"p\"+p+\"witchPigs\", \"timeout\")) {");
code("trMutateSelected(1*yGetVar(\"p\"+p+\"witchPigs\", \"proto\"));");
code("if (ySetPointer(\"enemies\", 1*yGetVar(\"p\"+p+\"witchPigs\", \"index\"))) {");
code("ySetVar(\"enemies\", \"physicalResist\", yGetVar(\"p\"+p+\"witchPigs\", \"physicalResist\"));");
code("ySetVar(\"enemies\", \"magicResist\", yGetVar(\"p\"+p+\"witchPigs\", \"magicResist\"));");
code("}");
code("yRemoveFromDatabase(\"p\"+p+\"witchPigs\");");
code("}");
code("}");

code("if(yGetDatabaseCount(\"p\"+p+\"hexOrbs\") >0) {");
code("yDatabaseNext(\"p\"+p+\"hexOrbs\");");
code("amt = trTimeMS() - yGetVar(\"p\"+p+\"hexOrbs\", \"next\");");
code("if (amt > 500) {");
code("amt = 0.001 * amt * trQuestVarGet(\"hexBoltDamage\") * trQuestVarGet(\"p\"+p+\"spellDamage\");");
code("yVarToVector(\"p\"+p+\"hexOrbs\", \"pos\");");
code("dist = xsPow(trQuestVarGet(\"hexboltRadius\") * trQuestVarGet(\"p\"+p+\"spellRange\"), 2);");
code("for(x=yGetDatabaseCount(\"enemies\"); >0) {");
code("if (yDatabaseNext(\"enemies\", true) == -1 || trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (zDistanceToVectorSquared(\"enemies\", \"pos\") < dist) {");
code("damageEnemy(p, amt);");
code("}");
code("}");

code("if (trTimeMS() > yGetVar(\"p\"+p+\"hexOrbs\", \"timeout\")) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"hexOrbs\");");
code("trUnitDestroy();");
code("yRemoveFromDatabase(\"p\"+p+\"hexOrbs\");");
code("} else {");
code("ySetVar(\"p\"+p+\"hexOrbs\", \"next\", trTimeMS());");
code("}");
code("}");
code("}");

code("if (yGetDatabaseCount(\"p\"+p+\"zaps\") > 0) {");
code("yDatabaseNext(\"p\"+p+\"zaps\");");
code("current = trTimeMS() - yGetVar(\"p\"+p+\"zaps\", \"startTime\");");
code("if (current > yGetVar(\"p\"+p+\"zaps\", \"next\")) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"zaps\");");
code("if (trUnitAlive()) {");
code("trVectorSetUnitPos(\"end\", \"p\"+p+\"zaps\");");
code("ySetVarFromVector(\"p\"+p+\"zaps\", \"end\", \"end\");");
code("} else {");
code("yVarToVector(\"p\"+p+\"zaps\", \"end\");");
code("}");
code("yVarToVector(\"p\"+p+\"zaps\", \"start\");");
code("trQuestVarSet(\"dirx\", trQuestVarGet(\"endx\") - trQuestVarGet(\"startx\"));");
code("trQuestVarSet(\"dirz\", trQuestVarGet(\"endz\") - trQuestVarGet(\"startz\"));");
code("for(y=5; >0) {");
code("if (current > yGetVar(\"p\"+p+\"zaps\", \"next\")) {");
code("ySetVar(\"p\"+p+\"zaps\", \"next\", yGetVar(\"p\"+p+\"zaps\", \"next\") + 100);");
code("amt = yGetVar(\"p\"+p+\"zaps\", \"next\") * 0.002;");
code("trQuestVarSet(\"posx\", trQuestVarGet(\"startx\") + trQuestVarGet(\"dirx\") * amt);");
code("trQuestVarSet(\"posz\", trQuestVarGet(\"startz\") + trQuestVarGet(\"dirz\") * amt);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"posx\"),0,trQuestVarGet(\"posz\"),0,true);");
code("trArmySelect(\"1,0\");");
code("if (yGetVar(\"p\"+p+\"zaps\", \"hex\") == 0) {");
code("trUnitChangeProtoUnit(\"Lightning Sparks Ground\");");
code("} else {");
code("trUnitChangeProtoUnit(\"Lightning Sparks\");");
code("}");
code("} else {");
code("break;");
code("}");
code("}");
code("if (yGetVar(\"p\"+p+\"zaps\", \"next\") >= 500) {");
code("gainFavor(p, 1.0);");
code("trQuestVarSetFromRand(\"sound\", 1, 5, true);");
code("trSoundPlayFN(\"ui\lightning\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"zaps\");");
code("if (trUnitAlive()) {");
code("trUnitHighlight(0.2, false);");
code("if ((1*yGetVar(\"p\"+p+\"zaps\", \"index\") > 0) && ySetPointer(\"enemies\", 1*yGetVar(\"p\"+p+\"zaps\", \"index\"))) {");
code("damageEnemy(p, 100.0 * trQuestVarGet(\"p\"+p+\"spellDamage\"));");
code("if (yGetVar(\"p\"+p+\"zaps\", \"hex\") > 0) {");
code("trVectorSetUnitPos(\"pos\", \"enemies\");");
code("vectorSnapToGrid(\"pos\");");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"posx\"),0,trQuestVarGet(\"posz\"),0,true);");
code("if (yGetVar(\"p\"+p+\"zaps\", \"hex\") == 2) {");
code("yAddToDatabase(\"p\"+p+\"witchPigs\", \"p\"+p+\"zaps\");");
code("yAddUpdateVar(\"p\"+p+\"witchPigs\", \"proto\", kbGetUnitBaseTypeID(kbGetBlockID(\"\"+1*trQuestVarGet(\"enemies\"))));");
code("yAddUpdateVar(\"p\"+p+\"witchPigs\", \"physicalResist\", yGetVar(\"enemies\",\"physicalResist\"));");
code("yAddUpdateVar(\"p\"+p+\"witchPigs\", \"magicResist\", yGetVar(\"enemies\",\"magicResist\"));");
code("yAddUpdateVar(\"p\"+p+\"witchPigs\", \"index\", yGetVar(\"p\"+p+\"zaps\", \"index\"));");
code("yAddUpdateVar(\"p\"+p+\"witchPigs\", \"timeout\",");
code("trTimeMS() + 1000 * trQuestVarGet(\"hexboltDuration\") * trQuestVarGet(\"p\"+p+\"spellDuration\"));");
code("ySetVar(\"enemies\", \"physicalResist\", 0);");
code("ySetVar(\"enemies\", \"magicResist\", 0);");
code("if (trQuestVarGet(\"p\"+p+\"zaps\") == trQuestVarGet(\"bossUnit\")) {");
code("trMutateSelected(kbGetProtoUnitID(\"Hero Boar 2\"));");
code("} else {");
code("trMutateSelected(kbGetProtoUnitID(\"Hero Boar\"));");
code("}");
code("ySetVar(\"enemies\", \"silenceStatus\", 1);");
code("silenceEnemy(p, trQuestVarGet(\"hexboltDuration\"));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\");");
code("trUnitChangeProtoUnit(\"Curse SFX\");");
code("} else if (yGetVar(\"p\"+p+\"zaps\", \"hex\") == 1) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\");");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\");");
code("trMutateSelected(kbGetProtoUnitID(\"Arkantos God\"));");
code("trSetSelectedScale(0,0,0);");
code("trUnitOverrideAnimation(26,0,true,false,-1);");
code("yAddToDatabase(\"p\"+p+\"hexOrbs\", \"next\");");
code("yAddUpdateVar(\"p\"+p+\"hexOrbs\", \"timeout\",");
code("trTimeMS() + 1000 * trQuestVarGet(\"hexboltDuration\") * trQuestVarGet(\"p\"+p+\"spellDuration\"));");
code("yAddUpdateVar(\"p\"+p+\"hexOrbs\", \"next\", trTimeMS());");
code("yAddUpdateVar(\"p\"+p+\"hexOrbs\", \"posx\", trQuestVarGet(\"posx\"));");
code("yAddUpdateVar(\"p\"+p+\"hexOrbs\", \"posz\", trQuestVarGet(\"posz\"));");
code("}");
code("}");
code("}");
code("}");
code("ySetVar(\"p\"+p+\"zaps\", \"bounces\", yGetVar(\"p\"+p+\"zaps\", \"bounces\") - 1);");
code("if (yGetVar(\"p\"+p+\"zaps\", \"bounces\") > 0) {");
code("dist = xsPow(trQuestVarGet(\"p\"+p+\"Range\") - 5, 2);");
code("hit = 0;");
code("for(x=yGetDatabaseCount(\"enemies\"); >0) {");
code("if (yDatabaseNext(\"enemies\", true) == -1 || trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (trQuestVarGet(\"p\"+p+\"zaps\") == trQuestVarGet(\"enemies\")) {");
code("continue;");
code("} else if (zDistanceToVectorSquared(\"enemies\", \"end\") < dist) {");
code("trVectorSetUnitPos(\"pos\", \"enemies\");");
code("hit = 1;");
code("break;");
code("}");
code("}");
code("if (hit == 1) {");
code("ySetUnit(\"p\"+p+\"zaps\", trQuestVarGet(\"enemies\"));");
code("ySetVar(\"p\"+p+\"zaps\", \"index\", yGetPointer(\"enemies\"));");
code("ySetVar(\"p\"+p+\"zaps\", \"next\", 0);");
code("ySetVar(\"p\"+p+\"zaps\", \"startTime\", trTimeMS());");
code("ySetVarFromVector(\"p\"+p+\"zaps\", \"start\", \"end\");");
code("ySetVarFromVector(\"p\"+p+\"zaps\", \"end\", \"pos\");");
code("} else if (zDistanceToVectorSquared(\"p\"+p+\"unit\", \"end\") < dist) {");
code("ySetUnit(\"p\"+p+\"zaps\", trQuestVarGet(\"p\"+p+\"unit\"));");
code("ySetVar(\"p\"+p+\"zaps\", \"index\", -1);");
code("ySetVar(\"p\"+p+\"zaps\", \"next\", 0);");
code("ySetVar(\"p\"+p+\"zaps\", \"startTime\", trTimeMS());");
code("ySetVarFromVector(\"p\"+p+\"zaps\", \"start\", \"end\");");
code("trVectorSetUnitPos(\"pos\", \"p\"+p+\"unit\");");
code("ySetVarFromVector(\"p\"+p+\"zaps\", \"end\", \"pos\");");
code("} else {");
code("yRemoveFromDatabase(\"p\"+p+\"zaps\");");
code("}");
code("} else {");
code("yRemoveFromDatabase(\"p\"+p+\"zaps\");");
code("}");
code("}");
code("}");
code("}");

code("if (yGetDatabaseCount(\"p\"+p+\"thunderstrikes\") >0) {");
code("yDatabaseNext(\"p\"+p+\"thunderstrikes\", true);");
code("trUnitChangeProtoUnit(\"Tremor\");");
code("yRemoveFromDatabase(\"p\"+p+\"thunderstrikes\");");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"wellStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"wellStatus\", ABILITY_OFF);");
code("for(x=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"characters\");");
code("ySetVar(\"p\"+p+\"characters\", \"bounces\", 1 + yGetVar(\"p\"+p+\"characters\", \"bounces\"));");
code("}");
code("trQuestVarSetFromRand(\"sound\", 1, 5, true);");
code("trSoundPlayFN(\"lightningstrike\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("trChatSetStatus(false);");
code("trDelayedRuleActivation(\"enable_chat\");");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"p\"+p+\"wellPosx\"),0,trQuestVarGet(\"p\"+p+\"wellPosz\"),0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\");");
code("trMutateSelected(kbGetProtoUnitID(\"Militia\"));");
code("trSetSelectedScale(0,0,0);");
code("trTechInvokeGodPower(0, \"bolt\", vector(0,0,0), vector(0,0,0));");
code("yAddToDatabase(\"p\"+p+\"thunderstrikes\", \"next\");");
code("dist = xsPow(trQuestVarGet(\"thunderstrikeRadius\") * trQuestVarGet(\"p\"+p+\"spellRange\"), 2);");
code("amt = trQuestVarGet(\"thunderstrikeDamage\") * trQuestVarGet(\"p\"+p+\"spellDamage\");");
code("hit = 0;");
code("for(x=yGetDatabaseCount(\"enemies\"); >0) {");
code("if (yDatabaseNext(\"enemies\", true) == -1 || trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (zDistanceToVectorSquared(\"enemies\", \"p\"+p+\"wellPos\") < dist) {");
code("hit = hit + 1;");
code("damageEnemy(p, amt);");
code("}");
code("}");
code("gainFavor(p, hit);");
code("if (hit > 0) {");
code("trQuestVarSet(\"p\"+p+\"wellReadyTime\", trQuestVarGet(\"p\"+p+\"wellReadyTime\") - 1000 * hit);");
code("if (trQuestVarGet(\"p\"+p+\"wellReadyTime\") < trTimeMS() + 500) {");
code("trQuestVarSet(\"p\"+p+\"wellReadyTime\", trTimeMS() + 500);");
code("}");
code("if (trCurrentPlayer() == p) {");
code("trCounterAbort(\"well\");");
code("trCounterAddTime(\"well\",");
code("xsMax(trQuestVarGet(\"p\"+p+\"wellCooldown\") * trQuestVarGet(\"p\"+p+\"cooldownReduction\") - hit, 1), 0, wellName);");
code("}");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"lureStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"lureStatus\", ABILITY_OFF);");
code("for(x=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"characters\");");
code("ySetVar(\"p\"+p+\"characters\", \"bounces\", 1 + yGetVar(\"p\"+p+\"characters\", \"bounces\"));");
code("}");
code("gainFavor(p, 0.0 - trQuestVarGet(\"vortexCost\") * trQuestVarGet(\"p\"+p+\"ultimateCost\"));");
code("trVectorSetUnitPos(\"center\", \"p\"+p+\"lureObject\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"lureObject\", true);");
code("trUnitDestroy();");
code("dist = trQuestVarGet(\"vortexRange\") * trQuestVarGet(\"p\"+p+\"spellRange\");");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",8,trQuestVarGet(\"centerx\"),0,trQuestVarGet(\"centerz\"),0,true);");
code("trArmySelect(\"\"+p+\",0\");");
code("trMutateSelected(kbGetProtoUnitID(\"Vortex Finish Linked\"));");
code("trSetSelectedScale(0,0,0);");
code("trUnitSetAnimationPath(\"0,0,1,0,0,0,0\");");
code("yAddToDatabase(\"p\"+p+\"vortexObjects\", \"next\");");
code("yAddUpdateVar(\"p\"+p+\"vortexObjects\", \"last\", trTimeMS());");
code("yAddUpdateVar(\"p\"+p+\"vortexObjects\", \"radius\", trQuestVarGet(\"vortexRadius\") * trQuestVarGet(\"p\"+p+\"spellRange\"));");
code("yAddUpdateVar(\"p\"+p+\"vortexObjects\", \"centerx\", trQuestVarGet(\"centerx\"));");
code("yAddUpdateVar(\"p\"+p+\"vortexObjects\", \"centerz\", trQuestVarGet(\"centerz\"));");
code("yAddUpdateVar(\"p\"+p+\"vortexObjects\", \"dirx\", 1);");
code("yAddUpdateVar(\"p\"+p+\"vortexObjects\", \"dirz\", 0);");
code("yAddUpdateVar(\"p\"+p+\"vortexObjects\", \"step\", 0);");
code("yAddUpdateVar(\"p\"+p+\"vortexObjects\", \"timeout\", trTimeMS() + 1000);");
code("trSoundPlayFN(\"cinematics\32_out\doorseal.mp3\",\"1\",-1,\"\",\"\");");
code("}");

code("if (yGetDatabaseCount(\"p\"+p+\"vortexObjects\") > 0) {");
code("yDatabaseNext(\"p\"+p+\"vortexObjects\");");
code("if (yGetVar(\"p\"+p+\"vortexObjects\", \"step\") == 1) {");
code("dist = 0.015 * (yGetVar(\"p\"+p+\"vortexObjects\", \"timeout\") - trTimeMS());");
code("} else {");
code("dist = yGetVar(\"p\"+p+\"vortexObjects\", \"radius\");");
code("}");
code("amt = trTimeMS() - yGetVar(\"p\"+p+\"vortexObjects\", \"last\");");
code("amt = amt * 0.002;");
code("ySetVar(\"p\"+p+\"vortexObjects\", \"last\", trTimeMS());");
code("trQuestVarSet(\"cos\", xsCos(amt));");
code("trQuestVarSet(\"sin\", xsSin(amt));");
code("yVarToVector(\"p\"+p+\"vortexObjects\", \"dir\");");
code("trVectorQuestVarSet(\"dir\", rotationMatrix(\"dir\", trQuestVarGet(\"cos\"), trQuestVarGet(\"sin\")));");
code("ySetVarFromVector(\"p\"+p+\"vortexObjects\", \"dir\", \"dir\");");
code("trVectorScale(\"dir\", dist);");
code("for(x=0; < 8) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+(x + trQuestVarGet(\"p\"+p+\"vortexObjects\")), true);");
code("trSetSelectedUpVector(trQuestVarGet(\"dirX\"),0,trQuestVarGet(\"dirZ\"));");
code("trVectorQuestVarSet(\"dir\", rotationMatrix(\"dir\", 0.707107, 0.707107));");
code("}");
code("if (trTimeMS() > yGetVar(\"p\"+p+\"vortexObjects\", \"timeout\")) {");
code("if (yGetVar(\"p\"+p+\"vortexObjects\", \"step\") == 0) {");
code("ySetVar(\"p\"+p+\"vortexObjects\", \"step\", 1);");
code("ySetVar(\"p\"+p+\"vortexObjects\", \"timeout\",");
code("trTimeMS() + trQuestVarGet(\"vortexMoveTime\") * trQuestVarGet(\"p\"+p+\"spellRange\"));");
code("trSoundPlayFN(\"suckup1.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"vortexstart.wav\",\"1\",-1,\"\",\"\");");
code("dist = xsPow(trQuestVarGet(\"vortexRadius\") * trQuestVarGet(\"p\"+p+\"spellRange\"), 2);");
code("yVarToVector(\"p\"+p+\"vortexObjects\", \"center\");");
code("for(x=yGetDatabaseCount(\"enemies\"); >0) {");
code("if (yDatabaseNext(\"enemies\", true) == -1 || trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (zDistanceToVectorSquared(\"enemies\", \"center\") < dist) {");
code("launchUnit(\"enemies\", \"center\");");
code("}");
code("}");
code("} else {");
code("for(x=0; < 8) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+(x + trQuestVarGet(\"p\"+p+\"vortexObjects\")), true);");
code("trUnitChangeProtoUnit(\"Arkantos Boost SFX\");");
code("}");
code("yRemoveFromDatabase(\"p\"+p+\"vortexObjects\");");
code("}");
code("}");
code("}");


code("if (trQuestVarGet(\"p\"+p+\"rainStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"rainStatus\", ABILITY_OFF);");
code("trQuestVarSet(\"p\"+p+\"hex\", 1 - trQuestVarGet(\"p\"+p+\"hex\"));");
code("if (trCurrentPlayer() == p) {");
code("trSoundPlayFN(\"skypassageout.wav\",\"1\",-1,\"\",\"\");");
code("switch(1*trQuestVarGet(\"p\"+p+\"hex\"))");
code("{");
code("case 0:");
code("{");
code("trSetCounterDisplay(\"Next Attack: ELECTRIFY\");");
code("trSoundPlayFN(\"lapadesconvert.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("case 1:");
code("{");
code("trSetCounterDisplay(\"Next Attack: POLYMORPH\");");
code("trSoundPlayFN(\"pigambient.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("}");
code("for(x=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"characters\");");
code("ySetVar(\"p\"+p+\"characters\", \"bounces\", 1 + yGetVar(\"p\"+p+\"characters\", \"bounces\"));");
code("ySetVar(\"p\"+p+\"characters\", \"hex\", 1 + trQuestVarGet(\"p\"+p+\"hex\"));");
code("}");
code("}");

code("ySetPointer(\"enemies\", index);");
code("poisonKillerBonus(p);");
code("xsSetContextPlayer(old);");
code("}");

code("void chooseSparkWitch(int eventID = -1) {");
code("int p = eventID - 1000 - 12 * SPARKWITCH;");
code("if (trCurrentPlayer() == p) {");
code("map(\"q\", \"game\", \"uiSetSpecialPower(133) uiSpecialPowerAtPointer\");");
code("wellName = \"(Q) Thunderstrike\";");
code("wellIsUltimate = false;");
code("map(\"w\", \"game\", \"uiSetSpecialPower(156) uiSpecialPowerAtPointer\");");
code("rainName = \"(W) Hexbolt\";");
code("rainIsUltimate = false;");
code("map(\"e\", \"game\", \"uiSetSpecialPower(227) uiSpecialPowerAtPointer\");");
code("lureName = \"(E) Vortex\";");
code("lureIsUltimate = true;");
code("}");
code("trQuestVarSet(\"p\"+p+\"wellCooldown\", trQuestVarGet(\"thunderstrikeCooldown\"));");
code("trQuestVarSet(\"p\"+p+\"wellCost\", 0);");
code("trQuestVarSet(\"p\"+p+\"lureCooldown\", 1);");
code("trQuestVarSet(\"p\"+p+\"lureCost\", trQuestVarGet(\"vortexCost\"));");
code("trQuestVarSet(\"p\"+p+\"rainCooldown\", trQuestVarGet(\"hexboltCooldown\"));");
code("trQuestVarSet(\"p\"+p+\"rainCost\", 0);");
code("}");

code("rule sparkWitch_init");
code("active");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("for(p=1; < ENEMY_PLAYER) {");
code("trEventSetHandler(12 * SPARKWITCH + p, \"sparkWitchAlways\");");
code("trEventSetHandler(1000 + 12 * SPARKWITCH + p, \"chooseSparkWitch\");");
code("}");

code("trQuestVarSet(\"thunderstrikeCooldown\", 12);");
code("trQuestVarSet(\"thunderstrikeRadius\", 6);");
code("trQuestVarSet(\"thunderstrikeDamage\", 60);");

code("trQuestVarSet(\"hexboltCooldown\", 18);");
code("trQuestVarSet(\"hexboltDuration\", 4);");
code("trQuestVarSet(\"hexboltRadius\", 3);");
code("trQuestVarSet(\"hexboltDamage\", 20);");

code("trQuestVarSet(\"vortexCost\", 80);");
code("trQuestVarSet(\"vortexRadius\", 12);");
code("trQuestVarSet(\"vortexMoveTime\", 1000 * trQuestVarGet(\"vortexRadius\") / 15);");
code("}");
code("void removeStarseer(int p = 0) {");
code("for(x=3; >0) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"p\"+p+\"characters\", \"star\"+x), true);");
code("trUnitChangeProtoUnit(\"Rocket\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"p\"+p+\"characters\", \"Meteorite\"+x), true);");
code("trUnitChangeProtoUnit(\"Rocket\");");
code("}");
code("removePlayerSpecific(p);");
code("for(x=3; >0) {");
code("yRemoveUpdateVar(\"p\"+p+\"characters\", \"star\"+x);");
code("yRemoveUpdateVar(\"p\"+p+\"characters\", \"Meteorite\"+x);");
code("yRemoveUpdateVar(\"p\"+p+\"characters\", \"last\"+x);");
code("}");
code("yRemoveUpdateVar(\"p\"+p+\"characters\", \"targetRadius\");");
code("yRemoveUpdateVar(\"p\"+p+\"characters\", \"currentRadius\");");
code("yRemoveUpdateVar(\"p\"+p+\"characters\", \"angle\");");
code("yRemoveUpdateVar(\"p\"+p+\"characters\", \"hitbox\");");
code("yRemoveUpdateVar(\"p\"+p+\"characters\", \"last\");");
code("}");

code("void starseerAlways(int eventID = -1) {");
code("int p = eventID - 12 * STARSEER;");
code("int id = 0;");
code("int hit = 0;");
code("int target = 0;");
code("int index = yGetPointer(\"enemies\");");
code("float amt = 0;");
code("float dist = 0;");
code("float current = 0;");
code("int old = xsGetContextPlayer();");
code("xsSetContextPlayer(p);");

code("for (y=yGetDatabaseCount(\"p\"+p+\"characters\"); > 0) {");
code("id = yDatabaseNext(\"p\"+p+\"characters\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeStarseer(p);");
code("} else {");

code("current = trTimeMS() - yGetVar(\"p\"+p+\"characters\", \"last\");");
code("ySetVar(\"p\"+p+\"characters\", \"last\", trTimeMS());");

code("amt = trQuestVarGet(\"p\"+p+\"starAngularVelocity\") * 0.001 * current;");
code("ySetVar(\"p\"+p+\"characters\", \"angle\", fModulo(6.283185, yGetVar(\"p\"+p+\"characters\", \"angle\") - amt));");
code("if (yGetVar(\"p\"+p+\"characters\", \"targetRadius\") == 0) {");
code("ySetVar(\"p\"+p+\"characters\", \"targetRadius\", 2);");
code("ySetVar(\"p\"+p+\"characters\", \"currentRadius\", 2);");
code("} else {");
code("dist = yGetVar(\"p\"+p+\"characters\", \"targetRadius\") - yGetVar(\"p\"+p+\"characters\", \"currentRadius\");");
code("if (xsAbs(dist) > 0.1) {");
code("dist = 2.0 * dist * 0.001 * current;");
code("ySetVar(\"p\"+p+\"characters\", \"currentRadius\", yGetVar(\"p\"+p+\"characters\", \"currentRadius\") + dist);");
code("} else if (xsAbs(dist) > 0) {");
code("ySetVar(\"p\"+p+\"characters\", \"currentRadius\", yGetVar(\"p\"+p+\"characters\", \"targetRadius\"));");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"characters\") == trQuestVarGet(\"p\"+p+\"unit\")) {");
code("amt = trQuestVarGet(\"realignRadius\") * trQuestVarGet(\"p\"+p+\"spellRange\") - 2.0;");
code("amt = (amt - yGetVar(\"p\"+p+\"characters\", \"currentRadius\") + 2.0) / amt;");
code("zSetProtoUnitStat(\"Oracle Hero\", p, 1, trQuestVarGet(\"p\"+p+\"speed\") * (0.5 + amt));");
code("}");

code("hit = 1 + yGetVar(\"p\"+p+\"characters\", \"hitbox\");");
code("if (hit > 3) {");
code("hit = 1;");
code("}");
code("ySetVar(\"p\"+p+\"characters\", \"hitbox\", hit);");

code("current = yGetVar(\"p\"+p+\"characters\", \"angle\");");
code("for(x=1; <=3) {");
code("if (trQuestVarGet(\"spyfound\") == trQuestVarGet(\"spyfind\")) {");
code("id = kbGetBlockID(\"\"+1*yGetVar(\"p\"+p+\"characters\", \"Meteorite\"+x));");
code("if (id == -1 || yGetVar(\"p\"+p+\"characters\", \"Meteorite\"+x) == 0) {");
code("spyEffect(1*trQuestVarGet(\"p\"+p+\"characters\"),");
code("kbGetProtoUnitID(\"Cinematic Block\"),yGetVarName(\"p\"+p+\"characters\", \"Meteorite\"+x));");
code("}");
code("}");
code("id = kbGetBlockID(\"\"+1*yGetVar(\"p\"+p+\"characters\", \"star\"+x));");
code("if (id == -1 || yGetVar(\"p\"+p+\"characters\", \"star\"+x) == 0) {");
code("if (trQuestVarGet(\"spyFound\") == trQuestVarGet(\"spyFind\")) {");
code("spyEffect(1*trQuestVarGet(\"p\"+p+\"characters\"),");
code("kbGetProtoUnitID(\"Cinematic Block\"),yGetVarName(\"p\"+p+\"characters\", \"star\"+x));");
code("}");
code("} else {");
code("trVectorSetFromAngle(\"dir\", current);");
code("if (x == hit) {");
code("trQuestVarSet(\"currentAngle\", current);");
code("trQuestVarSet(\"curPosx\", trQuestVarGet(\"dirx\"));");
code("trQuestVarSet(\"curPosz\", trQuestVarGet(\"dirz\"));");
code("trVectorSetFromAngle(\"prevPos\", yGetVar(\"p\"+p+\"characters\", \"last\"+x));");
code("trQuestVarSet(\"angleDiff\", dotProduct(\"curPos\", \"prevPos\"));");
code("amt = xsCos(trQuestVarGet(\"p\"+p+\"starAngularVelocity\") * 0.2);");
code("if (trQuestVarGet(\"angleDiff\") < amt) {");
code("ySetVar(\"p\"+p+\"characters\", \"last\"+x, fModulo(6.283185, current + trQuestVarGet(\"p\"+p+\"starAngularVelocity\") * 0.2));");
code("trVectorSetFromAngle(\"prevPos\", yGetVar(\"p\"+p+\"characters\", \"last\"+x));");
code("trQuestVarSet(\"angleDiff\", amt);");
code("}");
code("}");
code("trVectorScale(\"dir\", yGetVar(\"p\"+p+\"characters\", \"currentRadius\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"p\"+p+\"characters\", \"star\"+x));");
code("if (kbGetUnitBaseTypeID(id) == kbGetProtoUnitID(\"Cinematic Block\")) {");
code("trMutateSelected(kbGetProtoUnitID(\"Outpost\"));");
code("trSetSelectedScale(0,0,0);");
code("}");
code("trSetSelectedUpVector(3.33 * trQuestVarGet(\"dirX\"),0.2,3.33 * trQuestVarGet(\"dirZ\"));");
code("if (trQuestVarGet(\"p\"+p+\"eventHorizon\") == 1) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"p\"+p+\"characters\", \"Meteorite\"+x), true);");
code("");
code("trSetSelectedUpVector(1.0 * trQuestVarGet(\"dirX\"),0,1.0 * trQuestVarGet(\"dirZ\"));");
code("}");
code("}");
code("current = fModulo(6.283185, current + 2.094395);");
code("}");


code("trQuestVarSet(\"outer\", xsPow(yGetVar(\"p\"+p+\"characters\", \"currentRadius\") + 1.5, 2));");
code("trQuestVarSet(\"inner\", xsPow(yGetVar(\"p\"+p+\"characters\", \"currentRadius\") - 1.5, 2));");
code("trVectorSetUnitPos(\"center\", \"p\"+p+\"characters\");");

code("amt = trQuestVarGet(\"starbaseDamage\") * trQuestVarGet(\"p\"+p+\"spellDamage\");");
code("target = 0;");
code("for(x=yGetDatabaseCount(\"enemies\"); >0) {");
code("id = yDatabaseNext(\"enemies\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeEnemy();");
code("} else {");
code("dist = zDistanceToVectorSquared(\"enemies\", \"center\");");
code("if (dist < trQuestVarGet(\"outer\") && dist > trQuestVarGet(\"inner\")) {");
code("trVectorSetUnitPos(\"pos\", \"enemies\");");
code("trVectorQuestVarSet(\"dir\", zGetUnitVector(\"center\", \"pos\"));");
code("trQuestVarSet(\"curDiff\", dotProduct(\"dir\", \"curPos\"));");
code("if (trQuestVarGet(\"curDiff\") > trQuestVarGet(\"angleDiff\")) {");
code("if (dotProduct(\"dir\", \"prevPos\") > trQuestVarGet(\"angleDiff\")) {");
code("if (trQuestVarGet(\"p\"+p+\"eventHorizon\") == 1) {");
code("stunUnit(\"enemies\", 1.5, p);");
code("}");
code("if (trQuestVarGet(\"p\"+p+\"eventHorizon\") == 0) {");
code("gainFavor(p, 1);");
code("}");
code("trUnitHighlight(0.2, false);");
code("damageEnemy(p, amt, true);");
code("if (trQuestVarGet(\"curDiff\") > trQuestVarGet(\"angleDiff\")) {");
code("target = 1;");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");

code("if (target == 1) {");
code("ySetVar(\"p\"+p+\"characters\", \"last\"+hit, trQuestVarGet(\"currentAngle\"));");
code("trQuestVarSetFromRand(\"sound\", 1, 3, true);");
code("trSoundPlayFN(\"fleshcrush\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("}");


code("if (trQuestVarGet(\"p\"+p+\"wellStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"wellStatus\", ABILITY_OFF);");
code("for(x=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"characters\", true);");
code("trUnitSetStance(\"Passive\");");
code("amt = xsMin(trQuestVarGet(\"realignRadius\") * trQuestVarGet(\"p\"+p+\"spellRange\"),");
code("zDistanceToVector(\"p\"+p+\"characters\", \"p\"+p+\"wellPos\"));");
code("amt = xsMax(2, amt);");
code("ySetVar(\"p\"+p+\"characters\", \"targetRadius\", amt);");
code("}");
code("trSoundPlayFN(\"suckup3.wav\",\"1\",-1,\"\",\"\");");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"Repel\") == 1) {");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"RepelTimeout\")) {");
code("trQuestVarSet(\"p\"+p+\"RepelTimeout\", trQuestVarGet(\"p\"+p+\"RepelTimeout\") + 1000);");
code("trQuestVarSet(\"p\"+p+\"Repel\", 2);");
code("hit = 0;");
code("dist = xsPow(trQuestVarGet(\"RepelRange\") * trQuestVarGet(\"p\"+p+\"spellRange\"), 2);");
code("for(x=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("if (yDatabaseNext(\"p\"+p+\"characters\", true) == -1 || trUnitAlive() == false) {");
code("removeStarseer(p);");
code("} else {");
code("trVectorSetUnitPos(\"pos\", \"p\"+p+\"characters\");");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"posx\"),0,trQuestVarGet(\"posz\"),0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Tremor\");");
code("for(y=yGetDatabaseCount(\"enemies\"); >0) {");
code("if (yDatabaseNext(\"enemies\", true) == -1 || trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (zDistanceToVectorSquared(\"enemies\", \"pos\") < dist) {");
code("trVectorSetUnitPos(\"target\", \"enemies\");");
code("trVectorQuestVarSet(\"dir\",");
code("zGetUnitVector(\"pos\", \"target\", trQuestVarGet(\"RepelRange\") * trQuestVarGet(\"p\"+p+\"spellRange\")));");
code("trQuestVarSet(\"destx\", trQuestVarGet(\"posx\") + trQuestVarGet(\"dirx\"));");
code("trQuestVarSet(\"destz\", trQuestVarGet(\"posz\") + trQuestVarGet(\"dirz\"));");
code("launchUnit(\"enemies\", \"dest\");");
code("hit = hit + 1;");
code("}");
code("}");
code("}");
code("}");
code("gainFavor(p, hit);");
code("}");
code("} else if (trQuestVarGet(\"p\"+p+\"Repel\") == 2) {");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"RepelTimeout\")) {");
code("for(x=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("if (yDatabaseNext(\"p\"+p+\"characters\", true) == -1 || trUnitAlive() == false) {");
code("removeStarseer(p);");
code("} else {");
code("trVectorSetUnitPos(\"pos\", \"p\"+p+\"characters\");");
code("trUnitOverrideAnimation(-1, 0, false, true, -1);");
code("}");
code("}");
code("trQuestVarSet(\"p\"+p+\"Repel\", 0);");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"rainStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"rainStatus\", ABILITY_OFF);");
code("trQuestVarSet(\"p\"+p+\"Repel\", 1);");
code("trQuestVarSet(\"p\"+p+\"RepelTimeout\", trTimeMS() + 1200);");
code("trSoundPlayFN(\"oracledone.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"implode reverse.wav\",\"1\",-1,\"\",\"\");");
code("for(x=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("if (yDatabaseNext(\"p\"+p+\"characters\", true) == -1 || trUnitAlive() == false) {");
code("removeStarseer(p);");
code("} else {");
code("trMutateSelected(kbGetProtoUnitID(\"Oracle Hero\"));");
code("trUnitSetStance(\"Passive\");");
code("trUnitOverrideAnimation(52, 0, false, false, -1);");
code("}");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"eventHorizon\") == 1) {");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"eventHorizonTimeout\")) {");
code("trQuestVarSet(\"p\"+p+\"eventHorizon\", 0);");
code("for(y=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"characters\");");
code("for(x=3; >0) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"p\"+p+\"characters\", \"Meteorite\"+x), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");
code("}");
code("}");
code("trQuestVarSet(\"p\"+p+\"starAngularVelocity\",");
code("trQuestVarGet(\"starAngularVelocity\") * (2.0 + trQuestVarGet(\"p\"+p+\"projectiles\")) / 3.0);");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"lureStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"lureStatus\", ABILITY_OFF);");
code("gainFavor(p, 0.0 - trQuestVarGet(\"eventHorizonCost\") * trQuestVarGet(\"p\"+p+\"ultimateCost\"));");
code("trQuestVarSet(\"p\"+p+\"eventHorizon\", 1);");
code("trQuestVarSet(\"p\"+p+\"eventHorizonTimeout\",");
code("trTimeMS() + 1000 * trQuestVarGet(\"eventHorizonDuration\") * trQuestVarGet(\"p\"+p+\"spellDuration\"));");
code("trQuestVarSet(\"p\"+p+\"starAngularVelocity\",");
code("2.0 * trQuestVarGet(\"starAngularVelocity\") * (2.0 + trQuestVarGet(\"p\"+p+\"projectiles\")) / 3.0);");
code("for(y=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"characters\");");
code("for(x=3; >0) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"p\"+p+\"characters\", \"Meteorite\"+x), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Vortex Finish Linked\"));");
code("trSetSelectedScale(0,0,0);");
code("trUnitSetAnimationPath(\"0,0,1,0,0,0,0\");");
code("}");
code("}");
code("trSoundPlayFN(\"cinematics\24_in\magic.mp3\", \"5\", -1, \"\",\"\");");
code("}");

code("ySetPointer(\"enemies\", index);");
code("xsSetContextPlayer(old);");
code("}");

code("void chooseStarseer(int eventID = -1) {");
code("int p = eventID - 1000 - 12 * STARSEER;");
code("if (trCurrentPlayer() == p) {");
code("map(\"w\", \"game\", \"uiSetSpecialPower(133) uiSpecialPowerAtPointer\");");
code("wellName = \"(W) Realignment\";");
code("wellIsUltimate = false;");
code("map(\"q\", \"game\", \"uiSetSpecialPower(156) uiSpecialPowerAtPointer\");");
code("rainName = \"(Q) Repel\";");
code("rainIsUltimate = false;");
code("map(\"e\", \"game\", \"uiSetSpecialPower(227) uiSpecialPowerAtPointer\");");
code("lureName = \"(E) Event Horizon\";");
code("lureIsUltimate = true;");
code("}");
code("trQuestVarSet(\"p\"+p+\"wellCooldown\", trQuestVarGet(\"realignCooldown\"));");
code("trQuestVarSet(\"p\"+p+\"wellCost\", 0);");
code("trQuestVarSet(\"p\"+p+\"lureCooldown\", 1);");
code("trQuestVarSet(\"p\"+p+\"lureCost\", trQuestVarGet(\"eventHorizonCost\"));");
code("trQuestVarSet(\"p\"+p+\"rainCooldown\", trQuestVarGet(\"RepelCooldown\"));");
code("trQuestVarSet(\"p\"+p+\"rainCost\", 0);");
code("}");

code("void starseerModify(int eventID = -1) {");
code("int p = eventID - 5000 - 12 * STARSEER;");
code("zSetProtoUnitStat(\"Oracle Hero\", p, 27, 0);");
code("trQuestVarSet(\"p\"+p+\"starAngularVelocity\",");
code("trQuestVarGet(\"starAngularVelocity\") * (2.0 + trQuestVarGet(\"p\"+p+\"projectiles\")) / 3.0);");
code("if (trQuestVarGet(\"p\"+p+\"eventHorizon\") == 1) {");
code("trQuestVarSet(\"p\"+p+\"starAngularVelocity\", 2.0 * trQuestVarGet(\"p\"+p+\"starAngularVelocity\"));");
code("}");
code("}");

code("rule starseer_init");
code("active");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("trQuestVarSet(\"starAngularVelocity\", 6.283185 / 4.0);");
code("for(p=1; < ENEMY_PLAYER) {");
code("trEventSetHandler(12 * STARSEER + p, \"starseerAlways\");");
code("trEventSetHandler(1000 + 12 * STARSEER + p, \"chooseStarseer\");");
code("trEventSetHandler(5000 + 12 * STARSEER + p, \"starseerModify\");");
code("trQuestVarSet(\"p\"+p+\"starAngularVelocity\", trQuestVarGet(\"starAngularVelocity\"));");
code("}");

code("trQuestVarSet(\"starBaseDamage\", 50);");


code("trQuestVarSet(\"realignCooldown\", 5);");
code("trQuestVarSet(\"realignRadius\", 15);");

code("trQuestVarSet(\"RepelCooldown\", 15);");
code("trQuestVarSet(\"RepelRange\", 15);");

code("trQuestVarSet(\"eventHorizonCost\", 60);");
code("trQuestVarSet(\"eventHorizonDuration\", 10);");
code("}");
code("void removeThroneShield(int p = 0) {");
code("removePlayerSpecific(p);");
code("if (trQuestVarGet(\"p\"+p+\"characters\") == trQuestVarGet(\"p\"+p+\"unit\")) {");
code("int queen = trQuestVarGet(\"p\"+p+\"queen\");");
code("if (queen > 0) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+queen+\"tether\");");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");
code("}");
code("trQuestVarSet(\"p\"+queen+\"simp\", 0);");
code("trQuestVarSet(\"p\"+p+\"queen\", 0);");
code("}");
code("yRemoveUpdateVar(\"p\"+p+\"characters\", \"shieldSFX\");");
code("}");

code("void throneShieldAlways(int eventID = -1) {");
code("int p = eventID - 12 * THRONESHIELD;");
code("int id = 0;");
code("int hit = 0;");
code("int target = 0;");
code("int index = yGetPointer(\"enemies\");");
code("float amt = 0;");
code("float dist = 0;");
code("float current = 0;");
code("int old = xsGetContextPlayer();");
code("xsSetContextPlayer(p);");

code("if (trQuestVarGet(\"p\"+p+\"wellStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"wellStatus\", ABILITY_OFF);");
code("target = 0;");
code("dist = 100;");
code("for(x=1; < ENEMY_PLAYER) {");
code("if (x == p) {");
code("continue;");
code("} else if (trQuestVarGet(\"p\"+x+\"dead\") == 0) {");
code("current = zDistanceToVectorSquared(\"p\"+x+\"unit\", \"p\"+p+\"wellPos\");");
code("if (current < dist) {");
code("target = x;");
code("dist = current;");
code("}");
code("}");
code("}");
code("if (target > 0) {");
code("if (trQuestVarGet(\"p\"+target+\"simp\") > 0) {");
code("target = 0;");
code("if (trCurrentPlayer() == p) {");
code("trChatSend(0, \"That player already has a partner!\");");
code("}");
code("} else if (trQuestVarGet(\"p\"+target+\"class\") == THRONESHIELD) {");
code("target = 0;");
code("if (trCurrentPlayer() == p) {");
code("trChatSend(0, \"Cannot target another Throne Shield!\");");
code("}");
code("} else {");
code("if (trQuestVarGet(\"p\"+p+\"queen\") > 0) {");
code("hit = trQuestVarGet(\"p\"+p+\"queen\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+hit+\"tether\");");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");
code("trQuestVarSet(\"p\"+hit+\"simp\", 0);");
code("}");
code("trQuestVarSet(\"p\"+target+\"simp\", p);");
code("trQuestVarSet(\"p\"+p+\"queen\", target);");
code("if (trCurrentPlayer() == p) {");
code("trChatSend(0, \"<color=1,1,1>You have given your Knight's Vow to \" + trStringQuestVarGet(\"p\"+target+\"name\") + \"!\");");
code("}");
code("if (trCurrentPlayer() == target) {");
code("trChatSend(0, \"<color=1,1,1>\" + trStringQuestVarGet(\"p\"+p+\"name\") + \" has given you a Knight's Vow!\");");
code("}");
code("xsSetContextPlayer(target);");
code("trQuestVarSet(\"p\"+target+\"currentHitpoints\",");
code("kbUnitGetCurrentHitpoints(kbGetBlockID(\"\"+1*trQuestVarGet(\"p\"+target+\"unit\"))));");
code("xsSetContextPlayer(p);");
code("trSoundPlayFN(\"militarycreate.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"herocreation.wav\",\"1\",-1,\"\",\"\");");
code("if (kbGetBlockID(\"\"+1*trQuestVarGet(\"p\"+p+\"tether\")) == -1) {");
code("spyEffect(1*trQuestVarGet(\"p\"+p+\"unit\"),kbGetProtoUnitID(\"Vortex Finish Linked\"),\"p\"+p+\"tether\");");
code("trQuestVarSet(\"p\"+p+\"tetherReady\", 0);");
code("} else {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"tether\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Vortex Finish Linked\"));");
code("trUnitSetAnimationPath(\"0,1,0,0,0,0,0\");");
code("trQuestVarSet(\"p\"+p+\"tetherReady\", 1);");
code("}");
code("if (kbGetBlockID(\"\"+1*trQuestVarGet(\"p\"+target+\"tether\")) == -1) {");
code("spyEffect(1*trQuestVarGet(\"p\"+target+\"unit\"),kbGetProtoUnitID(\"Vortex Finish Linked\"),\"p\"+target+\"tether\");");
code("trQuestVarSet(\"p\"+target+\"tetherReady\", 0);");
code("} else {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+target+\"tether\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Vortex Finish Linked\"));");
code("trUnitSetAnimationPath(\"0,1,0,0,0,0,0\");");
code("trQuestVarSet(\"p\"+target+\"tetherReady\", 1);");
code("}");
code("}");
code("} else if (trCurrentPlayer() == p) {");
code("trChatSend(0, \"You must target an ally!\");");
code("}");
code("if (target == 0) {");
code("if (trCurrentPlayer() == p) {");
code("trCounterAbort(\"well\");");
code("trSoundPlayFN(\"cantdothat.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("trQuestVarSet(\"p\"+p+\"wellCooldownStatus\", ABILITY_COST);");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"queen\") > 0) {");
code("target = trQuestVarGet(\"p\"+p+\"queen\");");
code("trVectorSetUnitPos(\"start\", \"p\"+target+\"unit\");");
code("trVectorSetUnitPos(\"end\", \"p\"+p+\"unit\");");
code("trVectorQuestVarSet(\"dir\", zGetUnitVector(\"start\", \"end\"));");
code("if (trQuestVarGet(\"spyfind\") == trQuestVarGet(\"spyfound\")) {");
code("if (kbGetBlockID(\"\"+1*trQuestVarGet(\"p\"+p+\"tether\")) == -1) {");
code("spyEffect(1*trQuestVarGet(\"p\"+p+\"unit\"),kbGetProtoUnitID(\"Vortex Finish Linked\"),\"p\"+p+\"tether\");");
code("trQuestVarSet(\"p\"+p+\"tetherReady\", 0);");
code("} else if (trQuestVarGet(\"p\"+p+\"tetherReady\") == 0) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"tether\", true);");
code("trUnitSetAnimationPath(\"0,1,0,0,0,0,0\");");
code("trQuestVarSet(\"p\"+p+\"tetherReady\", 1);");
code("}");
code("if (kbGetBlockID(\"\"+1*trQuestVarGet(\"p\"+target+\"tether\")) == -1) {");
code("spyEffect(1*trQuestVarGet(\"p\"+target+\"unit\"),kbGetProtoUnitID(\"Vortex Finish Linked\"),\"p\"+target+\"tether\");");
code("trQuestVarSet(\"p\"+target+\"tetherReady\", 0);");
code("} else if (trQuestVarGet(\"p\"+target+\"tetherReady\") == 0) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+target+\"tether\", true);");
code("trUnitSetAnimationPath(\"0,1,0,0,0,0,0\");");
code("trQuestVarSet(\"p\"+target+\"tetherReady\", 1);");
code("}");
code("}");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"tether\", true);");
code("trSetSelectedUpVector(0.0 - trQuestVarGet(\"dirX\"),-1,0.0 - trQuestVarGet(\"dirZ\"));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+target+\"tether\", true);");
code("trSetSelectedUpVector(trQuestVarGet(\"dirX\"),-1,trQuestVarGet(\"dirZ\"));");
code("xsSetContextPlayer(target);");
code("amt = kbUnitGetCurrentHitpoints(kbGetBlockID(\"\"+1*trQuestVarGet(\"p\"+target+\"unit\")));");
code("dist = 0.5 * (trQuestVarGet(\"p\"+target+\"currentHitpoints\") - amt);");
code("if (dist > 0 && trQuestVarGet(\"p\"+target+\"currentHitpoints\") > 1.0) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+target+\"unit\");");
code("trDamageUnit(0.0 - dist);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"unit\");");
code("trDamageUnit(dist);");
code("amt = amt + dist;");
code("}");
code("trQuestVarSet(\"p\"+target+\"currentHitpoints\", amt);");
code("xsSetContextPlayer(p);");
code("}");


code("if (trQuestVarGet(\"p\"+p+\"lureStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"lureStatus\", ABILITY_OFF);");
code("trVectorSetUnitPos(\"pos\", \"p\"+p+\"lureObject\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"lureObject\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Rocket\"));");
code("trUnitDestroy();");
code("trQuestVarSet(\"p\"+p+\"shieldOfLight\", 1);");
code("trSoundPlayFN(\"ui\thunder2.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"gaiasparkle2.wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSet(\"p\"+p+\"shieldOfLightTimeout\",");
code("trTimeMS() + 1000 * trQuestVarGet(\"shieldOfLightDuration\") * trQuestVarGet(\"p\"+p+\"spellDuration\") - 3000);");
code("for(x=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"characters\");");
code("if (kbGetBlockID(\"\"+1*yGetVar(\"p\"+p+\"characters\", \"shieldSFX\")) == -1) {");
code("spyEffect(1*trQuestVarGet(\"p\"+p+\"characters\"),");
code("kbGetProtoUnitID(\"Increase Prosperity Small\"),yGetVarName(\"p\"+p+\"characters\",\"shieldSFX\"));");
code("} else {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"p\"+p+\"characters\", \"shieldSFX\"), true);");
code("trUnitChangeProtoUnit(\"Increase Prosperity Small\");");
code("}");
code("}");
code("gainFavor(p, 0.0 - trQuestVarGet(\"shieldOfLightCost\") * trQuestVarGet(\"p\"+p+\"ultimateCost\"));");
code("trQuestVarSet(\"p\"+p+\"shieldOfLight\", 4);");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"shieldOfLight\") >= 1) {");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"shieldOfLightTimeout\")) {");
code("hit = trQuestVarGet(\"p\"+p+\"shieldOfLight\") - 1;");
code("if (hit >=1) {");
code("trQuestVarSet(\"p\"+p+\"shieldOfLightTimeout\", 1000 + trQuestVarGet(\"p\"+p+\"shieldOfLightTimeout\"));");
code("if (trCurrentPlayer() == p) {");
code("trChatSend(0, \"<color=1,1,1>Shield of Light ends in \" + hit + \"...\");");
code("trSoundPlayFN(\"hitpointsmax.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("} else {");
code("trQuestVarSet(\"p\"+p+\"shieldOfLight\", 0);");
code("for(x=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"characters\");");
code("if (trQuestVarGet(\"p\"+p+\"characters\") == trQuestVarGet(\"p\"+p+\"unit\")) {");
code("if (trCurrentPlayer() == p) {");
code("trChatSend(0, \"<color=1,1,1>Shield of Light finished. Total damage: \" + 1*yGetVar(\"p\"+p+\"characters\", \"absorbed\"));");
code("}");
code("}");
code("ySetVar(\"p\"+p+\"characters\", \"laserStep\", 1);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*yGetVar(\"p\"+p+\"characters\", \"shieldSFX\"));");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");
code("}");
code("}");
code("trQuestVarSet(\"p\"+p+\"shieldOfLight\", hit);");
code("}");
code("}");


code("if (trQuestVarGet(\"p\"+p+\"rainStatus\") == ABILITY_ON) {");
code("trQuestVarSet(\"p\"+p+\"rainStatus\", ABILITY_OFF);");
code("xsSetContextPlayer(ENEMY_PLAYER);");
code("yClearDatabase(\"justice\");");
code("dist = trQuestVarGet(\"justiceRadius\") * trQuestVarGet(\"p\"+p+\"spellRange\");");
code("dist = dist * dist;");
code("for(x=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("target = yDatabaseNext(\"p\"+p+\"characters\", true);");
code("trVectorSetUnitPos(\"pos\", \"p\"+p+\"characters\");");
code("for(y=yGetDatabaseCount(\"enemies\"); >0) {");
code("id = yDatabaseNext(\"enemies\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (zDistanceToVectorSquared(\"enemies\", \"pos\") < dist) {");
code("hit = kbUnitGetTargetUnitID(id);");
code("if (hit == target) {");
code("silenceEnemy(p, 6.0);");
code("} else {");
code("stunUnit(\"enemies\", 2.0, p);");
code("}");
code("gainFavor(p, 1);");
code("}");
code("}");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"posX\"),0,trQuestVarGet(\"posZ\"),0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Olympus Temple SFX\");");
code("}");
code("}");

code("xsSetContextPlayer(p);");
code("for (y=yGetDatabaseCount(\"p\"+p+\"characters\"); > 0) {");
code("id = yDatabaseNext(\"p\"+p+\"characters\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeThroneShield(p);");
code("} else {");
code("amt = kbUnitGetCurrentHitpoints(id);");
code("dist = yGetVar(\"p\"+p+\"characters\", \"currentHitpoints\") - amt;");
code("if (dist > 0) {");
code("if (trQuestVarGet(\"p\"+p+\"shieldOfLight\") >= 1) {");
code("ySetVar(\"p\"+p+\"characters\", \"absorbed\", yGetVar(\"p\"+p+\"characters\", \"absorbed\") + dist);");
code("current = 1.0 + xsSqrt(yGetVar(\"p\"+p+\"characters\", \"absorbed\")) * 0.02;");
code("trSetSelectedScale(current,current,current);");
code("trUnitHighlight(0.2, false);");
code("} else if (yGetVar(\"p\"+p+\"characters\", \"currentHitpoints\") <= 1) {");
code("dist = 0;");
code("} else {");
code("dist = dist * trQuestVarGet(\"p\"+p+\"damageReduction\");");
code("}");
code("trDamageUnit(0.0 - dist);");
code("amt = amt + dist;");
code("}");
code("ySetVar(\"p\"+p+\"characters\", \"currentHitpoints\", amt);");

code("hit = CheckOnHit(p, id);");
code("if (hit >= ON_HIT_NORMAL) {");
code("if (ySetPointer(\"enemies\", 1*yGetVar(\"p\"+p+\"characters\", \"attackTargetIndex\"))) {");
code("if (yGetVar(\"p\"+p+\"characters\", \"laserStep\") == 1) {");
code("trVectorSetUnitPos(\"start\", \"p\"+p+\"characters\");");
code("trVectorSetUnitPos(\"end\", \"enemies\");");
code("trVectorQuestVarSet(\"dir\", zGetUnitVector(\"start\", \"end\"));");
code("trSoundPlayFN(\"cinematics\35_out\strike.mp3\",\"1\",-1,\"\",\"\");");
code("if (trUnitVisToPlayer()) {");
code("trCameraShake(1.0, 1.5);");
code("}");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,trQuestVarGet(\"startx\"),0,trQuestVarGet(\"startz\"),0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Petosuchus Projectile\"));");
code("trUnitHighlight(5.0, false);");
code("trSetUnitOrientation(xsVectorSet(0.0 - trQuestVarGet(\"dirx\"),0, 0.0 - trQuestVarGet(\"dirz\")), vector(0,1,0), true);");
code("yAddToDatabase(\"playerLasers\", \"next\");");
code("yAddUpdateVar(\"playerLasers\", \"timeout\", trTimeMS() + 2500);");
code("yAddUpdateVar(\"playerLasers\", \"range\", 50);");
code("dist = xsPow(trQuestVarGet(\"shieldOfLightWidth\") * trQuestVarGet(\"p\"+p+\"spellRange\"), 2);");
code("amt = yGetVar(\"p\"+p+\"characters\", \"absorbed\") * trQuestVarGet(\"p\"+p+\"spellDamage\");");
code("for(x=yGetDatabaseCount(\"enemies\"); >0) {");
code("id = yDatabaseNext(\"enemies\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeEnemy();");
code("} else {");
code("current = zDistanceToVector(\"enemies\", \"start\");");
code("trQuestVarSet(\"hitboxX\", trQuestVarGet(\"startX\") + current * trQuestVarGet(\"dirX\"));");
code("trQuestVarSet(\"hitboxZ\", trQuestVarGet(\"startZ\") + current * trQuestVarGet(\"dirZ\"));");
code("if (zDistanceToVectorSquared(\"enemies\", \"hitbox\") < dist) {");
code("damageEnemy(p, amt, true);");
code("}");
code("}");
code("}");
code("trQuestVarSet(\"endx\", trQuestVarGet(\"startx\") + trQuestVarGet(\"dirx\"));");
code("trQuestVarSet(\"endz\", trQuestVarGet(\"startz\") + trQuestVarGet(\"dirz\"));");
code("vectorSetAsTargetVector(\"target\", \"start\", \"end\", 300.0);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,trQuestVarGet(\"startx\"),0,trQuestVarGet(\"startz\"),0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitChangeProtoUnit(\"Lampades Bolt\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("zSetProtoUnitStat(\"Meteorite\",p,1,100.0);");
code("trMutateSelected(kbGetProtoUnitID(\"Meteorite\"));");
code("trUnitOverrideAnimation(6,0,true,false,-1);");
code("trUnitMoveToPoint(trQuestVarGet(\"targetx\"),0,trQuestVarGet(\"targetz\"));");
code("ySetVar(\"p\"+p+\"characters\", \"absorbed\", 0);");
code("ySetVar(\"p\"+p+\"characters\", \"laserStep\", 0);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"characters\");");
code("trSetSelectedScale(1,1,1);");
code("} else if (hit == ON_HIT_SPECIAL) {");
code("gainFavor(p, 3);");
code("stunUnit(\"enemies\", 2.0, p);");
code("amt = 0.05 * trQuestVarGet(\"p\"+p+\"health\");");
code("for(x=yGetDatabaseCount(\"playerCharacters\"); >0) {");
code("if (yDatabaseNext(\"playerCharacters\", true) == -1 || trUnitAlive() == false) {");
code("removePlayerCharacter();");
code("} else {");
code("healUnit(p, amt);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");

code("ySetPointer(\"enemies\", index);");
code("poisonKillerBonus(p);");
code("xsSetContextPlayer(old);");
code("}");

code("void chooseThroneShield(int eventID = -1) {");
code("int p = eventID - 1000 - 12 * THRONESHIELD;");
code("if (trCurrentPlayer() == p) {");
code("map(\"q\", \"game\", \"uiSetSpecialPower(133) uiSpecialPowerAtPointer\");");
code("wellName = \"(Q) Knight's Vow\";");
code("wellIsUltimate = false;");
code("map(\"w\", \"game\", \"uiSetSpecialPower(156) uiSpecialPowerAtPointer\");");
code("rainName = \"(W) Justice\";");
code("rainIsUltimate = false;");
code("map(\"e\", \"game\", \"uiSetSpecialPower(227) uiSpecialPowerAtPointer\");");
code("lureName = \"(E) Shield of Light\";");
code("lureIsUltimate = true;");
code("}");
code("trQuestVarSet(\"p\"+p+\"damageReduction\", 0.02 * trQuestVarGet(\"p\"+p+\"health\") / 100);");
code("trQuestVarSet(\"p\"+p+\"wellCooldown\", trQuestVarGet(\"vowCooldown\"));");
code("trQuestVarSet(\"p\"+p+\"wellCost\", 0);");
code("trQuestVarSet(\"p\"+p+\"lureCooldown\", trQuestVarGet(\"shieldOfLightCooldown\"));");
code("trQuestVarSet(\"p\"+p+\"lureCost\", trQuestVarGet(\"shieldOfLightCost\"));");
code("trQuestVarSet(\"p\"+p+\"rainCooldown\", trQuestVarGet(\"justiceCooldown\"));");
code("trQuestVarSet(\"p\"+p+\"rainCost\", 0);");
code("}");

code("void modifyThroneShield(int eventID = -1) {");
code("int p = eventID - 5000 - 12 * THRONESHIELD;");
code("trQuestVarSet(\"p\"+p+\"damageReduction\", 0.02 * trQuestVarGet(\"p\"+p+\"health\") / 100);");
code("}");

code("rule throneShield_init");
code("active");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("for(p=1; < ENEMY_PLAYER) {");
code("trEventSetHandler(12 * THRONESHIELD + p, \"throneShieldAlways\");");
code("trEventSetHandler(1000 + 12 * THRONESHIELD + p, \"chooseThroneShield\");");
code("trEventSetHandler(5000 + 12 * THRONESHIELD + p, \"modifyThroneShield\");");
code("}");

code("trQuestVarSet(\"vowCooldown\", 10);");

code("trQuestVarSet(\"justiceCooldown\", 10);");
code("trQuestVarSet(\"justiceRadius\", 8);");

code("trQuestVarSet(\"shieldOfLightCost\", 60);");
code("trQuestVarSet(\"shieldOfLightCooldown\", 20);");
code("trQuestVarSet(\"shieldOfLightDuration\", 6);");
code("trQuestVarSet(\"shieldOfLightWidth\", 3);");
code("}");
code("void removeThunderRider(int p = 0) {");
code("removePlayerSpecific(p);");
code("yRemoveUpdateVar(\"p\"+p+\"characters\", \"prevX\");");
code("yRemoveUpdateVar(\"p\"+p+\"characters\", \"prevZ\");");
code("yRemoveUpdateVar(\"p\"+p+\"characters\", \"lightningIndex\");");
code("}");

code("void removeLightningBall(int p = 0) {");
code("yRemoveFromDatabase(\"p\"+p+\"lightningBalls\");");
code("yRemoveUpdateVar(\"p\"+p+\"lightningBalls\", \"dirX\");");
code("yRemoveUpdateVar(\"p\"+p+\"lightningBalls\", \"dirZ\");");
code("yRemoveUpdateVar(\"p\"+p+\"lightningBalls\", \"prevX\");");
code("yRemoveUpdateVar(\"p\"+p+\"lightningBalls\", \"prevZ\");");
code("yRemoveUpdateVar(\"p\"+p+\"lightningBalls\", \"damage\");");
code("yRemoveUpdateVar(\"p\"+p+\"lightningBalls\", \"yeehaw\");");
code("}");

code("void rideLightningOff(int p = 0) {");
code("zSetProtoUnitStat(\"Attack Revealer\", p, 2, 4.0);");
code("int index = 0;");
code("for(x=yGetDatabaseCount(\"p\"+p+\"relics\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"relics\", true);");
code("trUnitChangeProtoUnit(\"Relic\");");
code("}");
code("for(x=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"characters\");");
code("index = yGetVar(\"p\"+p+\"characters\", \"lightningIndex\");");
code("ySetPointer(\"p\"+p+\"lightningBalls\", index);");
code("yVarToVector(\"p\"+p+\"lightningBalls\", \"dir\");");
code("yVarToVector(\"p\"+p+\"lightningBalls\", \"prev\");");
code("if (trQuestVarGet(\"prevx\") + trQuestVarGet(\"prevZ\") < 0) {");
code("debugLog(\"Prev is less than 0!!1\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"characters\");");
code("trUnitChangeProtoUnit(\"Hero Greek Atalanta\");");
code("} else {");
code("ySetVarFromVector(\"p\"+p+\"characters\", \"prev\", \"prev\");");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,trQuestVarGet(\"prevx\"),0,trQuestVarGet(\"prevz\"),0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trSetUnitOrientation(trVectorQuestVarGet(\"dir\"),vector(0,1,0),true);");
code("trUnitChangeProtoUnit(\"Transport Ship Greek\");");

code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"characters\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Dwarf\"));");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"next\"));");

code("trUnitChangeProtoUnit(\"Hero Greek Atalanta\");");

code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitChangeProtoUnit(\"Arkantos God Out\");");
code("}");

code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"lightningBalls\", true);");
code("trDamageUnitPercent(100);");
code("trUnitChangeProtoUnit(\"Implode Sphere Effect\");");

code("ySetVar(\"p\"+p+\"characters\", \"index\", yAddToDatabase(\"playerUnits\", \"p\"+p+\"characters\"));");
code("yAddUpdateVar(\"playerUnits\", \"player\", p);");
code("yAddUpdateVar(\"playerUnits\", \"hero\", 1);");
code("if (trQuestVarGet(\"p\"+p+\"characters\") == trQuestVarGet(\"p\"+p+\"unit\")) {");
code("trQuestVarSet(\"p\"+p+\"index\", yGetNewestPointer(\"playerUnits\"));");
code("}");
code("}");

code("equipRelicsAgain(p);");
code("yClearDatabase(\"p\"+p+\"lightningBalls\");");
code("yClearDatabase(\"p\"+p+\"rideLightningTargets\");");

code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"unit\");");
code("if (trCurrentPlayer() == p) {");
code("trBlockAllSounds();");
code("for(x=yGetDatabaseCount(\"p\"+p+\"characters\"); >0) {");
code("if (trUnitIsSelected() == false) {");
code("uiFindType(\"Hero Greek Atalanta\");");
code("} else {");
code("break;");
code("}");
code("}");
code("uiLookAtUnitByName(\"\"+1*trQuestVarGet(\"p\"+p+\"unit\"));");
code("trUnblockAllSounds();");
code("}");
code("trQuestVarSet(\"p\"+p+\"launched\", 0);");
code("}");

code("void refreshRideLightningTargets(int p = 0) {");
code("yClearDatabase(\"p\"+p+\"rideLightningTargets\");");
code("for(x=yGetDatabaseCount(\"enemies\"); >0) {");
code("yDatabaseNext(\"enemies\");");
code("yAddToDatabase(\"p\"+p+\"rideLightningTargets\", \"enemies\");");
code("yAddUpdateVar(\"p\"+p+\"rideLightningTargets\", \"index\", yGetPointer(\"enemies\"));");
code("}");
code("}");

code("void lightningBallBounce(int p = 0) {");
code("yVarToVector(\"p\"+p+\"lightningBalls\", \"dir\");");
code("zSetProtoUnitStat(\"Kronny Flying\", p, 1, 2.0 * trQuestVarGet(\"p\"+p+\"speed\"));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"lightningBalls\", true);");
code("trUnitChangeProtoUnit(\"Kronny Flying\");");

code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"lightningBalls\", true);");
code("trDamageUnitPercent(-100);");
code("trMutateSelected(kbGetProtoUnitID(\"Kronny Flying\"));");
code("trQuestVarSetFromRand(\"sound\", 1, 3, true);");
code("if (trUnitVisToPlayer()) {");
code("trSoundPlayFN(\"suckup\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("}");
code("trSetUnitOrientation(trVectorQuestVarGet(\"dir\"), vector(0,1,0), true);");
code("trSetSelectedScale(0,-4.7,0);");
code("trDamageUnitPercent(100);");

code("ySetVar(\"p\"+p+\"lightningBalls\", \"yeehaw\", 1);");
code("}");

code("void thunderRiderAlways(int eventID = -1) {");
code("int p = eventID - 12 * THUNDERRIDER;");
code("int id = 0;");
code("int hit = 0;");
code("int target = 0;");
code("int index = yGetPointer(\"enemies\");");
code("float amt = 0;");
code("float dist = 0;");
code("float posX = 0;");
code("float posZ = 0;");

code("if (yGetDatabaseCount(\"p\"+p+\"blitzSFX\") > 0) {");
code("for(x=yGetDatabaseCount(\"enemies\"); >0) {");
code("id = yDatabaseNext(\"enemies\", true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (trCountUnitsInArea(\"\"+1*trQuestVarGet(\"enemies\"), p, \"Victory Marker\", 3) > 0) {");
code("gainFavor(p, 3);");
code("damageEnemy(p, trQuestVarGet(\"blitzDamage\") * trQuestVarGet(\"p\"+p+\"spellDamage\"), true);");
code("if (trUnitAlive()) {");
code("stunUnit(\"enemies\", 1.5, p);");
code("}");
code("}");
code("}");
code("for(x=yGetDatabaseCount(\"p\"+p+\"blitzSFX\"); >0) {");
code("yDatabaseNext(\"p\"+p+\"blitzSFX\", true);");
code("trUnitChangeProtoUnit(\"Lightning Sparks\");");
code("}");
code("yClearDatabase(\"p\"+p+\"blitzSFX\");");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"rideLightning\") == 1) {");
code("for (i=yGetDatabaseCount(\"p\"+p+\"lightningBalls\"); > 0) {");
code("id = yDatabaseNext(\"p\"+p+\"lightningBalls\", true);");
code("if (id == -1) {");
code("rideLightningOff(p);");
code("debugLog(\"The lightning ball died!\");");
code("break;");
