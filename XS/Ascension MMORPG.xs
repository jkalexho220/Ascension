void code(string xs="") {
rmAddTriggerEffect("SetIdleProcessing");
rmSetTriggerEffectParam("IdleProc",");*/"+xs+"/*");}
void main(void) {
rmSetStatusText("", 0.01);

rmSetMapSize(290, 290);

rmSetSeaLevel(0);
rmSetSeaType("greek river");
rmTerrainInitialize("OlympusA",1);
rmSetGaiaCiv(cCivZeus);
rmSetLightingSet("Default");
rmSetStatusText("", 0.1);

string quote = "\\";
rmSwitchToTrigger(rmCreateTrigger("zenowashere"));
rmSetTriggerPriority(4);
rmSetTriggerActive(false);
rmSetTriggerLoop(false);
rmSetTriggerRunImmediately(true);
rmAddTriggerEffect("SetIdleProcessing");
rmSetTriggerEffectParam("IdleProc",");}}/*");

code("rule context_change_always");
code("active");
code("highFrequency");
code("{");
code("xsSetContextPlayer(0);");
code("}");

code("const int mInt = 0;");
code("const int mFloat = 1;");
code("const int mString = 2;");
code("const int mVector = 3;");
code("const int mBool = 4;");

code("const int xMetadata = 0;");
code("const int xDirtyBit = 1;");
code("const int xNextBlock = 2;");
code("const int xPrevBlock = 3;");
code("const int xData = 3;");
code("const int xVarNames = 4;");
code("const int xVariables = 5;");

code("const int mPointer = 0;");
code("const int mCount = 1;");
code("const int mNextFree = 2;");
code("const int mNewestBlock = 3;");
code("const int mVariableTypes = 3;");

code("const int NEXTFREE = 0;");

code("int MALLOC = 0;");
code("int ARRAYS = 0;");
code("int mNumArrays = 0;");

code("void debugLog(string msg = \"\") {");
code("if (trCurrentPlayer() == 1) {");
code("trChatSend(0, \"<color=1,0,0>\" + msg);");
code("}");
code("}");


code("string datatypeName(int data = 0) {");
code("string name = \"void\";");
code("if (data >= 0 && data <= 4) {");
code("name = aiPlanGetUserVariableString(MALLOC,15,data);");
code("}");
code("return(name);");
code("}");

code("int zNewArray(int type = 0, int size = 1, string name = \"\") {");
code("int index = mNumArrays;");
code("mNumArrays = mNumArrays + 1;");
code("switch(type)");
code("{");
code("case mInt:");
code("{");
code("aiPlanAddUserVariableInt(ARRAYS,index,name,size);");
code("}");
code("case mFloat:");
code("{");
code("aiPlanAddUserVariableFloat(ARRAYS,index,name,size);");
code("}");
code("case mString:");
code("{");
code("aiPlanAddUserVariableString(ARRAYS,index,name,size);");
code("}");
code("case mVector:");
code("{");
code("aiPlanAddUserVariableVector(ARRAYS,index,name,size);");
code("}");
code("case mBool:");
code("{");
code("aiPlanAddUserVariableBool(ARRAYS,index,name,size);");
code("}");
code("}");
code("return(index);");
code("}");

code("bool free(int type = -1, int index = -1) {");
code("bool success = false;");
code("if (aiPlanGetUserVariableBool(MALLOC, type * 3 + xDirtyBit - 1, index)) {");
code("aiPlanSetUserVariableInt(MALLOC, type * 3 + xNextBlock - 1, index,");
code("aiPlanGetUserVariableInt(MALLOC, type * 3 + xNextBlock - 1, NEXTFREE));");
code("aiPlanSetUserVariableBool(MALLOC, type * 3 + xDirtyBit - 1, index, false);");
code("aiPlanSetUserVariableInt(MALLOC, type * 3 + xNextBlock - 1, NEXTFREE, index);");
code("success = true;");
code("}");
code("return(success);");
code("}");

code("int malloc(int type = -1) {");
code("int next = aiPlanGetUserVariableInt(MALLOC, type * 3 + xNextBlock - 1, NEXTFREE);");
code("if (next == 0) {");
code("next = aiPlanGetNumberUserVariableValues(MALLOC,type * 3 + xNextBlock - 1);");
code("for(i=type * 3; < type * 3 + 3) {");
code("aiPlanSetNumberUserVariableValues(MALLOC,i,next + 1, false);");
code("}");
code("aiPlanSetUserVariableInt(MALLOC,type * 3 + xNextBlock - 1, next, 0);");
code("} else {");
code("aiPlanSetUserVariableInt(MALLOC,type * 3 + xNextBlock - 1,NEXTFREE,");
code("aiPlanGetUserVariableInt(MALLOC,type * 3 + xNextBlock - 1,next));");
code("}");
code("aiPlanSetUserVariableBool(MALLOC,type * 3 + xDirtyBit - 1, next, true);");

code("return(next);");
code("}");

code("bool mGetBool(int index = 0) {");
code("bool val = false;");
code("if (aiPlanGetUserVariableBool(MALLOC, mBool * 3 + xDirtyBit - 1, index)) {");
code("val = aiPlanGetUserVariableBool(MALLOC, mBool * 3 + xData - 1, index);");
code("}");
code("return(val);");
code("}");

code("bool mSetBool(int index = 0, bool val = false) {");
code("bool success = false;");
code("if (aiPlanGetUserVariableBool(MALLOC, mBool * 3 + xDirtyBit - 1, index)) {");
code("success = aiPlanSetUserVariableBool(MALLOC, mBool * 3 + xData - 1, index, val);");
code("}");
code("return(success);");
code("}");

code("int mNewBool(bool val = false) {");
code("int index = malloc(mBool);");
code("mSetBool(index, val);");
code("return(index);");
code("}");

code("bool mFreeBool(int index = 0) {");
code("return(free(mBool, index));");
code("}");


code("string mGetString(int index = 0) {");
code("string val = \"\";");
code("if (aiPlanGetUserVariableBool(MALLOC, mString * 3 + xDirtyBit - 1, index)) {");
code("val = aiPlanGetUserVariableString(MALLOC, mString * 3 + xData - 1, index);");
code("}");
code("return(val);");
code("}");

code("bool mSetString(int index = 0, string val = \"\") {");
code("bool success = false;");
code("if (aiPlanGetUserVariableBool(MALLOC, mString * 3 + xDirtyBit - 1, index)) {");
code("success = aiPlanSetUserVariableString(MALLOC, mString * 3 + xData - 1, index, val);");
code("}");
code("return(success);");
code("}");

code("int mNewString(string val = \"\") {");
code("int index = malloc(mString);");
code("mSetString(index, val);");
code("return(index);");
code("}");

code("bool mFreeString(int index = 0) {");
code("return(free(mString, index));");
code("}");

code("int mGetInt(int index = 0) {");
code("int val = -1;");
code("if (aiPlanGetUserVariableBool(MALLOC, mInt * 3 + xDirtyBit - 1, index)) {");
code("val = aiPlanGetUserVariableInt(MALLOC, mInt * 3 + xData - 1, index);");
code("}");
code("return(val);");
code("}");

code("bool mSetInt(int index = 0, int val = 0) {");
code("bool success = false;");
code("if (aiPlanGetUserVariableBool(MALLOC, mInt * 3 + xDirtyBit - 1, index)) {");
code("success = aiPlanSetUserVariableInt(MALLOC, mInt * 3 + xData - 1, index, val);");
code("}");
code("return(success);");
code("}");

code("int mNewInt(int val = 0) {");
code("int index = malloc(mInt);");
code("mSetInt(index, val);");
code("return(index);");
code("}");

code("bool mFreeInt(int index = 0) {");
code("return(free(mInt, index));");
code("}");

code("float mGetFloat(int index = 0) {");
code("float val = -1;");
code("if (aiPlanGetUserVariableBool(MALLOC, mFloat * 3 + xDirtyBit - 1, index)) {");
code("val = aiPlanGetUserVariableFloat(MALLOC, mFloat * 3 + xData - 1, index);");
code("}");
code("return(val);");
code("}");

code("bool mSetFloat(int index = 0, float val = 0) {");
code("bool success = false;");
code("if (aiPlanGetUserVariableBool(MALLOC, mFloat * 3 + xDirtyBit - 1, index)) {");
code("success = aiPlanSetUserVariableFloat(MALLOC, mFloat * 3 + xData - 1, index, val);");
code("}");
code("return(success);");
code("}");

code("int mNewFloat(float val = 0) {");
code("int index = malloc(mFloat);");
code("mSetFloat(index, val);");
code("return(index);");
code("}");

code("bool mFreeFloat(int index = 0) {");
code("return(free(mFloat, index));");
code("}");

code("vector mGetVector(int index = 0) {");
code("vector val = vector(-1,-1,-1);");
code("if (aiPlanGetUserVariableBool(MALLOC, mVector * 3 + xDirtyBit - 1, index)) {");
code("val = aiPlanGetUserVariableVector(MALLOC, mVector * 3 + xData - 1, index);");
code("}");
code("return(val);");
code("}");

code("bool mSetVector(int index = 0, vector val = vector(0,0,0)) {");
code("bool success = false;");
code("if (aiPlanGetUserVariableBool(MALLOC, mVector * 3 + xDirtyBit - 1, index)) {");
code("success = aiPlanSetUserVariableVector(MALLOC, mVector * 3 + xData - 1, index, val);");
code("}");
code("return(success);");
code("}");

code("int mNewVector(vector val = vector(0,0,0)) {");
code("int index = malloc(mVector);");
code("mSetVector(index, val);");
code("return(index);");
code("}");

code("bool mFreeVector(int index = 0) {");
code("return(free(mVector, index));");
code("}");

code("bool freeAllMemory() {");
code("return(aiPlanRemoveUserVariables(MALLOC));");
code("}");

code("int xInitDatabase(string name = \"\", int size = 0) {");
code("int id = aiPlanCreate(name, 8);");
code("aiPlanAddUserVariableBool(id,xDirtyBit,\"DirtyBit\",size+1);");
code("aiPlanAddUserVariableInt(id,xNextBlock,\"NextBlock\",size+1);");
code("aiPlanAddUserVariableInt(id,xPrevBlock,\"PrevBlock\",size+1);");
code("aiPlanAddUserVariableInt(id,xMetadata,\"Metadata\",4);");
code("aiPlanSetUserVariableInt(id,xMetadata,mPointer,0);");
code("aiPlanSetUserVariableInt(id,xMetadata,mCount,0);");

code("aiPlanSetUserVariableInt(id,xMetadata,mNextFree,size);");
code("aiPlanSetUserVariableInt(id,xNextBlock,0,0);");
code("for(i=1; <= size) {");
code("aiPlanSetUserVariableBool(id,xDirtyBit,i,false);");
code("aiPlanSetUserVariableInt(id,xNextBlock,i,i-1);");
code("}");
code("aiPlanAddUserVariableString(id,xVarNames,\"VarNames\",1);");
code("aiPlanSetUserVariableString(id,xVarNames,0,\"none\");");
code("return(id);");
code("}");

code("int xInitAddVar(int id = 0, string name = \"\", int type = 0) {");
code("int count = aiPlanGetNumberUserVariableValues(id,xDirtyBit);");
code("int index = aiPlanGetNumberUserVariableValues(id,xMetadata);");
code("aiPlanSetNumberUserVariableValues(id,xMetadata,index + 1,false);");
code("aiPlanSetUserVariableInt(id,xMetadata,index,type);");

code("index = aiPlanGetNumberUserVariableValues(id,xVarNames);");
code("aiPlanSetNumberUserVariableValues(id,xVarNames,index+1,false);");
code("aiPlanSetUserVariableString(id,xVarNames,index,name);");
code("index = xVarNames + index;");
code("switch(type)");
code("{");
code("case mInt:");
code("{");
code("aiPlanAddUserVariableInt(id,index,name,count);");
code("}");
code("case mFloat:");
code("{");
code("aiPlanAddUserVariableFloat(id,index,name,count);");
code("}");
code("case mString:");
code("{");
code("aiPlanAddUserVariableString(id,index,name,count);");
code("}");
code("case mVector:");
code("{");
code("aiPlanAddUserVariableVector(id,index,name,count);");
code("}");
code("case mBool:");
code("{");
code("aiPlanAddUserVariableBool(id,index,name,count);");
code("}");
code("}");
code("return(index);");
code("}");

code("int xInitAddInt(int id = 0, string name = \"\", int defVal = 0) {");
code("int index = xInitAddVar(id,name,mInt);");
code("aiPlanSetUserVariableInt(id, index, 0, defVal);");
code("return(index);");
code("}");

code("int xInitAddFloat(int id = 0, string name = \"\", float defVal = 0) {");
code("int index = xInitAddVar(id, name, mFloat);");
code("aiPlanSetUserVariableFloat(id, index, 0, defVal);");
code("return(index);");
code("}");

code("int xInitAddString(int id = 0, string name = \"\", string defVal = \"\") {");
code("int index = xInitAddVar(id, name, mString);");
code("aiPlanSetUserVariableString(id, index, 0, defVal);");
code("return(index);");
code("}");

code("int xInitAddVector(int id = 0, string name = \"\", vector defVal = vector(0,0,0)) {");
code("int index = xInitAddVar(id, name, mVector);");
code("aiPlanSetUserVariableVector(id, index, 0, defVal);");
code("return(index);");
code("}");

code("int xInitAddBool(int id = 0, string name = \"\", bool defVal = false) {");
code("int index = xInitAddVar(id,name,mBool);");
code("aiPlanSetUserVariableBool(id, index, 0, defVal);");
code("return(index);");
code("}");

code("void xResetValues(int id = 0, int index = -1, int stopAt = -1) {");
code("if (index == -1) {");
code("index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("}");
code("if (stopAt == -1) {");
code("stopAt = aiPlanGetNumberUserVariableValues(id, xVarNames);");
code("} else {");
code("stopAt = stopAt - mVariableTypes;");
code("}");
code("for(i = 1; < stopAt) {");
code("switch(aiPlanGetUserVariableInt(id,xMetadata,mVariableTypes + i))");
code("{");
code("case mInt:");
code("{");
code("aiPlanSetUserVariableInt(id,xVarNames + i,index,aiPlanGetUserVariableInt(id,xVarNames + i,0));");
code("}");
code("case mFloat:");
code("{");
code("aiPlanSetUserVariableFloat(id,xVarNames + i,index,aiPlanGetUserVariableFloat(id,xVarNames + i,0));");
code("}");
code("case mString:");
code("{");
code("aiPlanSetUserVariableString(id,xVarNames + i,index,aiPlanGetUserVariableString(id,xVarNames + i,0));");
code("}");
code("case mVector:");
code("{");
code("aiPlanSetUserVariableVector(id,xVarNames + i,index,aiPlanGetUserVariableVector(id,xVarNames + i,0));");
code("}");
code("case mBool:");
code("{");
code("aiPlanSetUserVariableBool(id,xVarNames + i,index,aiPlanGetUserVariableBool(id,xVarNames + i,0));");
code("}");
code("}");
code("}");
code("}");

code("bool xSetPointer(int id = 0, int index = 0) {");
code("bool success = false;");
code("if (aiPlanGetUserVariableBool(id,xDirtyBit,index)) {");
code("aiPlanSetUserVariableInt(id,xMetadata,mPointer,index);");
code("success = true;");
code("}");
code("return(success);");
code("}");

code("int xAddDatabaseBlock(int id = 0, bool setPointer = false) {");
code("int next = aiPlanGetUserVariableInt(id,xMetadata,mNextFree);");
code("if (next == 0) {");
code("next = aiPlanGetNumberUserVariableValues(id,xDirtyBit);");
code("for(i=aiPlanGetNumberUserVariableValues(id,xVarNames) - 1; > 0) {");
code("aiPlanSetNumberUserVariableValues(id,i + xVarNames,next+1,false);");
code("}");
code("for(i=xPrevBlock; > xMetadata) {");
code("aiPlanSetNumberUserVariableValues(id,i,next+1,false);");
code("}");
code("} else {");
code("aiPlanSetUserVariableInt(id,xMetadata,mNextFree,aiPlanGetUserVariableInt(id,xNextBlock,next));");
code("}");
code("aiPlanSetUserVariableBool(id,xDirtyBit,next,true);");

code("if (aiPlanGetUserVariableInt(id,xMetadata,mCount) == 0) {");
code("aiPlanSetUserVariableInt(id,xNextBlock,next,next);");
code("aiPlanSetUserVariableInt(id,xPrevBlock,next,next);");
code("aiPlanSetUserVariableInt(id,xMetadata,mPointer,next);");
code("} else {");
code("int before = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("int after = aiPlanGetUserVariableInt(id,xNextBlock,before);");

code("aiPlanSetUserVariableInt(id,xNextBlock,next,after);");
code("aiPlanSetUserVariableInt(id,xPrevBlock,next,before);");
code("aiPlanSetUserVariableInt(id,xNextBlock,before,next);");
code("aiPlanSetUserVariableInt(id,xPrevBlock,after,next);");
code("}");
code("aiPlanSetUserVariableInt(id,xMetadata,mNewestBlock,next);");
code("aiPlanSetUserVariableInt(id,xMetadata,mCount, 1 + aiPlanGetUserVariableInt(id,xMetadata,mCount));");
code("xResetValues(id,next);");
code("if (setPointer) {");
code("xSetPointer(id, next);");
code("}");
code("return(next);");
code("}");


code("bool xFreeDatabaseBlock(int id = 0, int index = -1) {");
code("bool success = false;");
code("if (index == -1) {");
code("index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("}");
code("if (aiPlanGetUserVariableBool(id,xDirtyBit,index)) {");
code("int after = aiPlanGetUserVariableInt(id,xNextBlock,index);");
code("int before = aiPlanGetUserVariableInt(id,xPrevBlock,index);");
code("aiPlanSetUserVariableInt(id,xNextBlock,before,after);");
code("aiPlanSetUserVariableInt(id,xPrevBlock,after,before);");

code("aiPlanSetUserVariableInt(id,xNextBlock,index,aiPlanGetUserVariableInt(id,xMetadata,mNextFree));");
code("aiPlanSetUserVariableInt(id,xMetadata,mNextFree,index);");
code("aiPlanSetUserVariableBool(id,xDirtyBit,index,false);");

code("if (index == aiPlanGetUserVariableInt(id,xMetadata,mPointer)) {");
code("aiPlanSetUserVariableInt(id,xMetadata,mPointer,aiPlanGetUserVariableInt(id,xPrevBlock,index));");
code("}");
code("aiPlanSetUserVariableInt(id,xMetadata,mCount, aiPlanGetUserVariableInt(id,xMetadata,mCount) - 1);");
code("success = true;");
code("}");
code("return(success);");
code("}");

code("int xGetNewestPointer(int id = 0) {");
code("return(aiPlanGetUserVariableInt(id,xMetadata,mNewestBlock));");
code("}");

code("int xDatabaseNext(int id = 0, bool reverse = false) {");
code("int pointer = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("if (reverse) {");
code("pointer = aiPlanGetUserVariableInt(id,xPrevBlock,pointer);");
code("} else {");
code("pointer = aiPlanGetUserVariableInt(id,xNextBlock,pointer);");
code("}");
code("if (aiPlanGetUserVariableBool(id,xDirtyBit,pointer)) {");
code("aiPlanSetUserVariableInt(id,xMetadata,mPointer,pointer);");
code("} else {");
code("pointer = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("debugLog(\"xDatabaseNext: \" + aiPlanGetName(id) + \" pointer is incorrect!\");");
code("}");
code("return(pointer);");
code("}");

code("void xClearDatabase(int id = 0) {");
code("int next = aiPlanGetUserVariableInt(id,xMetadata,mNextFree);");
code("int pointer = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("aiPlanSetUserVariableInt(id,xMetadata,mNextFree,aiPlanGetUserVariableInt(id,xNextBlock,pointer));");
code("aiPlanSetUserVariableInt(id,xNextBlock,pointer,next);");

code("aiPlanSetUserVariableInt(id,xMetadata,mCount,0);");
code("aiPlanSetUserVariableInt(id,xMetadata,mPointer,0);");
code("}");

code("int xGetInt(int id = 0, int data = 0, int index = -1) {");
code("if (aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes) != mInt) {");
code("string type = datatypeName(aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes));");
code("string name = aiPlanGetUserVariableString(id,xVarNames,data - xVarNames);");
code("debugLog(\"xGetInt: \" + aiPlanGetName(id) + \" variable \" + name + \" is not an int! Type: \" + type);");
code("return(-1);");
code("}");
code("if (index == -1) {");
code("index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("}");
code("return(aiPlanGetUserVariableInt(id,data,index));");
code("}");

code("bool xSetInt(int id = 0, int data = 0, int val = 0, int index = -1) {");
code("if (aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes) != mInt) {");
code("string type = datatypeName(aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes));");
code("string name = aiPlanGetUserVariableString(id,xVarNames,data - xVarNames);");
code("debugLog(\"xSetInt: \" + aiPlanGetName(id) + \" variable \" + name + \" is not an int! Type: \" + type);");
code("return(false);");
code("}");
code("if (index == -1) {");
code("index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("}");
code("bool success = aiPlanSetUserVariableInt(id,data,index,val);");
code("if (success == false) {");
code("string err = \": Could not assign value: \" + val;");
code("debugLog(\"xSetInt: \" + aiPlanGetName(id) + aiPlanGetUserVariableString(id,xVarNames,data - xVarNames) + err);");
code("}");
code("return(success);");
code("}");


code("float xGetFloat(int id = 0, int data = 0, int index = -1) {");
code("if (aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes) != mFloat) {");
code("string type = datatypeName(aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes));");
code("string name = aiPlanGetUserVariableString(id,xVarNames,data - xVarNames);");
code("debugLog(\"xGetFloat: \" + aiPlanGetName(id) + \" variable \" + name + \" is not a float! Type: \" + type);");
code("return(-1.0);");
code("}");
code("if (index == -1) {");
code("index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("}");
code("return(aiPlanGetUserVariableFloat(id,data,index));");
code("}");

code("bool xSetFloat(int id = 0, int data = 0, float val = 0, int index = -1) {");
code("if (aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes) != mFloat) {");
code("string type = datatypeName(aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes));");
code("string name = aiPlanGetUserVariableString(id,xVarNames,data - xVarNames);");
code("debugLog(\"xSetFloat: \" + aiPlanGetName(id) + \" variable \" + name + \" is not a float! Type: \" + type);");
code("return(false);");
code("}");
code("if (index == -1) {");
code("index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("}");
code("bool success = aiPlanSetUserVariableFloat(id,data,index,val);");
code("if (success == false) {");
code("string err = \": Could not assign value: \" + val;");
code("debugLog(\"xSetFloat: \" + aiPlanGetName(id) + aiPlanGetUserVariableString(id,xVarNames,data - xVarNames) + err);");
code("}");
code("return(success);");
code("}");


code("string xGetString(int id = 0, int data = 0, int index = -1) {");
code("if (aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes) != mString) {");
code("string type = datatypeName(aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes));");
code("string name = aiPlanGetUserVariableString(id,xVarNames,data - xVarNames);");
code("debugLog(\"xGetString: \" + aiPlanGetName(id) + \" variable \" + name + \" is not a string! Type: \" + type);");
code("return(\"\");");
code("}");
code("if (index == -1) {");
code("index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("}");
code("return(aiPlanGetUserVariableString(id,data,index));");
code("}");

code("bool xSetString(int id = 0, int data = 0, string val = \"\", int index = -1) {");
code("if (aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes) != mString) {");
code("string type = datatypeName(aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes));");
code("string name = aiPlanGetUserVariableString(id,xVarNames,data - xVarNames);");
code("debugLog(\"xSetString: \" + aiPlanGetName(id) + \" variable \" + name + \" is not a string! Type: \" + type);");
code("return(false);");
code("}");
code("if (index == -1) {");
code("index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("}");
code("return(aiPlanSetUserVariableString(id,data,index,val));");
code("}");


code("vector xGetVector(int id = 0, int data = 0, int index = -1) {");
code("if (aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes) != mVector) {");
code("string type = datatypeName(aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes));");
code("string name = aiPlanGetUserVariableString(id,xVarNames,data - xVarNames);");
code("debugLog(\"xGetVector: \" + aiPlanGetName(id) + \" variable \" + name + \" is not a vector! Type: \" + type);");
code("return(vector(0,0,0));");
code("}");
code("if (index == -1) {");
code("index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("}");
code("return(aiPlanGetUserVariableVector(id,data,index));");
code("}");

code("bool xSetVector(int id = 0, int data = 0, vector val = vector(0,0,0), int index = -1) {");
code("if (aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes) != mVector) {");
code("string type = datatypeName(aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes));");
code("string name = aiPlanGetUserVariableString(id,xVarNames,data - xVarNames);");
code("debugLog(\"xSetVector: \" + aiPlanGetName(id) + \" variable \" + name + \" is not a vector! Type: \" + type);");
code("return(false);");
code("}");
code("if (index == -1) {");
code("index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("}");
code("return(aiPlanSetUserVariableVector(id,data,index,val));");
code("}");


code("bool xGetBool(int id = 0, int data = 0, int index = -1) {");
code("if (aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes) != mBool) {");
code("string type = datatypeName(aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes));");
code("string name = aiPlanGetUserVariableString(id,xVarNames,data - xVarNames);");
code("debugLog(\"xGetBool: \" + aiPlanGetName(id) + \" variable \" + name + \" is not a bool! Type: \" + type);");
code("return(false);");
code("}");
code("if (index == -1) {");
code("index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("}");
code("return(aiPlanGetUserVariableBool(id,data,index));");
code("}");

code("bool xSetBool(int id = 0, int data = 0, bool val = false, int index = -1) {");
code("if (aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes) != mBool) {");
code("string type = datatypeName(aiPlanGetUserVariableInt(id,xMetadata,data - xVarNames + mVariableTypes));");
code("string name = aiPlanGetUserVariableString(id,xVarNames,data - xVarNames);");
code("debugLog(\"xGetBool: \" + aiPlanGetName(id) + \" variable \" + name + \" is not a bool! Type: \" + type);");
code("return(false);");
code("}");
code("if (index == -1) {");
code("index = aiPlanGetUserVariableInt(id,xMetadata,mPointer);");
code("}");
code("return(aiPlanSetUserVariableBool(id,data,index,val));");
code("}");

code("int xGetDatabaseCount(int id = 0) {");
code("return(aiPlanGetUserVariableInt(id,xMetadata,mCount));");
code("}");

code("int xGetPointer(int id = 0) {");
code("return(aiPlanGetUserVariableInt(id,xMetadata,mPointer));");
code("}");

code("void xPrintAll(int id = 0, int index = 0) {");
code("trChatSend(0, \"<u>\" + aiPlanGetName(id) + \"</u>\");");
code("trChatSend(0, \"size: \" + xGetDatabaseCount(id));");
code("trChatSend(0, \"pointer: \" + index);");
code("for(i=1; < aiPlanGetNumberUserVariableValues(id,xVarNames)) {");
code("string name = aiPlanGetUserVariableString(id,xVarNames,i);");
code("int type = aiPlanGetUserVariableInt(id,xMetadata,mVariableTypes + i);");
code("switch(type)");
code("{");
code("case mInt:");
code("{");
code("trChatSend(0, name + \": \" + aiPlanGetUserVariableInt(id,xVarNames + i,index));");
code("}");
code("case mFloat:");
code("{");
code("trChatSend(0, name + \": \" + aiPlanGetUserVariableFloat(id,xVarNames + i,index));");
code("}");
code("case mString:");
code("{");
code("trChatSend(0, name + \": \" + aiPlanGetUserVariableString(id,xVarNames + i,index));");
code("}");
code("case mVector:");
code("{");
code("trChatSend(0, name + \": \" + aiPlanGetUserVariableVector(id,xVarNames + i,index));");
code("}");
code("case mBool:");
code("{");
code("if (aiPlanGetUserVariableBool(id,xVarNames + i,index)) {");
code("trChatSend(0, name + \": true\");");
code("} else {");
code("trChatSend(0, name + \": false\");");
code("}");
code("}");
code("}");
code("}");
code("}");

code("void xUnitSelect(int id = 0, int varn = 0, bool reverse = true) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(id,varn), reverse);");
code("}");

code("void xUnitSelectByID(int db = 0, int varn = 0) {");
code("trUnitSelectClear();");
code("trUnitSelectByID(xGetInt(db,varn));");
code("}");

code("rule mInitializeMemory");
code("active");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("aiSet(\"NoAI\", 0);");
code("MALLOC = aiPlanCreate(\"memory\",8);");
code("ARRAYS = aiPlanCreate(\"arrays\",8);");
code("for(i=0; < 5) {");
code("aiPlanAddUserVariableBool(MALLOC,i * 3 + xDirtyBit - 1,\"DirtyBit\"+i,1);");
code("aiPlanAddUserVariableInt(MALLOC,i * 3 + xNextBlock - 1,\"NextBlock\"+i,1);");
code("aiPlanSetUserVariableBool(MALLOC,i * 3 + xDirtyBit - 1, NEXTFREE, true);");
code("aiPlanSetUserVariableInt(MALLOC,i * 3 + xNextBlock - 1, NEXTFREE, 0);");
code("}");
code("aiPlanAddUserVariableInt(MALLOC,mInt * 3 + xData - 1, \"intData\",1);");
code("aiPlanAddUserVariableFloat(MALLOC,mFloat * 3 + xData - 1, \"floatData\",1);");
code("aiPlanAddUserVariableString(MALLOC,mString * 3 + xData - 1, \"stringData\",1);");
code("aiPlanAddUserVariableVector(MALLOC,mVector * 3 + xData - 1, \"vectorData\",1);");
code("aiPlanAddUserVariableBool(MALLOC,mBool * 3 + xData - 1, \"boolData\",1);");

code("aiPlanAddUserVariableString(MALLOC,15,\"datatypes\",5);");
code("aiPlanSetUserVariableString(MALLOC,15,mInt,\"Integer\");");
code("aiPlanSetUserVariableString(MALLOC,15,mFloat,\"Float\");");
code("aiPlanSetUserVariableString(MALLOC,15,mString,\"String\");");
code("aiPlanSetUserVariableString(MALLOC,15,mVector,\"Vector\");");
code("aiPlanSetUserVariableString(MALLOC,15,mBool,\"Bool\");");
code("}");
code("const int DIMENSION_X = 290;");
code("const int DIMENSION_Z = 290;");
code("const float PI = 3.141592;");

code("void trVectorQuestVarSet(string VQVname = \"\", vector QVv = vector(-1,-1,-1)) {");
code("if (VQVname == \"\") return;");
code("if (trQuestVarGet(VQVname) == 0) {");
code("trQuestVarSet(VQVname, mNewVector(QVv));");
code("} else {");
code("mSetVector(1*trQuestVarGet(VQVname),QVv);");
code("}");
code("}");

code("vector trVectorQuestVarGet(string name = \"\") {");
code("if (name == \"\") { return(vector(-1,-1,-1)); }");

code("vector ret = mGetVector(1*trQuestVarGet(name));");
code("return(ret);");
code("}");

code("float trVectorQuestVarGetX(string VQVname = \"\") {");
code("if (VQVname == \"\") return(-1);");
code("float val = xsVectorGetX(mGetVector(1*trQuestVarGet(VQVname)));");
code("return(val);");
code("}");

code("float trVectorQuestVarGetY(string VQVname = \"\") {");
code("if (VQVname == \"\") return(-1);");
code("float val = xsVectorGetY(mGetVector(1*trQuestVarGet(VQVname)));");
code("return(val);");
code("}");

code("float trVectorQuestVarGetZ(string VQVname = \"\") {");
code("if (VQVname == \"\") return(-1);");
code("float val = xsVectorGetZ(mGetVector(1*trQuestVarGet(VQVname)));");
code("return(val);");
code("}");

code("void trVectorQuestVarEcho(string VQVname = \"\") {");
code("if (VQVname == \"\") return;");
code("trChatSend(0, \"\"+VQVname+\": \"+trVectorQuestVarGet(VQVname));");
code("}");


code("void trStringQuestVarSet(string name = \"\", string value = \"\") {");
code("if (trQuestVarGet(\"string\"+name) > 0) {");
code("mSetString(1*trQuestVarGet(\"string\"+name), value);");
code("} else {");
code("trQuestVarSet(\"string\"+name, mNewString(value));");
code("}");
code("}");

code("string trStringQuestVarGet(string name=\"\") {");
code("string val = mGetString(1*trQuestVarGet(\"string\"+name));");
code("return(val);");
code("}");


code("bool playerIsPlaying(int p = 0) {");
code("return(kbIsPlayerHuman(p) == true && kbIsPlayerResigned(p) == false);");
code("}");


code("void trUnitTeleportToVector(string v = \"\") {");
code("trUnitTeleport(trVectorQuestVarGetX(v), trVectorQuestVarGetY(v), trVectorQuestVarGetZ(v));");
code("}");

code("void trUnitSelectByQV(string s = \"\", bool reverse = true) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+1*trQuestVarGet(\"\"+s), reverse);");
code("}");

code("void trVectorSetUnitPos(string v = \"\", string db = \"\", bool reverse = true) {");
code("trVectorQuestVarSet(v, kbGetBlockPosition(\"\"+1*trQuestVarGet(db), reverse));");
code("}");

code("void trVectorSetUnitPosInt(string v = \"\", int val = 0, bool reverse = true) {");
code("trVectorQuestVarSet(v, kbGetBlockPosition(\"\"+val, reverse));");
code("}");


code("void trUnitMoveToVector(string v = \"\", bool attack = false) {");
code("trUnitMoveToPoint(trVectorQuestVarGetX(v),0,trVectorQuestVarGetZ(v),-1,attack);");
code("}");

code("void trVectorScale(string db = \"\", float s = 1.0) {");
code("trVectorQuestVarSet(db, trVectorQuestVarGet(db) * s);");
code("}");

code("vector vectorSnapToGrid(vector v = vector(0,0,0)) {");
code("int x = xsVectorGetX(v) / 2;");
code("int z = xsVectorGetZ(v) / 2;");
code("return(xsVectorSet(x * 2 + 1,xsVectorGetY(v),z * 2 + 1));");
code("}");

code("void zVectorSnapToGrid(string qv = \"\") {");
code("trVectorQuestVarSet(qv, vectorSnapToGrid(trVectorQuestVarGet(qv)));");
code("}");

code("int zModulo(int mod = 10, float val = 0) {");
code("int m = 0 + mod;");
code("int v = xsRound(val);");
code("return(v - xsFloor(val / m) * m);");
code("}");

code("int iModulo(int mod = 10, int val = 0) {");
code("return(val - val / mod * mod);");
code("}");

code("float fModulo(float mod = 0, float val = 0) {");
code("int c = 0;");
code("if (val > 0) {");
code("c = val / mod;");
code("} else {");
code("c = val / mod - 1;");
code("}");
code("return(0.0 + val - mod * c);");
code("}");

code("bool getBit(int bit = 0, int val = 0) {");
code("val = val / xsPow(2, bit);");
code("return((iModulo(2, val) == 1));");
code("}");

code("void zUnitHeading(float a = 0) {");
code("trSetUnitOrientation(xsVectorSet(xsSin(a),0,xsCos(a)), xsVectorSet(0,1,0), true);");
code("}");

code("void zInitProtoUnitStat(string r = \"\", int p = 0, int f = 0, float v = 0.0) {");
code("trQuestVarSet(\"p\"+p+\"pf\"+kbGetProtoUnitID(r)+\"f\"+f, v);");
code("}");

code("void zSetProtoUnitStat(string r = \"\", int p = 0, int f = 0, float v = 0.0) {");
code("for(zsps=0; >1){}");
code("zsps = kbGetProtoUnitID(r);");
code("trModifyProtounit(r, p, f, 0.0 + v - trQuestVarGet(\"p\"+p+\"pf\"+zsps+\"f\"+f));");
code("trQuestVarSet(\"p\"+p+\"pf\"+zsps+\"f\"+f, 0.0 + v);");
code("}");

code("vector vectorToGrid(vector v = vector(0,0,0)) {");
code("return(xsVectorSet(0 + xsVectorGetX(v) / 2,xsVectorGetY(v),0 + xsVectorGetZ(v) / 2));");
code("}");

code("void zVectorToGrid(string from = \"\", string to = \"\"){");
code("trVectorQuestVarSet(to, vectorToGrid(trVectorQuestVarGet(from)));");
code("}");

code("vector gridToVector(vector g = vector(0,0,0)) {");
code("return(xsVectorSet(xsVectorGetX(g) * 2 + 1,xsVectorGetY(g),xsVectorGetZ(g) * 2 + 1));");
code("}");

code("void zGridToVector(string from = \"\", string to = \"\") {");
code("trVectorQuestVarSet(to, gridToVector(trVectorQuestVarGet(from)));");
code("}");

code("void zSquareVar(string qv = \"\") {");
code("trQuestVarSet(qv, xsPow(trQuestVarGet(qv), 2));");
code("}");

code("float distanceBetweenVectors(vector start = vector(0,0,0), vector end = vector(0,0,0), bool squared = true) {");
code("float xDiff = xsVectorGetX(end) - xsVectorGetX(start);");
code("float zDiff = xsVectorGetZ(end) - xsVectorGetZ(start);");
code("float dist = xDiff * xDiff + zDiff * zDiff;");
code("if (squared == false) {");
code("dist = xsSqrt(dist);");
code("}");
code("return(dist);");
code("}");

code("float zDistanceBetweenVectorsSquared(string start = \"\", string end = \"\") {");
code("return(distanceBetweenVectors(trVectorQuestVarGet(start),trVectorQuestVarGet(end)));");
code("}");

code("bool vectorInRectangle(vector pos = vector(0,0,0), vector bot = vector(0,0,0), vector top = vector(0,0,0)) {");
code("if (xsVectorGetX(pos) < xsVectorGetX(bot)) {");
code("return(false);");
code("}");
code("if (xsVectorGetX(pos) > xsVectorGetX(top)) {");
code("return(false);");
code("}");
code("if (xsVectorGetZ(pos) < xsVectorGetZ(bot)) {");
code("return(false);");
code("}");
code("if (xsVectorGetZ(pos) > xsVectorGetZ(top)) {");
code("return(false);");
code("}");
code("return(true);");
code("}");

code("bool zVectorInRectangle(string pos = \"\", string bot = \"\", string top = \"\") {");
code("vector tempPos = mGetVector(1*trQuestVarGet(pos));");
code("vector tempBot = mGetVector(1*trQuestVarGet(bot));");
code("vector tempTop = mGetVector(1*trQuestVarGet(top));");
code("return(vectorInRectangle(tempPos,tempBot,tempTop));");
code("}");

code("vector rotationMatrix(vector v = vector(0,0,0), float cosT = 0, float sinT = 0) {");
code("float x = xsVectorGetX(v);");
code("float z = xsVectorGetZ(v);");
code("vector ret = xsVectorSet(x * cosT - z * sinT, 0, x * sinT + z * cosT);");
code("return(ret);");
code("}");

code("float zDistanceBetweenVectors(string start = \"\", string end = \"\") {");
code("return(distanceBetweenVectors(trVectorQuestVarGet(start),trVectorQuestVarGet(end),false));");
code("}");

code("float distanceBetweenVectors3d(vector start = vector(0,0,0), vector end = vector(0,0,0), bool squared = true) {");
code("float xdiff = xsVectorGetX(start) - xsVectorGetX(end);");
code("float ydiff = xsVectorGetY(start) - xsVectorGetY(end);");
code("float zdiff = xsVectorGetZ(start) - xsVectorGetZ(end);");
code("float dist = xdiff * xdiff + ydiff * ydiff + zdiff * zdiff;");
code("if (squared == false) {");
code("dist = xsSqrt(dist);");
code("}");
code("return(dist);");
code("}");

code("float zDistanceBetweenVectors3d(string start = \"\", string end = \"\") {");
code("return(distanceBetweenVectors3d(trVectorQuestVarGet(start),trVectorQuestVarGet(end),false));");
code("}");

code("float unitDistanceToVector(int name = 0, vector v = vector(0,0,0), bool squared = true) {");
code("vector temp = kbGetBlockPosition(\"\"+name,true);");
code("return(distanceBetweenVectors(temp,v,squared));");
code("}");

code("float zDistanceToVectorSquared(string qv = \"\", string v = \"\") {");
code("return(unitDistanceToVector(1*trQuestVarGet(qv),trVectorQuestVarGet(v)));");
code("}");

code("float zDistanceToVector(string qv = \"\", string v = \"\") {");
code("return(unitDistanceToVector(1*trQuestVarGet(qv),trVectorQuestVarGet(v),false));");
code("}");

code("vector vectorSetFromAngle(float angle = 0) {");
code("return(xsVectorSet(xsSin(angle), 0, xsCos(angle)));");
code("}");

code("void trVectorSetFromAngle(string qv = \"\", float angle = 0) {");
code("trVectorQuestVarSet(qv,xsVectorSet(xsSin(angle), 0, xsCos(angle)));");
code("}");

code("float angleBetweenVectors(vector from = vector(0,0,0), vector to = vector(0,0,0)) {");
code("float a = xsVectorGetX(to) - xsVectorGetX(from);");
code("a = a / (xsVectorGetZ(to) - xsVectorGetZ(from));");
code("a = xsAtan(a);");
code("if (xsVectorGetZ(from) > xsVectorGetZ(to)) {");
code("if (xsVectorGetX(from) > xsVectorGetX(to)) {");
code("a = a - PI;");
code("} else {");
code("a = a + PI;");
code("}");
code("}");
code("return(a);");
code("}");

code("float zAngleBetweenVectors(string from = \"\", string to = \"\") {");
code("return(angleBetweenVectors(trVectorQuestVarGet(from),trVectorQuestVarGet(to)));");
code("}");

code("float angleOfVector(vector dir = vector(0,0,0)) {");
code("float a = xsVectorGetX(dir) / xsVectorGetZ(dir);");
code("a = xsAtan(a);");
code("if (0.0 > xsVectorGetZ(dir)) {");
code("if (0.0 > xsVectorGetX(dir)) {");
code("a = a - PI;");
code("} else {");
code("a = a + PI;");
code("}");
code("}");
code("return(a);");
code("}");

code("float zAngleOfVector(string v = \"\") {");
code("return(angleOfVector(trVectorQuestVarGet(v)));");
code("}");

code("vector getUnitVector(vector start = vector(0,0,0), vector end = vector(0,0,0), float mod = 1.0) {");
code("float xdiff = xsVectorGetX(end) - xsVectorGetX(start);");
code("float zdiff = xsVectorGetZ(end) - xsVectorGetZ(start);");
code("float dist = xsSqrt(xdiff * xdiff + zdiff * zdiff);");
code("vector ret = vector(1,0,0);");
code("if (dist > 0) {");
code("ret = xsVectorSet(xdiff / dist * mod, 0, zdiff / dist * mod);");
code("}");
code("return(ret);");
code("}");

code("vector zGetUnitVector(string start = \"\", string end = \"\", float mod = 1.0) {");
code("return(getUnitVector(trVectorQuestVarGet(start),trVectorQuestVarGet(end),mod));");
code("}");

code("vector getUnitVector3d(vector start = vector(0,0,0), vector end = vector(0,0,0), float mod = 1.0) {");
code("float xdiff = xsVectorGetX(end) - xsVectorGetX(start);");
code("float ydiff = xsVectorGetY(end) - xsVectorGetY(start);");
code("float zdiff = xsVectorGetZ(end) - xsVectorGetZ(start);");
code("float dist = xsSqrt(xdiff * xdiff + ydiff * ydiff + zdiff * zdiff);");
code("vector ret = vector(0,1,0);");
code("if (dist > 0) {");
code("ret = xsVectorSet(xdiff / dist * mod, ydiff / dist * mod, zdiff / dist * mod);");
code("}");
code("return(ret);");
code("}");

code("vector zGetUnitVector3d(string start = \"\", string end = \"\", float mod = 1.0) {");
code("return(getUnitVector3d(trVectorQuestVarGet(start),trVectorQuestVarGet(end),mod));");
code("}");

code("vector crossProduct(vector a = vector(0,0,0), vector b = vector(0,0,0)) {");
code("float x = xsVectorGetY(a) * xsVectorGetZ(b) - xsVectorGetZ(a) * xsVectorGetY(b);");
code("float y = xsVectorGetZ(a) * xsVectorGetX(b) - xsVectorGetX(a) * xsVectorGetZ(b);");
code("float z = xsVectorGetX(a) * xsVectorGetY(b) - xsVectorGetY(a) * xsVectorGetX(b);");
code("vector ret = xsVectorSet(x, y, z);");
code("return(ret);");
code("}");

code("float dotProduct(vector a = vector(0,0,0), vector b = vector(0,0,0)) {");
code("return(xsVectorGetX(a) * xsVectorGetX(b) + xsVectorGetZ(a) * xsVectorGetZ(b));");
code("}");

code("bool terrainIsType(vector v = vector(0,0,0), int type = 0, int subtype = 0) {");
code("bool isType = trGetTerrainType(xsVectorGetX(v),xsVectorGetZ(v)) == type;");
code("isType = trGetTerrainSubType(xsVectorGetX(v),xsVectorGetZ(v)) == subtype;");
code("return(isType);");
code("}");

code("bool zTerrainIsType(string qv = \"\", int type = 0, int subtype = 0) {");
code("return(terrainIsType(trVectorQuestVarGet(qv),type,subtype));");
code("}");

code("void modularCounterInit(string name = \"\", int size = 0) {");
code("trQuestVarSet(\"counter\" + name + \"size\", size);");
code("trQuestVarSet(\"counter\" + name + \"pointer\", 1);");
code("trQuestVarSet(name, 1);");
code("}");

code("int modularCounterNext(string name = \"\") {");
code("trQuestVarSet(\"counter\" + name + \"pointer\", 1 + trQuestVarGet(\"counter\" + name + \"pointer\"));");
code("if (trQuestVarGet(\"counter\" + name + \"pointer\") > trQuestVarGet(\"counter\" + name + \"size\")) {");
code("trQuestVarSet(\"counter\" + name + \"pointer\", 1);");
code("}");
code("trQuestVarSet(name, trQuestVarGet(\"counter\"+name+\"pointer\"));");
code("return(0 + trQuestVarGet(\"counter\" + name + \"pointer\"));");
code("}");

code("int peekModularCounterNext(string name = \"\") {");
code("trQuestVarSet(\"counter\" + name + \"fake\", 1 + trQuestVarGet(\"counter\" + name + \"pointer\"));");
code("if (trQuestVarGet(\"counter\" + name + \"fake\") >= trQuestVarGet(\"counter\" + name + \"size\")) {");
code("trQuestVarSet(\"counter\" + name + \"fake\", 1);");
code("}");
code("return(0 + trQuestVarGet(\"counter\" + name + \"fake\"));");
code("}");






























code("int yFindLatestReverse(string qv = \"\", string proto = \"\", int p = 0) {");
code("int id = kbGetProtoUnitID(proto);");
code("trUnitSelectClear();");
code("for(x=trGetNextUnitScenarioNameNumber(); >trQuestVarGet(qv)) {");
code("int i = kbGetBlockID(\"\"+x, true);");
code("if (kbGetUnitBaseTypeID(i) == id) {");
code("trUnitSelectClear();");
code("trUnitSelectByID(i);");
code("if (trUnitIsOwnedBy(p)) {");
code("trQuestVarSet(qv, x);");
code("return(i);");
code("}");
code("}");
code("}");
code("return(-1);");
code("}");

code("int yFindLatest(string qv = \"\", string proto = \"\", int p = 0) {");
code("int id = kbGetProtoUnitID(proto);");
code("trUnitSelectClear();");
code("trQuestVarSet(\"next\",trGetNextUnitScenarioNameNumber() - 1);");
code("while(trQuestVarGet(\"next\") > trQuestVarGet(qv)) {");
code("trQuestVarSet(qv, 1 + trQuestVarGet(qv));");
code("int i = kbGetBlockID(\"\"+1*trQuestVarGet(qv), true);");
code("if (kbGetUnitBaseTypeID(i) == id) {");
code("trUnitSelectClear();");
code("trUnitSelectByID(i);");
code("if (trUnitIsOwnedBy(p)) {");
code("return(i);");
code("}");
code("}");
code("}");
code("return(-1);");
code("}");
code("int dPlayerUnits = 0;");
code("int dEnemies = 0;");
code("int dEnemiesIncoming = 0;");

code("int xUnitName = 0;");
code("int xPlayerOwner = 0;");
code("int xUnitID = 0;");
code("int xPhysicalResist = 0;");
code("int xMagicResist = 0;");
code("int xIsHero = 0;");
code("int xUnitPos = 0;");
code("int xDoppelganger = 0;");

code("int xCurrentHealth = 0;");
code("int xStunStatus = 0;");
code("int xStunTimeout = 0;");
code("int xStunSFX = 0;");
code("int xPoisonStatus = 0;");
code("int xPoisonTimeout = 0;");
code("int xPoisonLast = 0;");
code("int xPoisonDamage = 0;");
code("int xPoisonSFX = 0;");
code("int xSilenceStatus = 0;");
code("int xSilenceTimeout = 0;");
code("int xSilenceSFX = 0;");
code("int xLaunched = 0;");

code("int xDatabaseIndex = 0;");

code("int xDecay = 0;");
code("int xDecayNext = 0;");
code("int xUnity = 0;");
code("int xDeepDamageLast = 0;");

code("int xBounty = 0;");
code("int xDropRelic = 0;");
code("int xDeathSentence = 0;");
code("int xEchoBomb = 0;");
code("int xMissingTimeout = 0;");

code("int dPlayerCharacters = 0;");
code("int xCharIndex = 0;");
code("int xCharAttacking = 0;");
code("int xCharAttackNext = 0;");
code("int xCharAttackTarget = 0;");
code("int xCharAttackTargetIndex = 0;");
code("int xCharSpecialAttack = 0;");

code("int dFreeRelics = 0;");
code("int xRelicName = 0;");
code("int xRelicType = 0;");

code("int dPlayerData = 0;");
code("int xPlayerClass = 0;");
code("int xPlayerHealth = 0;");
code("int xPlayerAttack = 0;");
code("int xPlayerBaseAttackTrue = 0;");
code("int xPlayerBaseAttack = 0;");
code("int xPlayerRange = 0;");
code("int xPlayerSpeed = 0;");
code("int xPlayerFirstDelay = 0;");
code("int xPlayerNextDelay = 0;");
code("int xPlayerSpecialAttackCooldown = 0;");
code("int xPlayerLos = 0;");
code("int xPlayerProjectiles = 0;");
code("int xPlayerSpellRange = 0;");
code("int xPlayerSpellDamage = 0;");
code("int xPlayerSpellDuration = 0;");
code("int xPlayerSpellRangeTrue = 0;");
code("int xPlayerSpellDamageTrue = 0;");
code("int xPlayerSpellDurationTrue = 0;");
code("int xPlayerHealBoost = 0;");
code("int xPlayerFavorFromAttacks = 0;");
code("int xPlayerPoisonSpeed = 0;");
code("int xPlayerLifesteal = 0;");
code("int xPlayerLifestealTotal = 0;");
code("int xPlayerFavorRegen = 0;");
code("int xPlayerPhysicalResist = 0;");
code("int xPlayerMagicResist = 0;");
code("int xPlayerPetDogs = 0;");
code("int xPlayerMagicPen = 0;");
code("int xPlayerCleave = 0;");
code("int xPlayerDefiance = 0;");

code("int xPlayerUltimateCost = 0;");
code("int xPlayerCooldownReduction = 0;");
code("int xPlayerStunResistance = 0;");
code("int xPlayerPoisonResistance = 0;");
code("int xPlayerSilenceResistance = 0;");

code("int xPlayerUltimateCostCount = 0;");
code("int xPlayerCooldownReductionCount = 0;");
code("int xPlayerStunResistanceCount = 0;");
code("int xPlayerPoisonResistanceCount = 0;");
code("int xPlayerSilenceResistanceCount = 0;");

code("int xPlayerStunDamage = 0;");
code("int xPlayerPoisonKiller = 0;");
code("int xPlayerPoisonKillerActive = 0;");

code("int xPlayerWellCooldownStatus = 0;");
code("int xPlayerLureCooldownStatus = 0;");
code("int xPlayerRainCooldownStatus = 0;");
code("int xPlayerWellCooldown = 0;");
code("int xPlayerLureCooldown = 0;");
code("int xPlayerRainCooldown = 0;");
code("int xPlayerWellCost = 0;");
code("int xPlayerLureCost = 0;");
code("int xPlayerRainCost = 0;");
code("int xPlayerWellActivated = 0;");
code("int xPlayerLureActivated = 0;");
code("int xPlayerRainActivated = 0;");
code("int xPlayerWellReadyTime = 0;");
code("int xPlayerLureReadyTime = 0;");
code("int xPlayerRainReadyTime = 0;");
code("int xPlayerWellPos = 0;");
code("int xPlayerLurePos = 0;");

code("int xPlayerRegenerateFavorLast = 0;");
code("int xPlayerRegenerateHealthLast = 0;");

code("int xPlayerUnit = 0;");
code("int xPlayerLevel = 0;");
code("int xPlayerProgress = 0;");
code("int xPlayerGodBoon = 0;");
code("int xPlayerIndex = 0;");
code("int xPlayerSimp = 0;");
code("int xPlayerQueen = 0;");
code("int xPlayerLaunched = 0;");
code("int xPlayerAnimation = 0;");
code("int xPlayerAction = 0;");
code("int xPlayerSilenced = 0;");

code("int xPlayerTether = 0;");

code("int xPlayerMonsterIndex = 0;");
code("int xPlayerMonsterProto = 0;");
code("int xPlayerMonsterName = 0;");
code("int xPlayerRelicTransporterLevel = 0;");
code("int xPlayerGold = 0;");
code("int xPlayerFavor = 0;");
code("int xPlayerDead = 0;");
code("int xPlayerResigned = 0;");
code("int xPlayerReviveNext = 0;");

code("int xPlayerPetDogReady = 0;");
code("int xPlayerPetDogNext = 0;");
code("int xPlayerPetMonsterReady = 0;");
code("int xPlayerPetMonsterNext = 0;");

code("int dClass = 0;");
code("int xClassProto = 0;");
code("int xClassFirstDelay = 0;");
code("int xClassNextDelay = 0;");
code("int xClassSpecialAttackCooldown = 0;");
code("int xClassGemstone = 0;");
code("int xClassLevel = 0;");

code("int dFrostGiantsIncoming = 0;");
code("int xFrostTargetSize = 0;");
code("int xFrostCurrentSize = 0;");
code("int xFrostTargetTime = 0;");

code("int dStunnedUnits = 0;");
code("int xStunnedProto = 0;");

code("int dLaunchedUnits = 0;");
code("int xLaunchedCar = 0;");
code("int xLaunchedDB = 0;");
code("int xLaunchedIndex = 0;");
code("int xLaunchedStun = 0;");
code("int xLaunchedDest = 0;");
code("int xLaunchedTimeout = 0;");

code("int xProjYeehaw = 0;");
code("int xProjScale = 0;");
code("int xProjProto = 0;");
code("int xProjAnim = 0;");
code("int xProjDir = 0;");
code("int xProjHeight = 0;");
code("int xProjSpeed = 0;");
code("int xProjPrev = 0;");
code("int xProjDist = 0;");

code("int dBoons = 0;");
code("int xBoonType = 0;");

code("int dPlayerWolves = 0;");
code("int xPlayerWolfDead = 0;");
code("int xPlayerWolfTimeout = 0;");

code("int dPlayerLasers = 0;");
code("int xPlayerLaserTimeout = 0;");
code("int xPlayerLaserRange = 0;");

code("int dSlotRelics = 0;");
code("int xSlotRelicPad = 0;");

code("int dSlotUnits = 0;");

code("int dMonsterpedia = 0;");
code("int xMonsterIndex = 0;");

code("int dRelicDescriptors = 0;");

code("int dPlayerCharacterArray = 0;");
code("int dPlayerRelicsArray = 0;");
code("int dPlayerWarehouseArray = 0;");

code("int getCharactersDB(int p = 0) {");
code("return(aiPlanGetUserVariableInt(ARRAYS,dPlayerCharacterArray,p));");
code("}");

code("int getRelicsDB(int p = 0) {");
code("return(aiPlanGetUserVariableInt(ARRAYS,dPlayerRelicsArray,p));");
code("}");

code("int getWarehouseDB(int p = 0) {");
code("return(aiPlanGetUserVariableInt(ARRAYS,dPlayerWarehouseArray,p));");
code("}");

code("rule initialize_databases");
code("active");
code("highFrequency");
code("{");
code("xsSetContextPlayer(0);");
code("xsDisableSelf();");
code("int db = 0;");
code("dPlayerUnits = xInitDatabase(\"playerUnits\", 30);");
code("dEnemies = xInitDatabase(\"enemies\", 30);");
code("for(db=dEnemies; >= dPlayerUnits) {");
code("xUnitName = xInitAddInt(db,\"name\");");
code("xPlayerOwner = xInitAddInt(db,\"player\");");
code("xUnitID = xInitAddInt(db,\"ID\");");
code("xPhysicalResist = xInitAddFloat(db,\"physicalResist\");");
code("xMagicResist = xInitAddFloat(db,\"magicResist\");");
code("xIsHero = xInitAddBool(db,\"isHero\");");
code("xUnitPos = xInitAddVector(db,\"UnitPos\");");
code("xDoppelganger = xInitAddInt(db,\"doppelganger\");");
code("xCurrentHealth = xInitAddFloat(db,\"currentHP\");");
code("xStunStatus = xInitAddInt(db,\"stunStatus\");");
code("xStunTimeout = xInitAddInt(db,\"stunTimeout\");");
code("xStunSFX = xInitAddInt(db,\"stunSFX\");");
code("xPoisonStatus = xInitAddInt(db,\"poisonStatus\");");
code("xPoisonTimeout = xInitAddInt(db,\"poisonTimeout\");");
code("xPoisonLast = xInitAddInt(db,\"poisonLast\");");
code("xPoisonDamage = xInitAddFloat(db,\"poisonDamage\");");
code("xPoisonSFX = xInitAddInt(db,\"poisonSFX\");");
code("xSilenceStatus = xInitAddInt(db,\"silenceStatus\");");
code("xSilenceTimeout = xInitAddInt(db,\"silenceTimeout\");");
code("xSilenceSFX = xInitAddInt(db,\"silenceSFX\");");
code("xLaunched = xInitAddBool(db,\"launched\");");
code("}");
code("xDecay = xInitAddFloat(dPlayerUnits,\"decay\");");
code("xDecayNext = xInitAddInt(dPlayerUnits,\"decayNext\");");
code("xUnity = xInitAddInt(dPlayerUnits,\"unity\");");

code("xBounty = xInitAddInt(dEnemies,\"bounty\");");
code("xDropRelic = xInitAddInt(dEnemies,\"relic\");");
code("xDeathSentence = xInitAddBool(dEnemies,\"deathSentence\", false);");
code("xEchoBomb = xInitAddBool(dEnemies,\"echoBomb\", false);");
code("xMissingTimeout = xInitAddInt(dEnemies,\"missingTimeout\");");

code("xDatabaseIndex = xPlayerOwner;");

code("dEnemiesIncoming = xInitDatabase(\"enemiesIncoming\",50);");
code("xInitAddInt(dEnemiesIncoming,\"name\");");

code("dFreeRelics = xInitDatabase(\"freeRelics\", 10);");
code("xRelicName = xInitAddInt(dFreeRelics,\"name\");");
code("xRelicType = xInitAddInt(dFreeRelics,\"type\");");

code("dPlayerData = xInitDatabase(\"playerData\", cNumberPlayers - 2);");
code("xPlayerClass = xInitAddInt(dPlayerData,\"class\");");
code("xPlayerHealth = xInitAddFloat(dPlayerData,\"health\");");
code("xPlayerAttack = xInitAddFloat(dPlayerData,\"attack\");");
code("xPlayerBaseAttackTrue = xInitAddFloat(dPlayerData,\"baseAttackTrue\");");
code("xPlayerBaseAttack = xInitAddFloat(dPlayerData, \"baseAttack\");");
code("xPlayerRange = xInitAddFloat(dPlayerData, \"range\");");
code("xPlayerSpeed = xInitAddFloat(dPlayerData,\"speed\");");
code("xPlayerFirstDelay = xInitAddInt(dPlayerData,\"firstDelay\");");
code("xPlayerNextDelay = xInitAddInt(dPlayerData,\"nextDelay\");");
code("xPlayerSpecialAttackCooldown = xInitAddInt(dPlayerData,\"specialAttackCD\");");
code("xPlayerLos = xInitAddFloat(dPlayerData,\"los\",20);");
code("xPlayerProjectiles = xInitAddInt(dPlayerData,\"projectiles\",1);");
code("xPlayerSpellRange = xInitAddFloat(dPlayerData,\"spellRange\",1);");
code("xPlayerSpellDamage = xInitAddFloat(dPlayerData,\"spellDamage\",1);");
code("xPlayerSpellDuration = xInitAddFloat(dPlayerData,\"spellDuration\",1);");
code("xPlayerSpellRangeTrue = xInitAddFloat(dPlayerData,\"spellRangeTrue\",1);");
code("xPlayerSpellDamageTrue = xInitAddFloat(dPlayerData,\"spellDamageTrue\",1);");
code("xPlayerSpellDurationTrue = xInitAddFloat(dPlayerData,\"spellDurationTrue\",1);");
code("xPlayerHealBoost = xInitAddFloat(dPlayerData,\"healBoost\",1);");
code("xPlayerFavorFromAttacks = xInitAddInt(dPlayerData,\"favorFromAttacks\");");
code("xPlayerPoisonSpeed = xInitAddInt(dPlayerData,\"poisonSpeed\");");
code("xPlayerLifesteal = xInitAddFloat(dPlayerData,\"lifesteal\");");
code("xPlayerLifestealTotal = xInitAddFloat(dPlayerData,\"lifestealTotal\");");
code("xPlayerFavorRegen = xInitAddFloat(dPlayerData,\"favorRegen\");");
code("xPlayerPhysicalResist = xInitAddFloat(dPlayerData,\"physicalResist\");");
code("xPlayerMagicResist = xInitAddFloat(dPlayerData,\"magicResist\");");
code("xPlayerPetDogs = xInitAddInt(dPlayerData,\"petDogs\");");
code("xPlayerMagicPen = xInitAddFloat(dPlayerData,\"magicPen\");");
code("xPlayerCleave = xInitAddFloat(dPlayerData,\"cleave\");");
code("xPlayerDefiance = xInitAddFloat(dPlayerData,\"defiance\");");

code("xPlayerUltimateCost = xInitAddFloat(dPlayerData,\"ultimateCost\",1);");
code("xPlayerCooldownReduction = xInitAddFloat(dPlayerData,\"cdr\",1);");
code("xPlayerStunResistance = xInitAddFloat(dPlayerData,\"stunResistance\",1);");
code("xPlayerPoisonResistance = xInitAddFloat(dPlayerData,\"poisonResistance\",1);");
code("xPlayerSilenceResistance = xInitAddFloat(dPlayerData,\"silenceResistance\",1);");

code("xPlayerUltimateCostCount = xInitAddInt(dPlayerData,\"ultimateCostCount\");");
code("xPlayerCooldownReductionCount = xInitAddInt(dPlayerData,\"cooldownReductionCount\");");
code("xPlayerStunResistanceCount = xInitAddInt(dPlayerData,\"stunResistanceCount\");");
code("xPlayerPoisonResistanceCount = xInitAddInt(dPlayerData,\"silenceResistanceCount\");");
code("xPlayerSilenceResistanceCount = xInitAddInt(dPlayerData,\"silenceResistanceCount\");");

code("xPlayerStunDamage = xInitAddFloat(dPlayerData,\"stunDamage\");");
code("xPlayerPoisonKiller = xInitAddFloat(dPlayerData,\"poisonKiller\");");
code("xPlayerPoisonKillerActive = xInitAddInt(dPlayerData,\"poisonKillerActive\");");

code("xPlayerWellCooldownStatus = xInitAddInt(dPlayerData,\"wellCooldownStatus\");");
code("xPlayerLureCooldownStatus = xInitAddInt(dPlayerData,\"lureCooldownStatus\");");
code("xPlayerRainCooldownStatus = xInitAddInt(dPlayerData,\"rainCooldownStatus\");");
code("xPlayerWellCooldown = xInitAddInt(dPlayerData,\"wellCooldown\");");
code("xPlayerLureCooldown = xInitAddInt(dPlayerData,\"lureCooldown\");");
code("xPlayerRainCooldown = xInitAddInt(dPlayerData,\"rainCooldown\");");
code("xPlayerWellCost = xInitAddFloat(dPlayerData,\"wellCost\");");
code("xPlayerLureCost = xInitAddFloat(dPlayerData,\"lureCost\");");
code("xPlayerRainCost = xInitAddFloat(dPlayerData,\"rainCost\");");
code("xPlayerWellActivated = xInitAddBool(dPlayerData, \"wellActivated\");");
code("xPlayerLureActivated = xInitAddBool(dPlayerData, \"lureActivated\");");
code("xPlayerRainActivated = xInitAddBool(dPlayerData, \"rainActivated\");");
code("xPlayerWellReadyTime = xInitAddInt(dPlayerData, \"wellReadyTime\");");
code("xPlayerLureReadyTime = xInitAddInt(dPlayerData, \"lureReadyTime\");");
code("xPlayerRainReadyTime = xInitAddInt(dPlayerData, \"rainReadyTime\");");
code("xPlayerWellPos = xInitAddVector(dPlayerData, \"wellPos\");");
code("xPlayerLurePos = xInitAddVector(dPlayerData, \"lurePos\");");

code("xPlayerRegenerateFavorLast = xInitAddInt(dPlayerData,\"regenerateFavorLast\");");
code("xPlayerRegenerateHealthLast = xInitAddInt(dPlayerData,\"regenerateHealthLast\");");

code("xPlayerUnit = xInitAddInt(dPlayerData,\"playerUnit\");");
code("xPlayerLevel = xInitAddInt(dPlayerData,\"level\");");
code("xPlayerProgress = xInitAddInt(dPlayerData,\"progress\");");
code("xPlayerGodBoon = xInitAddInt(dPlayerData,\"blessing\");");
code("xPlayerGold = xInitAddInt(dPlayerData,\"gold\");");
code("xPlayerFavor = xInitAddFloat(dPlayerData,\"favor\");");
code("xPlayerDead = xInitAddInt(dPlayerData,\"dead\");");
code("xPlayerResigned = xInitAddBool(dPlayerData,\"resigned\");");
code("xPlayerReviveNext = xInitAddInt(dPlayerData,\"reviveNext\");");
code("xPlayerIndex = xInitAddInt(dPlayerData,\"index\");");
code("xPlayerSimp = xInitAddInt(dPlayerData,\"simp\");");
code("xPlayerQueen = xInitAddInt(dPlayerData,\"queen\");");
code("xPlayerLaunched = xInitAddBool(dPlayerData,\"launched\");");
code("xPlayerAnimation = xInitAddInt(dPlayerData,\"animation\");");
code("xPlayerAction = xInitAddInt(dPlayerData,\"action\");");
code("xPlayerSilenced = xInitAddBool(dPlayerData,\"silenced\");");

code("xPlayerTether = xInitAddInt(dPlayerData,\"tether\",-1);");

code("xPlayerMonsterIndex = xInitAddInt(dPlayerData,\"monsterIndex\");");
code("xPlayerMonsterProto = xInitAddInt(dPlayerData,\"monsterProto\");");
code("xPlayerMonsterName = xInitAddInt(dPlayerData,\"monsterName\");");
code("xPlayerRelicTransporterLevel = xInitAddInt(dPlayerData,\"relicTransporterLevel\");");

code("xPlayerPetDogReady = xInitAddBool(dPlayerData, \"petDogReady\");");
code("xPlayerPetDogNext = xInitAddInt(dPlayerData, \"petDogNext\");");
code("xPlayerPetMonsterReady = xInitAddBool(dPlayerData, \"petMonsterReady\", true);");
code("xPlayerPetMonsterNext = xInitAddInt(dPlayerData, \"petMonsterNext\");");

code("dStunnedUnits = xInitDatabase(\"stunnedUnits\", 10);");
code("xInitAddInt(dStunnedUnits,\"name\");");
code("xInitAddInt(dStunnedUnits,\"player\");");
code("xInitAddInt(dStunnedUnits,\"id\");");
code("xStunnedProto = xInitAddInt(dStunnedUnits,\"proto\");");

code("dLaunchedUnits = xInitDatabase(\"launchedUnits\",10);");
code("xInitAddInt(dLaunchedUnits,\"name\");");
code("xInitAddInt(dLaunchedUnits,\"player\");");
code("xInitAddInt(dLaunchedUnits,\"id\");");
code("xInitAddInt(dLaunchedUnits,\"proto\");");
code("xLaunchedCar = xInitAddInt(dLaunchedUnits,\"car\");");
code("xLaunchedDB = xInitAddInt(dLaunchedUnits,\"database\");");
code("xLaunchedIndex = xInitAddInt(dLaunchedUnits,\"index\");");
code("xLaunchedStun = xInitAddBool(dLaunchedUnits,\"stun\");");
code("xLaunchedDest = xInitAddVector(dLaunchedUnits,\"dest\");");
code("xLaunchedTimeout = xInitAddInt(dLaunchedUnits,\"timeout\");");


code("dClass = xInitDatabase(\"classData\", 16);");
code("xClassProto = xInitAddInt(dClass,\"proto\");");
code("xClassFirstDelay = xInitAddInt(dClass,\"firstDelay\");");
code("xClassNextDelay = xInitAddInt(dClass,\"nextDelay\");");
code("xClassSpecialAttackCooldown = xInitAddInt(dClass,\"specialAttackCD\");");
code("xClassGemstone = xInitAddInt(dClass,\"gemstone\");");
code("xClassLevel = xInitAddInt(dClass,\"level\");");

code("for(i=0; < 16) {");
code("xAddDatabaseBlock(dClass);");
code("}");

code("dPlayerCharacters = xInitDatabase(\"playerCharacters\", cNumberPlayers - 2);");
code("xInitAddInt(dPlayerCharacters,\"name\");");
code("xInitAddInt(dPlayerCharacters,\"player\");");
code("xInitAddInt(dPlayerCharacters,\"id\");");
code("xCharIndex = xInitAddInt(dPlayerCharacters,\"index\");");

code("dPlayerCharacterArray = zNewArray(mInt, cNumberPlayers, \"playerCharacterArrays\");");
code("dPlayerRelicsArray = zNewArray(mInt, cNumberPlayers, \"playerRelicArrays\");");
code("dPlayerWarehouseArray = zNewArray(mInt, cNumberPlayers, \"playerWarehouseArrays\");");

code("for(p=1; < cNumberPlayers - 1) {");
code("db = xInitDatabase(\"p\"+p+\"relics\");");
code("aiPlanSetUserVariableInt(ARRAYS, dPlayerRelicsArray, p, db);");
code("xInitAddInt(db,\"name\");");
code("xInitAddInt(db,\"type\");");

code("db = xInitDatabase(\"p\"+p+\"warehouse\");");
code("aiPlanSetUserVariableInt(ARRAYS, dPlayerWarehouseArray, p, db);");
code("xInitAddInt(db,\"name\");");
code("xInitAddInt(db,\"type\");");

code("db = xInitDatabase(\"p\"+p+\"characters\");");
code("aiPlanSetUserVariableInt(ARRAYS, dPlayerCharacterArray, p, db);");
code("xInitAddInt(db,\"name\");");
code("xCharSpecialAttack = xInitAddInt(db,\"specialAttack\");");
code("xInitAddInt(db,\"id\");");
code("xInitAddInt(db,\"index\");");
code("xCharAttacking = xInitAddBool(db,\"attacking\");");
code("xCharAttackNext = xInitAddInt(db,\"attackNext\");");
code("xCharAttackTarget = xInitAddInt(db,\"attackTarget\");");
code("xCharAttackTargetIndex = xInitAddInt(db,\"attackTargetIndex\");");

code("xAddDatabaseBlock(dPlayerData);");
code("}");

code("dPlayerWolves = xInitDatabase(\"playerWolves\");");
code("xInitAddInt(dPlayerWolves, \"name\");");
code("xPlayerWolfDead = xInitAddBool(dPlayerWolves, \"dead\");");
code("xPlayerWolfTimeout = xInitAddInt(dPlayerWolves, \"timeout\");");

code("dPlayerLasers = xInitDatabase(\"playerLasers\");");
code("xInitAddInt(dPlayerLasers, \"name\");");
code("xPlayerLaserRange = xInitAddFloat(dPlayerLasers, \"range\");");
code("xPlayerLaserTimeout = xInitAddInt(dPlayerLasers, \"timeout\");");
code("}");

code("void resetCharacterCustomVars(int p = 0) {");
code("int db = getCharactersDB(p);");
code("int start = xCharAttackTargetIndex - xVarNames + 1;");
code("for (i = start; < aiPlanGetNumberUserVariableValues(db,xVarNames)) {");
code("aiPlanRemoveUserVariable(db,i + xVarNames);");
code("}");
code("aiPlanSetNumberUserVariableValues(db, xVarNames, start, false);");
code("aiPlanSetNumberUserVariableValues(db, xMetadata, start + mVariableTypes, false);");
code("}");
code("const int BOON_DOUBLE_FAVOR = 1;");
code("const int BOON_MORE_GOLD = 2;");
code("const int BOON_SPELL_ATTACK = 3;");

code("const int BOON_SPELL_POISON = 4;");
code("const int BOON_STATUS_COOLDOWNS = 5;");
code("const int BOON_IMMUNE_TO_STATUS = 6;");

code("const int BOON_FROSTY_SPELLS = 7;");
code("const int BOON_REGENERATE_HEALTH = 8;");
code("const int BOON_DECAY_HALVED = 9;");

code("const int BOON_EXCESS_FAVOR = 10;");
code("const int BOON_TWO_RELICS = 11;");
code("const int BOON_MONSTER_COMPANION = 12;");

code("int statueCiv(int boon = 0) {");
code("return(boon - 1);");
code("}");

code("int statueCulture(int boon = 0) {");
code("return(statueCiv(boon) / 3);");
code("}");

code("void overrideStatue(int boon = 0) {");
code("int g = 0;");
code("switch(boon)");
code("{");
code("case 1:");
code("{");
code("g = 5;");
code("}");
code("case 2:");
code("{");
code("g = 4;");
code("}");
code("case 3:");
code("{");
code("g = 3;");
code("}");
code("case 4:");
code("{");
code("g = 0;");
code("}");
code("case 5:");
code("{");
code("g = 1;");
code("}");
code("case 6:");
code("{");
code("g = 2;");
code("}");
code("case 7:");
code("{");
code("g = 7;");
code("}");
code("case 8:");
code("{");
code("g = 8;");
code("}");
code("case 9:");
code("{");
code("g = 6;");
code("}");
code("case 10:");
code("{");
code("g = 9;");
code("}");
code("case 11:");
code("{");
code("g = 11;");
code("}");
code("case 12:");
code("{");
code("g = 10;");
code("}");
code("}");
code("trUnitSetAnimationPath(\"\"+g+\",0,0,0,0,0,0\");");
code("}");

code("string boonIcon(int boon = 0) {");
code("string icon = \"icons\infantry g hoplite icon 64\";");
code("switch(boon)");
code("{");
code("case 1:");
code("{");
code("icon = \"icons\god major zeus icon 128\";");
code("}");
code("case 2:");
code("{");
code("icon = \"icons\god major poseidon icon 128\";");
code("}");
code("case 3:");
code("{");
code("icon = \"icons\god major hades icon 128\";");
code("}");
code("case 4:");
code("{");
code("icon = \"icons\god major isis icon 128\";");
code("}");
code("case 5:");
code("{");
code("icon = \"icons\god major ra icon 128\";");
code("}");
code("case 6:");
code("{");
code("icon = \"icons\god major set icon 128\";");
code("}");
code("case 7:");
code("{");
code("icon = \"icons\god major odin icon 128\";");
code("}");
code("case 8:");
code("{");
code("icon = \"icons\god major thor icon 128\";");
code("}");
code("case 9:");
code("{");
code("icon = \"icons\god major loki icon 128\";");
code("}");
code("case 10:");
code("{");
code("icon = \"icons\god major kronos icons 64\";");
code("}");
code("case 11:");
code("{");
code("icon = \"icons\god major ouranos icons 64\";");
code("}");
code("case 12:");
code("{");
code("icon = \"icons\god major gaia icons 64\";");
code("}");
code("}");
code("return(icon);");
code("}");

code("string boonName(int boon = 0) {");
code("string name = \"WTF that's not a boon!\";");
code("switch(boon)");
code("{");
code("case BOON_REGENERATE_HEALTH:");
code("{");
code("name = \"Regenerate 3 percent health per second.\";");
code("}");
code("case BOON_MORE_GOLD:");
code("{");
code("name = \"Gain double gold from enemy kills.\";");
code("}");
code("case BOON_DECAY_HALVED:");
code("{");
code("name = \"The decay rate of your summoned allies is halved.\";");
code("}");
code("case BOON_SPELL_POISON:");
code("{");
code("name = \"Your damage spells will poison enemies.\";");
code("}");
code("case BOON_DOUBLE_FAVOR:");
code("{");
code("name = \"Your maximum favor is doubled.\";");
code("}");
code("case BOON_IMMUNE_TO_STATUS:");
code("{");
code("name = \"You are immune to status effects.\";");
code("}");
code("case BOON_SPELL_ATTACK:");
code("{");
code("name = \"Your attack is multiplied by your spell power.\";");
code("}");
code("case BOON_FROSTY_SPELLS:");
code("{");
code("name = \"Your spell damage will stun enemies at full health.\";");
code("}");
code("case BOON_EXCESS_FAVOR:");
code("{");
code("name = \"When your favor exceeds your Ultimate cost, your basic spells cost 10 favor and have no cooldown.\";");
code("}");
code("case BOON_TWO_RELICS:");
code("{");
code("name = \"Relic Slots +2\";");
code("}");
code("case BOON_MONSTER_COMPANION:");
code("{");
code("name = \"Choose a monster from the Monsterpedia to be your pet companion. (Cannot choose bosses)\";");
code("}");
code("case BOON_STATUS_COOLDOWNS:");
code("{");
code("name = \"When you inflict a status effect, advance your spell cooldowns by 1 second.\";");
code("}");
code("}");
code("return(name);");
code("}");
code("const int RELIC_HEALTH = 1;");
code("const int RELIC_SPEED = 2;");
code("const int RELIC_ATTACK_RANGE = 3;");
code("const int RELIC_SPELL_RANGE = 4;");
code("const int RELIC_SPELL_DURATION = 5;");
code("const int RELIC_LIFESTEAL = 6;");
code("const int RELIC_ARMOR = 7;");
code("const int RELIC_ATTACK_DAMAGE = 8;");
code("const int RELIC_SPELL_POWER = 9;");
code("const int RELIC_HEAL_BOOST = 10;");

code("const int RELIC_POISON_RESISTANCE = 11;");
code("const int RELIC_ULTIMATE_COST = 12;");
code("const int RELIC_SILENCE_RESISTANCE = 13;");
code("const int RELIC_PROJECTILES = 14;");
code("const int RELIC_STUN_RESISTANCE = 15;");
code("const int RELIC_SPECIAL_ATTACK = 16;");
code("const int RELIC_POISON_KILLER = 17;");
code("const int RELIC_COOLDOWN_REDUCTION = 18;");
code("const int RELIC_WEIGHTED_BLOWS = 19;");
code("const int RELIC_ALL = 20;");

code("const int RELIC_DEFIANCE = 21;");
code("const int RELIC_PET_DOG = 22;");
code("const int RELIC_NOTTUD = 23;");
code("const int RELIC_ZENOPHOBIA = 24;");
code("const int RELIC_YEEBAAGOOON = 25;");


code("const int RELIC_CURSED_RANGE = 26;");
code("const int RELIC_CURSED_DURATION = 27;");
code("const int RELIC_CURSED_POWER = 28;");
code("const int RELIC_FAVOR_FROM_ATTACKS = 29;");
code("const int RELIC_POISON_FASTER = 30;");

code("const int NORMAL_RELICS = 30;");

code("const int RELIC_NICKONHAWK = 36;");
code("const int RELIC_NICKONHAWK_TICKET = 37;");

code("const int RELIC_GHOST_PICTURE = 38;");

code("const int RELIC_MATH_PROBLEM = 40;");
code("const int RELIC_MATH_PROBLEM_END = 60;");

code("const int RELIC_LITERAL_FECES = 61;");
code("const int RELIC_BERRY_BUSH = 62;");
code("const int RELIC_A_FUCKING_CORPSE = 63;");

code("const int RELIC_POISON_BUCKET = 64;");

code("const int RELIC_WORTHLESS_JUNK = 65;");
code("const int RELIC_MAGIC_DETECTOR = 66;");

code("const int RELIC_BINARY_POISON = 67;");

code("const int RELIC_SPARK = 68;");

code("const int KEY_RELICS = 100;");
code("const int RELIC_KEY_GREEK = 101;");
code("const int RELIC_KEY_NORSE = 102;");
code("const int RELIC_KEY_ATLANTEAN = 103;");
code("const int RELIC_KEY_CHINA = 104;");
code("const int RELIC_KEY_EGYPT = 105;");

code("string relicName(int relic = 0) {");
code("string msg = \"WTF That's not a relic!\";");
code("if ((relic >= RELIC_KEY_GREEK) && (relic <= RELIC_KEY_EGYPT)) {");
code("msg = \"A key that opens something\";");
code("} else if ((relic >= RELIC_MATH_PROBLEM) && (relic <= RELIC_MATH_PROBLEM_END)) {");
code("msg = \"\" + (relic - RELIC_MATH_PROBLEM);");
code("} else {");
code("switch(relic)");
code("{");
code("case RELIC_HEALTH:");
code("{");
code("msg = \"Health +300\";");
code("}");
code("case RELIC_SPEED:");
code("{");
code("msg = \"Speed +1\";");
code("}");
code("case RELIC_ATTACK_RANGE:");
code("{");
code("msg = \"Attack Range and LOS +5\";");
code("}");
code("case RELIC_SPELL_RANGE:");
code("{");
code("msg = \"Spell Range +0.3x\";");
code("}");
code("case RELIC_SPELL_DURATION:");
code("{");
code("msg = \"Spell Duration +0.3x\";");
code("}");
code("case RELIC_LIFESTEAL:");
code("{");
code("msg = \"Lifesteal +0.2 (Half for spells)\";");
code("}");
code("case RELIC_ARMOR:");
code("{");
code("msg = \"Armor +0.2x\";");
code("}");
code("case RELIC_ATTACK_DAMAGE:");
code("{");
code("msg = \"Attack +15\";");
code("}");
code("case RELIC_SPELL_POWER:");
code("{");
code("msg = \"Spell Power +0.3x\";");
code("}");
code("case RELIC_HEAL_BOOST:");
code("{");
code("msg = \"Healing Effects +0.5x\";");
code("}");
code("case RELIC_POISON_RESISTANCE:");
code("{");
code("msg = \"Poison resistance x0.5\";");
code("}");
code("case RELIC_STUN_RESISTANCE:");
code("{");
code("msg = \"Stun resistance x0.5\";");
code("}");
code("case RELIC_SILENCE_RESISTANCE:");
code("{");
code("msg = \"Silence resistance x0.5\";");
code("}");
code("case RELIC_POISON_KILLER:");
code("{");
code("msg = \"+0.5x damage to poisoned enemies.\";");
code("}");
code("case RELIC_WEIGHTED_BLOWS:");
code("{");
code("msg = \"Your stuns deal damage equal to 10 percent of your health.\";");
code("}");
code("case RELIC_ALL:");
code("{");
code("msg = \"Spell Power, Duration, Range +0.15\";");
code("}");
code("case RELIC_ULTIMATE_COST:");
code("{");
code("msg = \"Ultimate Cost Reduction x0.1\";");
code("}");
code("case RELIC_PROJECTILES:");
code("{");
code("msg = \"Projectiles +1\";");
code("}");
code("case RELIC_SPECIAL_ATTACK:");
code("{");
code("msg = \"Special Attack Cooldown -1\";");
code("}");
code("case RELIC_COOLDOWN_REDUCTION:");
code("{");
code("msg = \"Cooldown Reduction x0.15\";");
code("}");
code("case RELIC_CURSED_RANGE:");
code("{");
code("msg = \"Spell Range +0.5 | Spell Power -0.3\";");
code("}");
code("case RELIC_CURSED_DURATION:");
code("{");
code("msg = \"Spell Duration +0.5 | Spell Range -0.3\";");
code("}");
code("case RELIC_CURSED_POWER:");
code("{");
code("msg = \"Spell Power +0.5 | Spell Duration -0.3\";");
code("}");
code("case RELIC_FAVOR_FROM_ATTACKS:");
code("{");
code("msg = \"When you attack, gain 1 favor. Ultimate Cost Increased x0.1\";");
code("}");
code("case RELIC_POISON_FASTER:");
code("{");
code("msg = \"Poison damage doubled but duration halved\";");
code("}");
code("case RELIC_YEEBAAGOOON:");
code("{");
code("msg = \"Regenerate 0.3 favor per second\";");
code("}");
code("case RELIC_ZENOPHOBIA:");
code("{");
code("msg = \"+0.2x ignore enemy magic resist\";");
code("}");
code("case RELIC_NOTTUD:");
code("{");
code("msg = \"+0.2x area damage on attacks. (Radius 4)\";");
code("}");
code("case RELIC_PET_DOG:");
code("{");
code("msg = \"A pet dog fights for you. (Respawn = 30 seconds)\";");
code("}");
code("case RELIC_DEFIANCE:");
code("{");
code("msg = \"Regenerate 1 health per second for each visible enemy.\";");
code("}");

code("case RELIC_GHOST_PICTURE:");
code("{");
code("msg = \"A picture of a young man.\";");
code("}");
code("case RELIC_NICKONHAWK:");
code("{");
code("msg = \"Help! Someone help me!\";");
code("}");
code("case RELIC_NICKONHAWK_TICKET:");
code("{");
code("msg = \"Golden Ticket\";");
code("}");

code("case RELIC_LITERAL_FECES:");
code("{");
code("msg = \"Literal feces\";");
code("}");

code("case RELIC_A_FUCKING_CORPSE:");
code("{");
code("msg = \"A fucking corpse\";");
code("}");

code("case RELIC_BERRY_BUSH:");
code("{");
code("msg = \"A berry bush\";");
code("}");

code("case RELIC_POISON_BUCKET:");
code("{");
code("msg = \"A bucket for holding a liquid\";");
code("}");

code("case RELIC_WORTHLESS_JUNK:");
code("{");
code("msg = \"Worthless junk\";");
code("}");
code("case RELIC_MAGIC_DETECTOR:");
code("{");
code("msg = \"Magic Detector\";");
code("}");
code("case RELIC_BINARY_POISON:");
code("{");
code("msg = \"Mysterious goblet\";");
code("}");
code("case RELIC_SPARK:");
code("{");
code("msg = \"Spark\";");
code("}");
code("}");
code("}");
code("return(msg);");
code("}");

code("string relicIcon(int relic = 0) {");
code("string icon = \"icons\infantry g hoplite icon 64\";");
code("if ((relic >= RELIC_MATH_PROBLEM) && (relic <= RELIC_MATH_PROBLEM_END)) {");
code("icon = \"icons\god power audrey icons 64\";");
code("} else {");
code("switch(relic)");
code("{");
code("case RELIC_HEALTH:");
code("{");
code("icon = \"icons\special g sea turtle icon 64\";");
code("}");
code("case RELIC_SPEED:");
code("{");
code("icon = \"icons\special g pegasus icon 64\";");
code("}");
code("case RELIC_ATTACK_RANGE:");
code("{");
code("icon = \"icons\cavalry e chariot archer icon 64\";");
code("}");
code("case RELIC_SPELL_RANGE:");
code("{");
code("icon = \"icons\special e petosuchus icon 64\";");
code("}");
code("case RELIC_SPELL_DURATION:");
code("{");
code("icon = \"icons\special n frost giant icon 64\";");
code("}");
code("case RELIC_LIFESTEAL:");
code("{");
code("icon = \"icons\special n troll icon 64\";");
code("}");
code("case RELIC_STUN_RESISTANCE:");
code("{");
code("icon = \"icons\special e Scarab icon 64\";");
code("}");
code("case RELIC_ATTACK_DAMAGE:");
code("{");
code("icon = \"icons\siege n ballista icon 64\";");
code("}");
code("case RELIC_SPELL_POWER:");
code("{");
code("icon = \"icons\special n fire giant icon 64\";");
code("}");
code("case RELIC_HEAL_BOOST:");
code("{");
code("icon = \"icons\special x flying medic icons 64\";");
code("}");
code("case RELIC_POISON_RESISTANCE:");
code("{");
code("icon = \"icons\god power dryad icons 64\";");
code("}");
code("case RELIC_ARMOR:");
code("{");
code("icon = \"icons\special x behemoth icons 64\";");
code("}");
code("case RELIC_SILENCE_RESISTANCE:");
code("{");
code("icon = \"icons\special e sphinx icon 64\";");
code("}");
code("case RELIC_POISON_KILLER:");
code("{");
code("icon = \"icons\special e mummy icon 64\";");
code("}");
code("case RELIC_WEIGHTED_BLOWS:");
code("{");
code("icon = \"icons\special g medusa icon 64\";");
code("}");
code("case RELIC_ALL:");
code("{");
code("icon = \"icons\special g chimera icon 64\";");
code("}");
code("case RELIC_ULTIMATE_COST:");
code("{");
code("icon = \"icons\special g arkantos icon 64\";");
code("}");
code("case RELIC_PROJECTILES:");
code("{");
code("icon = \"icons\special g manticore icon 64\";");
code("}");
code("case RELIC_SPECIAL_ATTACK:");
code("{");
code("icon = \"icons\special e avenger icon 64\";");
code("}");
code("case RELIC_COOLDOWN_REDUCTION:");
code("{");
code("icon = \"icons\special x argus icons 64\";");
code("}");
code("case RELIC_CURSED_RANGE:");
code("{");
code("icon = \"icons\siege g petrobolos icon 64\";");
code("}");
code("case RELIC_CURSED_DURATION:");
code("{");
code("icon = \"icons\scenario x folstag icons 64\";");
code("}");
code("case RELIC_CURSED_POWER:");
code("{");
code("icon = \"icons\special e phoenix icon 64\";");
code("}");
code("case RELIC_FAVOR_FROM_ATTACKS:");
code("{");
code("icon = \"icons\special x servant icons 64\";");
code("}");
code("case RELIC_POISON_FASTER:");
code("{");
code("icon = \"icons\special e scorpionman icon 64\";");
code("}");
code("case RELIC_YEEBAAGOOON:");
code("{");
code("icon = \"icons\special e son of osiris icon 64\";");
code("}");
code("case RELIC_KEY_GREEK:");
code("{");
code("icon = \"ui range indicator greek\";");
code("}");
code("case RELIC_KEY_NORSE:");
code("{");
code("icon = \"ui range indicator norse\";");
code("}");
code("case RELIC_KEY_ATLANTEAN:");
code("{");
code("icon = \"ui range indicator atlantean\";");
code("}");
code("case RELIC_KEY_CHINA:");
code("{");
code("icon = \"ui range indicator chinese\";");
code("}");
code("case RELIC_KEY_EGYPT:");
code("{");
code("icon = \"ui range indicator egypt\";");
code("}");
code("case RELIC_GHOST_PICTURE:");
code("{");
code("icon = \"icons\special g kastor icon 64\";");
code("}");
code("case RELIC_LITERAL_FECES:");
code("{");
code("icon = \"icons\special x promethean icons 64\";");
code("}");
code("case RELIC_A_FUCKING_CORPSE:");
code("{");
code("icon = \"icons\special e minion icon 64\";");
code("}");
code("case RELIC_BERRY_BUSH:");
code("{");
code("icon = \"icons\world berry bush icon 64\";");
code("}");
code("case RELIC_POISON_BUCKET:");
code("{");
code("icon = \"icons\special c jiangshi icon\";");
code("}");
code("case RELIC_WORTHLESS_JUNK:");
code("{");
code("icon = \"icons\boat c junk icon\";");
code("}");
code("case RELIC_MAGIC_DETECTOR:");
code("{");
code("icon = \"icons\siege g helepolis icon 64\";");
code("}");
code("case RELIC_NICKONHAWK:");
code("{");
code("icon = \"icons\trade x caravan icons 64\";");
code("}");
code("case RELIC_NICKONHAWK_TICKET:");
code("{");
code("icon = \"icons\hero g odysseus icon 64\";");
code("}");
code("case RELIC_PET_DOG:");
code("{");
code("icon = \"icons\Animal Wolf icon 64\";");
code("}");
code("case RELIC_NOTTUD:");
code("{");
code("icon = \"icons\special g minotaur icon 64\";");
code("}");
code("case RELIC_DEFIANCE:");
code("{");
code("icon = \"icons\special g hydra icon 64\";");
code("}");
code("case RELIC_BINARY_POISON:");
code("{");
code("icon = \"icons\improvement life drain icon\";");
code("}");
code("case RELIC_SPARK:");
code("{");
code("icon = \"sfx a implode lighting flair\";");
code("}");
code("}");
code("}");
code("return(icon);");
code("}");

code("void relicDescription(int relic = 0) {");
code("string icon = relicIcon(relic);");
code("string msg = relicName(relic);");
code("trShowImageDialog(icon, msg);");
code("}");

code("float calculateArmor(float start = 0, float armor = 0) {");
code("float remaining = 1.0 - start;");
code("float reduction = remaining * (1.0 - armor);");
code("return(start + remaining - reduction);");
code("}");

code("void relicEffect(int relic = 0, int p = 0, bool equip = true) {");
code("int db = 0;");
code("int n = 0;");
code("float m = 1.0;");
code("if (equip == false) {");
code("m = -1.0;");
code("}");
code("xSetPointer(dPlayerData,p);");
code("int class = xGetInt(dPlayerData,xPlayerClass);");
code("string proto = kbGetProtoUnitName(xGetInt(dClass,xClassProto,class));");
code("switch(relic)");
code("{");
code("case RELIC_HEALTH:");
code("{");
code("xSetFloat(dPlayerData,xPlayerHealth,xGetFloat(dPlayerData,xPlayerHealth) + 300.0 * m);");
code("zSetProtoUnitStat(proto, p, 0, xGetFloat(dPlayerData,xPlayerHealth));");
code("}");
code("case RELIC_SPEED:");
code("{");
code("xSetFloat(dPlayerData,xPlayerSpeed,xGetFloat(dPlayerData,xPlayerSpeed) + 1.0 * m);");
code("zSetProtoUnitStat(proto, p, 1, xGetFloat(dPlayerData,xPlayerSpeed));");
code("}");
code("case RELIC_ATTACK_RANGE:");
code("{");
code("xSetFloat(dPlayerData,xPlayerRange,xGetFloat(dPlayerData,xPlayerRange) + 5.0 * m);");
code("xSetFloat(dPlayerData,xPlayerLos,xGetFloat(dPlayerData,xPlayerLos) + 5.0 * m);");
code("zSetProtoUnitStat(proto, p, 11, xGetFloat(dPlayerData, xPlayerRange));");
code("zSetProtoUnitStat(proto, p, 2, xGetFloat(dPlayerData, xPlayerLos));");
code("zSetProtoUnitStat(\"Revealer to Player\", p, 2, xGetFloat(dPlayerData,xPlayerLos));");
code("}");
code("case RELIC_SPELL_RANGE:");
code("{");
code("xSetFloat(dPlayerData,xPlayerSpellRangeTrue,xGetFloat(dPlayerData,xPlayerSpellRangeTrue) + 0.3 * m);");
code("}");
code("case RELIC_SPELL_DURATION:");
code("{");
code("xSetFloat(dPlayerData,xPlayerSpellDurationTrue,xGetFloat(dPlayerData,xPlayerSpellDurationTrue) + 0.3 * m);");
code("}");
code("case RELIC_LIFESTEAL:");
code("{");
code("xSetFloat(dPlayerData,xPlayerLifesteal,xGetFloat(dPlayerData,xPlayerLifesteal) + 0.2 * m);");
code("}");
code("case RELIC_ARMOR:");
code("{");
code("if (m == 1) {");
code("xSetFloat(dPlayerData,xPlayerMagicResist,calculateArmor(xGetFloat(dPlayerData,xPlayerMagicResist),0.2));");
code("xSetFloat(dPlayerData,xPlayerPhysicalResist,calculateArmor(xGetFloat(dPlayerData,xPlayerPhysicalResist),0.2));");
code("} else {");
code("xSetFloat(dPlayerData,xPlayerMagicResist,calculateArmor(xGetFloat(dPlayerData,xPlayerMagicResist),-0.25));");
code("xSetFloat(dPlayerData,xPlayerPhysicalResist,calculateArmor(xGetFloat(dPlayerData,xPlayerPhysicalResist),-0.25));");
code("}");
code("trModifyProtounit(proto, p, 24, -1);");
code("trModifyProtounit(proto, p, 25, -1);");
code("trModifyProtounit(proto, p, 26, -1);");
code("trModifyProtounit(proto, p, 24, xGetFloat(dPlayerData,xPlayerPhysicalResist));");
code("trModifyProtounit(proto, p, 25, xGetFloat(dPlayerData,xPlayerPhysicalResist));");
code("trModifyProtounit(proto, p, 26, xGetFloat(dPlayerData,xPlayerPhysicalResist));");
code("for(x=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("if ((xGetInt(dPlayerUnits,xPlayerOwner) == p) && xGetBool(dPlayerUnits,xIsHero)) {");
code("xSetFloat(dPlayerUnits,xPhysicalResist,xGetFloat(dPlayerData,xPlayerPhysicalResist));");
code("xSetFloat(dPlayerUnits,xMagicResist,xGetFloat(dPlayerData,xPlayerMagicResist));");
code("}");
code("}");
code("}");
code("case RELIC_ATTACK_DAMAGE:");
code("{");
code("xSetFloat(dPlayerData,xPlayerBaseAttackTrue,xGetFloat(dPlayerData,xPlayerBaseAttackTrue) + 15.0 * m);");
code("xSetFloat(dPlayerData,xPlayerBaseAttack,xGetFloat(dPlayerData,xPlayerBaseAttackTrue));");
code("xSetFloat(dPlayerData,xPlayerAttack,xGetFloat(dPlayerData,xPlayerBaseAttack));");
code("zSetProtoUnitStat(proto, p, 27, xGetFloat(dPlayerData,xPlayerBaseAttack));");
code("zSetProtoUnitStat(proto, p, 31, xGetFloat(dPlayerData,xPlayerBaseAttack));");
code("}");
code("case RELIC_SPELL_POWER:");
code("{");
code("xSetFloat(dPlayerData,xPlayerSpellDamageTrue,xGetFloat(dPlayerData,xPlayerSpellDamageTrue) + 0.3 * m);");
code("}");
code("case RELIC_HEAL_BOOST:");
code("{");
code("xSetFloat(dPlayerData,xPlayerHealBoost,xGetFloat(dPlayerData,xPlayerHealBoost) + 0.5 * m);");
code("}");
code("case RELIC_POISON_RESISTANCE:");
code("{");
code("xSetInt(dPlayerData,xPlayerPoisonResistanceCount,xGetInt(dPlayerData,xPlayerPoisonResistanceCount) + 1 * m);");
code("xSetFloat(dPlayerData,xPlayerPoisonResistance,xsPow(0.5, xGetInt(dPlayerData,xPlayerPoisonResistanceCount)));");
code("}");
code("case RELIC_STUN_RESISTANCE:");
code("{");
code("xSetInt(dPlayerData,xPlayerStunResistanceCount,xGetInt(dPlayerData,xPlayerStunResistanceCount) + 1 * m);");
code("xSetFloat(dPlayerData,xPlayerStunResistance,xsPow(0.5, xGetInt(dPlayerData,xPlayerStunResistanceCount)));");
code("}");
code("case RELIC_SILENCE_RESISTANCE:");
code("{");
code("xSetInt(dPlayerData,xPlayerSilenceResistanceCount,xGetInt(dPlayerData,xPlayerSilenceResistanceCount) + 1 * m);");
code("xSetFloat(dPlayerData,xPlayerSilenceResistance,xsPow(0.5, xGetInt(dPlayerData,xPlayerSilenceResistanceCount)));");
code("}");
code("case RELIC_POISON_KILLER:");
code("{");
code("xSetFloat(dPlayerData,xPlayerPoisonKiller,xGetFloat(dPlayerData,xPlayerPoisonKiller) + 0.5 * m);");
code("}");
code("case RELIC_WEIGHTED_BLOWS:");
code("{");
code("xSetFloat(dPlayerData,xPlayerStunDamage,xGetFloat(dPlayerData,xPlayerStunDamage) + 0.1 * m);");
code("}");
code("case RELIC_ALL:");
code("{");
code("xSetFloat(dPlayerData,xPlayerSpellRangeTrue,xGetFloat(dPlayerData,xPlayerSpellRangeTrue) + 0.15 * m);");
code("xSetFloat(dPlayerData,xPlayerSpellDamageTrue,xGetFloat(dPlayerData,xPlayerSpellDamageTrue) + 0.15 * m);");
code("xSetFloat(dPlayerData,xPlayerSpellDurationTrue,xGetFloat(dPlayerData,xPlayerSpellDurationTrue) + 0.15 * m);");
code("}");
code("case RELIC_ULTIMATE_COST:");
code("{");
code("xSetInt(dPlayerData,xPlayerUltimateCostCount,xGetInt(dPlayerData,xPlayerUltimateCostCount) + 1 * m);");
code("xSetFloat(dPlayerData,xPlayerUltimateCost, xsPow(0.9, xGetInt(dPlayerData,xPlayerUltimateCostCount)));");
code("}");
code("case RELIC_PROJECTILES:");
code("{");
code("xSetInt(dPlayerData,xPlayerProjectiles,xGetInt(dPlayerData,xPlayerProjectiles) + 1 * m);");
code("zSetProtoUnitStat(proto, p, 13, xGetInt(dPlayerData,xPlayerProjectiles));");
code("}");
code("case RELIC_SPECIAL_ATTACK:");
code("{");
code("xSetInt(dPlayerData,xPlayerSpecialAttackCooldown,xGetInt(dPlayerData,xPlayerSpecialAttackCooldown) - 1 * m);");
code("}");
code("case RELIC_COOLDOWN_REDUCTION:");
code("{");
code("xSetInt(dPlayerData,xPlayerCooldownReductionCount,xGetInt(dPlayerData,xPlayerCooldownReductionCount) + 1 * m);");
code("xSetFloat(dPlayerData,xPlayerCooldownReduction,xsPow(0.85, xGetInt(dPlayerData,xPlayerCooldownReductionCount)));");
code("}");
code("case RELIC_CURSED_RANGE:");
code("{");
code("xSetFloat(dPlayerData,xPlayerSpellRangeTrue,xGetFloat(dPlayerData,xPlayerSpellRangeTrue) + 0.5 * m);");
code("xSetFloat(dPlayerData,xPlayerSpellDamageTrue,xGetFloat(dPlayerData,xPlayerSpellDamageTrue) - 0.3 * m);");
code("}");
code("case RELIC_CURSED_DURATION:");
code("{");
code("xSetFloat(dPlayerData,xPlayerSpellDurationTrue,xGetFloat(dPlayerData,xPlayerSpellDurationTrue) + 0.5 * m);");
code("xSetFloat(dPlayerData,xPlayerSpellRangeTrue,xGetFloat(dPlayerData,xPlayerSpellRangeTrue) - 0.3 * m);");
code("}");
code("case RELIC_CURSED_POWER:");
code("{");
code("xSetFloat(dPlayerData,xPlayerSpellDamageTrue,xGetFloat(dPlayerData,xPlayerSpellDamageTrue) + 0.5 * m);");
code("xSetFloat(dPlayerData,xPlayerSpellDurationTrue,xGetFloat(dPlayerData,xPlayerSpellDurationTrue) - 0.3 * m);");
code("}");
code("case RELIC_FAVOR_FROM_ATTACKS:");
code("{");
code("xSetInt(dPlayerData,xPlayerFavorFromAttacks,xGetInt(dPlayerData,xPlayerFavorFromAttacks) + m);");
code("xSetInt(dPlayerData,xPlayerUltimateCostCount,xGetInt(dPlayerData,xPlayerUltimateCostCount) - 1 * m);");
code("xSetFloat(dPlayerData,xPlayerUltimateCost,xsPow(0.9, xGetInt(dPlayerData,xPlayerUltimateCostCount)));");
code("}");
code("case RELIC_POISON_FASTER:");
code("{");
code("xSetInt(dPlayerData,xPlayerPoisonSpeed,xGetInt(dPlayerData,xPlayerPoisonSpeed) + 1 * m);");
code("}");
code("case RELIC_YEEBAAGOOON:");
code("{");
code("xSetInt(dPlayerData,xPlayerRegenerateFavorLast,trTimeMS());");
code("xSetFloat(dPlayerData,xPlayerFavorRegen,xGetFloat(dPlayerData,xPlayerFavorRegen) + 0.3 * m);");
code("}");
code("case RELIC_MAGIC_DETECTOR:");
code("{");
code("xSetInt(dPlayerData,xPlayerRegenerateFavorLast,trTimeMS());");
code("xSetFloat(dPlayerData,xPlayerFavorRegen,xGetFloat(dPlayerData,xPlayerFavorRegen) - m);");
code("if (trQuestVarGet(\"questActive\") > 0) {");
code("if (m > 0) {");
code("trQuestVarSet(\"magicDetectorHolder\", p);");
code("} else {");
code("trQuestVarSet(\"magicDetectorHolder\", 0);");
code("}");
code("}");
code("}");
code("case RELIC_POISON_BUCKET:");
code("{");
code("trQuestVarSet(\"p\"+p+\"poisonBucket\", m);");
code("if (m > 0) {");
code("trQuestVarSet(\"poisonBucketHolder\", p);");
code("} else {");
code("trQuestVarSet(\"poisonBucketHolder\", 0);");
code("}");
code("}");
code("case RELIC_NICKONHAWK:");
code("{");
code("trQuestVarSet(\"p\"+p+\"nickEquipped\", trQuestVarGet(\"p\"+p+\"nickEquipped\") + m);");
code("if ((trQuestVarGet(\"p\"+p+\"nickEquipped\") > 1) ||");
code("(trQuestVarGet(\"p\"+p+\"nickQuestProgress\") * trQuestVarGet(\"p\"+p+\"nickEquipped\") >= 5)) {");
code("trQuestVarSet(\"p\"+p+\"nickEquipped\", trQuestVarGet(\"p\"+p+\"nickEquipped\") - 1);");
code("db = getRelicsDB(p);");
code("xSetPointer(db, xGetNewestPointer(db));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(db),true);");
code("trUnitChangeProtoUnit(\"Relic\");");
code("xAddDatabaseBlock(dFreeRelics);");
code("xSetPointer(dFreeRelics,xGetNewestPointer(dFreeRelics));");
code("xSetInt(dFreeRelics,xRelicName,xGetInt(db,xRelicName));");
code("xSetInt(dFreeRelics,xRelicType,RELIC_NICKONHAWK);");
code("xFreeDatabaseBlock(db);");
code("} else if (trQuestVarGet(\"p\"+p+\"nickQuestProgress\") == 0) {");
code("trQuestVarSet(\"p\"+p+\"nickQuestProgress\", 1);");
code("}");
code("}");
code("case RELIC_NICKONHAWK_TICKET:");
code("{");
code("trQuestVarSet(\"p\"+p+\"equippedGoggles\", trQuestVarGet(\"p\"+p+\"equippedGoggles\") + m);");
code("}");
code("case RELIC_PET_DOG:");
code("{");
code("xSetInt(dPlayerData,xPlayerPetDogs,xGetInt(dPlayerData,xPlayerPetDogs) + m);");
code("}");
code("case RELIC_ZENOPHOBIA:");
code("{");
code("xSetFloat(dPlayerData,xPlayerMagicPen,xGetFloat(dPlayerData,xPlayerMagicPen) + 0.2 * m);");
code("}");
code("case RELIC_NOTTUD:");
code("{");
code("xSetFloat(dPlayerData,xPlayerCleave,xGetFloat(dPlayerData,xPlayerCleave) + 0.2 * m);");
code("}");
code("case RELIC_DEFIANCE:");
code("{");
code("xSetFloat(dPlayerData,xPlayerDefiance,xGetFloat(dPlayerData,xPlayerDefiance) + m);");
code("}");
code("case RELIC_BINARY_POISON:");
code("{");
code("if (equip) {");
code("int count = aiPlanGetNumberUserVariableValues(ARRAYS,1*trQuestVarGet(\"doomedPlayers\"));");
code("aiPlanSetNumberUserVariableValues(ARRAYS,1*trQuestVarGet(\"doomedPlayers\"),count+1);");
code("aiPlanSetUserVariableInt(ARRAYS,1*trQuestVarGet(\"doomedPlayers\"),count,p);");
code("}");
code("}");
code("}");
code("if ((relic >= RELIC_KEY_GREEK) && (relic <= RELIC_KEY_EGYPT) && (trCurrentPlayer() == p) && equip) {");
code("trChatSend(0, \"You have picked up a key. <icon=(20)(\"+relicIcon(relic)+\")>\");");
code("} else {");
code("trEventFire(5000 + 12 * xGetInt(dPlayerData,xPlayerClass) + p);");
code("}");
code("zSetProtoUnitStat(\"Cinematic Block\", p, 0, xGetFloat(dPlayerData,xPlayerHealth));");
code("xSetFloat(dPlayerData,xPlayerSpellRange,xsMax(0.1,xGetFloat(dPlayerData,xPlayerSpellRangeTrue)));");
code("xSetFloat(dPlayerData,xPlayerSpellDamage,xsMax(0.1,xGetFloat(dPlayerData,xPlayerSpellDamageTrue)));");
code("xSetFloat(dPlayerData,xPlayerSpellDuration,xsMax(0.1,xGetFloat(dPlayerData,xPlayerSpellDurationTrue)));");

code("if (xGetInt(dPlayerData,xPlayerGodBoon) == BOON_SPELL_ATTACK) {");
code("xSetFloat(dPlayerData,xPlayerBaseAttack,");
code("xGetFloat(dPlayerData,xPlayerSpellDamage) * xGetFloat(dPlayerData,xPlayerBaseAttackTrue));");
code("xSetFloat(dPlayerData,xPlayerAttack,xGetFloat(dPlayerData,xPlayerBaseAttack));");
code("zSetProtoUnitStat(proto, p, 27, xGetFloat(dPlayerData,xPlayerBaseAttack));");
code("zSetProtoUnitStat(proto, p, 31, xGetFloat(dPlayerData,xPlayerBaseAttack));");
code("}");
code("}");

code("int relicProto(int relic = 0) {");
code("int proto = kbGetProtoUnitID(\"Hoplite\");");
code("if ((relic >= RELIC_MATH_PROBLEM) && (relic <= RELIC_MATH_PROBLEM_END)) {");
code("proto = kbGetProtoUnitID(\"Audrey\");");
code("} else {");
code("switch(relic)");
code("{");
code("case RELIC_HEALTH:");
code("{");
code("proto = kbGetProtoUnitID(\"Sea Turtle\");");
code("}");
code("case RELIC_SPEED:");
code("{");
code("proto = kbGetProtoUnitID(\"Pegasus\");");
code("}");
code("case RELIC_ATTACK_RANGE:");
code("{");
code("proto = kbGetProtoUnitID(\"Chariot Archer\");");
code("}");
code("case RELIC_SPELL_RANGE:");
code("{");
code("proto = kbGetProtoUnitID(\"Petsuchos\");");
code("}");
code("case RELIC_SPELL_DURATION:");
code("{");
code("proto = kbGetProtoUnitID(\"Frost Giant\");");
code("}");
code("case RELIC_LIFESTEAL:");
code("{");
code("proto = kbGetProtoUnitID(\"Troll\");");
code("}");
code("case RELIC_STUN_RESISTANCE:");
code("{");
code("proto = kbGetProtoUnitID(\"Scarab\");");
code("}");
code("case RELIC_ATTACK_DAMAGE:");
code("{");
code("proto = kbGetProtoUnitID(\"Ballista\");");
code("}");
code("case RELIC_SPELL_POWER:");
code("{");
code("proto = kbGetProtoUnitID(\"Fire Giant\");");
code("}");
code("case RELIC_HEAL_BOOST:");
code("{");
code("proto = kbGetProtoUnitID(\"Flying Medic\");");
code("}");
code("case RELIC_POISON_RESISTANCE:");
code("{");
code("proto = kbGetProtoUnitID(\"Dryad\");");
code("}");
code("case RELIC_ARMOR:");
code("{");
code("proto = kbGetProtoUnitID(\"Behemoth\");");
code("}");
code("case RELIC_SILENCE_RESISTANCE:");
code("{");
code("proto = kbGetProtoUnitID(\"Sphinx\");");
code("}");
code("case RELIC_POISON_KILLER:");
code("{");
code("proto = kbGetProtoUnitID(\"Mummy\");");
code("}");
code("case RELIC_WEIGHTED_BLOWS:");
code("{");
code("proto = kbGetProtoUnitID(\"Medusa\");");
code("}");
code("case RELIC_ALL:");
code("{");
code("proto = kbGetProtoUnitID(\"Chimera\");");
code("}");
code("case RELIC_ULTIMATE_COST:");
code("{");
code("proto = kbGetProtoUnitID(\"Arkantos\");");
code("}");
code("case RELIC_PROJECTILES:");
code("{");
code("proto = kbGetProtoUnitID(\"Manticore\");");
code("}");
code("case RELIC_SPECIAL_ATTACK:");
code("{");
code("proto = kbGetProtoUnitID(\"Avenger\");");
code("}");
code("case RELIC_COOLDOWN_REDUCTION:");
code("{");
code("proto = kbGetProtoUnitID(\"Argus\");");
code("}");
code("case RELIC_KEY_GREEK:");
code("{");
code("proto = kbGetProtoUnitID(\"UI Range Indicator Greek SFX\");");
code("}");
code("case RELIC_KEY_NORSE:");
code("{");
code("proto = kbGetProtoUnitID(\"UI Range Indicator Norse SFX\");");
code("}");
code("case RELIC_KEY_ATLANTEAN:");
code("{");
code("proto = kbGetProtoUnitID(\"UI Range Indicator Atlantean SFX\");");
code("}");
code("case RELIC_KEY_CHINA:");
code("{");
code("proto = kbGetProtoUnitID(\"UI Range Indicator Chinese SFX\");");
code("}");
code("case RELIC_KEY_EGYPT:");
code("{");
code("proto = kbGetProtoUnitID(\"UI Range Indicator Egypt SFX\");");
code("}");
code("case RELIC_CURSED_RANGE:");
code("{");
code("proto = kbGetProtoUnitID(\"Petrobolos\");");
code("}");
code("case RELIC_CURSED_DURATION:");
code("{");
code("proto = kbGetProtoUnitID(\"King Folstag\");");
code("}");
code("case RELIC_CURSED_POWER:");
code("{");
code("proto = kbGetProtoUnitID(\"Phoenix\");");
code("}");
code("case RELIC_FAVOR_FROM_ATTACKS:");
code("{");
code("proto = kbGetProtoUnitID(\"Servant\");");
code("}");
code("case RELIC_POISON_FASTER:");
code("{");
code("proto = kbGetProtoUnitID(\"Scorpion Man\");");
code("}");
code("case RELIC_YEEBAAGOOON:");
code("{");
code("proto = kbGetProtoUnitID(\"Pharaoh of Osiris\");");
code("}");
code("case RELIC_GHOST_PICTURE:");
code("{");
code("proto = kbGetProtoUnitID(\"Kastor\");");
code("}");
code("case RELIC_LITERAL_FECES:");
code("{");
code("proto = kbGetProtoUnitID(\"Promethean\");");
code("}");
code("case RELIC_A_FUCKING_CORPSE:");
code("{");
code("proto = kbGetProtoUnitID(\"Minion\");");
code("}");
code("case RELIC_BERRY_BUSH:");
code("{");
code("proto = kbGetProtoUnitID(\"Walking Berry Bush\");");
code("}");
code("case RELIC_POISON_BUCKET:");
code("{");
code("proto = kbGetProtoUnitID(\"Jiangshi\");");
code("}");
code("case RELIC_WORTHLESS_JUNK:");
code("{");
code("proto = kbGetProtoUnitID(\"Junk\");");
code("}");
code("case RELIC_MAGIC_DETECTOR:");
code("{");
code("proto = kbGetProtoUnitID(\"Helepolis\");");
code("}");
code("case RELIC_NICKONHAWK:");
code("{");
code("proto = kbGetProtoUnitID(\"Caravan Atlantean\");");
code("}");
code("case RELIC_NICKONHAWK_TICKET:");
code("{");
code("proto = kbGetProtoUnitID(\"Hero Greek Odysseus\");");
code("}");
code("case RELIC_PET_DOG:");
code("{");
code("proto = kbGetProtoUnitID(\"Dog\");");
code("}");
code("case RELIC_NOTTUD:");
code("{");
code("proto = kbGetProtoUnitID(\"Minotaur\");");
code("}");
code("case RELIC_DEFIANCE:");
code("{");
code("proto = kbGetProtoUnitID(\"Hydra\");");
code("}");
code("case RELIC_BINARY_POISON:");
code("{");
code("proto = kbGetProtoUnitID(\"Jiangshi\");");
code("}");
code("case RELIC_SPARK:");
code("{");
code("proto = kbGetProtoUnitID(\"Statue of Lightning\");");
code("}");
code("}");
code("}");
code("return(proto);");
code("}");

code("int randomLow(int maxval = 10) {");
code("trQuestVarSetFromRand(\"relicrand1\",1,maxval, true);");
code("trQuestVarSetFromRand(\"relicrand2\",1,maxval, true);");
code("if (trQuestVarGet(\"relicrand2\") < trQuestVarGet(\"relicrand1\")) {");
code("trQuestVarSet(\"relicrand1\", trQuestVarGet(\"relicrand2\"));");
code("}");
code("return(1*trQuestVarGet(\"relicrand1\"));");
code("}");

code("int randomStageClosest(int maxval = 10) {");
code("trQuestVarSetFromRand(\"relicrand1\",1,maxval, true);");
code("trQuestVarSetFromRand(\"relicrand2\",1,maxval, true);");
code("float firstDiff = xsAbs(trQuestVarGet(\"relicrand1\") - trQuestVarGet(\"stage\"));");
code("float secondDiff = xsAbs(trQuestVarGet(\"relicrand2\") - trQuestVarGet(\"stage\"));");
code("if (secondDiff < firstDiff) {");
code("trQuestVarSet(\"relicrand1\", trQuestVarGet(\"relicrand2\"));");
code("}");
code("return(1*trQuestVarGet(\"relicrand1\"));");
code("}");

code("void spawnRelicSpecific(vector v = vector(0,0,0), int val = 1) {");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(v),0,xsVectorGetZ(v),0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("if (trUnitVisToPlayer()) {");
code("trSoundPlayFN(\"relicselect.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("trUnitChangeProtoUnit(\"Relic\");");
code("xSetPointer(dFreeRelics, xAddDatabaseBlock(dFreeRelics));");
code("xSetInt(dFreeRelics,xRelicName,1*trQuestVarGet(\"next\"));");
code("xSetInt(dFreeRelics,xRelicType,val);");
code("}");

code("void spawnRelic(vector v = vector(0,0,0), int maxval = 10) {");
code("spawnRelicSpecific(v, randomStageClosest(maxval));");
code("}");

code("void spawnRelicClosest(vector v = vector(0,0,0), int target = 0) {");
code("trQuestVarSetFromRand(\"rand\", 0, 10, true);");
code("trQuestVarSetFromRand(\"rand\",");
code("xsMax(1, target - trQuestVarGet(\"rand\")), xsMin(10, target + trQuestVarGet(\"rand\")), true);");
code("spawnRelicSpecific(v, 1*trQuestVarGet(\"rand\"));");
code("}");


code("const int CHEST_KEY = 1;");
code("const int CHEST_ENCOUNTER = 2;");
code("const int CHEST_STATUES = 3;");

code("const int MOONBLADE = 1;");
code("const int SUNBOW = 2;");
code("const int FIREKNIGHT = 3;");
code("const int THRONESHIELD = 4;");

code("const int STORMCUTTER = 5;");
code("const int BLASTMAGE = 6;");
code("const int THUNDERRIDER = 7;");
code("const int ALCHEMIST = 8;");

code("const int GARDENER = 9;");
code("const int STARSEER = 10;");
code("const int COMMANDO = 11;");
code("const int SPELLSTEALER = 12;");

code("const int NIGHTRIDER = 13;");
code("const int SPARKWITCH = 14;");
code("const int SAVIOR = 15;");
code("const int GAMBLER = 16;");

code("const int CLASS_COUNT = 16;");

code("const int STARSTONE = 0;");
code("const int SOULSTONE = 1;");
code("const int MANASTONE = 2;");

code("float worldHeight = 0;");
code("float wallHeight = 5;");
code("int ENEMY_PLAYER = 0;");
code("bool Multiplayer = false;");
code("bool PvP = false;");

code("int TERRAIN_CHASM = 5;");
code("int TERRAIN_SUB_CHASM = 4;");

code("int TERRAIN_WALL = 2;");
code("int TERRAIN_SUB_WALL = 13;");

code("int TERRAIN_PRIMARY = 0;");
code("int TERRAIN_SUB_PRIMARY = 1;");

code("int TERRAIN_SECONDARY = 0;");
code("int TERRAIN_SUB_SECONDARY = 1;");

code("string gemstoneIcon(int gem = 0) {");
code("string img = \"icons\improvement hands of the pharaoh icons 64\";");
code("switch(gem)");
code("{");
code("case STARSTONE:");
code("{");
code("img = \"icons\improvement focus icons 64\";");
code("}");
code("case SOULSTONE:");
code("{");
code("img = \"icons\god power healing spring icon 64\";");
code("}");
code("case MANASTONE:");
code("{");
code("img = \"icons\improvement hands of the pharaoh icons 64\";");
code("}");
code("}");
code("return(img);");
code("}");

code("string gemstoneName(int gem = 0) {");
code("string name = \"Dust\";");
code("switch(gem)");
code("{");
code("case STARSTONE:");
code("{");
code("name = \"Starstone\";");
code("}");
code("case SOULSTONE:");
code("{");
code("name = \"Soulstone\";");
code("}");
code("case MANASTONE:");
code("{");
code("name = \"Manastone\";");
code("}");
code("}");
code("return(name);");
code("}");

code("string stageName(int stage = 0) {");
code("string name = \"(This stage has not been made yet)\";");
code("switch(stage)");
code("{");
code("case 1:");
code("{");
code("name = \"The Lion's Den\";");
code("}");
code("case 2:");
code("{");
code("name = \"Murkwood\";");
code("}");
code("case 3:");
code("{");
code("name = \"Frozen Canyon\";");
code("}");
code("case 4:");
code("{");
code("name = \"Emerald Fields\";");
code("}");
code("case 5:");
code("{");
code("name = \"Miasma Crypt\";");
code("}");
code("case 6:");
code("{");
code("name = \"The Factory\";");
code("}");
code("case 7:");
code("{");
code("name = \"The Deep\";");
code("}");
code("case 8:");
code("{");
code("name = \"The Clouds\";");
code("}");
code("case 9:");
code("{");
code("name = \"The Pit (UNDER CONSTRUCTION)\";");
code("}");
code("case 10:");
code("{");
code("name = \"The Unknown\";");
code("}");
code("case 0:");
code("{");
code("name = \"Glory Stadium\";");
code("}");
code("}");
code("return(name);");
code("}");

code("string stageIcon(int stage = 0) {");
code("string img = \"icons\infantry g hoplite icon 64\";");
code("switch(stage)");
code("{");
code("case 1:");
code("{");
code("img = \"ui\ui map watering hole 256x256\";");
code("}");
code("case 2:");
code("{");
code("img = \"ui\ui map deep jungle 256x256\";");
code("}");
code("case 3:");
code("{");
code("img = \"ui\ui map jotunheim 256x256\";");
code("}");
code("case 4:");
code("{");
code("img = \"ui\ui map open fields 256x256\";");
code("}");
code("case 5:");
code("{");
code("img = \"ui\ui map river styx 256x256\";");
code("}");
code("case 6:");
code("{");
code("img = \"icons\building siege workshop icon 64\";");
code("}");
code("case 7:");
code("{");
code("img = \"icons\improvement poseidons secret icons 64\";");
code("}");
code("case 8:");
code("{");
code("img = \"icons\improvement safe passage icons 64\";");
code("}");
code("case 9:");
code("{");
code("img = \"ui\ui map erebus 256x256\";");
code("}");
code("case 10:");
code("{");
code("img = \"ui\ui map missing 256x256\";");
code("}");
code("case 0:");
code("{");
code("img = \"icons\god power valor icons 64\";");
code("}");
code("}");
code("return(img);");
code("}");

code("void reselectMyself() {");
code("uiClearSelection();");
code("int p = trCurrentPlayer();");
code("int class = xGetInt(dPlayerData, xPlayerClass, p);");
code("trackInsert();");
code("trackAddWaypoint();");
code("trackAddWaypoint();");
code("trBlockAllSounds(false);");
code("uiFindType(kbGetProtoUnitName(xGetInt(dClass, xClassProto, class)));");
code("trackPlay(1,999);");
code("}");


code("void setupClass(string proto = \"\", int class = 0, int firstDelay = 0, int nextDelay = 0,int gem = 0,int specialCD = 0) {");
code("int p = kbGetProtoUnitID(proto);");
code("xSetPointer(dClass,class);");
code("xSetInt(dClass,xClassProto,p);");
code("xSetInt(dClass,xClassFirstDelay,firstDelay);");
code("xSetInt(dClass,xClassNextDelay,nextDelay);");
code("xSetInt(dClass,xClassSpecialAttackCooldown,specialCD);");
code("xSetInt(dClass,xClassGemstone,gem);");
code("trQuestVarSet(\"proto\"+p+\"class\", class);");
code("}");

code("void setupPlayerProto(string proto=\"\",float health=0,float attack=0,float speed=4,float armor=0,float range=0) {");
code("int pNum = kbGetProtoUnitID(proto);");
code("for(p=0; <ENEMY_PLAYER) {");
code("trModifyProtounit(proto, p, 27, 9999999999999999999.0);");
code("trModifyProtounit(proto, p, 27, -9999999999999999999.0);");
code("trModifyProtounit(proto, p, 27, attack);");
code("zInitProtoUnitStat(proto, p, 27, attack);");
code("trModifyProtounit(proto, p, 30, 9999999999999999999.0);");
code("trModifyProtounit(proto, p, 30, -9999999999999999999.0);");
code("trModifyProtounit(proto, p, 31, 9999999999999999999.0);");
code("trModifyProtounit(proto, p, 31, -9999999999999999999.0);");
code("trModifyProtounit(proto, p, 31, attack);");
code("zInitProtoUnitStat(proto, p, 31, attack);");
code("trQuestVarSet(\"proto\"+pNum+\"attack\", attack);");
code("zInitProtoUnitStat(proto, p, 13, 1);");
code("trModifyProtounit(proto, p, 0, 9999999999999999999.0);");
code("trModifyProtounit(proto, p, 0, -9999999999999999999.0);");
code("trModifyProtounit(proto, p, 0, health);");
code("zInitProtoUnitStat(proto, p, 0, health);");
code("trQuestVarSet(\"proto\"+pNum+\"health\", health);");
code("trModifyProtounit(proto, p, 2, 9999999999999999999.0);");
code("trModifyProtounit(proto, p, 2, -9999999999999999999.0);");
code("trModifyProtounit(proto, p, 2, 20);");
code("zInitProtoUnitStat(proto, p, 2, 20);");
code("trModifyProtounit(proto, p, 11, 9999999999999999999.0);");
code("trModifyProtounit(proto, p, 11, -9999999999999999999.0);");
code("trModifyProtounit(proto, p, 11, range);");
code("zInitProtoUnitStat(proto, p, 11, range);");
code("trQuestVarSet(\"proto\"+pNum+\"range\", range);");
code("trModifyProtounit(proto, p, 1, 9999999999999999999.0);");
code("trModifyProtounit(proto, p, 1, -9999999999999999999.0);");
code("trModifyProtounit(proto, p, 1, speed);");
code("zInitProtoUnitStat(proto, p, 1, speed);");
code("trQuestVarSet(\"proto\"+pNum+\"speed\", speed);");
code("trModifyProtounit(proto, p, 24, -1);");
code("trModifyProtounit(proto, p, 25, -1);");
code("trModifyProtounit(proto, p, 26, -1);");
code("trModifyProtounit(proto, p, 24, armor);");
code("trModifyProtounit(proto, p, 25, armor);");
code("trModifyProtounit(proto, p, 26, armor);");
code("trQuestVarSet(\"proto\"+pNum+\"armor\", armor);");

code("trModifyProtounit(proto, p, 33, 9999999999999999999.0);");
code("trModifyProtounit(proto, p, 33, -9999999999999999999.0);");
code("trModifyProtounit(proto, p, 33, 1.0);");
code("trModifyProtounit(proto, p, 44, 9999999999999999999.0);");
code("trModifyProtounit(proto, p, 44, -9999999999999999999.0);");
code("trModifyProtounit(proto, p, 44, 1.0);");
code("}");
code("trModifyProtounit(proto, 0, 2, -20);");
code("}");


code("void chooseClass(int p = 0, int class = 0) {");
code("trEventFire(1000 + 12 * class + p);");
code("int proto = xGetInt(dClass,xClassProto,class);");
code("xSetPointer(dPlayerData,p);");
code("xResetValues(dPlayerData, p, xPlayerWellPos);");
code("xSetInt(dPlayerData, xPlayerClass, class);");
code("xSetFloat(dPlayerData,xPlayerHealth,trQuestVarGet(\"proto\"+proto+\"health\"));");
code("xSetFloat(dPlayerData,xPlayerBaseAttack,trQuestVarGet(\"proto\"+proto+\"attack\"));");
code("xSetFloat(dPlayerData,xPlayerBaseAttackTrue,trQuestVarGet(\"proto\"+proto+\"attack\"));");
code("xSetFloat(dPlayerData,xPlayerAttack,trQuestVarGet(\"proto\"+proto+\"attack\"));");
code("xSetFloat(dPlayerData,xPlayerRange,trQuestVarGet(\"proto\"+proto+\"range\"));");
code("xSetFloat(dPlayerData,xPlayerSpeed,trQuestVarGet(\"proto\"+proto+\"speed\"));");

code("xSetInt(dPlayerData,xPlayerFirstDelay,xGetInt(dClass, xClassFirstDelay, class));");
code("xSetInt(dPlayerData,xPlayerNextDelay,xGetInt(dClass, xClassNextDelay, class));");
code("xSetInt(dPlayerData,xPlayerSpecialAttackCooldown,xGetInt(dClass, xClassSpecialAttackCooldown, class));");

code("xSetFloat(dPlayerData,xPlayerPhysicalResist,trQuestVarGet(\"proto\"+proto+\"armor\"));");
code("xSetFloat(dPlayerData,xPlayerMagicResist,trQuestVarGet(\"proto\"+proto+\"armor\"));");

code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData,xPlayerUnit),true);");
code("if (trUnitAlive() && xGetInt(dPlayerData,xPlayerUnit) > 0) {");
code("trMutateSelected(proto);");
code("}");
code("trPlayerKillAllGodPowers(p);");
code("if (trCurrentPlayer() == p) {");
code("trCounterAbort(\"lure\");");
code("trCounterAbort(\"well\");");
code("trCounterAbort(\"rain\");");
code("}");
code("if (class > 0) {");
code("xSetInt(dPlayerData,xPlayerWellCooldownStatus,1);");
code("xSetInt(dPlayerData,xPlayerLureCooldownStatus,1);");
code("xSetInt(dPlayerData,xPlayerRainCooldownStatus,1);");
code("}");

code("if (Multiplayer == false) {");
code("xSetInt(dPlayerData,xPlayerLevel,xGetInt(dClass,xClassLevel,class) - 1);");
code("trSetCivilizationNameOverride(p, \"Level \" + (1+xGetInt(dPlayerData,xPlayerLevel)));");
code("}");

code("int relics = getRelicsDB(p);");
code("for(x=xGetDatabaseCount(relics); >0) {");
code("xDatabaseNext(relics);");
code("if (x > xGetInt(dPlayerData,xPlayerLevel,p)+1) {");
code("int index = xAddDatabaseBlock(dFreeRelics);");
code("xSetInt(dFreeRelics,xRelicName,xGetInt(relics,xRelicName),index);");
code("xSetInt(dFreeRelics,xRelicType,xGetInt(relics,xRelicType),index);");
code("xFreeDatabaseBlock(relics);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dFreeRelics,xRelicName,index),true);");
code("trUnitChangeProtoUnit(\"Relic\");");
code("} else {");
code("relicEffect(xGetInt(relics,xRelicType), p, true);");
code("}");
code("}");

code("zSetProtoUnitStat(\"Cinematic Block\", p, 0, xGetFloat(dPlayerData,xPlayerHealth));");
code("}");

code("rule setup");
code("active");
code("runImmediately");
code("{");
code("Multiplayer = aiIsMultiplayer();");
code("trSetUnitIdleProcessing(false);");

code("gadgetUnreal(\"GodPowers\");");
code("gadgetUnreal(\"tributedlg-sendButton\");");
code("gadgetUnreal(\"tributedlg-clearButton\");");

code("trSetObscuredUnits(false);");
code("configUndef(\"ErodeBuildingFoundations\");");

code("trVectorQuestVarSet(\"zeroVector\", vector(0,0,0));");

code("if (Multiplayer) {");
code("ENEMY_PLAYER = cNumberPlayers - 1;");
code("} else {");
code("ENEMY_PLAYER = 2;");
code("}");

code("trQuestVarSet(\"activePlayerCount\", ENEMY_PLAYER - 1);");

code("trForceNonCinematicModels(true);");


code("ambientColor(0,0,0);");
code("sunColor(0,0,0);");
code("trLetterBox(true);");
code("trUIFadeToColor(0,0,0,0,0,true);");

code("trTechSetStatus(0, 304, 4);");
code("trTechSetStatus(ENEMY_PLAYER, 304, 4);");
code("aiSet(\"NoAI\", 0);");
code("aiSet(\"NoAI\", ENEMY_PLAYER);");
code("xsSetContextPlayer(ENEMY_PLAYER);");
code("aiSetAttackResponseDistance(0.0);");
code("xsSetContextPlayer(0);");

code("trModifyProtounit(\"Wonder SPC\", ENEMY_PLAYER, 24, 1);");
code("trModifyProtounit(\"Wonder SPC\", ENEMY_PLAYER, 25, 1);");
code("trModifyProtounit(\"Wonder SPC\", ENEMY_PLAYER, 26, 1);");
code("trModifyProtounit(\"Wonder SPC\", ENEMY_PLAYER, 0, -9899);");

code("trModifyProtounit(\"Dwarf\", 0, 55, 4);");
code("trModifyProtounit(\"Dwarf\", 0, 2, -99);");
code("trModifyProtounit(\"Dwarf\", ENEMY_PLAYER, 55, 4);");
code("trModifyProtounit(\"Scylla\", 0, 55, 1);");
code("trModifyProtounit(\"Scylla\", 1, 55, 1);");
code("trModifyProtounit(\"Scylla\", ENEMY_PLAYER, 55, 1);");
code("for(p=1; < ENEMY_PLAYER) {");
code("trPlayerSetDiplomacy(p, 0, \"neutral\");");
code("trPlayerSetDiplomacy(p, ENEMY_PLAYER, \"Enemy\");");
code("for(x=p+1; < ENEMY_PLAYER) {");
code("trPlayerSetDiplomacy(p, x, \"ally\");");
code("trPlayerSetDiplomacy(x, p, \"ally\");");
code("}");
code("trSetCivAndCulture(p, 1, 0);");
code("trModifyProtounit(\"Animal Attractor\", p, 2, -99);");
code("trModifyProtounit(\"Animal Attractor\", p, 55, 4);");
code("trModifyProtounit(\"Tunnel\", p, 2, -99);");
code("trModifyProtounit(\"Tunnel\", p, 55, 4);");
code("trModifyProtounit(\"Ajax\", p, 5, 99);");
code("trModifyProtounit(\"Transport Ship Greek\", p, 5, 99);");
code("trModifyProtounit(\"Dwarf\", p, 55, 4);");
code("trModifyProtounit(\"Dwarf\", p, 2, -99);");
code("trModifyProtounit(\"Transport Ship Greek\", p, 55, 4);");
code("trModifyProtounit(\"Athena\", p, 55, 4);");

code("trModifyProtounit(\"Servant\", p, 55, 1);");
code("trModifyProtounit(\"Phoenix\", p, 55, 1);");
code("trModifyProtounit(\"Sea Turtle\", p, 55, 1);");
code("trModifyProtounit(\"Pegasus\", p, 55, 1);");
code("trModifyProtounit(\"Flying Medic\", p, 55, 1);");
code("trModifyProtounit(\"Junk\", p, 55, 1);");

code("trModifyProtounit(\"Statue of Lightning\", p, 1, 3.5);");

code("trPlayerKillAllGodPowers(p);");
code("trPlayerTechTreeEnabledGodPowers(p, false);");

code("trTechSetStatus(p, 471, 4);");

code("trTechSetStatus(p, 9, 0);");
code("trTechSetStatus(p, 101, 0);");
code("trTechSetStatus(p, 34, 0);");
code("trTechSetStatus(p, 35, 0);");

code("trForbidProtounit(p, \"Trident Soldier Hero\");");
code("trForbidProtounit(p, \"Archer Atlantean Hero\");");
code("trForbidProtounit(p, \"Royal Guard Hero\");");
code("trForbidProtounit(p, \"Lancer Hero\");");
code("trForbidProtounit(p, \"Oracle Hero\");");
code("trForbidProtounit(p, \"Wall Connector\");");
code("trForbidProtounit(p, \"Dock\");");
code("trForbidProtounit(p, \"Settlement Level 1\");");
code("trForbidProtounit(p, \"House\");");
code("trForbidProtounit(p, \"Granary\");");
code("trForbidProtounit(p, \"Mining Camp\");");
code("trForbidProtounit(p, \"Lumber Camp\");");
code("trForbidProtounit(p, \"Monument\");");
code("trForbidProtounit(p, \"Temple\");");
code("trForbidProtounit(p, \"Wonder\");");
code("trForbidProtounit(p, \"Market\");");
code("trForbidProtounit(p, \"Dwarf Foundry\");");
code("trForbidProtounit(p, \"Armory\");");
code("trForbidProtounit(p, \"Hill Fort\");");
code("trForbidProtounit(p, \"Tower\");");
code("trForbidProtounit(p, \"Longhouse\");");
code("trForbidProtounit(p, \"Manor\");");
code("trForbidProtounit(p, \"Guild\");");
code("}");

code("trQuestVarSet(\"rotX0\", -1);");
code("trQuestVarSet(\"rotX1\", 1);");
code("trQuestVarSet(\"rotX2\", 0);");
code("trQuestVarSet(\"rotX3\", 0);");
code("trQuestVarSet(\"rotZ0\", 0);");
code("trQuestVarSet(\"rotZ1\", 0);");
code("trQuestVarSet(\"rotZ2\", -1);");
code("trQuestVarSet(\"rotZ3\", 1);");

code("xsEnableRule(\"data_load_00\");");
code("xsDisableSelf();");
code("}");

code("rule setup_classes");
code("active");
code("highFrequency");
code("{");
for(p=1; < cNumberNonGaiaPlayers) {
code("trStringQuestVarSet(\"p"+p+"name\", \""+rmGetPlayerName(p)+"\");");
}
code("map(\"esc\", \"ShowImageBox\", \"gadgetUnreal("+quote+"ShowImageBox"+quote+")\");");
code("setupClass(\"Militia\", 17, 500, 1000);");
code("setupClass(\"Hero Greek Theseus\", MOONBLADE, 460, 1000, STARSTONE, 7);");
code("setupClass(\"Hero Greek Hippolyta\", SUNBOW, 1350, 1750, STARSTONE);");
code("setupClass(\"Hero Greek Atalanta\", THUNDERRIDER, 630, 1400, MANASTONE, 5);");
code("setupClass(\"Lancer Hero\", FIREKNIGHT, 1155, 1500, MANASTONE, 5);");
code("setupClass(\"Hero Greek Achilles\", NIGHTRIDER, 470, 1000, SOULSTONE, 8);");
code("setupClass(\"Priest\", BLASTMAGE, 500, 800, MANASTONE);");
code("setupClass(\"Oracle Hero\", STARSEER, 540, 1500, STARSTONE, 8);");
code("setupClass(\"Archer Atlantean Hero\", STORMCUTTER, 400, 1000, MANASTONE);");
code("setupClass(\"Pharaoh\", ALCHEMIST, 550, 1200, SOULSTONE);");
code("setupClass(\"Swordsman Hero\", SPELLSTEALER, 400, 800, MANASTONE, 6);");
code("setupClass(\"Javelin Cavalry Hero\", COMMANDO, 1000, 2000, STARSTONE);");
code("setupClass(\"Trident Soldier Hero\", THRONESHIELD, 625, 1250, SOULSTONE, 10);");
code("setupClass(\"Hero Greek Bellerophon\", SAVIOR, 625, 1250, STARSTONE, 3);");
code("setupClass(\"Hero Greek Chiron\", GARDENER, 900, 1500, SOULSTONE);");
code("setupClass(\"Circe\", SPARKWITCH, 1400, 2800, MANASTONE);");
code("setupClass(\"Regent\", GAMBLER, 500, 1100, SOULSTONE);");
code("xsDisableSelf();");
code("}");

code("rule delayed_modify");
code("inactive");
code("highFrequency");
code("{");
code("zInitProtoUnitStat(\"Revealer\", 1, 2, 12);");
code("setupPlayerProto(\"Kronny Flying\", 1000, 0, 0);");

code("trTechSetStatus(0, 7, 4);");
code("trTechSetStatus(0, 476, 4);");
code("trTechSetStatus(ENEMY_PLAYER, 7, 4);");
code("trTechSetStatus(ENEMY_PLAYER, 476, 4);");

code("setupPlayerProto(\"Hero Boar\", 1000, 0, 4.2, 0);");
code("setupPlayerProto(\"Militia\", 100, 10, 4.8);");
code("setupPlayerProto(\"Wolf\", 200, 10, 5, 0.2);");
code("setupPlayerProto(\"Dog\", 300, 15, 5, 0.2);");
code("setupPlayerProto(\"Minion\", 240, 10, 5, 0.2);");
code("setupPlayerProto(\"Hero Greek Theseus\", 1000, 50, 4.3, 0.3);");
code("setupPlayerProto(\"Hero Greek Hippolyta\", 1000, 50, 4.3, 0, 16);");
code("setupPlayerProto(\"Hero Greek Atalanta\", 800, 30, 6.0, 0);");
code("setupPlayerProto(\"Lancer Hero\", 1100, 55, 6.05, 0.5);");
code("setupPlayerProto(\"Hero Greek Achilles\", 1200, 50, 5.5, 0.4);");
code("setupPlayerProto(\"Archer Atlantean Hero\", 900, 30, 4.05, 0, 20);");
code("setupPlayerProto(\"Pharaoh\", 1000, 50, 4.0, 0, 12);");
code("setupPlayerProto(\"Swordsman Hero\", 1000, 50, 4.8, 0.3);");
code("setupPlayerProto(\"Javelin Cavalry Hero\", 1200, 45, 5.3, 0, 12);");
code("setupPlayerProto(\"Trident Soldier Hero\", 1200, 30, 3.9, 0);");
code("setupPlayerProto(\"Hero Greek Bellerophon\", 1200, 60, 6.0, 0.3);");
code("setupPlayerProto(\"Hero Greek Chiron\", 1000, 50, 5.5, 0, 16);");
code("setupPlayerProto(\"Priest\", 1000, 10, 3.6, 0, 16);");
code("setupPlayerProto(\"Oracle Hero\", 1000, 0, 4.0, 0.3);");
code("setupPlayerProto(\"Circe\", 1000, 100, 3.7, 0, 15);");
code("setupPlayerProto(\"Audrey\", 1000, 50, 0);");
code("setupPlayerProto(\"Walking Berry Bush\", 500, 25, 3.5, 0.3);");
code("setupPlayerProto(\"Regent\", 1000, 0, 4.2, 0.3);");
code("setupPlayerProto(\"Flying Medic\", 1000, 0, 6.0, 0.25);");

code("setupPlayerProto(\"Villager Atlantean Hero\", 500, 0, 4.0);");

code("trModifyProtounit(\"Sky Passage\", 0, 5, 999);");

code("trModifyProtounit(\"Walking Woods Marsh\", ENEMY_PLAYER, 6, 1);");

code("trModifyProtounit(\"Monument 2\", ENEMY_PLAYER, 24, -1);");
code("trModifyProtounit(\"Monument 2\", ENEMY_PLAYER, 25, -1);");
code("trModifyProtounit(\"Monument 2\", ENEMY_PLAYER, 26, -1);");
code("trModifyProtounit(\"Monument 2\", 0, 24, -1);");
code("trModifyProtounit(\"Monument 2\", 0, 25, -1);");
code("trModifyProtounit(\"Monument 2\", 0, 26, -1);");
code("trModifyProtounit(\"Monument 2\", ENEMY_PLAYER, 0, 1000);");
code("trModifyProtounit(\"Monument 2\", 0, 0, 1000);");

code("trModifyProtounit(\"Uproot 2x2\", 0, 8, -99);");

code("for(p=ENEMY_PLAYER; >0) {");
code("zInitProtoUnitStat(\"Revealer to Player\", p, 2, 12);");
code("zSetProtoUnitStat(\"Revealer to Player\", p, 2, 32);");
code("trModifyProtounit(\"Circe\", p, 9, -99);");
code("trModifyProtounit(\"Ox Cart\", p, 0, 120);");
code("trModifyProtounit(\"Spy Eye\", p, 2, -99);");
code("trModifyProtounit(\"Villager Atlantean Hero\", p, 5, 2);");
code("trModifyProtounit(\"Pharaoh\", p, 15, -999);");
code("trModifyProtounit(\"Pharaoh\", p, 14, -999);");
code("trModifyProtounit(\"Priest\", p, 15, -999);");
code("trModifyProtounit(\"Priest\", p, 14, -999);");
code("trModifyProtounit(\"Wadjet Spit\", p, 1, -15);");
code("trModifyProtounit(\"Ajax\", p, 5, 999);");
code("trModifyProtounit(\"Ball of Fire Impact\", p, 8, 9999999999999999999.0);");
code("trModifyProtounit(\"Ball of Fire Impact\", p, 8, -9999999999999999999.0);");
code("trModifyProtounit(\"Ball of Fire Impact\", p, 8, 4.0);");
code("zInitProtoUnitStat(\"Ball of Fire Impact\", p, 8, 4.0);");
code("trModifyProtounit(\"Kronny Flying\", p, 1, 9999999999999999999.0);");
code("trModifyProtounit(\"Kronny Flying\", p, 1, -9999999999999999999.0);");
code("zInitProtoUnitStat(\"Kronny Flying\", p, 1, 0);");
code("zInitProtoUnitStat(\"Meteorite\",p,1,100);");
code("trModifyProtounit(\"Minion\", p, 8, -999);");
code("trModifyProtounit(\"Arkantos God Out\", p, 8, 1);");
code("zInitProtoUnitStat(\"Cinematic Block\", p, 0, 300);");
code("zInitProtoUnitStat(\"Priest Projectile\", p, 8, 2);");

code("zInitProtoUnitStat(\"Ballista Shot\", p, 1, 30);");

code("trModifyProtounit(\"Servant\", p, 55, 1);");
code("trModifyProtounit(\"Kraken\", p, 55, 1);");
code("trModifyProtounit(\"Nereid\", p, 55, 1);");
code("trModifyProtounit(\"Scylla\", p, 55, 1);");

code("trModifyProtounit(\"Axe\",p,1,-20);");
code("}");

code("trModifyProtounit(\"Minion\", 0, 8, -999);");

code("trModifyProtounit(\"Kronny Flying\", 0, 1, 9999999999999999999.0);");
code("trModifyProtounit(\"Kronny Flying\", 0, 1, -9999999999999999999.0);");
code("zInitProtoUnitStat(\"Kronny Flying\", 0, 1, 0);");

code("trModifyProtounit(\"Bolt Strike\", 0, 27, -10000);");
code("trModifyProtounit(\"Bolt Strike\", 0, 28, -10000);");
code("trModifyProtounit(\"Bolt Strike\", 0, 29, -10000);");
code("zInitProtoUnitStat(\"Bolt Strike\", 0, 27, 0);");

code("xsEnableRule(\"setup_enemies\");");
code("xsDisableSelf();");

code("}");

code("rule no_extra_resources");
code("active");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime) {");
code("for (p=1; <cNumberPlayers) {");
code("trPlayerGrantResources(p, \"Food\", -1000.0);");
code("trPlayerGrantResources(p, \"Wood\", -1000.0);");
code("trPlayerGrantResources(p, \"Gold\", -1000.0);");
code("trPlayerGrantResources(p, \"Favor\", -1000.0);");
code("}");
code("if (Multiplayer == false) {");
code("trPlayerGrantResources(1, \"Gold\", xGetInt(dPlayerData, xPlayerGold, 1));");
code("}");
code("xsDisableSelf();");
code("}");
code("}");

code("rule Z_cin_00");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 1) {");
code("trSetFogAndBlackmap(false, false);");
code("trCameraCut(vector(96,90,98), vector(0,-1,0), vector(0,0,1), vector(1,0,0));");
code("int posX = 96 - 10;");
code("int posZ = 96 + 10;");
code("trModifyProtounit(\"Curse SFX\", 1, 8, 8);");
code("trArmyDispatch(\"1,0\", \"Dwarf\",1,posX,0,posZ,0,true);");
code("for(x=10; >0) {");
code("posX = posX + 2;");
code("trArmyDispatch(\"1,0\", \"Dwarf\",1,posX,0,posZ,0,false);");
code("}");
code("for(x=5; >0) {");
code("posX = posX - 2;");
code("posZ = posZ - 2;");
code("trArmyDispatch(\"1,0\", \"Dwarf\",1,posX,0,posZ,0,false);");
code("}");
code("for (x=4; >0) {");
code("posX = posX + 2;");
code("posZ = posZ - 2;");
code("trArmyDispatch(\"1,0\", \"Dwarf\",1,posX,0,posZ,0,false);");
code("}");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Curse SFX\");");

code("trUIFadeToColor(0,0,0,500,0,false);");
code("trSoundPlayFN(\"cinematics\15_in\gong.wav\", \"4\", -1, \"\",\"\");");
code("trSoundPlayFN(\"godpower.wav\", \"6\", -1, \"\",\"\");");
code("trOverlayText(\"Zenophobia presents...\", 4.0, -1, -1, -1);");

code("xsEnableRule(\"Z_cin_01\");");
code("xsDisableSelf();");
code("}");
code("}");

code("rule Z_cin_01");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 5) {");
code("trSoundPlayFN(\"ui\thunder2.wav\",\"1\",-1,\"\",\"\");");
code("trOverlayText(\"Ascension MMORPG\", 3.0, -1, -1, -1);");
code("trUIFadeToColor(0,0,0,1000,3000,true);");
code("xsEnableRule(\"Z_cin_02\");");
code("xsDisableSelf();");
code("}");
code("}");

code("int dStageChoices = 0;");
code("int xStageChoicesStage = 0;");

code("void paintTowerSegment(int stage = 0) {");
code("int tPrimary = 0;");
code("int tSubPrimary = 0;");
code("switch(stage)");
code("{");
code("case 1:");
code("{");
code("tPrimary = 0;");
code("tSubPrimary = 34;");
code("}");
code("case 2:");
code("{");
code("tPrimary = 0;");
code("tSubPrimary = 58;");
code("}");
code("case 3:");
code("{");
code("tPrimary = 0;");
code("tSubPrimary = 41;");
code("}");
code("case 4:");
code("{");
code("tPrimary = 0;");
code("tSubPrimary = 25;");
code("}");
code("case 5:");
code("{");
code("tPrimary = 5;");
code("tSubPrimary = 5;");
code("}");
code("case 6:");
code("{");
code("tPrimary = 0;");
code("tSubPrimary = 70;");
code("}");
code("case 7:");
code("{");
code("tPrimary = 3;");
code("tSubPrimary = 9;");
code("}");
code("case 8:");
code("{");
code("tPrimary = 0;");
code("tSubPrimary = 50;");
code("}");
code("case 9:");
code("{");
code("tPrimary = 5;");
code("tSubPrimary = 7;");
code("}");
code("}");
code("trPaintTerrain(68,43 + 3 * stage,76,46 + 3 * stage, tPrimary, tSubPrimary, false);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("int x = 139;");
code("int z = 89 + 6 * stage;");
code("if (iModulo(2, stage) == 0) {");
code("x = 151;");
code("}");
code("int next = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"0,0\",\"Dwarf\",1,x,0,z,180,true);");
code("trArmySelect(\"0,0\");");
code("trMutateSelected(kbGetProtoUnitID(\"Outpost\"));");
code("xSetPointer(dStageChoices,xAddDatabaseBlock(dStageChoices));");
code("xSetInt(dStageChoices,xUnitName,next);");
code("xSetInt(dStageChoices,xStageChoicesStage,stage);");
code("}");

code("rule Z_cin_02");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 5) {");
code("trModifyProtounit(\"Curse SFX\", 1, 8, -8);");
code("if (xGetInt(dPlayerData,xPlayerProgress,1) <= 0) {");
code("trQuestVarSet(\"stage\", 1);");
code("xsEnableRule(\"choose_stage_02\");");
code("} else {");
code("dStageChoices = xInitDatabase(\"stageChoices\",xGetInt(dPlayerData,xPlayerProgress,1));");
code("xInitAddInt(dStageChoices,\"name\");");
code("xStageChoicesStage = xInitAddInt(dStageChoices,\"stage\");");

code("trLetterBox(false);");
code("uiClearSelection();");
code("trMusicPlay(\"cinematics\9_in\music.mp3\", \"1\", 0.5);");
code("trUIFadeToColor(0,0,0,1000,0,false);");
code("trCameraCut(vector(145,70,26), vector(0,-0.7071,0.7071), vector(0,0.7071,0.7071), vector(1,0,0));");
code("trQuestVarSet(\"chooser\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\", \"Athena\",1,145,0,89,0,true);");
code("trMessageSetText(\"Host: Choose a floor to challenge.\",-1);");

code("trPaintTerrain(0,45,195,195,4,15,false);");
code("trPaintTerrain(0,0,195,45,0,34,false);");

code("if ((trQuestVarGet(\"p1nickQuestProgress\") == 6) && (trQuestVarGet(\"newPlayers\") == 0) && ENEMY_PLAYER > 2) {");
code("int next = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"0,0\",\"Dwarf\",1,129,0,93,180,true);");
code("trArmySelect(\"0,0\");");
code("trMutateSelected(kbGetProtoUnitID(\"Hero Greek Odysseus\"));");
code("xSetPointer(dStageChoices,xAddDatabaseBlock(dStageChoices));");
code("xSetInt(dStageChoices,xUnitName,next);");
code("xSetInt(dStageChoices,xStageChoicesStage,0);");
code("trPaintTerrain(65,47,65,47,0,80);");
code("trPaintTerrain(65,46,65,46,0,74);");
code("trPaintTerrain(65,45,65,45,0,81);");
code("trPaintTerrain(64,45,64,45,0,75);");
code("trPaintTerrain(63,45,63,45,0,82);");
code("trPaintTerrain(63,46,63,46,0,74);");
code("trPaintTerrain(63,47,63,47,0,83);");
code("trPaintTerrain(64,47,64,47,0,75);");
code("trPaintTerrain(64,46,64,46,0,34);");
code("}");

code("trPaintTerrain(68,46,76,76,5,4,false);");
code("for(i=0; <= xGetInt(dPlayerData,xPlayerProgress,1)) {");
code("paintTowerSegment(i+1);");
code("}");
code("trPaintTerrain(67,46,67,76,0,74,false);");
code("trPaintTerrain(77,46,77,76,0,74,false);");
code("trPaintTerrain(67,77,77,77,0,75,false);");
code("trPaintTerrain(67,77,67,77,0,83,false);");
code("trPaintTerrain(77,77,77,77,0,80,false);");
code("trPaintTerrain(67,45,67,45,0,81,false);");
code("trPaintTerrain(77,45,77,45,0,82,false);");

code("xsEnableRule(\"choose_stage_00\");");
code("}");
code("trSetLighting(\"default\", 0.1);");
code("xsDisableSelf();");
code("}");
code("}");

code("int monsterPetProto(int i = 0) {");
code("int proto = kbGetProtoUnitID(\"Golden Lion\");");
code("switch(i)");
code("{");
code("case 1:");
code("{");
code("proto = kbGetProtoUnitID(\"Anubite\");");
code("}");
code("case 2:");
code("{");
code("proto = kbGetProtoUnitID(\"Sphinx\");");
code("}");
code("case 3:");
code("{");
code("proto = kbGetProtoUnitID(\"Petsuchos\");");
code("}");
code("case 4:");
code("{");
code("proto = kbGetProtoUnitID(\"Centaur\");");
code("}");
code("case 5:");
code("{");
code("proto = kbGetProtoUnitID(\"Dryad\");");
code("}");
code("case 6:");
code("{");
code("proto = kbGetProtoUnitID(\"Medusa\");");
code("}");
code("case 7:");
code("{");
code("proto = kbGetProtoUnitID(\"Mountain Giant\");");
code("}");
code("case 8:");
code("{");
code("proto = kbGetProtoUnitID(\"Fenris Wolf\");");
code("}");
code("case 9:");
code("{");
code("proto = kbGetProtoUnitID(\"Valkyrie\");");
code("}");
code("case 10:");
code("{");
code("proto = kbGetProtoUnitID(\"Ballista\");");
code("}");
code("case 11:");
code("{");
code("proto = kbGetProtoUnitID(\"Frost Giant\");");
code("}");
code("case 12:");
code("{");
code("proto = kbGetProtoUnitID(\"Cyclops\");");
code("}");
code("case 13:");
code("{");
code("proto = kbGetProtoUnitID(\"Satyr\");");
code("}");
code("case 14:");
code("{");
code("proto = kbGetProtoUnitID(\"Behemoth\");");
code("}");
code("case 15:");
code("{");
code("proto = kbGetProtoUnitID(\"Avenger\");");
code("}");
code("case 16:");
code("{");
code("proto = kbGetProtoUnitID(\"Wadjet\");");
code("}");
code("case 17:");
code("{");
code("proto = kbGetProtoUnitID(\"Scorpion Man\");");
code("}");
code("case 18:");
code("{");
code("proto = kbGetProtoUnitID(\"Scarab\");");
code("}");
code("case 19:");
code("{");
code("proto = kbGetProtoUnitID(\"Mummy\");");
code("}");
code("case 20:");
code("{");
code("proto = kbGetProtoUnitID(\"Automaton SPC\");");
code("}");
code("case 21:");
code("{");
code("proto = kbGetProtoUnitID(\"Fire Siphon\");");
code("}");
code("case 22:");
code("{");
code("proto = kbGetProtoUnitID(\"Battle Boar\");");
code("}");
code("case 23:");
code("{");
code("proto = kbGetProtoUnitID(\"Colossus\");");
code("}");
code("case 24:");
code("{");
code("proto = kbGetProtoUnitID(\"Servant\");");
code("}");
code("case 25:");
code("{");
code("proto = kbGetProtoUnitID(\"Nereid\");");
code("}");
code("case 26:");
code("{");
code("proto = kbGetProtoUnitID(\"Kraken\");");
code("}");
code("case 27:");
code("{");
code("proto = kbGetProtoUnitID(\"Hydra\");");
code("}");
code("case 28:");
code("{");
code("proto = kbGetProtoUnitID(\"Griffon\");");
code("}");
code("case 29:");
code("{");
code("proto = kbGetProtoUnitID(\"Einheriar\");");
code("}");
code("case 30:");
code("{");
code("proto = kbGetProtoUnitID(\"Statue of Lightning\");");
code("}");
code("case 31:");
code("{");
code("proto = kbGetProtoUnitID(\"Lampades\");");
code("}");
code("}");
code("return(proto);");
code("}");

code("int loadProgress = 0;");
code("int savedata = 0;");
code("int currentdata = 0;");
code("const int VERSION_NUMBER = 6;");
code("const int TOTAL_LOAD = 24;");

code("void saveAllData() {");
code("xsSetContextPlayer(0);");
code("trSetCurrentScenarioUserData(VERSION_NUMBER, 0);");
code("int p = trCurrentPlayer();");
code("int relic = 0;");
code("int db = getWarehouseDB(p);");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("relic = xGetInt(db,xRelicType);");
code("if (relic <= NORMAL_RELICS) {");
code("trQuestVarSet(\"ownedRelics\"+relic, 1 + trQuestVarGet(\"ownedRelics\"+relic));");
code("}");
code("}");

code("if ((trQuestVarGet(\"p\"+p+\"nickQuestProgress\") < 5) && (trQuestVarGet(\"p\"+p+\"nickEquipped\") == 0) && Multiplayer) {");
code("trQuestVarSet(\"p\"+p+\"nickQuestProgress\", 0);");
code("}");

code("xSetPointer(dPlayerData,p);");

code("savedata = 0;");
code("savedata = savedata * 40 + xGetInt(dPlayerData,xPlayerMonsterIndex);");
code("savedata = savedata * 10 + xGetInt(dPlayerData,xPlayerRelicTransporterLevel);");
code("savedata = savedata * 31 + xGetInt(dPlayerData,xPlayerClass);");
code("savedata = savedata * 13 + xGetInt(dPlayerData,xPlayerGodBoon);");
code("savedata = savedata * 10 + xGetInt(dPlayerData,xPlayerLevel);");
code("savedata = savedata * 10 + xGetInt(dPlayerData,xPlayerProgress);");
code("trSetCurrentScenarioUserData(0, savedata);");
code("savedata = xGetInt(dPlayerData,xPlayerGold) - trQuestVarGet(\"p\"+p+\"startingGold\");");
code("savedata = savedata + trGetScenarioUserData(1);");
code("trSetCurrentScenarioUserData(1, savedata);");
code("db = getRelicsDB(p);");
code("for(x=12; > xGetDatabaseCount(db)) {");
code("trQuestVarSet(\"p\"+p+\"relic\"+x, 0);");
code("}");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("if (xGetInt(db, xRelicType) <= NORMAL_RELICS) {");
code("trQuestVarSet(\"p\"+p+\"relic\"+x, xGetInt(db, xRelicType));");
code("} else {");
code("if (xGetInt(db, xRelicType) == RELIC_NICKONHAWK_TICKET) {");
code("trQuestVarSet(\"p\"+p+\"nickQuestProgress\", 6);");
code("}");
code("trQuestVarSet(\"p\"+p+\"relic\"+x, 0);");
code("}");
code("}");
code("savedata = 0;");
code("currentdata = 0;");
code("for(x=6; > 0) {");
code("savedata = savedata * 31 + (1*trQuestVarGet(\"p\"+p+\"relic\"+x));");
code("currentdata = currentdata * 31 + (1*trQuestVarGet(\"p\"+p+\"relic\"+(x+6)));");
code("}");
code("trSetCurrentScenarioUserData(2, savedata);");
code("trSetCurrentScenarioUserData(3, currentdata);");

code("for(y=0; < 4) {");
code("savedata = 0;");
code("for(x=8; >0) {");
code("currentdata = 1*xsMin(12, 1*trQuestVarGet(\"ownedRelics\"+(x+8*y)));");
code("savedata = savedata * 13 + currentdata;");
code("}");
code("trSetCurrentScenarioUserData(12 + y, savedata);");
code("}");

code("savedata = 1*xsMin(10, 1*trQuestVarGet(\"dreamGogglesCount\"));");
code("for(x=3; >=0) {");
code("currentdata = 1*xsMin(99, 1*trQuestVarGet(\"gemstone\"+x));");
code("savedata = savedata * 100 + currentdata;");
code("}");
code("trSetCurrentScenarioUserData(9, savedata);");

code("if (Multiplayer == false) {");
code("for(y=0; <2) {");
code("savedata = 0;");
code("for(x=8; >0) {");
code("currentdata = 1*xsMin(10, xGetInt(dClass, xClassLevel, x + 8 * y));");
code("savedata = savedata * 11 + currentdata;");
code("}");
code("trSetCurrentScenarioUserData(10 + y, savedata);");
code("}");
code("}");

code("savedata = 0;");
code("currentdata = xsMin(10, trQuestVarGet(\"chestCount\"));");
code("savedata = savedata * 11 + currentdata;");
code("currentdata = xsMin(9, trQuestVarGet(\"zenoQuiz\"));");
code("savedata = savedata * 10 + currentdata;");
code("currentdata = xsMin(10, trQuestVarGet(\"questCount\"));");
code("savedata = savedata * 11 + currentdata;");
code("currentdata = xsMin(100, trQuestVarGet(\"giantKills\"));");
code("savedata = savedata * 101 + currentdata;");
code("currentdata = xsMin(5, trQuestVarGet(\"bossKills\"));");
code("savedata = savedata * 6 + currentdata;");
code("currentdata = trQuestVarGet(\"playerHasHosted\");");
code("savedata = savedata * 2 + currentdata;");
code("trSetCurrentScenarioUserData(8, savedata);");

code("savedata = 0;");
code("for(x=12; >=0) {");
code("currentdata = trQuestVarGet(\"boonUnlocked\"+x);");
code("savedata = savedata * 2 + currentdata;");
code("}");
code("trSetCurrentScenarioUserData(7, savedata);");

code("savedata = 0;");
code("currentdata = trQuestVarGet(\"p\"+p+\"relicsSacrificed\");");
code("savedata = savedata * 11 + currentdata;");
code("for(x=5; >0) {");
code("currentdata = trQuestVarGet(\"p\"+p+\"runestone\"+x);");
code("savedata = savedata * 2 + currentdata;");
code("}");
code("currentdata = trQuestVarGet(\"yeebHit\");");
code("savedata = savedata * 2 + currentdata;");
code("currentdata = trQuestVarGet(\"p\"+p+\"nickEquipped\");");
code("savedata = savedata * 2 + currentdata;");
code("currentdata = trQuestVarGet(\"p\"+p+\"nickQuestProgress\");");
code("savedata = savedata * 7 + currentdata;");
code("trSetCurrentScenarioUserData(4, savedata);");
code("}");

code("void showLoadProgress() {");
code("trSoundPlayFN(\"default\",\"1\",-1,\"Loading Data:\"+100 * loadProgress / TOTAL_LOAD,\"icons\god power reverse time icons 64\");");
code("}");

code("rule data_load_00");
code("highFrequency");
code("inactive");
code("{");
code("int proto = 0;");
code("for(y=0; < 4) {");
code("savedata = trGetScenarioUserData(12 + y);");
code("if (savedata < 0) {");
code("savedata = 0;");
code("}");
code("for(x=1; < 9) {");
code("trQuestVarSet(\"ownedRelics\"+(x+8*y), iModulo(13, savedata));");
code("savedata = savedata / 13;");
code("}");
code("}");


code("savedata = trGetScenarioUserData(9);");
code("if (savedata < 0) {");
code("savedata = 0;");
code("}");
code("for(x=0; <3) {");
code("trQuestVarSet(\"gemstone\"+x, iModulo(100, savedata));");
code("savedata = savedata / 100;");
code("}");
code("trQuestVarSet(\"dreamGogglesCount\", iModulo(11, savedata));");
code("savedata = savedata / 11;");
code("savedata = trGetScenarioUserData(8);");
code("if (savedata < 0) {");
code("savedata = 0;");
code("}");
code("trQuestVarSet(\"playerHasHosted\", iModulo(2, savedata));");
code("savedata = savedata / 2;");
code("trQuestVarSet(\"bossKills\", iModulo(6, savedata));");
code("savedata = savedata / 6;");
code("trQuestVarSet(\"giantKills\", iModulo(101, savedata));");
code("savedata = savedata / 101;");
code("trQuestVarSet(\"questCount\", iModulo(11, savedata));");
code("savedata = savedata / 11;");
code("trQuestVarSet(\"zenoQuiz\", iModulo(10, savedata));");
code("savedata = savedata / 10;");
code("trQuestVarSet(\"chestCount\", iModulo(11, savedata));");
code("savedata = savedata / 11;");

code("if ((trCurrentPlayer() == 1) && Multiplayer) {");
code("trQuestVarSet(\"playerHasHosted\", 1);");
code("}");

code("savedata = trGetScenarioUserData(7);");
code("if (savedata < 0) {");
code("savedata = 0;");
code("}");
code("for(x=0; <= 12) {");
code("trQuestVarSet(\"boonUnlocked\"+x, iModulo(2, savedata));");
code("savedata = savedata / 2;");
code("}");

code("if (Multiplayer) {");

code("int posX = 10;");

code("for(p=1; < ENEMY_PLAYER) {");
code("trModifyProtounit(\"Swordsman Hero\", p, 6, -100);");
code("trModifyProtounit(\"Swordsman Hero\", p, 16, 9999999999999999999.0);");
code("trModifyProtounit(\"Swordsman Hero\", p, 17, 9999999999999999999.0);");
code("trModifyProtounit(\"Swordsman Hero\", p, 18, 9999999999999999999.0);");
code("trModifyProtounit(\"Swordsman Hero\", p, 19, 9999999999999999999.0);");
code("trModifyProtounit(\"Swordsman Hero\", p, 16, -9999999999999999999.0);");
code("trModifyProtounit(\"Swordsman Hero\", p, 17, -9999999999999999999.0);");
code("trModifyProtounit(\"Swordsman Hero\", p, 18, -9999999999999999999.0);");
code("trModifyProtounit(\"Swordsman Hero\", p, 19, -9999999999999999999.0);");
code("trArmyDispatch(\"\"+p+\",0\",\"Swordsman\", 32, posX,0,10,0,true);");
code("posX = posX + 10;");
code("}");

code("trBlockAllSounds(true);");
code("trDelayedRuleActivation(\"data_load_01_ready\");");
code("} else {");
code("if (xSetPointer(dPlayerData,1) == false) {");
code("debugLog(\"Cannot set pointer to 1 for dPlayerData!\");");
code("}");
code("trForbidProtounit(1, \"Swordsman Hero\");");

code("savedata = trGetScenarioUserData(0);");
code("if (savedata < 0) {");
code("savedata = 0;");
code("}");
code("xSetInt(dPlayerData,xPlayerProgress,iModulo(10, savedata));");
code("savedata = savedata / 10;");
code("xSetInt(dPlayerData,xPlayerLevel,iModulo(10, savedata));");
code("savedata = savedata / 10;");
code("xSetInt(dPlayerData,xPlayerGodBoon,iModulo(13, savedata));");
code("savedata = savedata / 13;");
code("xSetInt(dPlayerData,xPlayerClass,iModulo(31, savedata));");
code("savedata = savedata / 31;");
code("xSetInt(dPlayerData,xPlayerRelicTransporterLevel,iModulo(10, savedata));");
code("savedata = savedata / 10;");
code("xSetInt(dPlayerData,xPlayerMonsterIndex,iModulo(40, savedata));");
code("savedata = savedata / 40;");
code("trQuestVarSet(\"p1monsterProto\", monsterPetProto(xGetInt(dPlayerData,xPlayerMonsterIndex)));");

code("savedata = trGetScenarioUserData(1);");
code("if (savedata < 0) {");
code("savedata = 0;");
code("}");
code("xSetInt(dPlayerData,xPlayerGold,savedata);");
code("trQuestVarSet(\"p1startinggold\", savedata);");

code("for(y=0; <2) {");
code("savedata = trGetScenarioUserData(2 + y);");
code("if (savedata < 0) {");
code("savedata = 0;");
code("}");
code("for(x=1; <7) {");
code("trQuestVarSet(\"p1relic\"+(x+6*y), iModulo(31, savedata));");
code("savedata = savedata / 31;");
code("}");
code("}");

code("for(y=0; <2) {");
code("savedata = trGetScenarioUserData(10 + y);");
code("if (savedata < 0) {");
code("savedata = 0;");
code("}");
code("for(x=1; <9) {");
code("xSetInt(dClass, xClassLevel, iModulo(11, savedata), x + 8 * y);");
code("savedata = savedata / 11;");
code("}");
code("}");

code("savedata = trGetScenarioUserData(4);");
code("if (savedata < 0) {");
code("savedata = 0;");
code("}");
code("trQuestVarSet(\"p1nickQuestProgress\", iModulo(7, savedata));");
code("savedata = savedata / 7;");
code("trQuestVarSet(\"p1nickEquipped\", iModulo(2, savedata));");
code("savedata = savedata / 2;");
code("trQuestVarSet(\"p1yeebHit\", iModulo(2, savedata));");
code("trQuestVarSet(\"yeebHit\", trQuestVarGet(\"p1yeebHit\"));");
code("savedata = savedata / 2;");
code("for(x=5; >0) {");
code("trQuestVarSet(\"p1runestone\"+x, iModulo(2, savedata));");
code("savedata = savedata / 2;");
code("}");
code("trQuestVarSet(\"p1relicsSacrificed\", iModulo(11, savedata));");
code("savedata = savedata / 11;");

code("xsEnableRule(\"singleplayer_init\");");
code("trDelayedRuleActivation(\"delayed_modify\");");
code("}");
code("trQuestVarSet(\"temp\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Victory Marker\",1,1,0,1,0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(ENEMY_PLAYER);");
code("xsDisableSelf();");
code("}");

code("rule data_load_01_ready");
code("highFrequency");
code("inactive");
code("{");
code("int swordsmen = 0;");
code("int total = 32 * (cNumberPlayers - 2);");
code("for(p=1; < ENEMY_PLAYER) {");
code("swordsmen = swordsmen + trPlayerUnitCountSpecific(p, \"Swordsman\");");
code("}");
code("if (swordsmen == total) {");
code("savedata = trGetScenarioUserData(0);");
code("if (savedata < 0) {");
code("savedata = 0;");
code("}");
code("currentdata = iModulo(10, savedata);");
code("savedata = savedata / 10;");

code("xsEnableRule(\"data_load_01_load_data\");");
code("xsEnableRule(\"data_load_02_detect_data\");");
code("xsEnableRule(\"data_load_emergency_exit\");");
code("xsDisableSelf();");
code("}");
code("}");

code("rule data_load_01_load_data");
code("highFrequency");
code("inactive");
code("{");
code("trLetterBox(false);");
code("trBlockAllSounds(true);");
code("if (currentdata >= 32) {");
code("trSoundPlayFN(\"cantdothat.wav\",\"1\",-1,\"Invalid code at \" + loadProgress + \"!\",\"\");");
code("}");
code("trUnitSelectClear();");
code("trUnitSelectByID(currentdata + 32 * (trCurrentPlayer() - 1));");
code("for(i=32; >0) {");
code("if (trUnitIsSelected() == false) {");
code("uiFindType(\"Swordsman\");");
code("} else {");
code("break;");
code("}");
code("}");
code("uiTransformSelectedUnit(\"Swordsman Hero\");");
code("trForceNonCinematicModels(true);");

code("trLetterBox(true);");

code("showLoadProgress();");
code("xsDisableSelf();");
code("}");

code("rule data_load_02_detect_data");
code("highFrequency");
code("inactive");
code("{");
code("int swordsmen = 0;");
code("for(p=1; < ENEMY_PLAYER) {");
code("swordsmen = swordsmen + trPlayerUnitCountSpecific(p, \"Swordsman Hero\");");
code("}");
code("if (swordsmen == cNumberPlayers - 2) {");
code("for(p=1; < ENEMY_PLAYER) {");
code("if (xSetPointer(dPlayerData,p) == false) {");
code("debugLog(\"Cannot set pointer for \" + aiPlanGetName(dPlayerData) + \" to: \" + p);");
code("debugLog(\"database size is \" + aiPlanGetNumberUserVariableValues(dPlayerData,xDirtyBit));");
code("debugLog(\"Progress: \" + loadProgress + \" context: \" + xsGetContextPlayer());");
code("}");
code("swordsmen = 32 * (p - 1);");
code("for(x=0; < 32) {");
code("if (kbGetUnitBaseTypeID(x + swordsmen) == kbGetProtoUnitID(\"Swordsman Hero\")) {");
code("if (loadProgress == 0) {");
code("xSetInt(dPlayerData,xPlayerProgress,x);");
code("} else if (loadProgress == 1) {");
code("xSetInt(dPlayerData,xPlayerLevel,x);");
code("} else if (loadProgress == 2) {");
code("xSetInt(dPlayerData,xPlayerGodBoon,x);");
code("} else if (loadProgress == 3) {");
code("xSetInt(dPlayerData,xPlayerClass,x);");
code("} else if (loadProgress == 4) {");
code("xSetInt(dPlayerData,xPlayerRelicTransporterLevel,x);");
code("} else if (loadProgress == 5) {");
code("xSetInt(dPlayerData,xPlayerMonsterIndex,x * 4);");
code("} else if (loadProgress == 6) {");
code("xSetInt(dPlayerData,xPlayerMonsterIndex,xGetInt(dPlayerData,xPlayerMonsterIndex) + x);");
code("xSetInt(dPlayerData,xPlayerMonsterProto,monsterPetProto(xGetInt(dPlayerData,xPlayerMonsterIndex)));");
code("} else if (loadProgress == 7) {");
code("xSetInt(dPlayerData,xPlayerGold,x);");
code("} else if (loadProgress == 8) {");
code("xSetInt(dPlayerData,xPlayerGold,xGetInt(dPlayerData,xPlayerGold) + 32 * x);");
code("} else if (loadProgress < 21) {");
code("trQuestVarSet(\"p\"+p+\"relic\"+(loadProgress - 8), x);");
code("} else if (loadProgress == 21) {");
code("currentdata = x;");
code("trQuestVarSet(\"p\"+p+\"nickQuestProgress\", iModulo(7, currentdata));");
code("currentdata = currentdata / 7;");
code("trQuestVarSet(\"p\"+p+\"nickEquipped\", iModulo(2, currentdata));");
code("currentdata = currentdata / 2;");
code("trQuestVarSet(\"p\"+p+\"yeebHit\", iModulo(2, currentdata));");
code("} else if (loadProgress == 22) {");
code("currentdata = x;");
code("for(i=5; >0) {");
code("trQuestVarSet(\"p\"+p+\"runestone\"+i, iModulo(2, currentdata));");
code("currentdata = currentdata / 2;");
code("}");
code("} else if (loadProgress == 23) {");
code("currentdata = x;");
code("trQuestVarSet(\"p\"+p+\"relicsSacrificed\", iModulo(11, currentdata));");
code("currentdata = currentdata / 11;");
code("}");
code("trUnitSelectClear();");
code("trUnitSelectByID(x + swordsmen);");
code("trMutateSelected(kbGetProtoUnitID(\"Swordsman\"));");
code("break;");
code("}");
code("}");
code("}");
code("loadProgress = loadProgress + 1;");
code("showLoadProgress();");
code("if (loadProgress == TOTAL_LOAD) {");
code("xsDisableSelf();");
code("xsEnableRule(\"data_load_03_done\");");
code("} else {");
code("xsEnableRule(\"data_load_01_load_data\");");
code("switch(loadProgress)");
code("{");
code("case 7:");
code("{");
code("savedata = trGetScenarioUserData(1);");
code("if (savedata < 0) {");
code("savedata = 0;");
code("} else if (savedata > 1000) {");
code("savedata = 1000;");
code("}");
code("}");
code("case 9:");
code("{");
code("savedata = trGetScenarioUserData(2);");
code("if (savedata < 0) {");
code("savedata = 0;");
code("}");
code("}");
code("case 15:");
code("{");
code("savedata = trGetScenarioUserData(3);");
code("if (savedata < 0) {");
code("savedata = 0;");
code("}");
code("}");
code("case 21:");
code("{");
code("savedata = trGetScenarioUserData(4);");
code("if (savedata < 0) {");
code("savedata = 0;");
code("}");
code("}");
code("}");
code("if (loadProgress < 2) {");
code("currentdata = iModulo(10, savedata);");
code("savedata = savedata / 10;");
code("} else if (loadProgress == 21) {");
code("currentdata = iModulo(28, savedata);");
code("savedata = savedata / 28;");
code("} else if (loadProgress >= 9 && loadProgress <= 20) {");
code("currentdata = iModulo(31, savedata);");
code("savedata = savedata / 31;");
code("} else if (loadProgress == 6) {");
code("currentdata = iModulo(4, savedata);");
code("savedata = savedata / 40;");
code("} else if (loadProgress == 5) {");
code("currentdata = iModulo(40, savedata) / 4;");
code("} else if (loadProgress == 4) {");
code("currentdata = iModulo(10, savedata);");
code("savedata = savedata / 10;");
code("} else if (loadProgress == 3) {");
code("currentdata = iModulo(31, savedata);");
code("savedata = savedata / 31;");
code("} else if (loadProgress == 2) {");
code("currentdata = iModulo(13, savedata);");
code("savedata = savedata / 13;");
code("} else {");
code("currentdata = iModulo(32, savedata);");
code("savedata = savedata / 32;");
code("}");
code("}");
code("}");
code("}");


code("rule data_load_03_done");
code("highFrequency");
code("inactive");
code("{");
code("for(x=0; < trQuestVarGet(\"temp\")) {");
code("trUnitSelectClear();");
code("trUnitSelectByID(x);");
code("trUnitDestroy();");
code("}");
code("int class = 0;");
code("int proto = 0;");
code("for(p=1; < ENEMY_PLAYER) {");
code("trForbidProtounit(p, \"Swordsman Hero\");");
code("trArmyDispatch(\"\"+p+\",0\",\"Victory Marker\",1,1,0,1,0,true);");
code("class = xGetInt(dPlayerData,xPlayerClass,p);");
code("proto = xGetInt(dClass, xClassProto, class);");
code("trModifyProtounit(kbGetProtoUnitName(proto), p, 5, xGetInt(dPlayerData,xPlayerLevel,p));");
code("if (xGetInt(dPlayerData,xPlayerGodBoon,p) == BOON_TWO_RELICS) {");
code("trModifyProtounit(kbGetProtoUnitName(proto), p, 5, 2);");
code("} else if (xGetInt(dPlayerData,xPlayerGodBoon,p) == BOON_DOUBLE_FAVOR) {");
code("trSetCivAndCulture(p, 0, 0);");
code("}");
code("if (xGetInt(dPlayerData,xPlayerClass,p) == 0) {");
code("xSetInt(dPlayerData,xPlayerClass,17,p);");
code("trQuestVarSet(\"newPlayers\", 1);");
code("trQuestVarSet(\"p\"+p+\"noob\", 1);");
code("}");
code("if (trQuestVarGet(\"p\"+p+\"nickQuestProgress\") == 0) {");
code("trQuestVarSet(\"nickQuestSpawn\", 1);");
code("}");
code("if (trQuestVarGet(\"p\"+p+\"yeebHit\") == 1) {");
code("trQuestVarSet(\"yeebBossFight\", p);");
code("}");
code("trPlayerGrantResources(p, \"Gold\", xGetInt(dPlayerData,xPlayerGold, p));");
code("trQuestVarSet(\"p\"+p+\"startingGold\", xGetInt(dPlayerData,xPlayerGold, p));");
code("}");
code("if (trQuestVarGet(\"p\"+trCurrentPlayer()+\"yeebHit\") == 1) {");
code("trQuestVarSet(\"yeebHit\", 1);");
code("}");
code("trUnblockAllSounds();");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"Done!\",\"icons\god power reverse time icons 64\");");
code("xsDisableSelf();");
code("xsEnableRule(\"Z_cin_00\");");
code("}");

code("rule data_load_emergency_exit");
code("highFrequency");
code("inactive");
code("{");
code("if (trTime() > cActivationTime + 5) {");
code("xsDisableSelf();");
code("if (loadProgress == 0) {");
code("int x = 0;");
code("for(p=1; < ENEMY_PLAYER) {");
code("x = x + trPlayerUnitCountSpecific(p, \"Swordsman Hero\");");
code("}");
code("if (x <= 1) {");
code("trSoundPlayFN(\"default\",\"1\",-1,");
code("\"Zenophobia: Hmm, looks like AoM has sent everyone into singleplayer. Returning you to main menu now.\",");
code("\"icons\infantry g hoplite icon 64\");");
code("if (trCurrentPlayer() == 1) {");
code("xsEnableRule(\"data_load_emergency_exit_01\");");
code("} else {");
code("xsEnableRule(\"data_load_emergency_exit_02\");");
code("}");
code("}");
code("}");
code("}");
code("}");

code("rule data_load_emergency_exit_01");
code("highFrequency");
code("inactive");
code("{");
code("if (trTime() > cActivationTime + 5) {");
code("xsDisableSelf();");
code("xsEnableRule(\"data_load_emergency_exit_02\");");
code("trSoundPlayFN(\"default\",\"1\",-1,");
code("\"Zenophobia:Host, make sure all spots are filled and the last player is a CPU.\",");
code("\"icons\infantry g hoplite icon 64\");");
code("}");
code("}");

code("rule data_load_emergency_exit_02");
code("highFrequency");
code("inactive");
code("{");
code("if (trTime() > cActivationTime + 7) {");
code("xsDisableSelf();");
code("trLetterBox(false);");
code("subModeEnter(\"Simulation\",\"Editor\");");
code("uiMessageBox(\"\",\"leaveGame()\");");
code("uiCycleCurrentActivate();");
code("uiCycleCurrentActivate();");
code("subModeLeave(\"Simulation\",\"Editor\");");
code("modeEnter(\"pregame\");");
code("modeEnter(\"Simulation\");");
code("}");
code("}");
code("string classIcon(int class = 0) {");
code("string icon = \"icons\infantry g hoplite icon 64\";");
code("switch(class)");
code("{");
code("case MOONBLADE:");
code("{");
code("icon = \"icons\hero g theseus icon 64\";");
code("}");
code("case SUNBOW:");
code("{");
code("icon = \"icons\hero g hyppolyta icon 64\";");
code("}");
code("case THUNDERRIDER:");
code("{");
code("icon = \"icons\hero g atalanta icon 64\";");
code("}");
code("case FIREKNIGHT:");
code("{");
code("icon = \"icons\cavalry x lancer hero icons 64\";");
code("}");
code("case BLASTMAGE:");
code("{");
code("icon = \"icons\special e priest icon 64\";");
code("}");
code("case STORMCUTTER:");
code("{");
code("icon = \"icons\archer x arcus hero icons 64\";");
code("}");
code("case ALCHEMIST:");
code("{");
code("icon = \"icons\special e pharaoh icon 64\";");
code("}");
code("case SPELLSTEALER:");
code("{");
code("icon = \"icons\infantry x murmillo hero icons 64\";");
code("}");
code("case COMMANDO:");
code("{");
code("icon = \"icons\cavalry x jav cav hero icons 64\";");
code("}");
code("case THRONESHIELD:");
code("{");
code("icon = \"icons\infantry x protector hero icons 64\";");
code("}");
code("case SAVIOR:");
code("{");
code("icon = \"icons\hero g bellerophon icon 64\";");
code("}");
code("case GARDENER:");
code("{");
code("icon = \"icons\hero g chiron icon 64\";");
code("}");
code("case NIGHTRIDER:");
code("{");
code("icon = \"icons\hero g achilles icon 64\";");
code("}");
code("case STARSEER:");
code("{");
code("icon = \"icons\infantry x oracle hero icons 64\";");
code("}");
code("case SPARKWITCH:");
code("{");
code("icon = \"icons\special g circe icon 64\";");
code("}");
code("case GAMBLER:");
code("{");
code("icon = \"icons\infantry g hypaspist icon 64\";");
code("}");
code("}");
code("return(icon);");
code("}");

code("int displayNextTooltip(int class = 0, int tooltip = 0) {");
code("string icon = classIcon(class);");
code("string msg = \"\";");
code("int next = tooltip + 1;");
code("if (class > 16) {");
code("next = 0;");
code("int revealed = ((class - 17) / 4) * 2;");
code("icon = \"icons\building outpost icon 64\";");
code("msg = \"This class will be revealed when you clear Stage \" + revealed;");
code("}");
code("switch(class)");
code("{");
code("case MOONBLADE:");
code("{");
code("switch(tooltip)");
code("{");
code("case 0:");
code("{");
code("msg = \"Moonblade: A jack-of-all-trades good for beginners.\";");
code("}");
code("case 1:");
code("{");
code("msg = \"Passive: Each time you attack, restore health to all allies. Heal = 3 percent of your max health\";");
code("}");
code("case 2:");
code("{");
code("msg = \"Special Attack (7 attacks): Summon a wolf companion that fights for you.\";");
code("if (Multiplayer == false) {");
code("next = 9;");
code("}");
code("}");
code("case 3:");
code("{");
code("icon = \"icons\god power eclipse icon 64\";");
code("msg = \"(Q) Moonbeam: Create a circle that damages and silences enemies in it for several seconds.\";");
code("if (Multiplayer == false) {");
code("next = 6;");
code("}");
code("}");
code("case 4:");
code("{");
code("icon = \"icons\improvement swine array icon 64\";");
code("msg = \"(W) Crescent Strikes: Your next 3 attacks deal bonus damage and stun.\";");
code("if (Multiplayer == false) {");
code("next = 8;");
code("}");
code("}");
code("case 5:");
code("{");
code("icon = \"icons\improvement rheias gift icons 64\";");
code("msg = \"(E) Protection (Toggle): Grant all allies invulnerability. Costs 12 favor per second.\";");
code("next = 0;");
code("}");
code("case 6:");
code("{");
code("icon = \"icons\god power eclipse icon 64\";");
code("msg = \"Cooldown: 18 | Duration: 6 | Radius: 6 | Damage: 30\";");
code("next = 4;");
code("}");
code("case 8:");
code("{");
code("icon = \"icons\improvement swine array icon 64\";");
code("msg = \"Cooldown: 12 | Damage: 50 | Lose one stack every 5 seconds if not used\";");
code("next = 5;");
code("}");
code("case 9:");
code("{");
code("msg = \"It has a fifth of your attack and health. Decay: 5 percent health per second\";");
code("next = 3;");
code("}");
code("}");
code("}");
code("case SUNBOW:");
code("{");
code("switch(tooltip)");
code("{");
code("case 0:");
code("{");
code("msg = \"Sunbow: A ranged healer who can also deal good damage.\";");
code("}");
code("case 1:");
code("{");
code("msg = \"Passive: You can revive allies even when enemies are nearby.\";");
code("}");
code("case 2:");
code("{");
code("icon = \"icons\god power restoration icon 64\";");
code("msg = \"(Q) Sunlight: Create a circle that heals allies for several seconds.\";");
code("if (Multiplayer == false) {");
code("next = 5;");
code("}");
code("}");
code("case 3:");
code("{");
code("icon = \"icons\improvement sun ray icon 64\";");
code("msg = \"(W) Healing Rays: For a short duration, your attacks fire rays that heal allies.\";");
code("if (Multiplayer == false) {");
code("next = 6;");
code("}");
code("}");
code("case 4:");
code("{");
code("icon = \"icons\improvement flames of typhon icon\";");
code("msg = \"(E) Searing Light (Toggle): Your heals also deal damage to enemies. Costs 5 favor per second.\";");
code("next = 0;");
code("}");
code("case 5:");
code("{");
code("icon = \"icons\god power restoration icon 64\";");
code("msg = \"Cooldown: 18 | Duration: 6 | Radius: 6 | Heal: 60\";");
code("next = 3;");
code("}");
code("case 6:");
code("{");
code("icon = \"icons\improvement sun ray icon 64\";");
code("msg = \"Cooldown: 12 | Duration: 6 | Heal: 100 | Fire rate + 0.5x Projectiles\";");
code("next = 4;");
code("}");
code("}");
code("}");
code("case THUNDERRIDER:");
code("{");
code("switch(tooltip)");
code("{");
code("case 0:");
code("{");
code("msg = \"Thunderstepper: A speedy assassin that scales off of speed.\";");
code("}");
code("case 1:");
code("{");
code("msg = \"Passive: You gain bonus attack by continuously moving. This bonus decays by 5 percent each second.\";");
code("}");
code("case 2:");
code("{");
code("msg = \"Bonus: 0.1 x Attack for every meter traveled | Decay doubles when standing still\";");
code("}");
code("case 3:");
code("{");
code("msg = \"Special Attack (5 attacks): Your attack chains to nearby enemies, damaging all of them.\";");
code("}");
code("case 4:");
code("{");
code("icon = \"icons\god power bolt icon 64\";");
code("msg = \"(Q) Blitz: Teleport towards your cursor, stunning and damaging enemies hit.\";");
code("}");
code("case 5:");
code("{");
code("icon = \"icons\god power bolt icon 64\";");
code("msg = \"If Ride the Lightning is active, this changes your direction of travel instead.\";");
code("}");
code("case 6:");
code("{");
code("icon = \"icons\god power bolt icon 64\";");
code("msg = \"Cooldown: 8 | Range: 12 | Damage: 50\";");
code("}");
code("case 7:");
code("{");
code("icon = \"icons\improvement heart of the titans icons 64\";");
code("msg = \"(W) Recharge: Consume all your bonus attack and convert it into healing and favor for yourself.\";");
code("}");
code("case 8:");
code("{");
code("icon = \"icons\improvement heart of the titans icons 64\";");
code("msg = \"Cooldown: 22 | Heal: 1x Attack | Favor Regen: 0.1x Attack\";");
code("}");
code("case 9:");
code("{");
code("icon = \"icons\god power implode icons 64\";");
code("msg = \"(E) Ride the Lightning: Become a fast-moving ball of lightning that bounces off walls\";");
code("}");
code("case 10:");
code("{");
code("icon = \"icons\god power implode icons 64\";");
code("msg = \"Damage enemies that you pass through. Damage increases with each bounce.\";");
code("}");
code("case 11:");
code("{");
code("icon = \"icons\god power implode icons 64\";");
code("msg = \"Cost: 8 favor per second | Radius: 5 | Damage: 100 + 50 per bounce\";");
code("next = 0;");
code("}");
code("}");
code("}");
code("case FIREKNIGHT:");
code("{");
code("switch(tooltip)");
code("{");
code("case 0:");
code("{");
code("msg = \"Fire Knight: A character that charges in and sacrifices health for damage.\";");
code("}");
code("case 1:");
code("{");
code("msg = \"Passive: Gain Lifesteal equal to your percentage of missing health.\";");
code("}");
code("case 2:");
code("{");
code("msg = \"Special Attack (5 attacks): Deal 50 damage to nearby enemies and yourself.\";");
code("}");
code("case 3:");
code("{");
code("icon = \"icons\special e phoenix icon 64\";");
code("msg = \"(Q) Flaming Impact: Dash to the target location, damaging enemies and dragging them with you\";");
code("}");
code("case 4:");
code("{");
code("icon = \"icons\special e phoenix icon 64\";");
code("msg = \"Cooldown: 12 | Radius: 4 | Duration: 2 | Damage: 90\";");
code("}");
code("case 5:");
code("{");
code("icon = \"icons\god power chaos icons 64\";");
code("msg = \"(W) Overheat: Set yourself on fire, damaging yourself each second.\";");
code("}");
code("case 6:");
code("{");
code("icon = \"icons\god power chaos icons 64\";");
code("msg = \"During this time, reflect all damage you receive onto nearby enemies.\";");
code("}");
code("case 7:");
code("{");
code("icon = \"icons\god power chaos icons 64\";");
code("msg = \"Cooldown: 18 | Radius: 4 | Duration: 6 | Damage: 40 per second\";");
code("}");
code("case 8:");
code("{");
code("icon = \"icons\god power firestorm icon 64\";");
code("msg = \"(E) Inferno: Unleash a ring of flames that damages enemies and heals allies for several seconds\";");
code("}");
code("case 9:");
code("{");
code("icon = \"icons\god power firestorm icon 64\";");
code("msg = \"Cost: 70 | Radius: 12 | Duration: 8 | Damage: 120 per second | Heal: 60 per second\";");
code("next = 0;");
code("}");
code("}");
code("}");
code("case BLASTMAGE:");
code("{");
code("switch(tooltip)");
code("{");
code("case 0:");
code("{");
code("msg = \"Blastmage: A ranged fighter who commands powerful magic.\";");
code("}");
code("case 1:");
code("{");
code("msg = \"Passive: You cannot gain Projectiles. After you cast a spell, your next attack is empowered.\";");
code("}");
code("case 2:");
code("{");
code("msg = \"It will grant you 3 favor, deal damage in an area, and create a Mage Fire.\";");
code("}");
code("case 3:");
code("{");
code("msg = \"You can store up to three empowered attacks.\";");
code("}");
code("case 4:");
code("{");
code("msg = \"Damage: 60 | Radius: 4 (Increased by Projectiles)\";");
code("}");
code("case 5:");
code("{");
code("icon = \"sfx a implode lighting flair\";");
code("msg = \"Mage Fires remain on the ground for several seconds, damaging nearby enemies.\";");
code("}");
code("case 6:");
code("{");
code("icon = \"sfx a implode lighting flair\";");
code("msg = \"Duration: 10 | Radius: 4 | Damage: 10 per second\";");
code("}");
code("case 7:");
code("{");
code("icon = \"icons\god power meteor icon 64\";");
code("msg = \"(Q) Starfall: A star falls from the sky and damages enemies in an area. This creates a Mage Fire.\";");
code("}");
code("case 8:");
code("{");
code("icon = \"icons\god power meteor icon 64\";");
code("msg = \"Enemies hit by the blast will have their magic resist reduced permanently.\";");
code("}");
code("case 9:");
code("{");
code("icon = \"icons\god power meteor icon 64\";");
code("msg = \"Cooldown: 8 | Radius: 5 | Damage: 120 | Resist Reduction: 0.1\";");
code("}");
code("case 10:");
code("{");
code("icon = \"icons\god power vortex icons 64\";");
code("msg = \"(W) Warp: Teleport a short distance towards your cursor and leave behind a Mage Fire.\";");
code("}");
code("case 11:");
code("{");
code("icon = \"icons\god power vortex icons 64\";");
code("msg = \"Cooldown: 6 | Range: 8\";");
code("}");
code("case 12:");
code("{");
code("icon = \"icons\building tower mirror icons 64\";");
code("msg = \"(E) Solar Flare: Fire a laser through each of your Mage Fires, dealing damage to enemies.\";");
code("}");
code("case 13:");
code("{");
code("icon = \"icons\building tower mirror icons 64\";");
code("msg = \"Cost: 40 | Range: 40 | Damage: 90\";");
code("next = 0;");
code("}");
code("}");
code("}");
code("case STORMCUTTER:");
code("{");
code("switch(tooltip)");
code("{");
code("case 0:");
code("{");
code("msg = \"Stormcutter: An archer who commands the power of storms.\";");
code("}");
code("case 1:");
code("{");
code("msg = \"Passive: You deal more damage the further your target is. 10 percent for every 5 meters.\";");
code("}");
code("case 2:");
code("{");
code("icon = \"icons\building archery range icon 64\";");
code("msg = \"(Q) Shock Arrow: Fire an arrow at your cursor that damages and launches the first enemy hit.\";");
code("}");
code("case 3:");
code("{");
code("icon = \"icons\building archery range icon 64\";");
code("msg = \"If they are launched into a wall, they take the same amount of damage again.\";");
code("}");
code("case 4:");
code("{");
code("icon = \"icons\building archery range icon 64\";");
code("msg = \"Cooldown: 10 | Range: 30 | Damage: 100\";");
code("}");
code("case 5:");
code("{");
code("icon = \"icons\god power shifting sand icon 64\";");
code("msg = \"(W) Disengage: Stun nearby enemies and then teleport a short distance towards your cursor.\";");
code("}");
code("case 6:");
code("{");
code("icon = \"icons\god power shifting sand icon 64\";");
code("msg = \"Cooldown: 8 | Stun Radius: 4 | Teleport Range: 12\";");
code("}");
code("case 7:");
code("{");
code("icon = \"icons\god power lightning icon 64\";");
code("msg = \"(E) Rain of Lightning: Your attacks call lightning to strike your foes, dealing damage in an area\";");
code("}");
code("case 8:");
code("{");
code("icon = \"icons\god power lightning icon 64\";");
code("msg = \"The damage is multiplied by your spell power and it ignores enemy armor.\";");
code("}");
code("case 9:");
code("{");
code("icon = \"icons\god power lightning icon 64\";");
code("msg = \"Cost: 50 | Duration: 10 | Radius: 5 | Damage: Attack x Spell Power | Fire rate + 0.5x Projectiles\";");
code("next = 0;");
code("}");
code("}");
code("}");
code("case ALCHEMIST:");
code("{");
code("switch(tooltip)");
code("{");
code("case 0:");
code("{");
code("msg = \"Alchemist: A versatile support with the right tool for every situation.\";");
code("}");
code("case 1:");
code("{");
code("msg = \"Passive: Every third attack, you throw a potion with a special effect.\";");
code("}");
code("case 2:");
code("{");
code("icon = \"icons\god power frost icon 64\";");
code("msg = \"Freeze: The potion stuns your target. Additional projectiles will stun nearby enemies.\";");
code("}");
code("case 3:");
code("{");
code("icon = \"icons\god power pestilence icon 64\";");
code("msg = \"Poison: The potion spills poison on the ground, poisoning enemies in an area.\";");
code("}");
code("case 4:");
code("{");
code("icon = \"icons\god power pestilence icon 64\";");
code("msg = \"Radius: 4 | Duration: 12 | Damage: 12 x Projectiles\";");
code("}");
code("case 5:");
code("{");
code("icon = \"icons\god power restoration icon 64\";");
code("msg = \"Heal: When the potion is thrown, all allies restore 5 percent of their health\";");
code("}");
code("case 6:");
code("{");
code("icon = \"icons\improvement temple of healing icon 64\";");
code("msg = \"(Q) Elixir: Restore health to an ally and remove all status effects from them.\";");
code("}");
code("case 7:");
code("{");
code("icon = \"icons\improvement temple of healing icon 64\";");
code("msg = \"Cooldown: 12 | Heal: 200\";");
code("}");
code("case 8:");
code("{");
code("icon = \"icons\improvement salt amphora icon 64\";");
code("msg = \"(W) Swap Potion: Swap the type of potion you throw, cycling between the three options.\";");
code("}");
code("case 9:");
code("{");
code("icon = \"icons\god power call to arms icon\";");
code("msg = \"(E) Duplicate: Summon a perfect copy of an allied hero. It also casts spells with them.\";");
code("}");
code("case 10:");
code("{");
code("icon = \"icons\god power call to arms icon\";");
code("msg = \"Cost: 50 | Decay: 1 + 1 per second (percent max health)\";");
code("next = 0;");
code("}");
code("}");
code("}");
code("case SPELLSTEALER:");
code("{");
code("switch(tooltip)");
code("{");
code("case 0:");
code("{");
code("msg = \"Spellstealer: An assassin who reflects status effects onto enemies.\";");
code("}");
code("case 1:");
code("{");
code("msg = \"Passive: When you damage an enemy, the damage is doubled for each status effect on them.\";");
code("}");
code("case 2:");
code("{");
code("msg = \"Special Attack (6 attacks): Poison your target and nearby enemies.\";");
code("}");
code("case 3:");
code("{");
code("msg = \"Radius: 6 | Duration: 12 | Damage: 12\";");
code("}");
code("case 4:");
code("{");
code("icon = \"icons\god power barrage icon\";");
code("msg = \"(Q) Spellblades: Throw daggers in a cone that damage enemies.\";");
code("}");
code("case 5:");
code("{");
code("icon = \"icons\god power barrage icon\";");
code("msg = \"Cooldown: 9 | Damage: 0.5 x Attack x Spell Power | Knives: 5 + 2 x Projectiles\";");
code("}");
code("case 6:");
code("{");
code("icon = \"icons\god major leto icons 64\";");
code("msg = \"(W) Negation Cloak: For a short duration, you absorb status effects and spell damage that hits you.\";");
code("}");
code("case 7:");
code("{");
code("icon = \"icons\god major leto icons 64\";");
code("msg = \"During this time, spell damage will heal you instead of damaging you.\";");
code("}");
code("case 8:");
code("{");
code("icon = \"icons\god major leto icons 64\";");
code("msg = \"When this spell ends, your next spell will apply all the absorbed status effects.\";");
code("}");
code("case 9:");
code("{");
code("icon = \"icons\god major leto icons 64\";");
code("msg = \"Cooldown: 12 | Duration: 3\";");
code("}");
code("case 10:");
code("{");
code("icon = \"icons\improvement greatest of fifty icon 64\";");
code("msg = \"(E) Blade Dance: Teleport to an enemy and attack them, ignoring their armor.\";");
code("}");
code("case 11:");
code("{");
code("icon = \"icons\improvement greatest of fifty icon 64\";");
code("msg = \"If the target is affected by a status effect, also attack nearby enemies with the same status\";");
code("}");
code("case 12:");
code("{");
code("icon = \"icons\improvement greatest of fifty icon 64\";");
code("msg = \"If this hits only one enemy, it costs half.\";");
code("}");
code("case 13:");
code("{");
code("icon = \"icons\improvement greatest of fifty icon 64\";");
code("msg = \"Cost: 20 | Radius: 15 | Damage: Attack x Spell Power\";");
code("next = 0;");
code("}");
code("}");
code("}");
code("case COMMANDO:");
code("{");
code("switch(tooltip)");
code("{");
code("case 0:");
code("{");
code("msg = \"Commando: A mid-ranged fighter that wields an arsenal of explosive weaponry.\";");
code("}");
code("case 1:");
code("{");
code("msg = \"Passive: You wield a shotgun that shoots piercing bullets in a cone.\";");
code("}");
code("case 2:");
code("{");
code("msg = \"Restore 1 favor when these bullets hit an enemy.\";");
code("}");
code("case 3:");
code("{");
code("msg = \"Damage per bullet: 0.6 x Attack | Bullets: 4 + Projectiles | Damage falls off with distance.\";");
code("}");
code("case 4:");
code("{");
code("icon = \"icons\improvement electrum bullets icon 64\";");
code("msg = \"(Q) Shrapnel Shot: Fire an explosive at your cursor.\";");
code("}");
code("case 5:");
code("{");
code("icon = \"icons\improvement electrum bullets icon 64\";");
code("msg = \"If it hits a wall, it explodes and releases a cone of shrapnel, dealing physical damage.\";");
code("}");
code("case 6:");
code("{");
code("icon = \"icons\improvement electrum bullets icon 64\";");
code("msg = \"Damage per bullet: 0.6 x Attack | Bullets: 8 + 2 x Projectiles | Damage falls off with distance.\";");
code("}");
code("case 7:");
code("{");
code("icon = \"icons\special e phoenix egg icon 64\";");
code("msg = \"(W) Echo Bomb: Attach a bomb to an enemy that records all the damage it takes for several seconds\";");
code("}");
code("case 8:");
code("{");
code("icon = \"icons\special e phoenix egg icon 64\";");
code("msg = \"When the bomb explodes, deal all the stored damage in a large radius.\";");
code("}");
code("case 9:");
code("{");
code("icon = \"icons\special e phoenix egg icon 64\";");
code("msg = \"Cooldown: 20 | Duration: 6 | Radius: 12 | An enemy can only have one Echo Bomb at a time\";");
code("}");
code("case 10:");
code("{");
code("icon = \"icons\siege x fire siphon icons 64\";");
code("msg = \"(E) Minigun: Switch to your minigun, which continuously fires bullets at longer range.\";");
code("}");
code("case 11:");
code("{");
code("icon = \"icons\siege x fire siphon icons 64\";");
code("msg = \"These bullets do not pierce through enemies or grant you favor.\";");
code("}");
code("case 12:");
code("{");
code("icon = \"icons\siege x fire siphon icons 64\";");
code("msg = \"Cost: 1 per bullet | Range: 1.5x | Damage: 1 x Attack | Fire rate: 3 + Projectiles\";");
code("next = 0;");
code("}");
code("}");
code("}");
code("case THRONESHIELD:");
code("{");
code("switch(tooltip)");
code("{");
code("case 0:");
code("{");
code("msg = \"Throne Shield: A frontline fighter that tanks damage for allies.\";");
code("}");
code("case 1:");
code("{");
code("msg = \"Passive: When you take damage, reduce it by 2 percent for every 100 health you have.\";");
code("}");
code("case 2:");
code("{");
code("msg = \"Special Attack (10 attacks): Stun your target and heal all allies for 5 percent of your health.\";");
code("}");
code("case 3:");
code("{");
code("icon = \"icons\god power ragnarok icon 64\";");
code("msg = \"(Q) Knight's Vow: Choose an allied player to be your partner.\";");
code("}");
code("case 4:");
code("{");
code("icon = \"icons\god power ragnarok icon 64\";");
code("msg = \"When they take damage, you take half of it instead. Their lifesteal will heal you as well.\";");
code("}");
code("case 5:");
code("{");
code("icon = \"icons\god power ragnarok icon 64\";");
code("msg = \"Also, their attacks will advance your special attack cooldown too.\";");
code("}");
code("case 6:");
code("{");
code("icon = \"icons\god power ragnarok icon 64\";");
code("msg = \"Cooldown: 10 | Cannot target another Throne Shield or a player that already has a Vow.\";");
code("}");
code("case 7:");
code("{");
code("icon = \"icons\god power thunder clap icons 64\";");
code("msg = \"(W) Justice: Stun nearby enemies that are not attacking you. Silence the ones that are.\";");
code("}");
code("case 8:");
code("{");
code("icon = \"icons\god power thunder clap icons 64\";");
code("msg = \"Cooldown: 10 | Radius: 8 | Stun Duration: 2 | Silence Duration: 6\";");
code("}");
code("case 9:");
code("{");
code("icon = \"icons\god power valor icons 64\";");
code("msg = \"(E) Shield of Light: Absorb all the damage you receive for a short duration.\";");
code("}");
code("case 10:");
code("{");
code("icon = \"icons\god power valor icons 64\";");
code("msg = \"Then, your next attack will fire an enormous laser that deals all the absorbed damage.\";");
code("}");
code("case 11:");
code("{");
code("icon = \"icons\god power valor icons 64\";");
code("msg = \"Cost: 60 | Duration: 6 | Absorbed damage is calculated before your passive reduction\";");
code("next = 0;");
code("}");
code("}");
code("}");
code("case SAVIOR:");
code("{");
code("switch(tooltip)");
code("{");
code("case 0:");
code("{");
code("msg = \"Savior: A high-mobility fighter that heals allies and grants them favor.\";");
code("}");
code("case 1:");
code("{");
code("msg = \"Passive: You can jump towards distant foes. When you land, stun your target.\";");
code("}");
code("case 2:");
code("{");
code("msg = \"Special Attack (3 attacks): Your spear pierces your target and hits enemies in a line.\";");
code("}");
code("case 3:");
code("{");
code("msg = \"Range: 10 | Apply on-hit effects to each enemy hit\";");
code("}");
code("case 4:");
code("{");
code("icon = \"icons\improvement heroic renewal icons 64\";");
code("msg = \"(Q) Guardian Angel: Teleport next to an ally and then heal nearby allies.\";");
code("}");
code("case 5:");
code("{");
code("icon = \"icons\improvement heroic renewal icons 64\";");
code("msg = \"You can target an area near yourself to teleport a short distance.\";");
code("}");
code("case 6:");
code("{");
code("icon = \"icons\improvement heroic renewal icons 64\";");
code("msg = \"Cooldown: 8 | Heal: 50 + 5 x distance traveled\";");
code("}");
code("case 7:");
code("{");
code("icon = \"icons\god power cease fire icon 64\";");
code("msg = \"(W) Unity: Create an aura at your cursor. Allies in the aura have 0.5x bonus magic resistance.\";");
code("}");
code("case 8:");
code("{");
code("icon = \"icons\god power cease fire icon 64\";");
code("msg = \"You have 0.5x bonus attack for each ally in the aura.\";");
code("}");
code("case 8:");
code("{");
code("icon = \"icons\god power cease fire icon 64\";");
code("msg = \"Each time you attack, heal allies in the aura and grant them 2 favor.\";");
code("}");
code("case 9:");
code("{");
code("icon = \"icons\god power cease fire icon 64\";");
code("msg = \"Cooldown: 20 | Duration: 8 | Radius: 10 | Heal: 0.5x Attack\";");
code("}");
code("case 10:");
code("{");
code("icon = \"icons\god power restoration icon 64\";");
code("msg = \"(E) Intervention: Revive all dead allies. If you die while this is ready, it auto-activates.\";");
code("}");
code("case 11:");
code("{");
code("icon = \"icons\god power restoration icon 64\";");
code("msg = \"Cost: 100 | Cooldown: 10\";");
code("next = 0;");
code("}");
code("}");
code("}");
code("case GARDENER:");
code("{");
code("switch(tooltip)");
code("{");
code("case 0:");
code("{");
code("msg = \"Gardener: A supportive archer that grows various plants to assist allies.\";");
code("}");
code("case 1:");
code("{");
code("msg = \"Passive: Your arrows drop seeds. A damaged player can consume a seed to restore health.\";");
code("}");
code("case 2:");
code("{");
code("msg = \"Heal: 30 | Duration: 15\";");
code("}");
code("case 3:");
code("{");
code("icon = \"icons\god power audrey icons 64\";");
code("msg = \"(Q) Bloodbloom: Summon a carnivorous plant with your stats at the target location.\";");
code("}");
code("case 4:");
code("{");
code("icon = \"icons\god power audrey icons 64\";");
code("msg = \"Its attacks will poison enemies and leave behind seeds.\";");
code("}");
code("case 5:");
code("{");
code("icon = \"icons\god power audrey icons 64\";");
code("msg = \"Cooldown: 15 | Decay: 8 percent per second\";");
code("}");
code("case 6:");
code("{");
code("icon = \"icons\god power uproot icon\";");
code("msg = \"(W) Stranglethorns: Cause seeds near your cursor to sprout into grasping roots that stun enemies.\";");
code("}");
code("case 7:");
code("{");
code("icon = \"icons\god power uproot icon\";");
code("msg = \"Cooldown: 12 | Range: 6 | Thorn Radius: 3 | Duration: 3 | Damage: 20 per second\";");
code("}");
code("case 8:");
code("{");
code("icon = \"icons\world berry bush icon 64\";");
code("msg = \"(E) Nature's Bounty: For a short duration, you plant Bery Bushes instead of seeds.\";");
code("}");
code("case 9:");
code("{");
code("icon = \"icons\world berry bush icon 64\";");
code("msg = \"Berry Bushes restore 4x health. Casting Stranglethorns on Berry Bushes will bring them to life.\";");
code("}");
code("case 10:");
code("{");
code("icon = \"icons\world berry bush icon 64\";");
code("msg = \"Walking Berry Bushes have half your attack and health.\";");
code("}");
code("case 11:");
code("{");
code("icon = \"icons\world berry bush icon 64\";");
code("msg = \"Cost: 60 | Duration: 12 | Heal: 120 | Decay: 4 percent per second\";");
code("next = 0;");
code("}");
code("}");
code("}");
code("case NIGHTRIDER:");
code("{");
code("switch(tooltip)");
code("{");
code("case 0:");
code("{");
code("msg = \"Nightrider: A sturdy fighter who thrives upon death of enemies and allies.\";");
code("}");
code("case 1:");
code("{");
code("msg = \"Passive: Whenever a unit dies near you, restore 5 percent health and gain 1 favor.\";");
code("}");
code("case 2:");
code("{");
code("msg = \"Special Attack (8 attacks): Curse your target with a Death Sentence.\";");
code("}");
code("case 3:");
code("{");
code("msg = \"This does not trigger if your target already has a Death Sentence.\";");
code("}");
code("case 4:");
code("{");
code("icon = \"icons\special g shade icon 64\";");
code("msg = \"Death Sentence: For a duration, the unit is poisoned and silenced and it takes double damage\";");
code("}");
code("case 5:");
code("{");
code("icon = \"icons\special g shade icon 64\";");
code("msg = \"If the cursed unit dies, the curse jumps to a nearby enemy and a Minion is summoned for you.\";");
code("}");
code("case 6:");
code("{");
code("icon = \"icons\special g shade icon 64\";");
code("msg = \"Duration: 6 | Damage: 6 | Radius: 8 | Minions have a fifth of your attack and health\";");
code("}");
code("case 7:");
code("{");
code("icon = \"icons\improvement mythic rejuvenation icons 64\";");
code("msg = \"(Q) Abduct: Summon a dark cloud that drags enemies towards you.\";");
code("}");
code("case 8:");
code("{");
code("icon = \"icons\improvement mythic rejuvenation icons 64\";");
code("msg = \"The first enemy hit is given a Death Sentence.\";");
code("}");
code("case 9:");
code("{");
code("icon = \"icons\improvement mythic rejuvenation icons 64\";");
code("msg = \"Cooldown: 15 | Range: 12\";");
code("}");
code("case 10:");
code("{");
code("icon = \"icons\god power ancestors icon 64\";");
code("msg = \"(W) Arise: Summon 3 minions and an additional one for each active Death Sentence.\";");
code("}");
code("case 11:");
code("{");
code("icon = \"icons\god power ancestors icon 64\";");
code("msg = \"(W) Arise: When you attack an enemy with a Death Sentence, reduce the cooldown of this spell by 1\";");
code("}");
code("case 12:");
code("{");
code("icon = \"icons\god power ancestors icon 64\";");
code("msg = \"Cooldown: 16 | Decay: 5 percent health\";");
code("}");
code("case 13:");
code("{");
code("icon = \"icons\god power meteor icon 64\";");
code("msg = \"(E) Nightfall: Teleport to the target location and release a cloud of darkness.\";");
code("}");
code("case 14:");
code("{");
code("icon = \"icons\god power meteor icon 64\";");
code("msg = \"Inflict a Death Sentence on all enemies hit and stun them for the same duration.\";");
code("}");
code("case 15:");
code("{");
code("icon = \"icons\god power meteor icon 64\";");
code("msg = \"Cost: 75 | Radius: 15\";");
code("next = 0;");
code("}");
code("}");
code("}");
code("case STARSEER:");
code("{");
code("switch(tooltip)");
code("{");
code("case 0:");
code("{");
code("msg = \"Starseer: A ranged fighter with a unique attack mechanism.\";");
code("}");
code("case 1:");
code("{");
code("msg = \"Passive: Your attack deals zero damage. Instead, three stars orbit around you, damaging enemies.\";");
code("}");
code("case 2:");
code("{");
code("msg = \"Damage: 60 | Rotation speed + 0.33x projectiles\";");
code("}");
code("case 3:");
code("{");
code("icon = \"icons\god power thunder clap icons 64\";");
code("msg = \"(Q) Repel: Launch nearby enemies away from you.\";");
code("}");
code("case 4:");
code("{");
code("icon = \"icons\god power thunder clap icons 64\";");
code("msg = \"Cooldown: 15 | Range: 15\";");
code("}");
code("case 5:");
code("{");
code("icon = \"icons\god power vision icon 64\";");
code("msg = \"(W) Realignment: Change the radius of your stars to match your cursor.\";");
code("}");
code("case 6:");
code("{");
code("icon = \"icons\god power vision icon 64\";");
code("msg = \"The closer they are, the faster you move.\";");
code("}");
code("case 7:");
code("{");
code("icon = \"icons\god power vision icon 64\";");
code("msg = \"Cooldown: 5 | Range: 2 - 15 | Speed: 1.5x - 0.5x\";");
code("}");
code("case 8:");
code("{");
code("icon = \"icons\god power eclipse icon 64\";");
code("msg = \"(E) Event Horizon: Your stars rotate at double speed and stun enemies.\";");
code("}");
code("case 9:");
code("{");
code("icon = \"icons\god power eclipse icon 64\";");
code("msg = \"Cost: 60 | Duration: 10\";");
code("next = 0;");
code("}");
code("}");
code("}");
code("case SPARKWITCH:");
code("{");
code("switch(tooltip)");
code("{");
code("case 0:");
code("{");
code("msg = \"Spark Witch: A powerful spellcaster who excels at destroying mobs of enemies.\";");
code("}");
code("case 1:");
code("{");
code("msg = \"Passive: Your attack shoots lightning that deals magic damage and bounces between enemies.\";");
code("}");
code("case 2:");
code("{");
code("msg = \"Lightning can bounce to yourself if there are no nearby targets (Doesn't deal damage to yourself)\";");
code("}");
code("case 3:");
code("{");
code("msg = \"Bounce range increased by Range. Each time you cast a spell, your next attack gains +1 bounce.\";");
code("}");
code("case 4:");
code("{");
code("msg = \"Bounce Range: 10 | Damage: 100 | Bounces: Projectiles + Spells Cast\";");
code("}");
code("case 5:");
code("{");
code("icon = \"icons\god power bolt icon 64\";");
code("msg = \"(Q) Thunderstrike: Lightning deals damage in an area. Cooldown reduced by 1 for each enemy hit\";");
code("}");
code("case 6:");
code("{");
code("icon = \"icons\god power bolt icon 64\";");
code("msg = \"Cooldown: 12 | Radius: 6 | Damage: 60\";");
code("}");
code("case 7:");
code("{");
code("icon = \"icons\special x lampades icons 64\";");
code("msg = \"(W) Hexbolt: Your next attack applies a special effect. It changes each time you cast this spell\";");
code("}");
code("case 8:");
code("{");
code("icon = \"sfx g arkantos flash\";");
code("msg = \"Electrify: Electrocutes your targets, dealing area damage per second.\";");
code("}");
code("case 9:");
code("{");
code("icon = \"icons\god power curse icon 64\";");
code("msg = \"Polymorph: Transforms your targets into pigs with 0 attack and armor.\";");
code("}");
code("case 10:");
code("{");
code("icon = \"icons\special x lampades icons 64\";");
code("msg = \"Cooldown: 18 | Duration: 6 | Electrify Damage: 30 per second\";");
code("}");
code("case 11:");
code("{");
code("icon = \"sfx x arkantos birth ring\";");
code("msg = \"(E) Vortex: Create a storm that pulls in nearby enemies and stuns them.\";");
code("}");
code("case 12:");
code("{");
code("icon = \"sfx x arkantos birth ring\";");
code("msg = \"Cost: 80 | Range: 12\";");
code("next = 0;");
code("}");
code("}");
code("}");
code("case GAMBLER:");
code("{");
code("switch(tooltip)");
code("{");
code("case 0:");
code("{");
code("msg = \"Gambler: A luck-based caster with a wide variety of spells.\";");
code("}");
code("case 1:");
code("{");
code("msg = \"Passive: You cannot attack. Your basic spells have three variations.\";");
code("}");
code("case 2:");
code("{");
code("msg = \"After you cast a basic spell, it will randomly switch to one of its other variations.\";");
code("}");
code("case 3:");
code("{");
code("icon = \"icons\improvement engineers icon 64\";");
code("msg = \"(Q) Loaded Dice: Throw a dice at your cursor with a special effect.\";");
code("}");
code("case 4:");
code("{");
code("icon = \"icons\improvement engineers icon 64\";");
code("msg = \"Loaded Dice: COPY: Summon a copy of the first enemy hit by the dice. (excluding bosses)\";");
code("}");
code("case 5:");
code("{");
code("icon = \"icons\improvement engineers icon 64\";");
code("msg = \"Loaded Dice: EXPLODE: The dice explodes and deals damage in an area.\";");
code("}");
code("case 6:");
code("{");
code("icon = \"icons\improvement engineers icon 64\";");
code("msg = \"Loaded Dice: HEAL: The dice heals allies that it passes through and grants them favor.\";");
code("}");
code("case 7:");
code("{");
code("icon = \"icons\improvement engineers icon 64\";");
code("msg = \"Cooldown: 6 | Decay: 4 | Radius: 6 | Damage: 100 | Heal: 100 | Favor: 4\";");
code("}");
code("case 8:");
code("{");
code("icon = \"icons\improvement architects icon 64\";");
code("msg = \"(W) Gimmick Deck: Play a card with a special effect.\";");
code("}");
code("case 9:");
code("{");
code("icon = \"icons\improvement architects icon 64\";");
code("msg = \"Gimmick Deck: BURN: Create a circle of fire that damages enemies each second.\";");
code("}");
code("case 10:");
code("{");
code("icon = \"icons\improvement architects icon 64\";");
code("msg = \"Gimmick Deck: BURN: Damage is increased by the number of allies in the circle.\";");
code("}");
code("case 11:");
code("{");
code("icon = \"icons\improvement architects icon 64\";");
code("msg = \"Gimmick Deck: FREEZE: Stun enemies at the target location.\";");
code("}");
code("case 12:");
code("{");
code("icon = \"icons\improvement architects icon 64\";");
code("msg = \"Gimmick Deck: RELICS: Give an allied player bonuses from all your relics.\";");
code("}");
code("case 13:");
code("{");
code("icon = \"icons\improvement architects icon 64\";");
code("msg = \"Cooldown: 12 | Radius: 6 | Duration: 6 | Damage: 20 + 10 per ally\";");
code("}");
code("case 14:");
code("{");
code("icon = \"icons\god power plenty icon 64\";");
code("msg = \"(E) Gamble: Get a random number from 1-6. Your next spell is multiplied by that amount.\";");
code("}");
code("case 15:");
code("{");
code("icon = \"icons\god power plenty icon 64\";");
code("msg = \"Cost: 30\";");
code("next = 0;");
code("}");
code("}");
code("}");
code("}");
code("trShowImageDialog(icon, msg);");
code("return(next);");
code("}");

code("string className(int class = 0) {");
code("string name = \"number: \" + class;");
code("switch(class)");
code("{");
code("case MOONBLADE:");
code("{");
code("name = \"Moonblade\";");
code("}");
code("case SUNBOW:");
code("{");
code("name = \"Sunbow\";");
code("}");
code("case THUNDERRIDER:");
code("{");
code("name = \"Thunderstepper\";");
code("}");
code("case FIREKNIGHT:");
code("{");
code("name = \"Fire Knight\";");
code("}");
code("case BLASTMAGE:");
code("{");
code("name = \"Blastmage\";");
code("}");
code("case STORMCUTTER:");
code("{");
code("name = \"Stormcutter\";");
code("}");
code("case ALCHEMIST:");
code("{");
code("name = \"Alchemist\";");
code("}");
code("case SPELLSTEALER:");
code("{");
code("name = \"Spellstealer\";");
code("}");
code("case COMMANDO:");
code("{");
code("name = \"Commando\";");
code("}");
code("case THRONESHIELD:");
code("{");
code("name = \"Throne Shield\";");
code("}");
code("case SAVIOR:");
code("{");
code("name = \"Savior\";");
code("}");
code("case GARDENER:");
code("{");
code("name = \"Gardener\";");
code("}");
code("case NIGHTRIDER:");
code("{");
code("name = \"Nightrider\";");
code("}");
code("case STARSEER:");
code("{");
code("name = \"Starseer\";");
code("}");
code("case SPARKWITCH:");
code("{");
code("name = \"Spark Witch\";");
code("}");
code("case GAMBLER:");
code("{");
code("name = \"Gambler\";");
code("}");
code("}");
code("return(name);");
code("}");


code("void explainClass(int class = 0) {");
code("trQuestVarSet(\"explain\", 0);");
code("trQuestVarSet(\"pleaseExplain\", class);");
code("xsEnableRule(\"class_shop_explain_01\");");
code("}");

code("rule class_shop_always");
code("inactive");
code("highFrequency");
code("{");
code("int class = 0;");
code("for(i=2; >0) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"choice\"+i+\"unit\");");
code("if (trUnitIsSelected()) {");
code("trQuestVarSet(\"choice\"+i+\"selected\", 1);");
code("trQuestVarSet(\"pleaseExplain\", i);");
code("trQuestVarSet(\"explain\", 0);");
code("trDelayedRuleActivation(\"class_shop_explain_01\");");
code("reselectMyself();");
code("}");
code("vector pos = kbGetBlockPosition(\"\"+1*trQuestVarGet(\"choice\"+i+\"unit\"));");
code("for (p=1; < ENEMY_PLAYER) {");
code("vector playerpos = kbGetBlockPosition(\"\"+xGetInt(dPlayerData,xPlayerUnit,p),true);");
code("if (distanceBetweenVectors(playerpos,pos) < 5) {");
code("if (trQuestVarGet(\"p\"+p+\"buy\"+i) < 4 &&");
code("trTimeMS() > trQuestVarGet(\"p\"+p+\"buyNext\") &&");
code("trQuestVarGet(\"p\"+p+\"noob\") == 1) {");
code("trQuestVarSet(\"p\"+p+\"buy\"+i, trQuestVarGet(\"p\"+p+\"buy\"+i) + 1);");
code("trQuestVarSet(\"p\"+p+\"buyNext\", trTimeMS() + 1000);");
code("class = i;");
code("if (trQuestVarGet(\"p\"+p+\"buy\"+i) == 4) {");
code("trQuestVarSet(\"p\"+p+\"buy\"+i, 5);");
code("chooseClass(p, class);");
code("if (trCurrentPlayer() == p) {");
code("trChatSend(0, \"You have switched to the \" + className(class) + \" class!\");");
code("}");
code("trSoundPlayFN(\"ui\thunder5.wav\",\"1\",-1,\"\",\"\");");
code("} else if (trCurrentPlayer() == p) {");
code("trChatSend(0,\"<color=1,1,1>Switching to \"+className(class)+\" in \"+(4-trQuestVarGet(\"p\"+p+\"buy\"+i))+\"...\");");
code("}");
code("}");
code("} else {");
code("trQuestVarSet(\"p\"+p+\"buy\"+i, 0);");
code("}");
code("}");
code("}");
code("}");

code("rule class_shop_explain_01");
code("inactive");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("int i = trQuestVarGet(\"pleaseExplain\");");
code("trQuestVarSet(\"explain\",");
code("displayNextTooltip(i, 1*trQuestVarGet(\"explain\")));");
code("trDelayedRuleActivation(\"class_shop_explain_02\");");
code("}");

code("rule class_shop_explain_02");
code("inactive");
code("highFrequency");
code("{");
code("int i = trQuestVarGet(\"pleaseExplain\");");
code("if (trIsGadgetVisible(\"ShowImageBox\") == false) {");
code("if (trQuestVarGet(\"explain\") > 0) {");
code("trDelayedRuleActivation(\"class_shop_explain_01\");");
code("}");
code("xsDisableSelf();");
code("}");
code("}");
code("const int ABILITY_READY = 0;");
code("const int ABILITY_COOLDOWN = 1;");
code("const int ABILITY_COST = 2;");

code("const int ON_HIT_NONE = 0;");
code("const int ON_HIT_JUMP = 1;");
code("const int ON_HIT_ATTACKING = 2;");
code("const int ON_HIT_NORMAL = 3;");
code("const int ON_HIT_SPECIAL = 4;");

code("const int PROJ_NONE = 0;");
code("const int PROJ_GROUND = 1;");
code("const int PROJ_FALLING = 2;");
code("const int PROJ_BOUNCE = 3;");
code("const int PROJ_REMOVE = 4;");

code("const int STATUS_NONE = 0;");
code("const int STATUS_STUN = 1;");
code("const int STATUS_POISON = 2;");
code("const int STATUS_SILENCE = 3;");

code("string wellName = \"\";");
code("string lureName = \"\";");
code("string rainName = \"\";");

code("bool wellIsUltimate = false;");
code("bool rainIsUltimate = false;");
code("bool lureIsUltimate = false;");

code("int spysearch = 0;");
code("int spyreset = 0;");
code("int spyProto = 0;");
code("int spyUnit = 1;");
code("int spyDest = 2;");
code("int spyScale = 3;");
code("int spyActive = 4;");

code("int boss = 0;");
code("int bossUnit = 0;");
code("int bossID = 0;");
code("int bossPointer = 0;");
code("int bossCooldownTime = 0;");
code("int bossNext = 0;");
code("int bossTimeout = 0;");
code("int bossCount = 0;");
code("int bossTarget = 0;");
code("float bossScale = 0;");
code("float bossAngle = 0;");
code("bool bossAnim = false;");

code("vector bossPos = vector(0,0,0);");
code("vector bossTargetPos = vector(0,0,0);");
code("vector bossDir = vector(0,0,0);");
code("vector bossPrev = vector(0,0,0);");

code("int nextproj = 0;");

code("rule initialize_spy_database");
code("active");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("xsSetContextPlayer(0);");
code("modularCounterInit(\"spyFind\", 63);");
code("modularCounterInit(\"spyFound\", 63);");
code("spyProto = zNewArray(mInt,64,\"spyProto\");");
code("spyUnit = zNewArray(mInt,64,\"spyUnit\");");
code("spyDest = zNewArray(mVector,64,\"spyDest\");");
code("spyScale = zNewArray(mVector,64,\"spyScale\");");
code("spyActive = zNewArray(mBool,64,\"spyActive\");");
code("}");

code("void advanceCooldowns(int p = 0, float seconds = 0) {");
code("int diff = 0;");
code("xSetPointer(dPlayerData,p);");
code("if (xGetInt(dPlayerData,xPlayerWellCooldownStatus) == ABILITY_COOLDOWN) {");
code("xSetInt(dPlayerData,xPlayerWellCooldown, xGetInt(dPlayerData,xPlayerWellCooldown) - 1000 * seconds);");
code("diff = (xGetInt(dPlayerData,xPlayerWellCooldown) - trTimeMS()) / 1000;");
code("if (diff > 0 && trCurrentPlayer() == p) {");
code("trCounterAbort(\"well\");");
code("trCounterAddTime(\"well\",diff,0,wellName, -1);");
code("}");
code("}");
code("if (xGetInt(dPlayerData,xPlayerRainCooldownStatus) == ABILITY_COOLDOWN) {");
code("xSetInt(dPlayerData,xPlayerRainCooldown, xGetInt(dPlayerData,xPlayerRainCooldown) - 1000 * seconds);");
code("diff = (xGetInt(dPlayerData,xPlayerRainCooldown) - trTimeMS()) / 1000;");
code("if (diff > 0 && trCurrentPlayer() == p) {");
code("trCounterAbort(\"rain\");");
code("trCounterAddTime(\"rain\",diff,0,rainName, -1);");
code("}");
code("}");
code("if (xGetInt(dPlayerData,xPlayerLureCooldownStatus) == ABILITY_COOLDOWN) {");
code("xSetInt(dPlayerData,xPlayerLureCooldown, xGetInt(dPlayerData,xPlayerLureCooldown) - 1000 * seconds);");
code("diff = (xGetInt(dPlayerData,xPlayerLureCooldown) - trTimeMS()) / 1000;");
code("if (diff > 0 && trCurrentPlayer() == p) {");
code("trCounterAbort(\"lure\");");
code("trCounterAddTime(\"lure\",diff,0,lureName, -1);");
code("}");
code("}");
code("}");

code("void gainFavor(int p = 0, float amt = 0) {");
code("xSetFloat(dPlayerData,xPlayerFavor,xsMax(0, xGetFloat(dPlayerData,xPlayerFavor,p) + amt),p);");
code("if (xGetInt(dPlayerData,xPlayerGodBoon,p) == BOON_DOUBLE_FAVOR) {");
code("xSetFloat(dPlayerData,xPlayerFavor,xsMin(200, xGetFloat(dPlayerData,xPlayerFavor,p)),p);");
code("} else {");
code("xSetFloat(dPlayerData,xPlayerFavor,xsMin(100, xGetFloat(dPlayerData,xPlayerFavor,p)),p);");
code("}");
code("trPlayerGrantResources(p,\"favor\", xGetFloat(dPlayerData,xPlayerFavor,p) - trPlayerResourceCount(p, \"favor\"));");
code("}");

code("void spyEffect(int unit = 0, int proto = 0, vector dest = vector(0,0,0), vector scale = vector(1,1,1)) {");
code("if (peekModularCounterNext(\"spyFind\") != trQuestVarGet(\"spyFound\")) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+unit, true);");
code("if (trUnitAlive()) {");
code("int x = modularCounterNext(\"spyFind\");");
code("aiPlanSetUserVariableInt(ARRAYS,spyProto,x,proto);");
code("aiPlanSetUserVariableInt(ARRAYS,spyUnit,x,unit);");
code("aiPlanSetUserVariableBool(ARRAYS,spyActive,x,true);");
code("aiPlanSetUserVariableVector(ARRAYS,spyDest,x,dest);");
code("aiPlanSetUserVariableVector(ARRAYS,spyScale,x,scale);");
code("trTechInvokeGodPower(0, \"spy\", vector(0,0,0), vector(0,0,0));");
code("}");
code("} else {");
code("debugLog(\"Spy buffer overflow\");");
code("}");
code("}");

code("float distanceTraveled(int last = 0, float speed = 0) {");
code("float dist = trTimeMS() - last;");
code("dist = dist * 0.001 * speed;");
code("return(dist);");
code("}");

code("vector vectorSetAsCurrentPosition(vector prev = vector(0,0,0),vector dir = vector(0,0,0), float dist = 0) {");
code("vector v = xsVectorSet(xsVectorGetX(prev) + dist * xsVectorGetX(dir),0,xsVectorGetZ(prev) + dist * xsVectorGetZ(dir));");
code("return(v);");
code("}");


code("void silencePlayer(int p = 0) {");
code("if ((trQuestVarGet(\"p\"+p+\"negationCloak\") == 1) && (xGetInt(dPlayerData,xPlayerDead,p) == 0)) {");
code("if (getBit(STATUS_SILENCE, 1*trQuestVarGet(\"p\"+p+\"spellstealStatus\")) == false) {");
code("trQuestVarSet(\"p\"+p+\"spellstealStatus\", trQuestVarGet(\"p\"+p+\"spellstealStatus\") + xsPow(2, STATUS_SILENCE));");
code("trSoundPlayFN(\"shadeofhadesgrunt2.wav\",\"1\",-1,\"\",\"\");");
code("gainFavor(p, 5);");
code("if (trCurrentPlayer() == p) {");
code("trChatSend(0, \"<color=1,1,1>Silence absorbed! Your next spell will inflict Silence!</color>\");");
code("}");
code("}");
code("} else {");
code("if (xGetBool(dPlayerData, xPlayerSilenced, p) == false) {");
code("xSetBool(dPlayerData, xPlayerSilenced, true, p);");
code("if (xGetInt(dPlayerData, xPlayerDead, p) == 0) {");
code("trSoundPlayFN(\"frostgiantmove1.wav\",\"1\",-1,\"\",\"\");");
code("trChatSend(0, \"<color={Playercolor(\"+p+\")}>{Playername(\"+p+\")}</color> has been silenced!\");");
code("}");
code("trPlayerKillAllGodPowers(p);");
code("if (trCurrentPlayer() == p) {");
code("trCounterAbort(\"lure\");");
code("trCounterAbort(\"well\");");
code("trCounterAbort(\"rain\");");
code("trCounterAddTime(\"silence\", -1, -9999, \"SILENCED\");");
code("}");
code("}");
code("}");
code("}");

code("void silenceUnit(int db = 0, float duration = 9.0, int p = 0) {");
code("xSetPointer(dPlayerData,p);");
code("if (p > 0 && p < ENEMY_PLAYER) {");
code("duration = duration * xGetFloat(dPlayerData,xPlayerSpellDuration);");
code("if (xGetInt(dPlayerData,xPlayerGodBoon) == BOON_STATUS_COOLDOWNS) {");
code("advanceCooldowns(p, 1);");
code("}");
code("if (PvP) {");
code("int old = xGetPointer(dPlayerUnits);");
code("if (xSetPointer(dPlayerUnits, 1*xGetInt(dEnemies, xDoppelganger))) {");
code("silenceUnit(dPlayerUnits, duration);");
code("}");
code("xSetPointer(dPlayerUnits, old);");
code("return;");
code("}");
code("} else {");
code("p = xGetInt(db, xPlayerOwner);");
code("xSetPointer(dPlayerData,p);");
code("duration = duration * xGetFloat(dPlayerData,xPlayerSilenceResistance);");
code("if (xGetInt(dPlayerData,xPlayerUnit) == xGetInt(db,xUnitName)) {");
code("silencePlayer(p);");
code("}");
code("}");
code("duration = duration * 1000;");
code("if (trTimeMS() + duration > xGetInt(db, xSilenceTimeout)) {");
code("xSetInt(db, xSilenceTimeout, trTimeMS() + duration);");
code("}");
code("if (xGetInt(db,xUnitName) == bossUnit) {");
code("if (trTimeMS() + duration > bossCooldownTime) {");
code("bossCooldownTime = trTimeMS() + duration;");
code("}");
code("}");
code("if (xGetInt(db, xSilenceStatus) == 0) {");
code("xSetInt(db, xSilenceStatus, 1);");
code("if (kbGetBlockID(\"\"+1*xGetInt(db, xSilenceSFX)) == -1) {");
code("spyEffect(xGetInt(db,xUnitName),kbGetProtoUnitID(\"UI Range Indicator Egypt SFX\"),");
code("xsVectorSet(db,xSilenceSFX,xGetPointer(db)));");
code("} else {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(db, xSilenceSFX), true);");
code("trUnitChangeProtoUnit(\"UI Range Indicator Egypt SFX\");");
code("xUnitSelectByID(db,xUnitID);");
code("}");
code("}");
code("}");

code("void healUnit(int p = 0, float amt = 0, int index = -1) {");
code("int old = xGetPointer(dPlayerUnits);");
code("if (index < 0) {");
code("index = old;");
code("}");
code("if (xSetPointer(dPlayerUnits, index)) {");
code("amt = amt * xGetFloat(dPlayerData,xPlayerHealBoost,p);");
code("if (xGetInt(dPlayerUnits, xPoisonStatus) == 0) {");
code("trDamageUnit(0.0 - amt);");
code("}");
code("xSetPointer(dPlayerUnits, old);");
code("}");
code("}");

code("void nightriderHarvest(vector pos = vector(0,0,0)) {");
code("int index = xGetPointer(dPlayerUnits);");
code("for(p=1; < ENEMY_PLAYER) {");
code("xSetPointer(dPlayerData,p);");
code("if ((xGetInt(dPlayerData,xPlayerClass) == NIGHTRIDER) &&");
code("(xGetInt(dPlayerData,xPlayerDead) == 0)) {");
code("if (unitDistanceToVector(xGetInt(dPlayerData,xPlayerUnit), pos) < 144) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData,xPlayerUnit),true);");
code("xSetPointer(dPlayerUnits, xGetInt(dPlayerData,xPlayerIndex));");
code("healUnit(p, 0.05 * xGetFloat(dPlayerData,xPlayerHealth) * xGetFloat(dPlayerData,xPlayerSpellDamage));");
code("gainFavor(p, 1);");
code("}");
code("}");
code("}");
code("xSetPointer(dPlayerUnits,index);");
code("}");

code("void removeEnemy() {");
code("if (PvP == false) {");
code("int bounty = xGetInt(dEnemies, xBounty);");
code("vector pos = xGetVector(dEnemies,xUnitPos);");
code("nightriderHarvest(pos);");
code("if (bounty > 0) {");
code("trQuestVarSetFromRand(\"rand\", 1, bounty, true);");
code("for(p=1; <ENEMY_PLAYER) {");
code("if (Multiplayer) {");
code("xSetInt(dPlayerData,xPlayerGold,xGetInt(dPlayerData,xPlayerGold,p) + bounty, p);");
code("trPlayerGrantResources(p, \"Gold\", bounty);");
code("if (xGetInt(dPlayerData,xPlayerGodBoon,p) == BOON_MORE_GOLD) {");
code("xSetInt(dPlayerData,xPlayerGold,xGetInt(dPlayerData,xPlayerGold,p) + bounty, p);");
code("trPlayerGrantResources(p, \"Gold\", bounty);");
code("}");
code("}");
code("gainFavor(p, trQuestVarGet(\"rand\"));");
code("}");
code("}");
code("if (xGetInt(dEnemies, xDropRelic) > 0) {");
code("if (xGetInt(dEnemies, xDropRelic) <= 10) {");
code("spawnRelicClosest(pos, xGetInt(dEnemies, xDropRelic));");
code("} else {");
code("spawnRelicSpecific(pos, xGetInt(dEnemies, xDropRelic));");
code("}");
code("}");
code("xFreeDatabaseBlock(dEnemies);");
code("}");
code("}");

code("void removePlayerUnit() {");
code("vector pos = xGetVector(dPlayerUnits,xUnitPos);");
code("nightriderHarvest(pos);");
code("xFreeDatabaseBlock(dPlayerUnits);");
code("}");

code("void removePlayerCharacter() {");
code("xFreeDatabaseBlock(dPlayerCharacters);");
code("}");

code("void removePlayerSpecific(int p = 0) {");
code("int db = getCharactersDB(p);");
code("int relics = getRelicsDB(p);");
code("if (xGetInt(db,xUnitName) == xGetInt(dPlayerData,xPlayerUnit,p)) {");
code("vector pos = kbGetBlockPosition(\"\"+xGetInt(dPlayerData,xPlayerUnit));");
code("trVectorQuestVarSet(\"dead\"+p+\"pos\",pos);");
code("for(x=xGetDatabaseCount(relics); >0) {");
code("xDatabaseNext(relics);");
code("xUnitSelect(relics, xRelicName);");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");
code("}");
code("xSetInt(dPlayerData,xPlayerDead,10);");
code("trQuestVarSet(\"deadPlayerCount\", 1 + trQuestVarGet(\"deadPlayerCount\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData,xPlayerUnit,p),true);");
code("if (PvP == false) {");
code("trUnitOverrideAnimation(6,0,false,false,-1);");
code("trSoundPlayFN(\"aherohasfallen.wav\",\"1\",-1,\"\",\"\");");
code("trMessageSetText(trStringQuestVarGet(\"p\"+p+\"name\") + \" has fallen! Clear nearby enemies to revive them!\");");
code("trQuestVarSet(\"p\"+p+\"reviveBeam\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"\"+p+\",0\");");
code("trUnitChangeProtoUnit(\"Healing SFX\");");
code("} else {");
code("trUnitChangeProtoUnit(kbGetProtoUnitName(xGetInt(dClass,xClassProto,xGetInt(dPlayerData,xPlayerClass,p))));");
code("}");
code("silencePlayer(p);");
code("xSetInt(dPlayerData, xPlayerTether, 0);");
code("if (xGetInt(dPlayerData,xPlayerSimp,p) > 0) {");
code("int simp = xGetInt(dPlayerData,xPlayerSimp,p);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xPlayerTether, simp), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");
code("xSetInt(dPlayerData,xPlayerQueen,0,simp);");
code("xSetInt(dPlayerData,xPlayerSimp,0,p);");
code("}");
code("}");
code("xFreeDatabaseBlock(db);");
code("}");

code("void equipRelicsAgain(int p = 0) {");
code("int db = getRelicsDB(p);");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(db,xRelicName),true);");
code("trUnitChangeProtoUnit(\"Relic\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(db,xRelicName),true);");
code("trImmediateUnitGarrison(\"\"+xGetInt(dPlayerData,xPlayerUnit,p));");
code("trMutateSelected(relicProto(xGetInt(db,xRelicType)));");
code("if (xGetInt(db,xRelicType) < KEY_RELICS) {");
code("trSetSelectedScale(0,0,-1);");
code("trUnitSetAnimationPath(\"1,0,1,1,0,0,0\");");
code("}");
code("}");
code("}");

code("vector wallNormalVector(vector v = vector(0,0,0)) {");
code("vector retVal = vector(1,0,0);");
code("vector pos = vector(0,0,0);");
code("for(x=0; <4) {");
code("pos = xsVectorSet(xsVectorGetX(v) + trQuestVarGet(\"rotX\"+x),0,xsVectorGetZ(v) + trQuestVarGet(\"rotZ\"+x));");
code("if (terrainIsType(pos, TERRAIN_WALL, TERRAIN_SUB_WALL) == false) {");
code("retVal = xsVectorSet(trQuestVarGet(\"rotX\"+x),0,trQuestVarGet(\"rotZ\"+x));");
code("}");
code("}");

code("return(retVal);");
code("}");

code("bool rayCollision(int db = 0, vector start = vector(0,0,0), vector dir = vector(1,0,0),");
code("float dist = 0, float width = 0) {");
code("vector pos = kbGetBlockPosition(\"\"+xGetInt(db,xUnitName),true);");
code("float current = distanceBetweenVectors(pos, start, false);");
code("if (current < dist) {");
code("vector hitbox = xsVectorSet(xsVectorGetX(start) + current * xsVectorGetX(dir),0,");
code("xsVectorGetZ(start) + current * xsVectorGetZ(dir));");
code("if (distanceBetweenVectors(pos, hitbox, true) < width) {");
code("return(true);");
code("}");
code("}");
code("return(false);");
code("}");

code("vector getBounceDir(vector pos = vector(0,0,0), vector loc = vector(0,0,0), vector dir = vector(0,0,0)) {");
code("bool bounced = false;");
code("int xMod = 1;");
code("int zMod = 1;");
code("if (xsVectorGetX(dir) < 0) {");
code("xMod = -1;");
code("}");
code("if (xsVectorGetZ(dir) < 0) {");
code("zMod = -1;");
code("}");
code("vector ret = dir;");
code("vector horizontal = xsVectorSetX(loc,xsVectorGetX(loc) - xMod);");
code("vector vertical = xsVectorSetZ(loc,xsVectorGetZ(loc) - zMod);");
code("if (terrainIsType(horizontal, TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("ret = xsVectorSetZ(ret, 0.0 - xsVectorGetZ(dir));");
code("bounced = true;");
code("}");
code("if (terrainIsType(vertical, TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("ret = xsVectorSetX(ret, 0.0 - xsVectorGetX(dir));");
code("bounced = true;");
code("}");
code("if (bounced == false) {");
code("vector a = (pos - (loc * 2)) / 2;");
code("vector b = xsVectorSet((1 - xMod) / 2,0,(1 - zMod) / 2);");
code("b = dir + xsVectorNormalize(b - a);");
code("if (xsVectorGetX(b) * xsVectorGetX(dir) < 0) {");
code("ret = xsVectorSetZ(ret, 0.0 - xsVectorGetZ(ret));");
code("} else {");
code("ret = xsVectorSetX(ret, 0.0 - xsVectorGetX(ret));");
code("}");
code("}");
code("return(ret);");
code("}");

code("vector vectorSetAsTargetVector(vector from = vector(0,0,0), vector to = vector(0,0,0), float dist = 40.0) {");
code("vector dir = getUnitVector(from, to, dist);");
code("vector target = xsVectorSet(xsVectorGetX(dir) + xsVectorGetX(from), 0, xsVectorGetZ(dir) + xsVectorGetZ(from));");

code("float scale = 0;");
code("if (xsVectorGetX(target) < 0) {");
code("scale = xsVectorGetX(target) / (xsVectorGetX(target) - xsVectorGetX(from));");
code("target = xsVectorSet(0,0, xsVectorGetZ(target) + scale * (xsVectorGetZ(from) - xsVectorGetZ(target)));");
code("} else if (xsVectorGetX(target) > DIMENSION_X) {");
code("scale = (xsVectorGetX(target) - DIMENSION_X) / (xsVectorGetX(target) - xsVectorGetX(from));");
code("target = xsVectorSet(DIMENSION_X,0,xsVectorGetZ(target) + scale * (xsVectorGetZ(from) - xsVectorGetZ(target)));");
code("}");

code("if (xsVectorGetZ(target) < 0) {");
code("scale = xsVectorGetZ(target) / (xsVectorGetZ(target) - xsVectorGetZ(from));");
code("target = xsVectorSet(xsVectorGetX(target) + scale * (xsVectorGetX(from) - xsVectorGetX(target)),0,0);");
code("} else if (xsVectorGetZ(target) > DIMENSION_Z) {");
code("scale = (xsVectorGetZ(target) - DIMENSION_Z) / (xsVectorGetZ(target) - xsVectorGetZ(from));");
code("target = xsVectorSet(xsVectorGetX(target) + scale * (xsVectorGetX(from) - xsVectorGetX(target)),0,DIMENSION_Z);");
code("}");
code("return(target);");
code("}");

code("void poisonUnit(int db = 0, float duration = 0, float damage = 0, int p = 0) {");
code("bool targetPlayers = (p == 0) || (p == ENEMY_PLAYER);");
code("if (p > 0 && p < ENEMY_PLAYER) {");
code("xSetPointer(dPlayerData,p);");
code("if (xGetInt(dPlayerData,xPlayerGodBoon) == BOON_STATUS_COOLDOWNS) {");
code("advanceCooldowns(p, 1);");
code("}");
code("duration = duration * xGetFloat(dPlayerData,xPlayerSpellDuration) * xsPow(0.5, xGetInt(dPlayerData,xPlayerPoisonSpeed));");
code("damage = damage * xGetFloat(dPlayerData,xPlayerSpellDamage) * xsPow(2, xGetInt(dPlayerData,xPlayerPoisonSpeed));");
code("if (PvP) {");
code("int old = xGetPointer(dPlayerUnits);");
code("if (xSetPointer(dPlayerUnits, xGetInt(dEnemies, xDoppelganger))) {");
code("poisonUnit(dPlayerUnits, duration, damage, 0);");
code("}");
code("xSetPointer(dPlayerUnits, old);");
code("return;");
code("}");
code("} else {");
code("p = xGetInt(db, xPlayerOwner);");
code("xSetPointer(dPlayerData,p);");
code("duration = duration * xGetFloat(dPlayerData,xPlayerPoisonResistance);");
code("}");
code("duration = duration * 1000;");
code("if (targetPlayers && xGetBool(db, xIsHero) && (trQuestVarGet(\"p\"+p+\"negationCloak\") == 1)) {");
code("if (getBit(STATUS_POISON, 1*trQuestVarGet(\"p\"+p+\"spellstealStatus\")) == false) {");
code("trQuestVarSet(\"p\"+p+\"spellstealStatus\", trQuestVarGet(\"p\"+p+\"spellstealStatus\") + xsPow(2, STATUS_POISON));");
code("trSoundPlayFN(\"shadeofhadesgrunt2.wav\",\"1\",-1,\"\",\"\");");
code("gainFavor(p, 5);");
code("if (trCurrentPlayer() == p) {");
code("trChatSend(0, \"<color=1,1,1>Poison absorbed! Your next spell will inflict Poison!</color>\");");
code("}");
code("}");
code("} else if (trTimeMS() + duration > xGetInt(db, xPoisonTimeout)) {");
code("if (xGetInt(db, xPoisonStatus) == 0) {");
code("if (xGetInt(db, xPoisonSFX) == 0) {");
code("spyEffect(xGetInt(db, xUnitName), kbGetProtoUnitID(\"Poison SFX\"), xsVectorSet(db,xPoisonSFX,xGetPointer(db)));");
code("} else {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(db,xPoisonSFX), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Poison SFX\"));");
code("}");
code("xSetInt(db,xPoisonStatus,1);");
code("xSetInt(db,xPoisonLast,trTimeMS());");
code("trQuestVarSet(\"poisonSound\", 1);");
code("}");
code("xSetInt(db, xPoisonTimeout, trTimeMS() + duration);");
code("if (damage > xGetFloat(db, xPoisonDamage)) {");
code("xSetFloat(db, xPoisonDamage, damage);");
code("}");
code("}");

code("}");


code("void growFrostGiantsIncoming(vector pos = vector(0,0,0)) {");
code("for(x=xGetDatabaseCount(dFrostGiantsIncoming); >0) {");
code("xDatabaseNext(dFrostGiantsIncoming);");
code("if (unitDistanceToVector(xGetInt(dFrostGiantsIncoming,xUnitName), pos) < 100) {");
code("xUnitSelect(dFrostGiantsIncoming,xUnitName);");
code("trUnitHighlight(0.5, false);");
code("if (xGetFloat(dFrostGiantsIncoming, xFrostTargetSize) < 5) {");
code("trQuestVarSet(\"frostGiantIncomingSound\", 1);");
code("xSetFloat(dFrostGiantsIncoming, xFrostTargetSize, 2 + xGetFloat(dFrostGiantsIncoming, xFrostTargetSize));");
code("xSetInt(dFrostGiantsIncoming, xFrostTargetTime,");
code("xsMax(trTimeMS(), xGetInt(dFrostGiantsIncoming, xFrostTargetTime)) + 1000);");
code("}");
code("}");
code("}");
code("}");

code("void damagePlayerUnit(float dmg = 0, int index = -1) {");
code("int old = xGetPointer(dPlayerUnits);");
code("if (index < 0) {");
code("index = old;");
code("}");
code("if (xSetPointer(dPlayerUnits, index)) {");
code("int p = xGetInt(dPlayerUnits, xPlayerOwner);");
code("if (PvP) {");
code("trQuestVarSet(\"protectionCount\", trQuestVarGet(\"p\"+p+\"protection\"));");
code("}");
code("if (trQuestVarGet(\"protectionCount\") == 0) {");
code("if (PvP == false) {");
code("dmg = dmg - dmg * xGetFloat(dPlayerUnits, xMagicResist);");
code("}");
code("if (xGetBool(dPlayerUnits, xIsHero) && (trQuestVarGet(\"p\"+p+\"negationCloak\") == 1)) {");
code("healUnit(p, dmg);");
code("} else {");
code("trDamageUnit(dmg);");
code("}");
code("}");
code("xSetPointer(dPlayerUnits, old);");
code("}");
code("}");


code("float damageEnemy(int p = 0, float dmg = 0, bool spell = true, float pierce = 0) {");
code("if (spell) {");
code("dmg = dmg - dmg * xGetFloat(dEnemies, xMagicResist) * (1.0 - pierce - xGetFloat(dPlayerData,xPlayerMagicPen,p));");
code("} else {");
code("dmg = dmg - dmg * xGetFloat(dEnemies, xPhysicalResist) * (1.0 - pierce);");
code("}");
code("if (xGetInt(dEnemies, xPoisonStatus) == 1) {");
code("dmg = dmg * (1.0 + xGetFloat(dPlayerData,xPlayerPoisonKiller,p));");
code("}");
code("float lifesteal = xGetFloat(dPlayerData,xPlayerLifesteal,p) * dmg;");
code("if (spell) {");
code("if (xGetInt(dPlayerData,xPlayerGodBoon,p) == BOON_SPELL_POISON) {");
code("poisonUnit(dEnemies, 12.0, 12.0, p);");
code("}");
code("lifesteal = 0.5 * lifesteal;");
code("}");
code("xSetFloat(dPlayerData,xPlayerLifestealTotal,xGetFloat(dPlayerData,xPlayerLifestealTotal,p) + lifesteal,p);");
code("if (PvP) {");
code("damagePlayerUnit(dmg, xGetInt(dEnemies, xDoppelganger));");
code("} else {");
code("trDamageUnit(dmg);");
code("}");
code("return(dmg);");
code("}");


code("void stunUnit(int db = 0, float duration = 0, int p = 0, bool sound = true) {");
code("int index = 0;");
code("bool targetPlayers = (p == 0) || (p == ENEMY_PLAYER);");
code("if (p > 0 && p < ENEMY_PLAYER) {");
code("if (xGetInt(dPlayerData,xPlayerGodBoon,p) == BOON_STATUS_COOLDOWNS) {");
code("advanceCooldowns(p, 1);");
code("}");
code("duration = duration * xGetFloat(dPlayerData,xPlayerSpellDuration,p);");
code("xUnitSelectByID(db,xUnitID);");
code("if (xGetFloat(dPlayerData,xPlayerStunDamage,p) > 0) {");
code("damageEnemy(p, xGetFloat(dPlayerData,xPlayerHealth,p) * xGetFloat(dPlayerData,xPlayerStunDamage,p), true);");
code("}");
code("if (PvP) {");
code("int old = xGetPointer(dPlayerUnits);");
code("if (xSetPointer(dPlayerUnits, xGetInt(dEnemies,xDoppelganger))) {");
code("stunUnit(dPlayerUnits, duration, 0, sound);");
code("}");
code("xSetPointer(dPlayerUnits, old);");
code("return;");
code("}");
code("} else {");
code("p = xGetInt(db, xPlayerOwner);");
code("duration = duration * xGetFloat(dPlayerData,xPlayerStunResistance,p);");
code("}");
code("duration = duration * 1000;");
code("if (targetPlayers && (xGetBool(db, xIsHero)) && (trQuestVarGet(\"p\"+p+\"negationCloak\") == 1)) {");
code("if (getBit(STATUS_STUN, 1*trQuestVarGet(\"p\"+p+\"spellstealStatus\")) == false) {");
code("trQuestVarSet(\"p\"+p+\"spellStealStatus\", trQuestVarGet(\"p\"+p+\"spellstealStatus\") + xsPow(2, STATUS_STUN));");
code("trSoundPlayFN(\"shadeofhadesgrunt2.wav\",\"1\",-1,\"\",\"\");");
code("gainFavor(p, 5);");
code("if (trCurrentPlayer() == p) {");
code("trChatSend(0, \"<color=1,1,1>Stun absorbed! Your next spell will inflict Stun!</color>\");");
code("}");
code("}");
code("} else {");
code("if (trTimeMS() + duration > xGetInt(db, xStunTimeout)) {");
code("if (xGetInt(db, xStunStatus) == 0) {");
code("trQuestVarSet(\"stunSound\", 1);");
code("if (boss == 3) {");
code("growFrostGiantsIncoming(kbGetBlockPosition(\"\"+xGetInt(db,xUnitName)));");
code("}");
code("index = xAddDatabaseBlock(dStunnedUnits);");
code("xSetInt(dStunnedUnits,xUnitName,xGetInt(db,xUnitName),index);");
code("xSetInt(dStunnedUnits,xPlayerOwner,xGetInt(db,xPlayerOwner),index);");
code("xSetInt(dStunnedUnits,xUnitID,xGetInt(db,xUnitID),index);");
code("xSetInt(dStunnedUnits,xStunnedProto,kbGetUnitBaseTypeID(kbGetBlockID(\"\"+xGetInt(db,xUnitName), true)),index);");
code("if (xGetInt(db, xStunSFX) == 0) {");
code("spyEffect(xGetInt(db,xUnitName), kbGetProtoUnitID(\"Shockwave stun effect\"), xsVectorSet(db,xStunSFX,xGetPointer(db)));");
code("} else {");
code("xUnitSelect(db,xStunSFX);");
code("trMutateSelected(kbGetProtoUnitID(\"Shockwave stun effect\"));");
code("xUnitSelectByID(db,xUnitID);");
code("}");
code("xSetInt(db, xStunStatus, index);");
code("} else if (sound) {");
code("trQuestVarSet(\"stunSound\", 1);");
code("}");
code("xSetInt(db,xStunTimeout,trTimeMS() + duration);");
code("}");
code("}");

code("}");

code("void processLaunchedUnit() {");
code("xDatabaseNext(dLaunchedUnits);");
code("vector dest = xGetVector(dLaunchedUnits,xLaunchedDest);");
code("xUnitSelectByID(dLaunchedUnits,xUnitID);");
code("if (trUnitAlive() == false ||");
code("unitDistanceToVector(xGetInt(dLaunchedUnits,xUnitName), dest) < 4 ||");
code("trTimeMS() > xGetInt(dLaunchedUnits, xLaunchedTimeout)) {");
code("if (trUnitAlive()) {");
code("int p = xGetInt(dLaunchedUnits,xPlayerOwner);");
code("int db = xGetInt(dLaunchedUnits,xLaunchedDB);");
code("xSetBool(db, xLaunched, false, xGetInt(dLaunchedUnits,xLaunchedIndex));");
code("trUnitChangeProtoUnit(kbGetProtoUnitName(xGetInt(dLaunchedUnits,xStunnedProto)));");
code("xUnitSelect(dLaunchedUnits,xUnitName);");
code("trMutateSelected(xGetInt(dLaunchedUnits,xStunnedProto));");
code("if ((p < ENEMY_PLAYER) && (xGetInt(dLaunchedUnits,xUnitName) == xGetInt(dPlayerData,xPlayerUnit,p))) {");
code("equipRelicsAgain(p);");
code("xSetBool(dPlayerData,xPlayerLaunched,false,p);");
code("}");
code("if (xGetInt(dLaunchedUnits,xUnitName) == bossUnit) {");
code("xUnitSelect(dLaunchedUnits,xUnitName);");
code("trSetSelectedScale(bossScale,bossScale,bossScale);");
code("}");
code("if (xGetBool(dLaunchedUnits, xLaunchedStun)) {");
code("int index = xGetPointer(db);");
code("if (xSetPointer(db, xGetInt(dLaunchedUnits,xLaunchedIndex))) {");
code("stunUnit(db, 3.0);");
code("xSetPointer(db, index);");
code("}");
code("}");
code("} else {");
code("trUnitChangeProtoUnit(kbGetProtoUnitName(xGetInt(dLaunchedUnits,xStunnedProto)));");
code("}");
code("xUnitSelect(dLaunchedUnits,xLaunchedCar);");
code("trUnitChangeProtoUnit(\"Dust Small\");");
code("xFreeDatabaseBlock(dLaunchedUnits);");
code("}");
code("}");

code("void launchUnit(int db = 0, vector dest = vector(0,0,0)) {");
code("bool hitWall = false;");
code("int index = 0;");
code("if (PvP && (db == dEnemies)) {");
code("index = xGetPointer(dPlayerUnits);");
code("db = dPlayerUnits;");
code("xSetPointer(dPlayerUnits, xGetInt(dEnemies,xDoppelganger));");
code("}");
code("if (xGetBool(db, xLaunched) == false) {");
code("xSetBool(db, xLaunched, true);");
code("int type = kbGetUnitBaseTypeID(kbGetBlockID(\"\"+xGetInt(db,xUnitName)));");
code("int p = xGetInt(db,xPlayerOwner);");
code("xUnitSelectByID(db,xUnitID);");
code("trUnitChangeProtoUnit(\"Transport Ship Greek\");");

code("vector start = kbGetBlockPosition(\"\"+xGetInt(db,xUnitName));");
code("vector dir = getUnitVector(start,dest);");

code("int next = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,1,0,1,0,true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+next,true);");
code("trImmediateUnitGarrison(\"\"+xGetInt(db,xUnitName));");
code("trUnitChangeProtoUnit(\"Dwarf\");");

code("trUnitSelectClear();");
code("trUnitSelect(\"\"+next,true);");
code("trSetUnitOrientation(dir, vector(0,1,0), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Hero Greek Achilles\"));");

code("xUnitSelectByID(db,xUnitID);");
code("trMutateSelected(type);");
code("trUnitOverrideAnimation(24,0,true,true,-1);");
code("trMutateSelected(kbGetProtoUnitID(\"Relic\"));");
code("trImmediateUnitGarrison(\"\"+next);");
code("trMutateSelected(type);");
code("if (xGetInt(db,xUnitName) == bossUnit) {");
code("trSetSelectedScale(bossScale,bossScale,bossScale);");
code("}");

code("float dist = distanceBetweenVectors(start, dest, false);");
code("for(x=0; < dist / 2) {");
code("vector nextpos = xsVectorSet(xsVectorGetX(start) + 2.0 * xsVectorGetX(dir),0,");
code("xsVectorGetZ(start) + 2.0 * xsVectorGetZ(dir));");
code("if (terrainIsType(vectorToGrid(nextpos), TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("hitWall = true;");
code("break;");
code("} else {");
code("start = nextpos;");
code("}");
code("}");

code("trUnitSelectClear();");
code("trUnitSelect(\"\"+next,true);");
code("trMutateSelected(kbGetProtoUnitID(\"Wadjet Spit\"));");
code("trUnitMoveToPoint(xsVectorGetX(start),0,xsVectorGetZ(start),-1,false);");

code("xSetPointer(dLaunchedUnits, xAddDatabaseBlock(dLaunchedUnits));");
code("xSetInt(dLaunchedUnits,xUnitName,xGetInt(db,xUnitName));");
code("xSetInt(dLaunchedUnits,xPlayerOwner,xGetInt(db,xPlayerOwner));");
code("xSetInt(dLaunchedUnits,xUnitID,xGetInt(db,xUnitID));");
code("xSetInt(dLaunchedUnits,xStunnedProto,type);");
code("xSetInt(dLaunchedUnits,xLaunchedIndex,xGetPointer(db));");
code("xSetVector(dLaunchedUnits,xLaunchedDest,start);");
code("xSetInt(dLaunchedUnits,xLaunchedTimeout, trTimeMS() + 1100 * dist / 15);");
code("xSetBool(dLaunchedUnits,xLaunchedStun, hitWall);");
code("xSetInt(dLaunchedUnits, xLaunchedDB, db);");


code("if ((p < ENEMY_PLAYER) && (xGetInt(db,xUnitName) == xGetInt(dPlayerData,xPlayerUnit,p))) {");
code("xSetBool(dPlayerData,xPlayerLaunched,true,p);");
code("int relics = getRelicsDB(p);");
code("for(x=xGetDatabaseCount(relics); >0) {");
code("xDatabaseNext(relics);");
code("xUnitSelect(relics,xRelicName);");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");
code("}");
code("}");
code("}");
code("if (PvP) {");
code("xSetPointer(dPlayerUnits, index);");
code("}");
code("}");

code("void stunsAndPoisons(int db = 0) {");
code("if (xGetInt(db, xPoisonStatus) == 1) {");
code("float amt = trTimeMS() - xGetInt(db, xPoisonLast);");
code("if (trTimeMS() > xGetInt(db, xPoisonTimeout)) {");
code("xSetInt(db, xPoisonStatus, 0);");
code("xUnitSelect(db, xPoisonSFX);");
code("trMutateSelected(kbGetProtoUnitID(\"Rocket\"));");
code("} else if (amt > 500) {");
code("trDamageUnit(amt * xGetFloat(db, xPoisonDamage) * 0.001);");
code("xSetInt(db, xPoisonLast, trTimeMS());");
code("}");
code("}");
code("if (xGetInt(db, xStunStatus) >= 1) {");
code("if (trTimeMS() > xGetInt(db, xStunTimeout)) {");
code("xUnitSelectByID(db,xUnitID);");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("xUnitSelect(db, xStunSFX);");
code("trMutateSelected(kbGetProtoUnitID(\"Rocket\"));");
code("xFreeDatabaseBlock(dStunnedUnits, xGetInt(db, xStunStatus));");
code("xSetInt(db, xStunStatus, 0);");
code("}");
code("}");
code("if (xGetInt(db, xSilenceStatus) == 1) {");
code("if (trTimeMS() > xGetInt(db, xSilenceTimeout)) {");
code("xUnitSelect(db, xSilenceSFX);");
code("trMutateSelected(kbGetProtoUnitID(\"Rocket\"));");
code("xSetInt(db, xSilenceStatus, 0);");
code("}");
code("}");
code("}");

code("void OnHit(int p = 0, int index = 0, bool magic = false) {");
code("gainFavor(p, xGetInt(dPlayerData,xPlayerFavorFromAttacks,p));");
code("if (xGetFloat(dPlayerData,xPlayerCleave) > 0) {");
code("int prev = xGetPointer(dEnemies);");
code("if (index != prev) {");
code("xSetPointer(dEnemies, index);");
code("}");
code("vector pos = kbGetBlockPosition(\"\"+xGetInt(dEnemies, xUnitName), true);");
code("for(x=xGetDatabaseCount(dEnemies); >1) {");
code("xDatabaseNext(dEnemies);");
code("if (unitDistanceToVector(xGetInt(dEnemies,xUnitName), pos) < 16.0) {");
code("xUnitSelectByID(dEnemies,xUnitID);");
code("damageEnemy(p, xGetFloat(dPlayerData,xPlayerCleave,p) * xGetFloat(dPlayerData,xPlayerAttack,p), magic);");
code("}");
code("}");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"1,0\");");
code("trDamageUnitPercent(100);");
code("trUnitChangeProtoUnit(\"Meteorite\");");
code("xSetPointer(dEnemies,prev);");
code("}");
code("}");

code("int CheckOnHit(int p = 0, bool onhit = true) {");
code("int status = ON_HIT_NONE;");
code("int class = xGetInt(dPlayerData,xPlayerClass,p);");
code("int db = getCharactersDB(p);");
code("int target = 0;");
code("int simp = xGetInt(dPlayerData,xPlayerSimp,p);");
code("int id = xGetInt(db,xUnitID);");
code("int action = kbUnitGetAnimationActionType(id);");
code("float amt = 0;");
code("if (action == 32) {");
code("status = ON_HIT_JUMP;");
code("} else if (xGetBool(db, xCharAttacking) == false) {");
code("if ((action == 12) || (action == 6)) {");
code("xsSetContextPlayer(p);");
code("target = kbUnitGetTargetUnitID(id);");
code("xsSetContextPlayer(0);");
code("xSetInt(db, xCharAttackTarget, target);");
code("xSetBool(db, xCharAttacking, true);");
code("xSetInt(db, xCharAttackNext, trTimeMS() + xGetInt(dPlayerData,xPlayerFirstDelay,p));");
code("xSetInt(db, xCharAttackTargetIndex, 0);");
code("}");
code("} else {");
code("if ((action == 12) || (action == 6)) {");
code("if (trTimeMS() > xGetInt(db, xCharAttackNext)) {");

code("status = ON_HIT_NORMAL;");
code("xSetInt(db, xCharAttackNext, xGetInt(db, xCharAttackNext) + xGetInt(dPlayerData,xPlayerNextDelay,p));");
code("if (action == 6) {");
code("xSetInt(db,xCharSpecialAttack,xGetInt(db,xCharSpecialAttack) - 1);");
code("if (xGetInt(db, xCharSpecialAttack) <= 0) {");
code("xSetInt(db, xCharSpecialAttack, xGetInt(dPlayerData,xPlayerSpecialAttackCooldown,p));");
code("status = ON_HIT_SPECIAL;");
code("}");
code("}");
code("if (simp > 0) {");
code("simp = trQuestVarGet(\"p\"+simp+\"characters\");");
code("for(x=xGetDatabaseCount(simp); >0) {");
code("xDatabaseNext(simp);");
code("xSetInt(simp, xCharSpecialAttack, xGetInt(simp, xCharSpecialAttack) - 1);");
code("}");
code("}");
code("if (xGetInt(db, xCharAttackTargetIndex) == 0) {");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("if (xGetInt(dEnemies,xUnitID) == xGetInt(db, xCharAttackTarget)) {");
code("xSetInt(db, xCharAttackTargetIndex, xGetPointer(dEnemies));");
code("xSetInt(dPlayerData,xPlayerPoisonKillerActive, xGetInt(dEnemies, xPoisonStatus),p);");
code("break;");
code("}");
code("}");
code("if (xGetInt(db, xCharAttackTargetIndex) == 0) {");
code("debugLog(\"Player \" + p +\" target not found: \" + xGetInt(db, xCharAttackTarget));");
code("}");
code("} else {");
code("xSetInt(dPlayerData,xPlayerPoisonKillerActive, xGetInt(dEnemies, xPoisonStatus, xGetInt(db,xCharAttackTargetIndex)),p);");
code("}");
code("amt = xGetFloat(dPlayerData,xPlayerLifesteal,p) * xGetFloat(dPlayerData,xPlayerAttack,p);");
code("if (xGetInt(dPlayerData,xPlayerPoisonKillerActive) == 1) {");
code("amt = amt * (1.0 + xGetFloat(dPlayerData,xPlayerPoisonKiller,p));");
code("}");
code("xSetFloat(dPlayerData,xPlayerLifestealTotal, xGetFloat(dPlayerData,xPlayerLifestealTotal,p) + amt,p);");
code("if (onhit) {");
code("OnHit(p, xGetInt(db,xCharAttackTargetIndex));");
code("}");
code("} else {");
code("xsSetContextPlayer(p);");
code("target = kbUnitGetTargetUnitID(id);");
code("xsSetContextPlayer(0);");
code("if (xGetInt(db, xCharAttackTarget) != target) {");
code("xSetInt(db, xCharAttackNext, trTimeMS() + xGetInt(dPlayerData,xPlayerFirstDelay,p));");
code("xSetInt(db,xCharAttackTarget,target);");
code("xSetInt(db,xCharAttackTargetIndex,0);");
code("}");
code("status = ON_HIT_ATTACKING;");
code("}");
code("} else {");
code("xSetBool(db,xCharAttacking,false);");
code("xSetInt(dPlayerData,xPlayerPoisonKillerActive,0,p);");
code("}");
code("}");
code("return(status);");
code("}");

code("void poisonKillerBonus(int p = 0) {");
code("int class = xGetInt(dPlayerData,xPlayerClass,p);");
code("float amt = xGetFloat(dPlayerData,xPlayerPoisonKiller,p) * xGetFloat(dPlayerData,xPlayerAttack,p);");
code("amt = amt * xGetInt(dPlayerData,xPlayerPoisonKillerActive,p);");
code("zSetProtoUnitStat(kbGetProtoUnitName(xGetInt(dClass,xClassProto,class)),p,27,");
code("amt+xGetFloat(dPlayerData,xPlayerAttack,p));");
code("zSetProtoUnitStat(kbGetProtoUnitName(xGetInt(dClass,xClassProto,class)),p,31,");
code("amt+xGetFloat(dPlayerData,xPlayerAttack,p));");
code("}");

code("float calculateDecay(int p = 0, float decay = 0) {");
code("if (xGetInt(dPlayerData,xPlayerGodBoon,p) == BOON_DECAY_HALVED) {");
code("decay = decay * 0.5;");
code("}");
code("return(decay / xGetFloat(dPlayerData,xPlayerSpellDuration,p));");
code("}");

code("int processGenericProj(int db = 0) {");
code("int id = 0;");
code("int action = PROJ_NONE;");
code("float scale = 0;");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db,xUnitID);");
code("id = kbGetBlockID(\"\"+xGetInt(db,xUnitName));");
code("int yeehaw = xGetInt(db, xProjYeehaw);");
code("if (id == -1) {");
code("xFreeDatabaseBlock(db);");
code("action = PROJ_REMOVE;");
code("} else if (yeehaw == 1) {");
code("trMutateSelected(xGetInt(db,xProjProto));");
code("trUnitOverrideAnimation(xGetInt(db,xProjAnim),0,true,true,-1);");
code("scale = xGetFloat(db,xProjScale);");
code("trSetSelectedScale(scale,scale,scale);");
code("xSetInt(db,xProjYeehaw,0);");
code("action = PROJ_BOUNCE;");
code("} else if (yeehaw == 2) {");
code("xSetInt(db, xProjYeehaw, 1);");
code("} else {");
code("vector pos = kbGetBlockPosition(\"\"+xGetInt(db,xUnitName));");
code("if (xsVectorGetY(pos) < worldHeight + 0.5 || xGetInt(db,xProjYeehaw) == 99) {");
code("action = PROJ_GROUND;");
code("vector dir = xGetVector(db, xProjDir);");
code("zSetProtoUnitStat(\"Kronny Flying\", xGetInt(db,xPlayerOwner), 1, xGetFloat(db,xProjSpeed));");
code("trUnitChangeProtoUnit(\"Kronny Flying\");");
code("xUnitSelectByID(db,xUnitID);");
code("trDamageUnitPercent(-100);");
code("trMutateSelected(kbGetProtoUnitID(\"Kronny Flying\"));");
code("trSetUnitOrientation(dir, vector(0,1,0), true);");
code("trSetSelectedScale(0,0.0-xGetFloat(db, xProjHeight),0);");
code("trDamageUnitPercent(100);");
code("xSetInt(db,xProjYeehaw,1);");
code("} else {");
code("action = PROJ_FALLING;");
code("}");
code("}");

code("return(action);");
code("}");

code("int addGenericProj(int db = 0, vector start = vector(0,0,0), vector dir = vector(0,0,0),");
code("int p = -1, float speed = -1, float height = -1) {");
code("int next = trGetNextUnitScenarioNameNumber();");
code("int index = xAddDatabaseBlock(db, true);");
code("xSetInt(db, xUnitName, next);");
code("xSetVector(db,xProjDir, dir);");

code("if (speed == -1) {");
code("speed = xGetFloat(db, xProjSpeed, 0);");
code("} else {");
code("xSetFloat(db, xProjSpeed, speed);");
code("}");
code("if (height == -1) {");
code("height = xGetFloat(db, xProjHeight, 0);");
code("} else {");
code("xSetFloat(db, xProjHeight, height);");
code("}");
code("if (p == -1) {");
code("p = xGetInt(db, xPlayerOwner, 0);");
code("} else {");
code("xSetInt(db, xPlayerOwner, p);");
code("}");

code("trArmyDispatch(\"\"+p+\",0\", \"Dwarf\",1,xsVectorGetX(start),0,xsVectorGetZ(start),0,true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+next,true);");
code("trMutateSelected(kbGetProtoUnitID(\"Kronny Flying\"));");
code("zSetProtoUnitStat(\"Kronny Flying\", p, 1, speed);");
code("trSetUnitOrientation(dir, vector(0,1,0), true);");
code("trSetSelectedScale(0, 0.0 - height, 0);");
code("trDamageUnitPercent(100);");
code("xSetInt(db, xUnitID, kbGetBlockID(\"\"+next));");
code("return(index);");
code("}");

code("int initGenericProj(string name = \"\", int proto = 0, int anim = 0, float speed = 10.0,");
code("float height = 4.5, float scale = 0, int p = 0, bool hitbox = false, int count = 0) {");
code("int db = xInitDatabase(name,count);");
code("xInitAddInt(db, \"name\");");
code("xInitAddInt(db, \"player\", p);");
code("xInitAddInt(db, \"id\");");
code("xProjProto = xInitAddInt(db, \"proto\", proto);");
code("xProjYeehaw = xInitAddInt(db, \"yeehaw\", 2);");
code("xProjAnim = xInitAddInt(db, \"anim\", anim);");
code("xProjHeight = xInitAddFloat(db, \"height\", height);");
code("xProjSpeed = xInitAddFloat(db, \"speed\", speed);");
code("xProjScale = xInitAddFloat(db, \"scale\", scale);");
code("xProjDir = xInitAddVector(db, \"dir\");");
code("if (hitbox) {");
code("xProjPrev = xInitAddVector(db,\"prev\");");
code("}");
code("return(db);");
code("}");

code("int dSphinxes = 0;");
code("int dDryads = 0;");
code("int dMedusas = 0;");
code("int dMountainGiants = 0;");
code("int dFrostGiants = 0;");
code("int dValkyries = 0;");
code("int dBallistas = 0;");
code("int dFireSiphons = 0;");
code("int dBattleBoars = 0;");
code("int dAutomatons = 0;");
code("int dScarabs = 0;");
code("int dSatyrs = 0;");
code("int dAvengers = 0;");
code("int dScorpionMen = 0;");
code("int dMummies = 0;");
code("int dNereids = 0;");
code("int dHydras = 0;");
code("int dKrakens = 0;");
code("int dLampades = 0;");
code("int dEinherjars = 0;");
code("int dLightningStatues = 0;");
code("int dManticores = 0;");

code("int dAutomatonBombs = 0;");

code("int xSpecialIndex = 0;");
code("int xSpecialStep = 0;");
code("int xSpecialNext = 0;");
code("int xSpecialTarget = 0;");

code("int dDelayLasers = 0;");
code("int xLaserDir = 0;");
code("int xLaserPhase = 0;");
code("int xLaserNext = 0;");
code("int xLaserDist = 0;");

code("int dBallistaShots = 0;");
code("int xBallistaShot1 = 0;");
code("int xBallistaShot2 = 0;");

code("int dYeebLightning = 0;");
code("int xTimeout = 0;");

code("int dYeebLightningEnd = 0;");

code("int dBarrages = 0;");
code("int xBarragePos = 0;");
code("int xBarrageDir = 0;");
code("int xBarrageCount = 0;");

code("int dMedusaBalls = 0;");
code("int xMedusaBallTarget = 0;");
code("int xMedusaBallBounces = 0;");

code("int dMummyBalls = 0;");
code("int xProjType = 0;");

code("int dAvengerProj = 0;");
code("int xAvengerProjDist = 0;");
code("int xAvengerProjUnit = 0;");
code("int xAvengerProjIndex = 0;");

code("int xMummyStart = 0;");
code("int xMummyDir = 0;");

code("int dYeebLightningBalls = 0;");

code("int dAmbushRooms = 0;");
code("int xAmbushRoomType = 0;");
code("int xAmbushRoomPos = 0;");

code("int initSpecialDatabase(string name = \"\", bool step = true) {");
code("int db = xInitDatabase(name);");
code("xInitAddInt(db, \"name\");");
code("xInitAddInt(db, \"player\");");
code("xInitAddInt(db, \"id\");");
code("xSpecialIndex = xInitAddInt(db, \"index\");");
code("xSpecialStep = xInitAddInt(db, \"step\");");
code("if (step) {");
code("xSpecialNext = xInitAddInt(db,\"next\");");
code("}");
code("return(db);");
code("}");

code("void addSpecialToDatabase(int db = 0,int name = 0, int from = 0, int p = 0) {");
code("xSetPointer(db, xAddDatabaseBlock(db));");
code("xSetInt(db, xUnitName,name);");
code("xSetInt(db, xPlayerOwner,p);");
code("xSetInt(db, xUnitID, xGetInt(from,xUnitID));");
code("xSetInt(db, xSpecialIndex, xGetNewestPointer(from));");
code("}");

code("rule initialize_special_database");
code("active");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("dSphinxes = initSpecialDatabase(\"Sphinxes\");");

code("dDryads = initSpecialDatabase(\"Dryads\", false);");
code("xInitAddVector(dDryads,\"pos\");");

code("dMedusas = initSpecialDatabase(\"Medusas\");");
code("xSpecialTarget = xInitAddInt(dMedusas, \"target\");");

code("dMountainGiants = initSpecialDatabase(\"MountainGiants\");");
code("xInitAddVector(dMountainGiants, \"target\");");

code("dFrostGiants = initSpecialDatabase(\"FrostGiants\");");
code("xInitAddInt(dFrostGiants,\"target\");");

code("dValkyries = initSpecialDatabase(\"Valkyries\",false);");
code("xInitAddInt(dValkyries,\"sfx\");");

code("dBallistas = initSpecialDatabase(\"Ballistas\",false);");

code("dFireSiphons = initSpecialDatabase(\"FireSiphons\",false);");

code("dBattleBoars = initSpecialDatabase(\"BattleBoars\");");
code("xInitAddInt(dBattleBoars,\"target\");");

code("dAutomatons = initSpecialDatabase(\"Automatons\",false);");

code("dScarabs = initSpecialDatabase(\"Scarabs\", false);");
code("xInitAddVector(dScarabs,\"pos\");");

code("dSatyrs = initSpecialDatabase(\"Satyrs\");");

code("dAvengers = initSpecialDatabase(\"Avengers\");");
code("xInitAddInt(dAvengers,\"projIndex\");");

code("dScorpionMen = initSpecialDatabase(\"ScorpionMen\");");
code("xInitAddInt(dScorpionMen,\"target\");");

code("dMummies = initSpecialDatabase(\"Mummies\");");
code("xMummyStart = xInitAddVector(dMummies,\"start\");");
code("xMummyDir = xInitAddVector(dMummies,\"dir\");");

code("dNereids = initSpecialDatabase(\"Nereids\");");
code("xInitAddVector(dNereids,\"target\");");

code("dHydras = initSpecialDatabase(\"Hydras\",false);");

code("dKrakens = initSpecialDatabase(\"Krakens\");");
code("xInitAddVector(dKrakens, \"target\");");

code("dLampades = initSpecialDatabase(\"SkyWitches\");");
code("xInitAddVector(dLampades,\"target\");");

code("dEinherjars = initSpecialDatabase(\"Einherjars\");");

code("dLightningStatues = initSpecialDatabase(\"LightningStatues\");");

code("dManticores = initSpecialDatabase(\"Manticores\");");

code("dDelayLasers = xInitDatabase(\"delayLasers\");");
code("xInitAddInt(dDelayLasers,\"name\");");
code("xInitAddInt(dDelayLasers,\"player\");");
code("xLaserDir = xInitAddVector(dDelayLasers, \"dir\");");
code("xLaserPhase = xInitAddInt(dDelayLasers, \"phase\");");
code("xLaserNext = xInitAddInt(dDelayLasers, \"next\");");
code("xLaserDist = xInitAddFloat(dDelayLasers, \"dist\");");

code("dBallistaShots = xInitDatabase(\"ballistaShots\");");
code("xInitAddInt(dBallistaShots,\"name\");");
code("xInitAddInt(dBallistaShots,\"player\");");
code("xTimeout = xInitAddInt(dBallistaShots,\"timeout\");");
code("xBallistaShot1 = xInitAddInt(dBallistaShots,\"shot1\");");
code("xBallistaShot2 = xInitAddInt(dBallistaShots,\"shot2\");");

code("dYeebLightning = xInitDatabase(\"yeebLightning\");");
code("xInitAddInt(dYeebLightning,\"name\");");
code("xInitAddInt(dYeebLightning,\"player\");");
code("xInitAddInt(dYeebLightning,\"timeout\");");

code("dYeebLightningEnd = xInitDatabase(\"yeebLightningEnd\");");
code("xInitAddInt(dYeebLightning,\"name\");");
code("xInitAddInt(dYeebLightning,\"player\");");

code("dYeebLightningBalls = initGenericProj(\"yeebLightningBalls\",kbGetProtoUnitID(\"Arkantos God\"),26,10.0,5.0,0.0,0,true);");
code("xInitAddInt(dYeebLightningBalls,\"bounces\");");

code("dAutomatonBombs = xInitDatabase(\"automatonBombs\");");
code("xInitAddInt(dAutomatonBombs,\"name\");");
code("xInitAddInt(dAutomatonBombs,\"player\");");
code("xInitAddInt(dAutomatonBombs,\"timeout\");");

code("dMedusaBalls = initGenericProj(\"medusaBalls\",kbGetProtoUnitID(\"Curse SFX\"),2,4.0,4.5,0.0);");
code("xMedusaBallTarget = xInitAddInt(dMedusaBalls,\"target\");");
code("xMedusaBallBounces = xInitAddInt(dMedusaBalls,\"bounces\");");

code("dMummyBalls = initGenericProj(\"mummyBalls\",kbGetProtoUnitID(\"Kronny Birth SFX\"),2,8.0,4.5,0.0,ENEMY_PLAYER,true);");
code("xProjDist = xInitAddFloat(dMummyBalls,\"dist\");");
code("xProjType = xInitAddInt(dMummyBalls,\"type\");");

code("dBarrages = xInitDatabase(\"barrages\");");
code("xInitAddInt(dBarrages,\"name\");");
code("xInitAddInt(dBarrages,\"player\");");
code("xInitAddInt(dBarrages,\"timeout\");");
code("xBarragePos = xInitAddVector(dBarrages,\"pos\");");
code("xBarrageDir = xInitAddVector(dBarrages,\"dir\");");
code("xBarrageCount = xInitAddInt(dBarrages,\"count\");");

code("dAvengerProj = initGenericProj(\"avengerProj\",kbGetProtoUnitID(\"Avenger\"),39,10.0,4.5,1.0,ENEMY_PLAYER,true);");
code("xProjDist = xInitAddFloat(dAvengerProj,\"dist\");");
code("xAvengerProjDist = xInitAddFloat(dAvengerProj,\"maxDist\");");
code("xAvengerProjUnit = xInitAddInt(dAvengerProj,\"rider\");");
code("xAvengerProjIndex = xInitAddInt(dAvengerProj,\"index\");");

code("dAmbushRooms = xInitDatabase(\"ambushRooms\");");
code("xAmbushRoomPos = xInitAddVector(dAmbushRooms,\"pos\");");

code("}");


code("void activateSpecialUnit(int name = 1, int db = 0, int proto = 0, int p = 0) {");
code("int index = 0;");
code("switch(proto)");
code("{");
code("case kbGetProtoUnitID(\"Sphinx\"):");
code("{");
code("addSpecialToDatabase(dSphinxes,name,db,p);");
code("}");
code("case kbGetProtoUnitID(\"Dryad\"):");
code("{");
code("addSpecialToDatabase(dDryads,name,db,p);");
code("}");
code("case kbGetProtoUnitID(\"Wadjet\"):");
code("{");
code("addSpecialToDatabase(dDryads,name,db,p);");
code("}");
code("case kbGetProtoUnitID(\"Medusa\"):");
code("{");
code("addSpecialToDatabase(dMedusas,name,db,p);");
code("}");
code("case kbGetProtoUnitID(\"Mountain Giant\"):");
code("{");
code("addSpecialToDatabase(dMountainGiants,name,db,p);");
code("}");
code("case kbGetProtoUnitID(\"Frost Giant\"):");
code("{");
code("addSpecialToDatabase(dFrostGiants,name,db,p);");
code("}");
code("case kbGetProtoUnitID(\"Valkyrie\"):");
code("{");
code("xSetFloat(db,xMagicResist,1,xGetNewestPointer(db));");
code("addSpecialToDatabase(dValkyries,name,db,p);");
code("spyEffect(name,kbGetProtoUnitID(\"Vortex Finish Linked\"),");
code("xsVectorSet(dValkyries,xSpecialNext,xGetNewestPointer(dValkyries)));");
code("}");
code("case kbGetProtoUnitID(\"Ballista\"):");
code("{");
code("addSpecialToDatabase(dBallistas,name,db,p);");
code("}");
code("case kbGetProtoUnitID(\"Colossus\"):");
code("{");
code("xSetFloat(db,xMagicResist,1,xGetNewestPointer(db));");
code("addSpecialToDatabase(dValkyries,name,db,p);");
code("spyEffect(name,kbGetProtoUnitID(\"Vortex Finish Linked\"),");
code("xsVectorSet(dValkyries,xSpecialNext,xGetNewestPointer(dValkyries)));");
code("}");
code("case kbGetProtoUnitID(\"Fire Siphon\"):");
code("{");
code("addSpecialToDatabase(dFireSiphons,name,db,p);");
code("}");
code("case kbGetProtoUnitID(\"Battle Boar\"):");
code("{");
code("addSpecialToDatabase(dBattleBoars,name,db,p);");
code("}");
code("case kbGetProtoUnitID(\"Automaton SPC\"):");
code("{");
code("addSpecialToDatabase(dAutomatons,name,db,p);");
code("}");
code("case kbGetProtoUnitID(\"Behemoth\"):");
code("{");
code("xSetFloat(db,xMagicResist,-1,xGetNewestPointer(db));");
code("}");
code("case kbGetProtoUnitID(\"Scarab\"):");
code("{");
code("xSetFloat(db,xMagicResist,-1,xGetNewestPointer(db));");
code("addSpecialToDatabase(dScarabs,name,db,p);");
code("}");
code("case kbGetProtoUnitID(\"Satyr\"):");
code("{");
code("addSpecialToDatabase(dSatyrs,name,db,p);");
code("}");
code("case kbGetProtoUnitID(\"Avenger\"):");
code("{");
code("addSpecialToDatabase(dAvengers,name,db,p);");
code("}");
code("case kbGetProtoUnitID(\"Scorpion Man\"):");
code("{");
code("addSpecialToDatabase(dScorpionMen,name,db,p);");
code("}");
code("case kbGetProtoUnitID(\"Mummy\"):");
code("{");
code("addSpecialToDatabase(dMummies,name,db,p);");
code("}");
code("case kbGetProtoUnitID(\"Nereid\"):");
code("{");
code("addSpecialToDatabase(dNereids,name,db,p);");
code("}");
code("case kbGetProtoUnitID(\"Hydra\"):");
code("{");
code("addSpecialToDatabase(dHydras,name,db,p);");
code("xSetInt(dHydras,xSpecialStep,trTime());");
code("}");
code("case kbGetProtoUnitID(\"Kraken\"):");
code("{");
code("addSpecialToDatabase(dKrakens,name,db,p);");
code("}");
code("case kbGetProtoUnitID(\"Lampades\"):");
code("{");
code("addSpecialToDatabase(dLampades,name,db,p);");
code("}");
code("case kbGetProtoUnitID(\"Einheriar\"):");
code("{");
code("addSpecialToDatabase(dEinherjars,name,db,p);");
code("}");
code("case kbGetProtoUnitID(\"Statue of Lightning\"):");
code("{");
code("addSpecialToDatabase(dLightningStatues,name,db,p);");
code("}");
code("}");
code("}");

code("int activatePlayerUnit(int name = 0, int p = 0, int proto = 0, float decay = 0) {");
code("int id = kbGetBlockID(\"\"+name,true);");
code("int index = xAddDatabaseBlock(dPlayerUnits);");
code("xSetPointer(dPlayerUnits,index);");
code("xSetInt(dPlayerUnits,xUnitName,name);");
code("xSetInt(dPlayerUnits,xPlayerOwner,p);");
code("xSetInt(dPlayerUnits,xUnitID,id);");
code("xSetFloat(dPlayerUnits,xDecay,decay);");
code("xSetInt(dPlayerUnits,xDecayNext,trTimeMS()+1000);");
code("xSetFloat(dPlayerUnits,xPhysicalResist,trQuestVarGet(\"proto\"+proto+\"armor\"));");
code("xSetFloat(dPlayerUnits,xMagicResist,trQuestVarGet(\"proto\"+proto+\"armor\"));");
code("if (PvP) {");
code("if (trQuestVarGet(\"detached\") == 1) {");
code("xSetPointer(dEnemies, 1*trQuestVarGet(\"enemiesLeaveIndex\"));");
code("}");
code("xSetInt(dPlayerUnits,xDoppelganger, xAddDatabaseBlock(dEnemies));");
code("xSetPointer(dEnemies,xGetNewestPointer(dEnemies));");
code("xSetInt(dEnemies,xDoppelganger,index);");
code("xSetInt(dEnemies,xPlayerOwner,p);");
code("xSetInt(dEnemies,xUnitName,name);");
code("xSetInt(dEnemies,xUnitID,id);");
code("xSetFloat(dEnemies,xPhysicalResist,trQuestVarGet(\"proto\"+proto+\"armor\"));");
code("xSetFloat(dEnemies,xMagicResist,trQuestVarGet(\"proto\"+proto+\"armor\"));");
code("xSetPointer(dEnemies, 1*trQuestVarGet(\"enemiesDummyIndex\"));");
code("}");
code("activateSpecialUnit(name, dPlayerUnits, proto, p);");
code("return(index);");
code("}");

code("int spawnPlayerUnit(int p = 0, int proto = 0, vector vdb = vector(0,0,0), float decay = 0) {");
code("int next = trGetNextUnitScenarioNameNumber();");
code("string pName = kbGetProtoUnitName(proto);");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,xsVectorGetX(vdb),0,xsVectorGetZ(vdb),0,true);");
code("trArmySelect(\"\"+p+\",0\");");
code("trUnitChangeProtoUnit(pName);");
code("return(activatePlayerUnit(next, p, proto, decay));");
code("}");

code("int spawnPlayerClone(int p = 0, vector vdb = vector(0,0,0)) {");
code("xSetPointer(dPlayerData,p);");
code("int class = xGetInt(dPlayerData,xPlayerClass);");
code("int next = trGetNextUnitScenarioNameNumber();");
code("int db = getCharactersDB(p);");
code("int index = spawnPlayerUnit(p, xGetInt(dClass,xClassProto,class), vdb);");
code("int id = kbGetBlockID(\"\"+next,true);");
code("xSetPointer(db, xAddDatabaseBlock(db));");
code("xSetInt(db, xUnitName, next);");
code("xSetInt(db,xUnitID,id);");
code("xSetInt(db, xCharIndex, index);");
code("xSetBool(dPlayerUnits,xIsHero,true);");
code("xSetFloat(dPlayerUnits,xPhysicalResist,xGetFloat(dPlayerData,xPlayerPhysicalResist));");
code("xSetFloat(dPlayerUnits,xMagicResist,xGetFloat(dPlayerData,xPlayerMagicResist));");
code("xSetPointer(dPlayerCharacters, xAddDatabaseBlock(dPlayerCharacters));");
code("xSetInt(dPlayerCharacters,xUnitName,next);");
code("xSetInt(dPlayerCharacters,xPlayerOwner,p);");
code("xSetInt(dPlayerCharacters,xUnitID,id);");
code("xSetInt(dPlayerCharacters, xCharIndex, index);");
code("return(index);");
code("}");

code("void spawnPlayer(int p = 0, vector vdb = vector(0,0,0)) {");
code("xSetInt(dPlayerData,xPlayerUnit,trGetNextUnitScenarioNameNumber(),p);");
code("spawnPlayerClone(p, vdb);");
code("xSetInt(dPlayerData,xPlayerIndex,xGetNewestPointer(dPlayerUnits),p);");
code("if (trCurrentPlayer() == p) {");
code("int class = xGetInt(dPlayerData,xPlayerClass,p);");
code("string proto = kbGetProtoUnitName(xGetInt(dClass,xClassProto,class));");
code("uiFindType(proto);");
code("}");
code("}");

code("void revivePlayer(int p = 0) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"reviveBeam\");");
code("trUnitChangeProtoUnit(\"Rocket\");");
code("xSetPointer(dPlayerData,p);");
code("xUnitSelect(dPlayerData,xPlayerUnit);");
code("trUnitDestroy();");
code("spawnPlayer(p, trVectorQuestVarGet(\"dead\"+p+\"pos\"));");
code("trSoundPlayFN(\"herorevived.wav\",\"1\",-1,\"\",\"\");");
code("xUnitSelect(dPlayerData,xPlayerUnit);");
code("trDamageUnitPercent(50);");
code("trQuestVarSet(\"deadPlayerCount\", trQuestVarGet(\"deadPlayerCount\") - 1);");
code("equipRelicsAgain(p);");
code("if (trCurrentPlayer() == p) {");
code("uiLookAtUnitByName(\"\"+xGetInt(dPlayerData,xPlayerUnit));");
code("}");
code("}");

code("void shootLaser(vector start = vector(0,0,0), vector dir = vector(0,0,0), float dist = -1, int p = 0) {");
code("int next = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"1,0\", \"Dwarf\",1,xsVectorGetX(start),0,xsVectorGetZ(start),0,true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+next,true);");
code("trMutateSelected(kbGetProtoUnitID(\"Petosuchus Projectile\"));");
code("if (dist < 0) {");
code("trSetSelectedScale(3.0,0.0,80.0);");
code("dist = 60.0;");
code("} else {");
code("trSetSelectedScale(3.0,0.0,dist * 1.3);");
code("}");
code("trSetUnitOrientation(xsVectorSet(0.0-xsVectorGetX(dir),0,0.0-xsVectorGetZ(dir)), xsVectorSet(0,1,0), true);");

code("xSetPointer(dDelayLasers, xAddDatabaseBlock(dDelayLasers));");
code("xSetInt(dDelayLasers,xUnitName,next);");
code("xSetInt(dDelayLasers,xPlayerOwner,p);");
code("xSetInt(dDelayLasers,xLaserNext,trTimeMS() + 2000);");
code("xSetInt(dDelayLasers,xLaserPhase,0);");
code("xSetFloat(dDelayLasers,xLaserDist,dist);");
code("xSetVector(dDelayLasers, xLaserDir, dir);");
code("}");

code("rule spy_find");
code("active");
code("highFrequency");
code("{");
code("int x = 0;");
code("int id = 0;");
code("vector scale = vector(0,0,0);");
code("vector dest = vector(0,0,0);");
code("while(spysearch < trGetNextUnitScenarioNameNumber()) {");
code("id = kbGetBlockID(\"\"+spysearch, true);");
code("if (kbGetUnitBaseTypeID(id) == kbGetProtoUnitID(\"Spy Eye\")) {");
code("x = modularCounterNext(\"spyfound\");");
code("if (aiPlanGetUserVariableBool(ARRAYS,spyActive,x)) {");
code("aiPlanSetUserVariableBool(ARRAYS,spyActive,x,false);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+aiPlanGetUserVariableInt(ARRAYS,spyUnit,x),true);");
code("dest = aiPlanGetUserVariableVector(ARRAYS,spyDest,x);");
code("if (trUnitAlive() == false) {");
code("if (aiPlanSetUserVariableInt(1*xsVectorGetX(dest),1*xsVectorGetY(dest),1*xsVectorGetZ(dest),-1) == false) {");
code("debugLog(\"spy error dead: \" + 1*xsVectorGetX(dest) + \",\" + 1*xsVectorGetY(dest) + \",\" + 1*xsVectorGetZ(dest));");
code("}");
code("} else {");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("trMutateSelected(aiPlanGetUserVariableInt(ARRAYS,spyProto,x));");
code("scale = aiPlanGetUserVariableVector(ARRAYS,spyScale,x);");
code("trSetSelectedScale(xsVectorGetX(scale),xsVectorGetY(scale),xsVectorGetZ(scale));");
code("if (aiPlanSetUserVariableInt(1*xsVectorGetX(dest),1*xsVectorGetY(dest),1*xsVectorGetZ(dest),spysearch) == false) {");
code("debugLog(\"spy error N/A: \" + 1*xsVectorGetX(dest) + \",\" + 1*xsVectorGetY(dest) + \",\" + 1*xsVectorGetZ(dest));");
code("}");
code("}");
code("}");
code("}");
code("spysearch = 1 + spysearch;");
code("}");
code("if (trQuestVarGet(\"spyfind\") != trQuestVarGet(\"spyfound\")) {");
code("spyreset = 1 + spyreset;");
code("if (spyreset >= 5) {");
code("while (trQuestVarGet(\"spyfind\") != trQuestVarGet(\"spyfound\")) {");
code("x = modularCounterNext(\"spyFound\");");
code("if (aiPlanGetUserVariableBool(ARRAYS,spyActive,x)) {");
code("aiPlanSetUserVariableBool(ARRAYS,spyActive,x,false);");
code("aiPlanSetUserVariableInt(xsVectorGetX(dest),xsVectorGetY(dest),xsVectorGetZ(dest),-1);");
code("}");
code("}");
code("debugLog(\"resetting spyfound\");");
code("}");
code("} else {");
code("spyreset = 0;");
code("}");
code("}");

code("int databaseName(int p = 0) {");
code("if (p == ENEMY_PLAYER) {");
code("return(dEnemies);");
code("} else {");
code("return(dPlayerUnits);");
code("}");
code("}");

code("int opponentDatabaseName(int p = 0) {");
code("if (p == ENEMY_PLAYER) {");
code("return(dPlayerUnits);");
code("} else {");
code("return(dEnemies);");
code("}");
code("}");

code("void removeAllyUnit(int p = 0) {");
code("if (p == ENEMY_PLAYER) {");
code("removeEnemy();");
code("} else {");
code("removePlayerUnit();");
code("}");
code("}");

code("void removeOpponentUnit(int p = 0) {");
code("if (p == ENEMY_PLAYER) {");
code("removePlayerUnit();");
code("} else {");
code("removeEnemy();");
code("}");
code("}");

code("void damageOpponentUnit(int p = 0, float amt = 0) {");
code("if (p == ENEMY_PLAYER) {");
code("damagePlayerUnit(amt);");
code("} else {");
code("damageEnemy(p, amt);");
code("}");
code("}");
code("void setupProtounitBounty(string proto = \"\", float armor = 0, int bounty = 2, float relicChance = 0, int relic = -1) {");
code("int p = kbGetProtoUnitID(proto);");
code("trQuestVarSet(\"proto\"+p+\"bounty\", bounty);");
code("trQuestVarSet(\"proto\"+p+\"relicChance\", relicChance);");
code("trQuestVarSet(\"proto\"+p+\"relic\", relic);");
code("trQuestVarSet(\"proto\"+p+\"armor\", armor);");
code("trModifyProtounit(proto, ENEMY_PLAYER, 2, 12);");
code("for(p=ENEMY_PLAYER; >0) {");
code("trModifyProtounit(proto, p, 24, -1);");
code("trModifyProtounit(proto, p, 25, -1);");
code("trModifyProtounit(proto, p, 26, -1);");
code("trModifyProtounit(proto, p, 24, armor);");
code("trModifyProtounit(proto, p, 25, armor);");
code("trModifyProtounit(proto, p, 26, armor);");
code("trModifyProtounit(proto, p, 33, 9999999999999999999.0);");
code("trModifyProtounit(proto, p, 33, -9999999999999999999.0);");
code("trModifyProtounit(proto, p, 33, 1.0);");
code("trModifyProtounit(proto, p, 44, 9999999999999999999.0);");
code("trModifyProtounit(proto, p, 44, -9999999999999999999.0);");
code("trModifyProtounit(proto, p, 44, 1.0);");
code("trModifyProtounit(proto, p, 34, 9999999999999999999.0);");
code("trModifyProtounit(proto, p, 34, -9999999999999999999.0);");
code("trModifyProtounit(proto, p, 34, 1.0);");
code("trModifyProtounit(proto, p, 45, 9999999999999999999.0);");
code("trModifyProtounit(proto, p, 45, -9999999999999999999.0);");
code("trModifyProtounit(proto, p, 45, 1.0);");
code("}");

code("}");

code("bool checkEnemyDeactivated(int db = 0) {");
code("if (xGetInt(db,xPlayerOwner) < ENEMY_PLAYER) {");
code("return(false);");
code("}");
code("int index = xGetInt(db,xSpecialIndex);");
code("if ((aiPlanGetUserVariableBool(dEnemies, xDirtyBit, index) == false) ||");
code("xGetInt(dEnemies, xUnitName, index) != xGetInt(db,xUnitName)) {");
code("return(true);");
code("}");
code("return(false);");
code("}");

code("void activateEnemy(int name = 0, int bounty = -1, int relic = -1) {");
code("int id = kbGetBlockID(\"\"+name);");
code("int proto = kbGetUnitBaseTypeID(id);");
code("if (bounty < 0) {");
code("bounty = trQuestVarGet(\"proto\"+proto+\"bounty\");");
code("}");
code("if (relic < 0) {");
code("trQuestVarSetFromRand(\"relicChance\", 0, 1, false);");
code("if (trQuestVarGet(\"relicChance\") < trQuestVarGet(\"proto\"+proto+\"relicChance\")) {");
code("relic = trQuestVarGet(\"proto\"+proto+\"relic\");");
code("if (relic == -1) {");
code("relic = trQuestVarGet(\"stage\");");
code("}");
code("}");
code("}");
code("float armor = trQuestVarGet(\"proto\"+proto+\"armor\");");
code("vector pos = kbGetBlockPosition(\"\"+name);");
code("xSetPointer(dEnemies, xAddDatabaseBlock(dEnemies));");
code("xSetInt(dEnemies, xUnitName, name);");
code("xSetInt(dEnemies, xPlayerOwner, ENEMY_PLAYER);");
code("xSetInt(dEnemies, xUnitID, id);");
code("trQuestVarSetFromRand(\"bounty\", bounty / 2, bounty, true);");
code("xSetInt(dEnemies, xBounty, 1*trQuestVarGet(\"bounty\"));");
code("xSetInt(dEnemies, xDropRelic, relic);");
code("xSetVector(dEnemies,xUnitPos,pos);");
code("xSetFloat(dEnemies,xMagicResist,armor);");
code("xSetFloat(dEnemies,xPhysicalResist,armor);");
code("for(p=1; < ENEMY_PLAYER) {");
code("if (trQuestVarGet(\"p\"+p+\"rideLightning\") == 1) {");
code("int db = trQuestVarGet(\"p\"+p+\"rideLightningTargets\");");
code("xSetPointer(db, xAddDatabaseBlock(db));");
code("xSetInt(db,xUnitName,name);");
code("xSetInt(db,xDatabaseIndex,xGetNewestPointer(dEnemies));");
code("}");
code("}");
code("activateSpecialUnit(name, dEnemies, proto, ENEMY_PLAYER);");
code("}");


code("rule setup_enemies");
code("inactive");
code("highFrequency");
code("{");
code("trModifyProtounit(\"Minion\", ENEMY_PLAYER, 8, -99);");
code("trModifyProtounit(\"Minion\", 1, 8, -99);");

code("setupProtounitBounty(\"Nemean Lion\", 0, 0, 0);");
code("setupProtounitBounty(\"King Folstag\", 0, 0, 0);");
code("setupProtounitBounty(\"Chimera\", 0.25, 0, 0);");
code("setupProtounitBounty(\"Shade of Hades\", 0.25, 0, 0);");
code("setupProtounitBounty(\"Helepolis\", 0.25, 0, 0);");
code("setupProtounitBounty(\"Scylla\", 0.5, 0, 0);");
code("setupProtounitBounty(\"Guardian\", 0.5, 0, 0);");
code("setupProtounitBounty(\"Pharaoh of Osiris XP\", 0.47, 0, 0);");

code("setupProtounitBounty(\"Golden Lion\", 0.3, 3);");
code("setupProtounitBounty(\"Anubite\", 0.3, 4, 0.03);");
code("setupProtounitBounty(\"Terracotta Soldier\", 0.3, 4, 0.03);");
code("setupProtounitBounty(\"Sphinx\", 0.3, 5, 0.05);");
code("setupProtounitBounty(\"Petsuchos\", 0.1, 6, 0.1, RELIC_ATTACK_RANGE);");

code("setupProtounitBounty(\"Walking Woods Marsh\", 0.2, 3);");
code("setupProtounitBounty(\"Dryad\", 0.2, 4, 0.03);");
code("setupProtounitBounty(\"Centaur\", 0.1, 4, 0.03);");
code("setupProtounitBounty(\"Medusa\", 0.2, 8, 0.15, RELIC_SPELL_DURATION);");
code("setupProtounitBounty(\"Mountain Giant\", 0.3, 10, 0.1);");

code("setupProtounitBounty(\"Fenris Wolf\", 0.2, 4, 0.03);");
code("setupProtounitBounty(\"Valkyrie\", 0, 5, 0.05);");
code("setupProtounitBounty(\"Ballista\", 0.1, 4, 0.03);");
code("setupProtounitBounty(\"Frost Giant\", 0.3, 10, 0.1);");

code("setupProtounitBounty(\"Wadjet\", 0.2, 4, 0.03);");
code("setupProtounitBounty(\"Scorpion Man\", 0.3, 6, 0.05);");
code("setupProtounitBounty(\"Scarab\", 0.9, 10, 0.08);");
code("setupProtounitBounty(\"Mummy\", 0.6, 12, 0.1);");

code("setupProtounitBounty(\"Cyclops\", 0.2, 6, 0.05);");
code("setupProtounitBounty(\"Satyr\", 0.1, 4, 0.03);");
code("setupProtounitBounty(\"Behemoth\", 0.9, 10, 0.08);");
code("setupProtounitBounty(\"Avenger\", 0.2, 12, 0.1);");

code("setupProtounitBounty(\"Automaton SPC\", 0.4, 4, 0);");
code("setupProtounitBounty(\"Colossus\", 0.2, 10, 0.1);");
code("setupProtounitBounty(\"Battle Boar\", 0.4, 8, 0.08);");
code("setupProtounitBounty(\"Fire Siphon\", 0.1, 8, 0.1);");

code("setupProtounitBounty(\"Servant\", 0.5, 5, 0.03);");
code("setupProtounitBounty(\"Nereid\", 0.3, 7, 0.05);");
code("setupProtounitBounty(\"Kraken\", 0.4, 9, 0.08);");
code("setupProtounitBounty(\"Hydra\", 0.4, 10, 0.1);");

code("setupProtounitBounty(\"Griffon\", 0.6, 6, 0.03);");
code("setupProtounitBounty(\"Einheriar\", 0.6, 7, 0.03);");
code("setupProtounitBounty(\"Statue of Lightning\", 0.8, 8, 0.05);");
code("setupProtounitBounty(\"Lampades\", 0.8, 12, 0.1);");

code("setupProtounitBounty(\"Shade XP\", 0, 0, 0);");
code("trModifyProtounit(\"Shade XP\", 0, 1, -1.8);");
code("trModifyProtounit(\"Shade XP\", ENEMY_PLAYER, 1, -1.8);");

code("setupProtounitBounty(\"Hero Boar\", 0, 0, 0);");
code("setupProtounitBounty(\"Hero Boar 2\", 0, 0, 0);");
code("trModifyProtounit(\"Hero Boar\", ENEMY_PLAYER, 27, -999);");
code("trModifyProtounit(\"Hero Boar 2\", ENEMY_PLAYER, 27, -999);");

code("for(class = 1; <= 16) {");
code("setupProtounitBounty(kbGetProtoUnitName(xGetInt(dClass,xClassProto,class)),");
code("trQuestVarGet(\"proto\"+xGetInt(dClass,xClassProto,class)+\"armor\"), 8, 0);");
code("}");

code("for(p=ENEMY_PLAYER; >0) {");
code("trModifyProtounit(\"Ballista\", p, 13, -3);");
code("trModifyProtounit(\"Ballista\", p, 11, -12);");
code("}");
code("trModifyProtounit(\"Ballista Shot\", ENEMY_PLAYER, 1, -19);");
code("trModifyProtounit(\"Priest Projectile\", ENEMY_PLAYER, 1, -20);");
code("trModifyProtounit(\"Hero Greek Achilles\", ENEMY_PLAYER, 5, 99);");


code("trModifyProtounit(\"Outpost\", ENEMY_PLAYER, 0, 9999999999999999999.0);");
code("trModifyProtounit(\"Outpost\", ENEMY_PLAYER, 0, -9999999999999999999.0);");
code("trModifyProtounit(\"Outpost\", ENEMY_PLAYER, 0, 47);");
code("trModifyProtounit(\"Outpost\", ENEMY_PLAYER, 24, 1);");
code("trModifyProtounit(\"Outpost\", ENEMY_PLAYER, 25, 1);");
code("trModifyProtounit(\"Outpost\", ENEMY_PLAYER, 26, 1);");

code("trModifyProtounit(\"Pharaoh of Osiris XP\", ENEMY_PLAYER, 0, 9999999999999999999.0);");
code("trModifyProtounit(\"Pharaoh of Osiris XP\", ENEMY_PLAYER, 0, -9999999999999999999.0);");
code("trModifyProtounit(\"Pharaoh of Osiris XP\", ENEMY_PLAYER, 0, 47000);");
code("trModifyProtounit(\"Pharaoh of Osiris XP\", ENEMY_PLAYER, 2, 20);");

code("trModifyProtounit(\"Stymphalian Bird\", 0, 1, 2);");

code("xsDisableSelf();");
code("}");

code("void ballistaShotPop(vector pos = vector(0,0,0)) {");
code("int p = xGetInt(dBallistaShots,xPlayerOwner);");
code("int db = opponentDatabaseName(p);");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db,xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeOpponentUnit(p);");
code("} else if (unitDistanceToVector(xGetInt(db,xUnitName), pos) < 16) {");
code("damageOpponentUnit(p, 200);");
code("}");
code("}");

code("xUnitSelect(dBallistaShots,xBallistaShot1);");
code("trUnitDestroy();");
code("xUnitSelect(dBallistaShots,xBallistaShot2);");
code("trUnitDestroy();");
code("xUnitSelect(dBallistaShots,xUnitName);");
code("trDamageUnitPercent(100);");
code("trUnitChangeProtoUnit(\"Meteorite\");");
code("trSoundPlayFN(\"fireball launch.wav\",\"1\",-1,\"\",\"\");");
code("xFreeDatabaseBlock(dBallistaShots);");
code("}");

code("bool spawnLightning(vector pos = vector(0,0,0), int p = 0) {");
code("vector loc = vectorToGrid(pos);");
code("if (terrainIsType(loc, TERRAIN_WALL, TERRAIN_SUB_WALL) == false) {");
code("trArmyDispatch(\"0,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"0,0\");");
code("trUnitChangeProtoUnit(\"Arkantos Boost SFX\");");
code("int next = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"\"+ENEMY_PLAYER+\",0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+next,true);");
code("trUnitSetStance(\"Passive\");");
code("trMutateSelected(kbGetProtoUnitID(\"Lampades Bolt\"));");
code("xSetPointer(dYeebLightning, xAddDatabaseBlock(dYeebLightning));");
code("xSetInt(dYeebLightning,xUnitName,next);");
code("xSetInt(dYeebLightning,xPlayerOwner,p);");
code("xSetInt(dYeebLightning,xTimeout, trTimeMS() + 2000);");
code("return(true);");
code("}");
code("return(false);");
code("}");

code("int findShooter(int db = 0, vector pos = vector(0,0,0)) {");
code("int closest = 0;");
code("int id = 0;");
code("float dist = 0;");
code("float closestDistance = 25;");
code("for (x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("id = xGetInt(db,xUnitID);");
code("xUnitSelectByID(db,xUnitID);");
code("if (trUnitAlive() == false) {");
code("xFreeDatabaseBlock(db);");
code("} else if (kbUnitGetAnimationActionType(id) == 12) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+nextproj,true);");
code("if (trUnitIsOwnedBy(xGetInt(db,xPlayerOwner))) {");
code("dist = unitDistanceToVector(xGetInt(db,xUnitName),pos);");
code("if (dist < closestDistance) {");
code("closestDistance = dist;");
code("closest = xGetPointer(db);");
code("}");
code("}");
code("}");
code("}");
code("return(closest);");
code("}");

code("void specialUnitsAlways() {");
code("xsSetContextPlayer(0);");
code("int p = 0;");
code("int proto = 0;");
code("int id = 0;");
code("int db = 0;");
code("int target = 0;");
code("int action = 0;");
code("int closest = 0;");
code("float amt = 0;");
code("float dist = 0;");
code("float angle = 0;");
code("bool hit = false;");
code("vector start = vector(0,0,0);");
code("vector end = vector(0,0,0);");
code("vector dir = vector(0,0,0);");
code("vector pos = vector(0,0,0);");
code("vector loc = vector(0,0,0);");

code("for (x=xsMin(5, xGetDatabaseCount(dBallistaShots)); >0) {");
code("xDatabaseNext(dBallistaShots);");
code("xUnitSelect(dBallistaShots,xUnitName);");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dBallistaShots,xUnitName));");

code("loc = vectorToGrid(pos);");
code("if (terrainIsType(loc, TERRAIN_WALL, TERRAIN_SUB_WALL) || trTimeMS() > xGetInt(dBallistaShots, xTimeout)) {");
code("ballistaShotPop(pos);");
code("} else if ((xGetInt(dBallistaShots, xPlayerOwner) == ENEMY_PLAYER) || PvP) {");
code("action = 0;");
code("for(p=1; < ENEMY_PLAYER) {");
code("if (PvP && (p == xGetInt(dBallistaShots, xPlayerOwner))) {");
code("continue;");
code("}");
code("action = action + trCountUnitsInArea(\"\"+xGetInt(dBallistaShots,xUnitName),p,\"Unit\",2);");
code("}");
code("if (action > 0) {");
code("ballistaShotPop(pos);");
code("}");
code("} else if (trCountUnitsInArea(\"\"+xGetInt(dBallistaShots,xUnitName),ENEMY_PLAYER,\"Unit\",2) > 0) {");
code("ballistaShotPop(pos);");
code("}");
code("}");

code("trQuestVarSet(\"sound\", 0);");
code("for(x=xsMin(10, xGetDatabaseCount(dDelayLasers)); >0) {");
code("xDatabaseNext(dDelayLasers);");
code("xUnitSelect(dDelayLasers,xUnitName);");
code("if (xGetInt(dDelayLasers, xLaserPhase) == 0) {");
code("if (trTimeMS() > xGetInt(dDelayLasers, xLaserNext)) {");
code("xSetInt(dDelayLasers, xLaserPhase, 1);");
code("xSetInt(dDelayLasers, xLaserNext, trTimeMS() + 500);");
code("trSetSelectedScale(6.0,6.0,xGetFloat(dDelayLasers,xLaserDist) * 1.3);");
code("trUnitHighlight(3.0,false);");
code("trQuestVarSet(\"sound\", 1);");
code("start = kbGetBlockPosition(\"\"+xGetInt(dDelayLasers,xUnitName));");
code("p = xGetInt(dDelayLasers,xPlayerOwner);");
code("dir = xGetVector(dDelayLasers,xLaserDir);");
code("db = opponentDatabaseName(p);");
code("for(y=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db,xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeOpponentUnit(p);");
code("} else if (rayCollision(db,start,dir,xGetFloat(dDelayLasers,xLaserDist),1.0)) {");
code("damageOpponentUnit(p, 300);");
code("}");
code("}");
code("}");
code("} else {");
code("amt = 0.012 * (xGetInt(dDelayLasers, xLaserNext) - trTimeMS());");
code("if (amt < 0) {");
code("trUnitDestroy();");
code("xFreeDatabaseBlock(dDelayLasers);");
code("} else {");
code("trSetSelectedScale(amt, amt, xGetFloat(dDelayLasers, xLaserDist) * 1.3);");
code("}");
code("}");
code("}");

code("if (trQuestVarGet(\"sound\") == 1) {");
code("trSoundPlayFN(\"sky passage.wav\", \"1\", -1,\"\",\"\");");
code("trSoundPlayFN(\"phoenixattack.wav\", \"1\", -1,\"\",\"\");");
code("trQuestVarSet(\"sound\", 0);");
code("}");

code("while(nextproj < trGetNextUnitScenarioNameNumber()) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+nextproj,true);");
code("if (trUnitIsOwnedBy(0) == false) {");
code("id = kbGetBlockID(\"\"+nextproj, true);");
code("proto = kbGetUnitBaseTypeID(id);");
code("if (proto == kbGetProtoUnitID(\"Ballista Shot\")) {");
code("pos = kbGetBlockPosition(\"\"+nextproj,true);");
code("closest = findShooter(dBallistas,pos);");
code("if (closest > 0) {");
code("xSetPointer(dBallistas, closest);");
code("id = xGetInt(dBallistas, xUnitID);");
code("xsSetContextPlayer(xGetInt(dBallistas,xPlayerOwner));");
code("target = trGetUnitScenarioNameNumber(kbUnitGetTargetUnitID(id));");
code("xsSetContextPlayer(0);");

code("start = kbGetBlockPosition(\"\"+xGetInt(dBallistas,xUnitName),true);");
code("end = kbGetBlockPosition(\"\"+target,true);");

code("pos = vectorSetAsTargetVector(start, end, 100.0);");

code("trUnitSelectClear();");
code("trUnitSelect(\"\"+nextproj, true);");
code("trUnitConvert(ENEMY_PLAYER);");
code("trUnitChangeProtoUnit(\"Transport Ship Greek\");");

code("xSetPointer(dBallistaShots, xAddDatabaseBlock(dBallistaShots));");
code("xSetInt(dBallistaShots, xBallistaShot1, trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\", \"Dwarf\", 1, 1,0,1,0,true);");
code("xSetInt(dBallistaShots, xUnitName, trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\", \"Dwarf\", 1, 1,0,1,0,false);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(ENEMY_PLAYER);");
code("trImmediateUnitGarrison(\"\"+nextproj);");
code("trUnitChangeProtoUnit(\"Dwarf\");");

code("xSetInt(dBallistaShots, xBallistaShot2, nextproj);");
code("xSetInt(dBallistaShots, xTimeout, trTimeMS() + 5000);");
code("xSetInt(dBallistaShots, xPlayerOwner, xGetInt(dBallistas, xPlayerOwner));");

code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dBallistaShots, xBallistaShot1), true);");
code("trUnitSelect(\"\"+1*nextproj, true);");
code("trUnitChangeProtoUnit(\"Relic\");");

code("xUnitSelect(dBallistaShots,xUnitName);");
code("trMutateSelected(kbGetProtoUnitID(\"Hero Greek Achilles\"));");

code("xUnitSelect(dBallistaShots,xBallistaShot1);");
code("trImmediateUnitGarrison(\"\"+xGetInt(dBallistaShots,xUnitName));");

code("trMutateSelected(kbGetProtoUnitID(\"Ballista Shot\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+nextproj, true);");
code("trImmediateUnitGarrison(\"\"+xGetInt(dBallistaShots,xUnitName));");
code("trMutateSelected(kbGetProtoUnitID(\"Fire Siphon Fire\"));");
code("trUnitConvert(0);");
code("xUnitSelect(dBallistaShots, xUnitName);");
code("trMutateSelected(kbGetProtoUnitID(\"Priest Projectile\"));");
code("trSetSelectedScale(0,50,0);");
code("trSetUnitOrientation(getUnitVector(start, end), xsVectorSet(0,1,0), true);");
code("trUnitMoveToPoint(xsVectorGetX(pos),0,xsVectorGetZ(pos), -1, false);");
code("xUnitSelect(dBallistaShots,xBallistaShot1);");
code("trUnitConvert(0);");
code("}");
code("} else if (proto == kbGetProtoUnitID(\"Fire Siphon Fire\")) {");
code("if (xGetDatabaseCount(dFireSiphons) > 0) {");
code("pos = kbGetBlockPosition(\"\"+nextproj,true);");
code("trUnitChangeProtoUnit(\"Lightning sparks\");");
code("closest = findShooter(dFireSiphons,pos);");
code("if (closest > 0) {");
code("xSetPointer(dFireSiphons,closest);");
code("id = xGetInt(dFireSiphons,xUnitID);");
code("xsSetContextPlayer(xGetInt(dFireSiphons,xPlayerOwner));");
code("target = trGetUnitScenarioNameNumber(kbUnitGetTargetUnitID(id));");
code("xsSetContextPlayer(0);");

code("trSoundPlayFN(\"skypassagein.wav\",\"1\",-1,\"\",\"\");");
code("start = kbGetBlockPosition(\"\"+xGetInt(dFireSiphons,xUnitName),true);");
code("pos = kbGetBlockPosition(\"\"+target,true);");
code("dir = getUnitVector(start, pos);");
code("shootLaser(start, dir, 60.0, xGetInt(dFireSiphons,xPlayerOwner));");
code("}");
code("}");
code("} else if (proto == kbGetProtoUnitID(\"Mummy Flies\")) {");
code("if (xGetDatabaseCount(dMummies) > 0) {");
code("pos = kbGetBlockPosition(\"\"+nextproj,true);");
code("trUnitChangeProtoUnit(\"Rocket\");");
code("closest = findShooter(dMummies,pos);");
code("if (closest > 0) {");
code("xSetPointer(dMummies, closest);");
code("id = xGetInt(dMummies,xUnitID);");
code("xsSetContextPlayer(xGetInt(dMummies,xPlayerOwner));");
code("target = trGetUnitScenarioNameNumber(kbUnitGetTargetUnitID(id));");
code("xsSetContextPlayer(0);");

code("start = kbGetBlockPosition(\"\"+xGetInt(dMummies,xUnitName),true);");
code("pos = kbGetBlockPosition(\"\"+target,true);");
code("dir = getUnitVector(start, pos);");

code("addGenericProj(dMummyBalls,start,dir,xGetInt(dMummies,xPlayerOwner));");
code("xSetVector(dMummyBalls,xProjPrev, start);");
code("xSetFloat(dMummyBalls,xProjDist,4.0);");
code("xSetInt(dMummyBalls,xProjType, STATUS_SILENCE);");
code("}");
code("}");
code("}");
code("}");
code("nextproj = 1 + nextproj;");
code("}");

code("if (xGetDatabaseCount(dSphinxes) > 0) {");
code("xDatabaseNext(dSphinxes);");
code("id = xGetInt(dSphinxes,xUnitID);");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("p = xGetInt(dSphinxes,xPlayerOwner);");
code("db = databaseName(p);");
code("if (trUnitAlive() == false || checkEnemyDeactivated(dSphinxes)) {");
code("if (trUnitAlive()) {");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("} else {");
code("trUnitChangeProtoUnit(\"Sphinx\");");
code("}");
code("xFreeDatabaseBlock(dSphinxes);");
code("} else if (xGetInt(db, xSilenceStatus, xGetInt(dSphinxes,xSpecialIndex)) == 1) {");
code("xSetInt(dSphinxes,xSpecialStep,2);");
code("} else if (trTimeMS() > xGetInt(dSphinxes,xSpecialNext)) {");
code("switch(xGetInt(dSphinxes, xSpecialStep))");
code("{");
code("case 0:");
code("{");
code("if (kbUnitGetAnimationActionType(id) == 6) {");
code("xSetInt(dSphinxes, xSpecialNext, trTimeMS() + 1600);");
code("xSetInt(dSphinxes, xSpecialStep, 1);");
code("trUnitOverrideAnimation(39,0,false,false,-1);");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dSphinxes,xUnitName));");
code("db = opponentDatabaseName(p);");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db,xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeOpponentUnit(p);");
code("} else if (unitDistanceToVector(xGetInt(db,xUnitName), pos) < 16) {");
code("silenceUnit(db,5,p);");
code("}");
code("}");
code("if (p == ENEMY_PLAYER) {");
code("if (trQuestVarGet(\"p\"+trCurrentPlayer()+\"nickQuestProgress\") == 1) {");
code("if (unitDistanceToVector(xGetInt(dPlayerData,xPlayerUnit,trCurrentPlayer()), pos) < 16) {");
code("trQuestVarSet(\"p\"+trCurrentPlayer()+\"nickQuestProgress\", 2);");
code("xsEnableRule(\"nick_next_dialog\");");
code("}");
code("}");
code("}");
code("}");
code("}");
code("case 1:");
code("{");
code("xSetInt(dSphinxes, xSpecialNext, trTimeMS() + 10000);");
code("xSetInt(dSphinxes, xSpecialStep, 0);");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("}");
code("}");
code("}");
code("}");

code("if (xGetDatabaseCount(dMountainGiants) > 0) {");
code("xDatabaseNext(dMountainGiants);");
code("id = xGetInt(dMountainGiants,xUnitID);");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("p = xGetInt(dMountainGiants,xPlayerOwner);");
code("db = databaseName(p);");
code("if (trUnitAlive() == false) {");
code("trQuestVarSet(\"giantKills\", 1 + trQuestVarGet(\"giantKills\"));");
code("trUnitChangeProtoUnit(\"Mountain Giant\");");
code("xFreeDatabaseBlock(dMountainGiants);");
code("} else if (checkEnemyDeactivated(dMountainGiants)) {");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("xFreeDatabaseBlock(dMountainGiants);");
code("} else if (xGetInt(db, xSilenceStatus, xGetInt(dMountainGiants, xSpecialIndex)) == 1) {");
code("xSetInt(dMountainGiants, xSpecialStep, 2);");
code("} else if (trTimeMS() > xGetInt(dMountainGiants, xSpecialNext)) {");
code("switch(xGetInt(dMountainGiants, xSpecialStep))");
code("{");
code("case 0:");
code("{");
code("if (kbUnitGetAnimationActionType(id) == 6) {");
code("xsSetContextPlayer(p);");
code("target = trGetUnitScenarioNameNumber(kbUnitGetTargetUnitID(id));");
code("xsSetContextPlayer(0);");
code("xSetVector(dMountainGiants,xSpecialTarget,kbGetBlockPosition(\"\"+target));");

code("xSetInt(dMountainGiants, xSpecialNext, trTimeMS() + 1800);");
code("xSetInt(dMountainGiants, xSpecialStep, 1);");
code("trUnitOverrideAnimation(39,0,false,false,-1);");
code("}");
code("}");
code("case 1:");
code("{");
code("end = xGetVector(dMountainGiants,xSpecialTarget);");
code("db = opponentDatabaseName(p);");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db,xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeOpponentUnit(p);");
code("} else if (unitDistanceToVector(xGetInt(db,xUnitName), end) < 4) {");
code("damageOpponentUnit(p, 100 + 100 * trQuestVarGet(\"stage\"));");
code("if (xGetBool(db, xIsHero) && trCurrentPlayer() == xGetInt(db, xPlayerOwner)) {");
code("trCameraShake(0.7, 0.7);");
code("}");
code("}");
code("}");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(end),0,xsVectorGetZ(end),45,true);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(end),0,xsVectorGetZ(end),135,false);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Tartarian Gate Flame\");");
code("xSetInt(dMountainGiants, xSpecialStep, 2);");
code("xSetInt(dMountainGiants, xSpecialNext, xGetInt(dMountainGiants, xSpecialNext) + 1200);");

code("}");
code("case 2:");
code("{");
code("xSetInt(dMountainGiants, xSpecialStep, 0);");
code("xSetInt(dMountainGiants, xSpecialNext, trTimeMS() + 15000);");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("}");
code("}");
code("} else {");
code("action = xGetInt(db, xStunStatus, xGetInt(dMountainGiants, xSpecialIndex));");
code("if (xGetBool(db, xLaunched, xGetInt(dMountainGiants, xSpecialIndex))) {");
code("action = action + 1;");
code("}");
code("if (action > 0 && xGetInt(dMountainGiants, xSpecialStep) == 1) {");
code("xSetInt(dMountainGiants, xSpecialStep, 0);");
code("xSetInt(dMountainGiants, xSpecialNext, trTimeMS() + 15000);");
code("}");
code("}");
code("}");

code("for(x=xsMin(4, xGetDatabaseCount(dMedusaBalls)); >0) {");
code("action = processGenericProj(dMedusaBalls);");
code("p = xGetInt(dMedusaBalls, xPlayerOwner);");
code("db = opponentDatabaseName(p);");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dMedusaBalls,xUnitName));");
code("loc = vectorToGrid(pos);");
code("for(y=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db,xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeOpponentUnit(p);");
code("} else if (unitDistanceToVector(xGetInt(db,xUnitName), pos) < 2.0) {");
code("stunUnit(db, 3.0, p);");
code("action = PROJ_REMOVE;");
code("break;");
code("}");
code("}");
code("if (action == PROJ_FALLING) {");
code("xUnitSelect(dMedusaBalls,xMedusaBallTarget);");
code("if (trUnitAlive()) {");
code("end = kbGetBlockPosition(\"\"+xGetInt(dMedusaBalls,xMedusaBallTarget));");
code("dir = getUnitVector(pos,end);");
code("xSetVector(dMedusaBalls,xProjDir,dir);");
code("}");
code("} else if (action == PROJ_BOUNCE) {");
code("xSetInt(dMedusaBalls, xMedusaBallBounces, xGetInt(dMedusaBalls, xMedusaBallBounces) - 1);");
code("} else if (action == PROJ_REMOVE ||");
code("terrainIsType(loc, TERRAIN_WALL, TERRAIN_SUB_WALL) ||");
code("xGetInt(dMedusaBalls, xMedusaBallBounces) <= 0) {");
code("xUnitSelectByID(dMedusaBalls,xUnitID);");
code("trUnitChangeProtoUnit(\"Conversion SFX\");");
code("xFreeDatabaseBlock(dMedusaBalls);");
code("}");
code("}");

code("if (xGetDatabaseCount(dMedusas) >0) {");
code("xDatabaseNext(dMedusas);");
code("id = xGetInt(dMedusas,xUnitID);");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("p = xGetInt(dMedusas, xPlayerOwner);");
code("db = databaseName(p);");
code("if (trUnitAlive() == false || checkEnemyDeactivated(dMedusas)) {");
code("trUnitChangeProtoUnit(\"Medusa\");");
code("xFreeDatabaseBlock(dMedusas);");
code("} else if (xGetInt(db, xSilenceStatus, xGetInt(dMedusas, xSpecialIndex)) == 1) {");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("xSetInt(dMedusas, xSpecialStep, 2);");
code("} else if (trTimeMS() > xGetInt(dMedusas, xSpecialNext)) {");
code("switch(xGetInt(dMedusas, xSpecialStep))");
code("{");
code("case 0:");
code("{");
code("if (kbUnitGetAnimationActionType(id) == 12) {");
code("xsSetContextPlayer(p);");
code("target = trGetUnitScenarioNameNumber(kbUnitGetTargetUnitID(id));");
code("xsSetContextPlayer(0);");
code("xSetInt(dMedusas, xSpecialTarget, target);");

code("xSetInt(dMedusas, xSpecialStep, 1);");
code("xSetInt(dMedusas, xSpecialNext, trTimeMS() + 1200);");
code("trUnitOverrideAnimation(40,0,false,false,-1);");
code("}");
code("}");
code("case 1:");
code("{");
code("end = kbGetBlockPosition(\"\"+xGetInt(dMedusas, xSpecialTarget));");
code("start = kbGetBlockPosition(\"\"+xGetInt(dMedusas,xUnitName));");
code("dir = getUnitVector(start, end);");
code("addGenericProj(dMedusaBalls,start,dir,p);");
code("xSetInt(dMedusaBalls, xMedusaBallTarget, xGetInt(dMedusas, xSpecialTarget));");
code("xSetInt(dMedusaBalls, xMedusaBallBounces, 10);");
code("xSetInt(dMedusas, xSpecialStep, 2);");
code("xSetInt(dMedusas, xSpecialNext, xGetInt(dMedusas, xSpecialNext) + 800);");
code("}");
code("case 2:");
code("{");
code("xSetInt(dMedusas, xSpecialStep, 0);");
code("xSetInt(dMedusas, xSpecialNext, trTimeMS() + 18000);");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("}");
code("}");
code("} else {");
code("action = xGetInt(db, xStunStatus, xGetInt(dMedusas, xSpecialIndex));");
code("if (xGetBool(db, xLaunched, xGetInt(dMedusas, xSpecialIndex))) {");
code("action = action + 1;");
code("}");
code("if (action > 0 && xGetInt(dMedusas, xSpecialStep) == 1) {");
code("xSetInt(dMedusas, xSpecialStep, 0);");
code("xSetInt(dMedusas, xSpecialNext, trTimeMS() + 18000);");
code("}");
code("}");
code("}");

code("if (xGetDatabaseCount(dValkyries) > 0) {");
code("xDatabaseNext(dValkyries);");
code("id = xGetInt(dValkyries,xUnitID);");
code("p = xGetInt(dValkyries,xPlayerOwner);");
code("db = databaseName(p);");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("if (trUnitAlive() == false || checkEnemyDeactivated(dValkyries)) {");
code("xUnitSelect(dValkyries,xSpecialNext);");
code("trUnitDestroy();");
code("xFreeDatabaseBlock(dValkyries);");
code("} else {");
code("id = xGetPointer(db);");
code("if (xSetPointer(db, xGetInt(dValkyries, xSpecialIndex))) {");
code("xSetFloat(db, xMagicResist, 1.0 - xGetInt(db, xSilenceStatus));");
code("if (xGetInt(db, xSilenceStatus) != xGetInt(dValkyries, xSpecialStep)) {");
code("xSetInt(dValkyries, xSpecialStep, xGetInt(db, xSilenceStatus));");
code("xUnitSelect(dValkyries,xSpecialNext);");
code("if (xGetInt(db, xSilenceStatus) == 1) {");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");
code("} else {");
code("trMutateSelected(kbGetProtoUnitID(\"Vortex Finish Linked\"));");
code("}");
code("}");
code("xSetPointer(db, id);");
code("}");
code("}");
code("}");

code("if (xGetDatabaseCount(dDryads) > 0) {");
code("xDatabaseNext(dDryads);");
code("id = xGetInt(dDryads,xUnitID);");
code("p = xGetInt(dDryads, xPlayerOwner);");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("if (trUnitAlive() == false) {");
code("if (xGetInt(dDryads, xSpecialStep) == 0) {");
code("db = opponentDatabaseName(p);");
code("pos = xGetVector(dDryads,xSpecialNext);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Lampades Blood\");");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("id = xGetInt(db,xUnitID);");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("if (trUnitAlive() == false) {");
code("removeOpponentUnit(p);");
code("} else if (unitDistanceToVector(xGetInt(db,xUnitName), pos) < 16) {");
code("poisonUnit(db, 10.0, 5.0 * trQuestVarGet(\"stage\"), p);");
code("}");
code("}");
code("if (p == ENEMY_PLAYER) {");
code("if (trQuestVarGet(\"p\"+trCurrentPlayer()+\"nickQuestProgress\") == 2) {");
code("if (unitDistanceToVector(xGetInt(dPlayerData,xPlayerUnit,trCurrentPlayer()), pos) < 16) {");
code("trQuestVarSet(\"p\"+trCurrentPlayer()+\"nickQuestProgress\", 3);");
code("xsEnableRule(\"nick_next_dialog\");");
code("}");
code("}");
code("}");
code("}");
code("xFreeDatabaseBlock(dDryads);");
code("} else if (checkEnemyDeactivated(dDryads)) {");
code("xFreeDatabaseBlock(dDryads);");
code("} else {");
code("db = databaseName(p);");
code("xSetVector(dDryads, xSpecialNext, kbGetBlockPosition(\"\"+xGetInt(dDryads,xUnitName)));");
code("xSetInt(dDryads, xSpecialStep, xGetInt(db, xSilenceStatus, xGetInt(dDryads, xSpecialIndex)));");
code("}");
code("}");

code("if (xGetDatabaseCount(dScarabs) > 0) {");
code("xDatabaseNext(dScarabs);");
code("id = xGetInt(dScarabs,xUnitID);");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("if (trUnitAlive() == false || checkEnemyDeactivated(dScarabs)) {");
code("if (xGetInt(dScarabs, xSpecialStep) == 0) {");
code("pos = xGetVector(dScarabs,xSpecialNext);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Pestilence SFX1\");");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(ENEMY_PLAYER);");
code("trUnitChangeProtoUnit(\"Victory Marker\");");
code("}");
code("xFreeDatabaseBlock(dScarabs);");
code("} else if (checkEnemyDeactivated(dScarabs)) {");
code("xFreeDatabaseBlock(dScarabs);");
code("} else {");
code("db = databaseName(xGetInt(dScarabs,xPlayerOwner));");
code("xSetVector(dScarabs,xSpecialNext,kbGetBlockPosition(\"\"+xGetInt(dScarabs,xUnitName)));");
code("xSetInt(dScarabs, xSpecialStep, xGetInt(db, xSilenceStatus, xGetInt(dScarabs, xSpecialIndex)));");
code("}");
code("}");

code("if (xGetDatabaseCount(dAutomatonBombs) > 0) {");
code("xDatabaseNext(dAutomatonBombs);");
code("if (trTimeMS() > xGetInt(dAutomatonBombs, xTimeout)) {");
code("p = xGetInt(dAutomatonBombs,xPlayerOwner);");
code("db = opponentDatabaseName(p);");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dAutomatonBombs,xUnitName));");
code("xUnitSelect(dAutomatonBombs,xUnitName);");
code("trDamageUnitPercent(-100);");
code("trUnitChangeProtoUnit(\"Tartarian Gate Flame\");");
code("xUnitSelect(dAutomatonBombs,xUnitName);");
code("trDamageUnitPercent(-100);");
code("trSetSelectedScale(1.0,1.0,0.4);");
code("xFreeDatabaseBlock(dAutomatonBombs);");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("id = xGetInt(db,xUnitID);");
code("xUnitSelectByID(db,xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (unitDistanceToVector(xGetInt(db,xUnitName), pos) < 16) {");
code("damageOpponentUnit(p, 200);");
code("}");
code("}");
code("}");
code("}");

code("if (xGetDatabaseCount(dAutomatons) > 0) {");
code("xDatabaseNext(dAutomatons);");
code("id = xGetInt(dAutomatons,xUnitID);");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("if (trUnitAlive() == false) {");
code("if (xGetInt(dAutomatons, xSpecialStep) == 0) {");
code("trUnitHighlight(3.0, true);");
code("trSoundPlayFN(\"gatherpoint.wav\",\"1\",-1,\"\",\"\");");
code("xSetPointer(dAutomatonBombs, xAddDatabaseBlock(dAutomatonBombs));");
code("xSetInt(dAutomatonBombs,xUnitName,xGetInt(dAutomatons,xUnitName));");
code("xSetInt(dAutomatonBombs,xPlayerOwner,xGetInt(dAutomatons,xPlayerOwner));");
code("xSetInt(dAutomatonBombs,xTimeout,trTimeMS() + 3000);");
code("}");
code("xFreeDatabaseBlock(dAutomatons);");
code("} else if (checkEnemyDeactivated(dAutomatons)) {");
code("xFreeDatabaseBlock(dAutomatons);");
code("} else {");
code("db = databaseName(xGetInt(dAutomatons,xPlayerOwner));");
code("xSetInt(dAutomatons, xSpecialStep, xGetInt(db, xSilenceStatus, xGetInt(dAutomatons, xSpecialIndex)));");
code("}");
code("}");

code("if(xGetDatabaseCount(dFrostGiants) >0) {");
code("xDatabaseNext(dFrostGiants);");
code("id = xGetInt(dFrostGiants,xUnitID);");
code("p = xGetInt(dFrostGiants,xPlayerOwner);");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("db = databaseName(p);");
code("if (trUnitAlive() == false) {");
code("trQuestVarSet(\"giantKills\", 1 + trQuestVarGet(\"giantKills\"));");
code("if (trQuestVarGet(\"frostGiantHunt\") == 1) {");
code("trQuestVarSet(\"frostGiantBones\", 1 + trQuestVarGet(\"frostGiantBones\"));");
code("}");
code("trUnitChangeProtoUnit(\"Frost Giant\");");
code("xFreeDatabaseBlock(dFrostGiants);");
code("} else if (checkEnemyDeactivated(dFrostGiants)) {");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("xFreeDatabaseBlock(dFrostGiants);");
code("} else if (xGetInt(db, xSilenceStatus, xGetInt(dFrostGiants, xSpecialIndex)) == 1) {");
code("xSetInt(dFrostGiants, xSpecialStep, 2);");
code("} else if (trTimeMS() > xGetInt(dFrostGiants, xSpecialNext)) {");
code("switch(xGetInt(dFrostGiants, xSpecialStep))");
code("{");
code("case 0:");
code("{");
code("if (kbUnitGetAnimationActionType(id) == 6) {");
code("xsSetContextPlayer(p);");
code("target = trGetUnitScenarioNameNumber(kbUnitGetTargetUnitID(id));");
code("xsSetContextPlayer(0);");
code("xSetInt(dFrostGiants, xSpecialTarget, target);");
code("xSetInt(dFrostGiants, xSpecialStep, 1);");
code("xSetInt(dFrostGiants, xSpecialNext, trTimeMS() + 1400);");
code("trUnitOverrideAnimation(40,0,false,false,-1);");
code("}");
code("}");
code("case 1:");
code("{");
code("action = 0;");
code("db = opponentDatabaseName(p);");
code("for (x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("if (xGetInt(dFrostGiants, xSpecialTarget) == xGetInt(db,xUnitName)) {");
code("xUnitSelectByID(db,xUnitID);");
code("stunUnit(db, 3.0, p);");
code("action = 1;");
code("break;");
code("}");
code("}");
code("xSetInt(dFrostGiants, xSpecialStep, 2);");
code("xSetInt(dFrostGiants, xSpecialNext, xGetInt(dFrostGiants, xSpecialNext) + 600);");
code("if (action == 0) {");
code("xSetInt(dFrostGiants, xSpecialTarget, -1);");
code("} else if (trQuestVarGet(\"p\"+trCurrentPlayer()+\"nickQuestProgress\") == 3) {");
code("if (xGetInt(dFrostGiants, xSpecialTarget) == xGetInt(dPlayerData,xPlayerUnit,trCurrentPlayer())) {");
code("trQuestVarSet(\"p\"+trCurrentPlayer()+\"nickQuestProgress\", 4);");
code("xsEnableRule(\"nick_next_dialog\");");
code("}");
code("}");
code("}");
code("case 2:");
code("{");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("xSetInt(dFrostGiants, xSpecialStep, 0);");
code("if (xGetInt(dFrostGiants, xSpecialTarget) == -1) {");
code("xSetInt(dFrostGiants, xSpecialNext, trTimeMS());");
code("} else {");
code("xSetInt(dFrostGiants, xSpecialNext, trTimeMS() + 15000);");
code("}");
code("}");
code("}");
code("} else {");
code("action = xGetInt(db, xStunStatus, xGetInt(dFrostGiants, xSpecialIndex));");
code("if (xGetBool(db, xLaunched, xGetInt(dFrostGiants, xSpecialIndex))) {");
code("action = action + 1;");
code("}");
code("if (action > 0 && xGetInt(dFrostGiants, xSpecialStep) == 1) {");
code("xSetInt(dFrostGiants, xSpecialStep, 0);");
code("xSetInt(dFrostGiants, xSpecialNext, trTimeMS() + 18000);");
code("}");
code("}");
code("}");

code("if (xGetDatabaseCount(dBarrages) > 0) {");
code("xDatabaseNext(dBarrages);");
code("if (trTimeMS() > xGetInt(dBarrages, xTimeout)) {");
code("p = xGetInt(dBarrages,xPlayerOwner);");
code("db = opponentDatabaseName(p);");
code("xSetInt(dBarrages, xTimeout, 300 + xGetInt(dBarrages, xTimeout));");
code("pos = xGetVector(dBarrages,xBarragePos);");
code("dir = xGetVector(dBarrages,xBarrageDir);");
code("if (xGetInt(dBarrages, xBarrageCount) <= 3) {");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("id = xGetInt(db,xUnitID);");
code("xUnitSelectByID(db,xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeOpponentUnit(p);");
code("} else if (unitDistanceToVector(xGetInt(db,xUnitName), pos) < 9.0) {");
code("damageOpponentUnit(p,100);");
code("}");
code("}");
code("}");

code("end = xsVectorSet(xsVectorGetX(pos) + 2.0 * xsVectorGetX(dir),0,xsVectorGetZ(pos) + 2.0 * xsVectorGetZ(dir));");
code("if (xGetInt(dBarrages, xBarrageCount) >= 0) {");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(end),0,xsVectorGetZ(end),0,true);");
code("trArmySelect(\"1,0\");");
code("trSetUnitOrientation(dir,vector(0,1,0),true);");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Barrage\");");
code("}");


code("xSetInt(dBarrages, xBarrageCount, xGetInt(dBarrages, xBarrageCount) - 1);");

code("loc = vectorToGrid(end);");
code("if (terrainIsType(loc, TERRAIN_WALL, TERRAIN_SUB_WALL) || xGetInt(dBarrages, xBarrageCount) <= -2) {");
code("xFreeDatabaseBlock(dBarrages);");
code("} else {");
code("xSetVector(dBarrages,xBarragePos,end);");
code("}");
code("}");
code("}");

code("if(xGetDatabaseCount(dSatyrs) >0) {");
code("xDatabaseNext(dSatyrs);");
code("id = xGetInt(dSatyrs,xUnitID);");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("p = xGetInt(dSatyrs,xPlayerOwner);");
code("db = databaseName(p);");
code("if (trUnitAlive() == false || checkEnemyDeactivated(dSatyrs)) {");
code("xFreeDatabaseBlock(dSatyrs);");
code("} else if (xGetInt(db, xSilenceStatus, xGetInt(dSatyrs, xSpecialIndex)) == 1) {");
code("xSetInt(dSatyrs, xSpecialNext, trTimeMS() + 10000);");
code("} else if (trTimeMS() > xGetInt(dSatyrs, xSpecialNext)) {");
code("if (kbUnitGetAnimationActionType(id) == 12) {");
code("xsSetContextPlayer(p);");
code("target = trGetUnitScenarioNameNumber(kbUnitGetTargetUnitID(id));");
code("xsSetContextPlayer(0);");
code("xSetInt(dSatyrs, xSpecialNext, trTimeMS() + 20000);");
code("end = kbGetBlockPosition(\"\"+target);");
code("start = kbGetBlockPosition(\"\"+xGetInt(dSatyrs,xUnitName));");
code("dir = getUnitVector(start,end);");

code("trQuestVarSetFromRand(\"sound\", 1, 3, true);");
code("trSoundPlayFN(\"rainofarrows\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");

code("pos = xsVectorSet(xsVectorGetX(end) - 8.0 * xsVectorGetX(dir),0,xsVectorGetZ(end) - 8.0 * xsVectorGetZ(dir));");
code("xSetPointer(dBarrages, xAddDatabaseBlock(dBarrages));");
code("xSetVector(dBarrages,xBarrageDir,dir);");
code("xSetVector(dBarrages,xBarragePos,pos);");
code("xSetInt(dBarrages,xTimeout,trTimeMS());");
code("xSetInt(dBarrages,xBarrageCount,5);");
code("xSetInt(dBarrages,xPlayerOwner,p);");
code("}");
code("}");
code("}");

code("if(xGetDatabaseCount(dBattleBoars) >0) {");
code("xDatabaseNext(dBattleBoars);");
code("id = xGetInt(dBattleBoars,xUnitID);");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("p = xGetInt(dBattleBoars,xPlayerOwner);");
code("db = databaseName(p);");
code("if (trUnitAlive() == false || checkEnemyDeactivated(dBattleBoars)) {");
code("if (trUnitAlive()) {");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("} else {");
code("trUnitChangeProtoUnit(\"Battle Boar\");");
code("}");
code("xFreeDatabaseBlock(dBattleBoars);");
code("} else if (xGetInt(db, xSilenceStatus, xGetInt(dBattleBoars, xSpecialIndex)) == 1) {");
code("xSetInt(dBattleBoars, xSpecialStep, 2);");
code("} else if (trTimeMS() > xGetInt(dBattleBoars, xSpecialNext)) {");
code("switch(xGetInt(dBattleBoars, xSpecialStep))");
code("{");
code("case 0:");
code("{");
code("if (kbUnitGetAnimationActionType(id) == 6) {");
code("xsSetContextPlayer(p);");
code("target = trGetUnitScenarioNameNumber(kbUnitGetTargetUnitID(id));");
code("xsSetContextPlayer(0);");
code("xSetInt(dBattleBoars, xSpecialTarget, target);");
code("xSetInt(dBattleBoars, xSpecialStep, 1);");
code("xSetInt(dBattleBoars, xSpecialNext, trTimeMS() + 450);");
code("trUnitOverrideAnimation(26,0,false,false,-1);");
code("}");
code("}");
code("case 1:");
code("{");
code("start = kbGetBlockPosition(\"\"+xGetInt(dBattleBoars,xUnitName));");
code("end = kbGetBlockPosition(\"\"+xGetInt(dBattleBoars,xSpecialTarget));");
code("db = opponentDatabaseName(p);");
code("for (x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db,xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeOpponentUnit(p);");
code("} else if (unitDistanceToVector(xGetInt(db,xUnitName), end) < 9.0) {");
code("pos = vectorSetAsTargetVector(start, kbGetBlockPosition(\"\"+xGetInt(db,xUnitName)), 20.0);");
code("launchUnit(db, pos);");
code("}");
code("}");
code("xSetInt(dBattleBoars, xSpecialStep, 2);");
code("xSetInt(dBattleBoars, xSpecialNext, xGetInt(dBattleBoars, xSpecialNext) + 300);");
code("}");
code("case 2:");
code("{");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("xSetInt(dBattleBoars, xSpecialStep, 0);");
code("xSetInt(dBattleBoars, xSpecialNext, trTimeMS() + 15000);");
code("}");
code("}");
code("} else {");
code("action = xGetInt(db, xStunStatus, xGetInt(dBattleBoars, xSpecialIndex));");
code("if (xGetBool(db, xLaunched, xGetInt(dBattleBoars, xSpecialIndex))) {");
code("action = action + 1;");
code("}");
code("if (action > 0 && xGetInt(dBattleBoars, xSpecialStep) == 1) {");
code("xSetInt(dBattleBoars, xSpecialStep, 0);");
code("xSetInt(dBattleBoars, xSpecialNext, trTimeMS() + 18000);");
code("}");
code("}");
code("}");

code("if (xGetDatabaseCount(dAvengerProj) > 0) {");
code("if (processGenericProj(dAvengerProj) == PROJ_FALLING) {");
code("p = xGetInt(dAvengerProj,xPlayerOwner);");
code("db = opponentDatabaseName(p);");
code("pos = xGetVector(dAvengerProj,xProjPrev);");
code("dir = xGetVector(dAvengerProj,xProjDir);");
code("end = kbGetBlockPosition(\"\"+xGetInt(dAvengerProj,xUnitName));");
code("amt = distanceBetweenVectors(pos,end,false);");
code("if (amt > 2.0) {");
code("xSetFloat(dAvengerProj, xProjDist, xGetFloat(dAvengerProj, xProjDist) + amt);");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db,xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeOpponentUnit(p);");
code("} else if (rayCollision(db,pos,dir,amt + 1.0,9.0)) {");
code("damageOpponentUnit(p, amt * 20.0);");
code("silenceUnit(db,5.0,p);");
code("}");
code("}");
code("xSetVector(dAvengerProj,xProjPrev,end);");
code("}");
code("end = xsVectorSet(xsVectorGetX(end) + 4.0 * xsVectorGetX(dir),0,xsVectorGetZ(end) + 4.0 * xsVectorGetZ(dir));");
code("loc = vectorToGrid(end);");
code("if (xGetFloat(dAvengerProj, xProjDist) >= xGetFloat(dAvengerProj, xAvengerProjDist) ||");
code("terrainIsType(loc, TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("db = databaseName(p);");
code("xUnitSelectByID(dAvengerProj,xUnitID);");
code("trDamageUnitPercent(-100);");
code("trUnitChangeProtoUnit(\"Transport Ship Greek\");");
code("xUnitSelectByID(dAvengerProj,xUnitID);");
code("trDamageUnitPercent(-100);");
code("xUnitSelect(dAvengerProj,xAvengerProjUnit);");
code("if (trUnitAlive()) {");
code("trImmediateUnitGarrison(\"\"+xGetInt(dAvengerProj,xUnitName));");
code("trUnitChangeProtoUnit(\"Avenger\");");
code("xSetInt(dAvengers,xSpecialStep,2,xGetInt(dAvengerProj,xAvengerProjIndex));");
code("}");
code("xUnitSelectByID(dAvengerProj,xUnitID);");
code("trUnitChangeProtoUnit(\"Dust Small\");");

code("xFreeDatabaseBlock(dAvengerProj);");
code("}");
code("}");
code("}");

code("if(xGetDatabaseCount(dAvengers) >0) {");
code("xDatabaseNext(dAvengers);");
code("id = xGetInt(dAvengers,xUnitID);");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("p = xGetInt(dAvengers,xPlayerOwner);");
code("db = databaseName(p);");
code("if (trUnitAlive() == false || checkEnemyDeactivated(dAvengers)) {");
code("if (trUnitAlive()) {");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("} else {");
code("trUnitChangeProtoUnit(\"Avenger\");");
code("}");
code("xFreeDatabaseBlock(dAvengers);");
code("} else if (xGetInt(db, xSilenceStatus, xGetInt(dAvengers, xSpecialIndex)) == 1) {");
code("xSetInt(dAvengers, xSpecialNext, trTimeMS() + 10000);");
code("} else if (trTimeMS() > xGetInt(dAvengers, xSpecialNext)) {");
code("switch(xGetInt(dAvengers,xSpecialStep))");
code("{");
code("case 0:");
code("{");
code("xsSetContextPlayer(p);");
code("if ((kbUnitGetActionType(id) == 6) || (kbUnitGetActionType(id) == 48)) {");
code("target = trGetUnitScenarioNameNumber(kbUnitGetTargetUnitID(id));");
code("xsSetContextPlayer(0);");
code("end = kbGetBlockPosition(\"\"+target);");
code("start = kbGetBlockPosition(\"\"+xGetInt(dAvengers,xUnitName));");
code("if (distanceBetweenVectors(start, end) < 144) {");
code("trSoundPlayFN(\"sphinxspecialattack.wav\",\"1\",-1,\"\",\"\");");
code("dir = getUnitVector(start,end);");
code("trSetSelectedScale(0,0,0);");
code("addGenericProj(dAvengerProj,start,dir,p);");
code("xSetVector(dAvengerProj,xProjPrev,start);");
code("xSetFloat(dAvengerProj,xAvengerProjDist,distanceBetweenVectors(start, end,false) + 5.0);");
code("xSetInt(dAvengerProj,xAvengerProjUnit,xGetInt(dAvengers,xUnitName));");
code("xSetInt(dAvengerProj,xAvengerProjIndex,xGetPointer(dAvengers));");

code("xSetInt(dAvengers,xSpecialStep, 1);");
code("xSetInt(dAvengers, xSpecialNext, trTimeMS() + 3000);");
code("xSetInt(dAvengers,xSpecialTarget,xGetNewestPointer(dAvengerProj));");
code("}");
code("} else {");
code("xsSetContextPlayer(0);");
code("}");
code("}");
code("case 2:");
code("{");
code("xSetInt(dAvengers,xSpecialStep,0);");
code("xSetInt(dAvengers,xSpecialNext, trTimeMS() + 10000);");
code("}");
code("}");
code("}");
code("}");

code("if (xGetDatabaseCount(dBallistas) > 0) {");
code("xDatabaseNext(dBallistas);");
code("xUnitSelectByID(dBallistas,xUnitID);");
code("if (trUnitAlive() == false || checkEnemyDeactivated(dBallistas)) {");
code("xFreeDatabaseBlock(dBallistas);");
code("}");
code("}");

code("if (xGetDatabaseCount(dFireSiphons) > 0) {");
code("xDatabaseNext(dFireSiphons);");
code("id = xGetInt(dFireSiphons,xUnitID);");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("if (trUnitAlive() == false || checkEnemyDeactivated(dFireSiphons)) {");
code("xFreeDatabaseBlock(dFireSiphons);");
code("} else if ((kbUnitGetAnimationActionType(id) == 9) && (xGetInt(dFireSiphons,xPlayerOwner) == ENEMY_PLAYER)) {");
code("if (trTimeMS() > xGetInt(dFireSiphons, xSpecialStep)) {");
code("xSetInt(dFireSiphons, xSpecialStep, trTimeMS() + 3000);");
code("xDatabaseNext(dPlayerUnits);");
code("pos = xGetVector(dPlayerUnits,xUnitPos);");
code("trUnitMoveToPoint(xsVectorGetX(pos),0,xsVectorGetZ(pos),-1,true);");
code("}");
code("}");
code("}");

code("if (xGetDatabaseCount(dMummyBalls) > 0) {");
code("if (processGenericProj(dMummyBalls) == PROJ_FALLING) {");
code("p = xGetInt(dMummyBalls,xPlayerOwner);");
code("db = opponentDatabaseName(p);");
code("pos = xGetVector(dMummyBalls,xProjPrev);");
code("dir = xGetVector(dMummyBalls,xProjDir);");
code("end = kbGetBlockPosition(\"\"+xGetInt(dMummyBalls,xUnitName));");
code("amt = distanceBetweenVectors(end, pos, false);");
code("xSetVector(dMummyBalls, xProjPrev, end);");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db,xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeOpponentUnit(p);");
code("} else if (rayCollision(db,pos,dir,amt + 4.0,xGetFloat(dMummyBalls,xProjDist))) {");
code("damageOpponentUnit(p, xsMin(100.0, amt * 10));");
code("switch(xGetInt(dMummyBalls, xProjType))");
code("{");
code("case STATUS_SILENCE:");
code("{");
code("silenceUnit(db, 5.0, p);");
code("}");
code("case STATUS_POISON:");
code("{");
code("poisonUnit(db, 10, 5.0 * trQuestVarGet(\"stage\"), p);");
code("}");
code("}");
code("}");
code("}");
code("loc = vectorToGrid(end);");
code("if (terrainIsType(loc, TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("xFreeDatabaseBlock(dMummyBalls);");
code("}");
code("}");
code("}");

code("if (xGetDatabaseCount(dMummies) >0) {");
code("xDatabaseNext(dMummies);");
code("id = xGetInt(dMummies,xUnitID);");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("p = xGetInt(dMummies, xPlayerOwner);");
code("db = databaseName(p);");
code("if (trUnitAlive() == false || checkEnemyDeactivated(dMummies)) {");
code("if (trUnitAlive()) {");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("} else {");
code("trUnitChangeProtoUnit(\"Mummy\");");
code("}");
code("xFreeDatabaseBlock(dMummies);");
code("} else if (xGetInt(db, xSilenceStatus, xGetInt(dMummies, xSpecialIndex)) == 1) {");
code("xSetInt(dMummies, xSpecialStep, 2);");
code("} else if (trTimeMS() > xGetInt(dMummies, xSpecialNext)) {");
code("switch(xGetInt(dMummies, xSpecialStep))");
code("{");
code("case 0:");
code("{");
code("if (kbUnitGetAnimationActionType(id) == 12) {");
code("xsSetContextPlayer(p);");
code("target = trGetUnitScenarioNameNumber(kbUnitGetTargetUnitID(id));");
code("xsSetContextPlayer(0);");
code("end = kbGetBlockPosition(\"\"+target);");
code("start = kbGetBlockPosition(\"\"+xGetInt(dMummies,xUnitName));");
code("dir = getUnitVector(start,end);");
code("xSetVector(dMummies,xMummyStart,start);");
code("xSetVector(dMummies,xMummyDir,dir);");
code("xSetInt(dMummies, xSpecialStep, 1);");
code("xSetInt(dMummies, xSpecialNext, trTimeMS() + 1000);");
code("trUnitOverrideAnimation(37,0,false,false,-1);");
code("}");
code("}");
code("case 1:");
code("{");
code("start = xGetVector(dMummies,xMummyStart);");
code("dir = xGetVector(dMummies,xMummyDir);");
code("addGenericProj(dMummyBalls,start,dir,p);");
code("xSetInt(dMummyBalls, xProjProto, kbGetProtoUnitID(\"Lampades Blood\"));");
code("xSetVector(dMummyBalls,xProjPrev,start);");
code("xSetFloat(dMummyBalls,xProjDist,16);");
code("xSetInt(dMummyBalls,xProjType,STATUS_POISON);");
code("xSetInt(dMummies, xSpecialStep, 2);");
code("xSetInt(dMummies, xSpecialNext, xGetInt(dMummies, xSpecialNext) + 3000);");
code("}");
code("case 2:");
code("{");
code("xSetInt(dMummies, xSpecialStep, 0);");
code("xSetInt(dMummies, xSpecialNext, trTimeMS() + 18000);");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("}");
code("}");
code("} else {");
code("action = xGetInt(db, xStunStatus, xGetInt(dMummies, xSpecialIndex));");
code("if (xGetBool(db, xLaunched, xGetInt(dMummies, xSpecialIndex))) {");
code("action = action + 1;");
code("}");
code("if (action > 0 && xGetInt(dMummies, xSpecialStep) == 1) {");
code("xSetInt(dMummies, xSpecialStep, 0);");
code("xSetInt(dMummies, xSpecialNext, trTimeMS() + 18000);");
code("}");
code("}");
code("}");

code("if(xGetDatabaseCount(dScorpionMen) >0) {");
code("xDatabaseNext(dScorpionMen);");
code("id = xGetInt(dScorpionMen,xUnitID);");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("p = xGetInt(dScorpionMen,xPlayerOwner);");
code("db = databaseName(p);");
code("if (trUnitAlive() == false || checkEnemyDeactivated(dScorpionMen)) {");
code("if (trUnitAlive()) {");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("} else {");
code("trUnitChangeProtoUnit(\"Scorpion Man\");");
code("}");
code("xFreeDatabaseBlock(dScorpionMen);");
code("} else if (xGetInt(db, xSilenceStatus, xGetInt(dScorpionMen, xSpecialIndex)) == 1) {");
code("xSetInt(dScorpionMen, xSpecialStep, 2);");
code("} else if (trTimeMS() > xGetInt(dScorpionMen, xSpecialNext)) {");
code("switch(xGetInt(dScorpionMen, xSpecialStep))");
code("{");
code("case 0:");
code("{");
code("if (kbUnitGetAnimationActionType(id) == 6) {");
code("xsSetContextPlayer(p);");
code("target = trGetUnitScenarioNameNumber(kbUnitGetTargetUnitID(id));");
code("xsSetContextPlayer(0);");
code("xSetInt(dScorpionMen, xSpecialTarget, target);");
code("xSetInt(dScorpionMen, xSpecialStep, 1);");
code("xSetInt(dScorpionMen, xSpecialNext, trTimeMS() + 500);");
code("trUnitOverrideAnimation(39,0,false,false,-1);");
code("}");
code("}");
code("case 1:");
code("{");
code("action = 0;");
code("db = opponentDatabaseName(p);");
code("for (x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("if (xGetInt(dScorpionMen, xSpecialTarget) == xGetInt(db,xUnitName)) {");
code("xUnitSelectByID(db,xUnitID);");
code("poisonUnit(db, 10, 5.0 * trQuestVarGet(\"stage\"), p);");
code("action = 1;");
code("break;");
code("}");
code("}");
code("xSetInt(dScorpionMen, xSpecialStep, 2);");
code("xSetInt(dScorpionMen, xSpecialNext, xGetInt(dScorpionMen, xSpecialNext) + 500);");
code("if (action == 0) {");
code("xSetInt(dScorpionMen, xSpecialTarget, -1);");
code("}");
code("}");
code("case 2:");
code("{");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("xSetInt(dScorpionMen, xSpecialStep, 0);");
code("if (xGetInt(dScorpionMen, xSpecialTarget) == -1) {");
code("xSetInt(dScorpionMen, xSpecialNext, trTimeMS());");
code("} else {");
code("xSetInt(dScorpionMen, xSpecialNext, trTimeMS() + 15000);");
code("}");
code("}");
code("}");
code("} else {");
code("action = xGetInt(db, xStunStatus, xGetInt(dScorpionMen, xSpecialIndex));");
code("if (xGetBool(db, xLaunched, xGetInt(dScorpionMen, xSpecialIndex))) {");
code("action = action + 1;");
code("}");
code("if (action > 0 && xGetInt(dScorpionMen, xSpecialStep) == 1) {");
code("xSetInt(dScorpionMen, xSpecialStep, 0);");
code("xSetInt(dScorpionMen, xSpecialNext, trTimeMS() + 18000);");
code("}");
code("}");
code("}");

code("if (xGetDatabaseCount(dHydras) > 0) {");
code("xDatabaseNext(dHydras);");
code("xUnitSelectByID(dHydras,xUnitID);");
code("if (trUnitAlive() == false || checkEnemyDeactivated(dHydras)) {");
code("xFreeDatabaseBlock(dHydras);");
code("} else if (trTime() > xGetInt(dHydras,xSpecialStep)) {");
code("amt = trTime() - xGetInt(dHydras, xSpecialStep);");
code("xSetInt(dHydras,xSpecialStep, trTime());");
code("db = databaseName(xGetInt(dHydras,xPlayerOwner));");
code("if (xGetInt(db,xPoisonStatus,xGetInt(dHydras,xSpecialIndex)) == 0) {");
code("xUnitSelectByID(dHydras,xUnitID);");
code("trDamageUnitPercent(0 - amt);");
code("}");
code("}");
code("}");

code("if(xGetDatabaseCount(dNereids) >0) {");
code("xDatabaseNext(dNereids);");
code("id = xGetInt(dNereids,xUnitID);");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("p = xGetInt(dNereids,xPlayerOwner);");
code("db = databaseName(p);");
code("if (trUnitAlive() == false || checkEnemyDeactivated(dNereids)) {");
code("if (trUnitAlive()) {");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("} else {");
code("trUnitChangeProtoUnit(\"Nereid\");");
code("}");
code("xFreeDatabaseBlock(dNereids);");
code("} else if (xGetInt(db, xSilenceStatus, xGetInt(dNereids, xSpecialIndex)) == 1) {");
code("xSetInt(dNereids, xSpecialStep, 2);");
code("} else if (trTimeMS() > xGetInt(dNereids, xSpecialNext)) {");
code("switch(xGetInt(dNereids, xSpecialStep))");
code("{");
code("case 0:");
code("{");
code("if (kbUnitGetAnimationActionType(id) == 6) {");
code("xsSetContextPlayer(p);");
code("target = trGetUnitScenarioNameNumber(kbUnitGetTargetUnitID(id));");
code("xsSetContextPlayer(0);");
code("pos = kbGetBlockPosition(\"\"+target);");
code("xSetVector(dNereids,xSpecialTarget,pos);");
code("xSetInt(dNereids, xSpecialStep, 1);");
code("xSetInt(dNereids, xSpecialNext, trTimeMS() + 1400);");
code("trUnitOverrideAnimation(39,0,false,false,-1);");
code("}");
code("}");
code("case 1:");
code("{");
code("start = kbGetBlockPosition(\"\"+xGetInt(dNereids,xUnitName));");
code("end = xGetVector(dNereids,xSpecialTarget);");
code("db = opponentDatabaseName(p);");
code("for (x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db,xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeOpponentUnit(p);");
code("} else if (unitDistanceToVector(xGetInt(db,xUnitName), end) < 16.0) {");
code("pos = vectorSetAsTargetVector(start, kbGetBlockPosition(\"\"+xGetInt(db,xUnitName)), 40.0);");
code("damageOpponentUnit(p, 200.0);");
code("if (trUnitAlive()) {");
code("launchUnit(db, pos);");
code("}");
code("}");
code("}");
code("xSetInt(dNereids, xSpecialStep, 2);");
code("xSetInt(dNereids, xSpecialNext, xGetInt(dNereids, xSpecialNext) + 1600);");
code("}");
code("case 2:");
code("{");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("xSetInt(dNereids, xSpecialStep, 0);");
code("xSetInt(dNereids, xSpecialNext, trTimeMS() + 15000);");
code("}");
code("}");
code("} else {");
code("action = xGetInt(db, xStunStatus, xGetInt(dNereids, xSpecialIndex));");
code("if (xGetBool(db, xLaunched, xGetInt(dNereids, xSpecialIndex))) {");
code("action = action + 1;");
code("}");
code("if (action > 0 && xGetInt(dNereids, xSpecialStep) == 1) {");
code("xSetInt(dNereids, xSpecialStep, 0);");
code("xSetInt(dNereids, xSpecialNext, trTimeMS() + 18000);");
code("}");
code("}");
code("}");

code("if(xGetDatabaseCount(dKrakens) >0) {");
code("xDatabaseNext(dKrakens);");
code("id = xGetInt(dKrakens,xUnitID);");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("p = xGetInt(dKrakens,xPlayerOwner);");
code("db = databaseName(p);");
code("if (trUnitAlive() == false) {");
code("trUnitChangeProtoUnit(\"Kraken\");");
code("xFreeDatabaseBlock(dKrakens);");
code("} else if (checkEnemyDeactivated(dKrakens)) {");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("xFreeDatabaseBlock(dKrakens);");
code("} else if (xGetInt(db, xSilenceStatus, xGetInt(dKrakens, xSpecialIndex)) == 1) {");
code("xSetInt(dKrakens, xSpecialStep, 0);");
code("} else if (trTimeMS() > xGetInt(dKrakens, xSpecialNext)) {");
code("switch(xGetInt(dKrakens, xSpecialStep))");
code("{");
code("case 0:");
code("{");
code("if (kbUnitGetAnimationActionType(id) == 6) {");
code("xsSetContextPlayer(p);");
code("target = trGetUnitScenarioNameNumber(kbUnitGetTargetUnitID(id));");
code("xsSetContextPlayer(0);");
code("end = kbGetBlockPosition(\"\"+target);");
code("start = kbGetBlockPosition(\"\"+xGetInt(dKrakens,xUnitName));");
code("dir = getUnitVector(start, end);");
code("xSetVector(dKrakens,xSpecialTarget,dir);");
code("xSetInt(dKrakens, xSpecialStep, 1);");
code("xSetInt(dKrakens, xSpecialNext, trTimeMS() + 2100);");
code("trUnitOverrideAnimation(1,0,false,false,-1);");
code("}");
code("}");
code("case 1:");
code("{");
code("db = opponentDatabaseName(p);");
code("dir = xGetVector(dKrakens,xSpecialTarget);");
code("start = kbGetBlockPosition(\"\"+xGetInt(dKrakens,xUnitName));");
code("for (x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db,xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeOpponentUnit(p);");
code("} else if (rayCollision(db, start,dir, 6.0, 3.0)) {");
code("damageOpponentUnit(p, 300.0);");
code("stunUnit(db, 2.0);");
code("}");
code("}");
code("xSetInt(dKrakens, xSpecialStep, 2);");
code("xSetInt(dKrakens, xSpecialNext, xGetInt(dKrakens, xSpecialNext) + 1500);");
code("}");
code("case 2:");
code("{");
code("xSetInt(dKrakens, xSpecialStep, 0);");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("}");
code("}");
code("} else if (xGetInt(dKrakens, xSpecialStep) != 0) {");
code("trSetUnitOrientation(xGetVector(dKrakens,xSpecialTarget),vector(0,1,0),true);");
code("} else {");
code("action = xGetInt(db, xStunStatus, xGetInt(dKrakens, xSpecialIndex));");
code("if (xGetBool(db, xLaunched, xGetInt(dKrakens, xSpecialIndex))) {");
code("action = action + 1;");
code("}");
code("if (action > 0 && xGetInt(dKrakens, xSpecialStep) == 1) {");
code("xSetInt(dKrakens, xSpecialStep, 0);");
code("}");
code("}");
code("}");

code("if(xGetDatabaseCount(dEinherjars) >0) {");
code("xDatabaseNext(dEinherjars);");
code("id = xGetInt(dEinherjars,xUnitID);");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("p = xGetInt(dEinherjars,xPlayerOwner);");
code("db = databaseName(p);");
code("if (trUnitAlive() == false || checkEnemyDeactivated(dEinherjars)) {");
code("if (trUnitAlive()) {");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("} else {");
code("trUnitChangeProtoUnit(\"Einheriar\");");
code("}");
code("xFreeDatabaseBlock(dEinherjars);");
code("} else if (trTimeMS() > xGetInt(dEinherjars, xSpecialNext)) {");
code("switch(xGetInt(dEinherjars, xSpecialStep))");
code("{");
code("case 0:");
code("{");
code("if (kbUnitGetAnimationActionType(id) == 6) {");
code("xSetInt(dEinherjars, xSpecialStep, 1);");
code("xSetInt(dEinherjars, xSpecialNext, trTimeMS() + 1400);");
code("trUnitOverrideAnimation(39,0,false,false,-1);");
code("}");
code("}");
code("case 1:");
code("{");
code("start = kbGetBlockPosition(\"\"+xGetInt(dEinherjars,xUnitName),true);");
code("for (x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db,xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeAllyUnit(p);");
code("} else if (xGetInt(db, xPoisonStatus) == 0) {");
code("pos = kbGetBlockPosition(\"\"+xGetInt(db,xUnitName),true);");
code("if (distanceBetweenVectors(pos, start) < 9.0) {");
code("trDamageUnit(-100);");
code("trArmyDispatch(\"0,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"0,0\");");
code("trUnitChangeProtoUnit(\"Regeneration SFX\");");
code("}");
code("}");
code("}");
code("xSetInt(dEinherjars, xSpecialStep, 2);");
code("xSetInt(dEinherjars, xSpecialNext, xGetInt(dEinherjars, xSpecialNext) + 2600);");
code("}");
code("case 2:");
code("{");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("xSetInt(dEinherjars, xSpecialStep, 0);");
code("xSetInt(dEinherjars, xSpecialNext, trTimeMS() + 15000);");
code("}");
code("}");
code("} else {");
code("action = xGetInt(db, xStunStatus, xGetInt(dEinherjars, xSpecialIndex));");
code("if (xGetBool(db, xLaunched, xGetInt(dEinherjars, xSpecialIndex))) {");
code("action = action + 1;");
code("}");
code("if (action > 0 && xGetInt(dEinherjars, xSpecialStep) == 1) {");
code("xSetInt(dEinherjars, xSpecialStep, 0);");
code("xSetInt(dEinherjars, xSpecialNext, trTimeMS() + 15000);");
code("}");
code("}");
code("}");

code("if (xGetDatabaseCount(dYeebLightningEnd) > 0) {");
code("trQuestVarSetFromRand(\"sound\", 1, 5, true);");
code("hit = false;");
code("for(y=xGetDatabaseCount(dYeebLightningEnd); >0) {");
code("xDatabaseNext(dYeebLightningEnd);");
code("p = xGetInt(dYeebLightningEnd,xPlayerOwner);");
code("db = opponentDatabaseName(p);");
code("xUnitSelect(dYeebLightningEnd,xUnitName);");
code("if (trUnitVisToPlayer()) {");
code("hit = true;");
code("}");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dYeebLightningEnd,xUnitName));");
code("trUnitChangeProtoUnit(\"Lightning sparks\");");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db,xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeOpponentUnit(p);");
code("} else if (unitDistanceToVector(xGetInt(db,xUnitName), pos) < 1.0) {");
code("damageOpponentUnit(p, 470);");
code("if (boss > 0) {");
code("if (xGetBool(db, xIsHero)) {");
code("gainFavor(xGetInt(db, xPlayerOwner), -5.0);");
code("}");
code("}");
code("}");
code("}");
code("if (boss > 999) {");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies,xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (unitDistanceToVector(xGetInt(dEnemies,xUnitName), pos) < 1.0) {");
code("damageEnemy(0, 470, true);");
code("damageEnemy(0, 470, false);");
code("}");
code("}");
code("}");
code("}");
code("xClearDatabase(dYeebLightningEnd);");
code("if (hit) {");
code("trSoundPlayFN(\"lightningstrike\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");

code("for(x=xsMin(10, xGetDatabaseCount(dYeebLightning)); >0) {");
code("xDatabaseNext(dYeebLightning);");
code("if (trTimeMS() > xGetInt(dYeebLightning, xTimeout)) {");
code("hit = true;");
code("trChatSetStatus(false);");
code("trDelayedRuleActivation(\"enable_chat\");");
code("xSetPointer(dYeebLightningEnd,xAddDatabaseBlock(dYeebLightningEnd));");
code("xSetInt(dYeebLightningEnd,xUnitName,xGetInt(dYeebLightning,xUnitName));");
code("xSetInt(dYeebLightningEnd,xPlayerOwner,xGetInt(dYeebLightning,xPlayerOwner));");
code("xUnitSelect(dYeebLightning,xUnitName);");
code("trUnitChangeProtoUnit(\"Militia\");");
code("xUnitSelect(dYeebLightning,xUnitName);");
code("trSetSelectedScale(0,0,0);");
code("trTechInvokeGodPower(0, \"bolt\", vector(0,0,0), vector(0,0,0));");
code("xFreeDatabaseBlock(dYeebLightning);");
code("}");
code("}");

code("for(y=xsMin(4, xGetDatabaseCount(dYeebLightningBalls)); >0) {");
code("action = processGenericProj(dYeebLightningBalls);");
code("p = xGetInt(dYeebLightningBalls,xPlayerOwner);");
code("db = opponentDatabaseName(p);");
code("if ((action == PROJ_FALLING) || (action == PROJ_GROUND)) {");
code("dir = xGetVector(dYeebLightningBalls,xProjDir);");
code("start = xGetVector(dYeebLightningBalls,xProjPrev);");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dYeebLightningBalls,xUnitName),true);");
code("end = xsVectorSet(xsVectorGetX(start) + 3.0 * xsVectorGetX(dir),0,xsVectorGetZ(start) + 3.0 * xsVectorGetZ(dir));");
code("loc = vectorToGrid(end);");
code("if (terrainIsType(loc, TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("if (xGetInt(dYeebLightningBalls, xProjDist) > 0) {");
code("xSetInt(dYeebLightningBalls, xProjDist, xGetInt(dYeebLightningBalls,xProjDist) - 1);");
code("dir = getBounceDir(start,loc,dir);");
code("xSetInt(dYeebLightningBalls, xProjYeehaw, 99);");
code("xSetVector(dYeebLightningBalls,xProjDir,dir);");
code("trQuestVarSetFromRand(\"sound\", 1, 2, true);");
code("trSoundPlayFN(\"implodehit\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("} else {");
code("xFreeDatabaseBlock(dYeebLightningBalls);");
code("}");
code("} else {");
code("dist = distanceBetweenVectors(pos,start);");
code("if (dist > 4.0) {");
code("dist = xsSqrt(dist) + 3.0;");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db,xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeOpponentUnit(p);");
code("} else if (rayCollision(db, start, dir, dist, 9.0)) {");
code("damageOpponentUnit(p, 120);");
code("stunUnit(db, 3.0, p, false);");
code("if (boss > 0) {");
code("if (xGetBool(db, xIsHero)) {");
code("gainFavor(xGetInt(db,xPlayerOwner), -1.0);");
code("}");
code("}");
code("}");
code("}");
code("xSetVector(dYeebLightningBalls,xProjPrev,start);");
code("}");
code("}");
code("}");
code("}");

code("if(xGetDatabaseCount(dLightningStatues) >0) {");
code("xDatabaseNext(dLightningStatues);");
code("id = xGetInt(dLightningStatues,xUnitID);");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("p = xGetInt(dLightningStatues,xPlayerOwner);");
code("db = databaseName(p);");
code("if (trUnitAlive() == false || checkEnemyDeactivated(dLightningStatues)) {");
code("xFreeDatabaseBlock(dLightningStatues);");
code("} else if (trTimeMS() > xGetInt(dLightningStatues, xSpecialNext)) {");
code("if (kbUnitGetAnimationActionType(id) == 59) {");
code("xsSetContextPlayer(p);");
code("target = trGetUnitScenarioNameNumber(kbUnitGetTargetUnitID(id));");
code("xsSetContextPlayer(0);");
code("pos = vectorSnapToGrid(kbGetBlockPosition(\"\"+target));");
code("trUnitOverrideAnimation(2,0,false,true,-1);");
code("xSetInt(dLightningStatues,xSpecialNext,trTimeMS() + 1000);");
code("spawnLightning(pos, p);");
code("trSoundPlayFN(\"mirrortowerfire.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("}");

code("if (xGetDatabaseCount(dLampades) >0) {");
code("xDatabaseNext(dLampades);");
code("id = xGetInt(dLampades,xUnitID);");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("p = xGetInt(dLampades, xPlayerOwner);");
code("db = databaseName(p);");
code("if (trUnitAlive() == false) {");
code("trUnitChangeProtoUnit(\"Lampades\");");
code("xFreeDatabaseBlock(dLampades);");
code("} else if (checkEnemyDeactivated(dLampades)) {");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("xFreeDatabaseBlock(dLampades);");
code("} else if (xGetInt(db, xSilenceStatus, xGetInt(dLampades, xSpecialIndex)) == 1) {");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("xSetInt(dLampades, xSpecialStep, 2);");
code("} else if (trTimeMS() > xGetInt(dLampades, xSpecialNext)) {");
code("switch(xGetInt(dLampades, xSpecialStep))");
code("{");
code("case 0:");
code("{");
code("if (kbUnitGetAnimationActionType(id) == 12) {");
code("xsSetContextPlayer(p);");
code("target = trGetUnitScenarioNameNumber(kbUnitGetTargetUnitID(id));");
code("xsSetContextPlayer(0);");
code("xSetVector(dLampades, xSpecialTarget, kbGetBlockPosition(\"\"+target));");

code("xSetInt(dLampades, xSpecialStep, 1);");
code("xSetInt(dLampades, xSpecialNext, trTimeMS() + 500);");
code("trUnitOverrideAnimation(37,0,false,false,-1);");
code("}");
code("}");
code("case 1:");
code("{");
code("end = xGetVector(dLampades,xSpecialTarget);");
code("start = kbGetBlockPosition(\"\"+dLampades);");
code("dir = getUnitVector(start,end);");
code("addGenericProj(dYeebLightningBalls,start,dir,p);");
code("xSetVector(dYeebLightningBalls,xProjPrev,start);");
code("xSetInt(dYeebLightningBalls,xProjDist,3);");
code("xSetInt(dLampades, xSpecialStep, 2);");
code("xSetInt(dLampades, xSpecialNext, xGetInt(dLampades, xSpecialNext) + 500);");
code("}");
code("case 2:");
code("{");
code("xSetInt(dLampades, xSpecialStep, 0);");
code("xSetInt(dLampades, xSpecialNext, trTimeMS() + 18000);");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("}");
code("}");
code("} else {");
code("action = xGetInt(db, xStunStatus, xGetInt(dLampades, xSpecialIndex));");
code("if (xGetBool(db, xLaunched, xGetInt(dLampades, xSpecialIndex))) {");
code("action = action + 1;");
code("}");
code("if (action > 0 && xGetInt(dLampades, xSpecialStep) == 1) {");
code("xSetInt(dLampades, xSpecialStep, 0);");
code("xSetInt(dLampades, xSpecialNext, trTimeMS() + 18000);");
code("}");
code("}");
code("}");
code("}");

code("void enemiesAlways() {");
code("int p = 0;");
code("int id = 0;");
code("int target = 0;");
code("float angle = 0;");
code("float amt = 0;");
code("string protoName = \"\";");
code("vector pos = vector(0,0,0);");
code("vector dir = vector(0,0,0);");
code("for (x=xsMin(5, xGetDatabaseCount(dEnemiesIncoming)); > 0) {");
code("xDatabaseNext(dEnemiesIncoming);");
code("xUnitSelect(dEnemiesIncoming,xUnitName);");
code("for(p=1; < ENEMY_PLAYER) {");
code("if (trUnitHasLOS(p)) {");
code("activateEnemy(xGetInt(dEnemiesIncoming,xUnitName));");
code("xFreeDatabaseBlock(dEnemiesIncoming);");
code("break;");
code("}");
code("}");
code("}");

code("if (xGetDatabaseCount(dEnemies) > 0) {");
code("xDatabaseNext(dEnemies);");
code("id = kbGetBlockID(\"\"+xGetInt(dEnemies,xUnitName));");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if ((kbUnitGetAnimationActionType(id) == 9) &&");
code("(xGetBool(dEnemies, xLaunched) == false) &&");
code("(xGetInt(dEnemies, xStunStatus) + xGetInt(dEnemies, xPoisonStatus) + xGetInt(dEnemies, xSilenceStatus) == 0)) {");
code("xSetInt(dEnemies, xMissingTimeout, 1 + xGetInt(dEnemies, xMissingTimeout));");
code("if (xGetInt(dEnemies, xMissingTimeout) >= 10) {");
code("for(p=1; < ENEMY_PLAYER) {");
code("if (trUnitHasLOS(p)) {");
code("xSetInt(dEnemies, xMissingTimeout, 0);");
code("break;");
code("}");
code("}");
code("if (xGetInt(dEnemies, xMissingTimeout) >= 10) {");
code("xAddDatabaseBlock(dEnemiesIncoming, true);");
code("xSetInt(dEnemiesIncoming,xUnitName,xGetInt(dEnemies,xUnitName));");
code("xFreeDatabaseBlock(dEnemies);");
code("}");
code("}");
code("} else {");
code("stunsAndPoisons(dEnemies);");
code("xSetVector(dEnemies,xUnitPos,kbGetBlockPosition(\"\"+xGetInt(dEnemies,xUnitName)));");
code("}");
code("}");

code("if (xGetDatabaseCount(dAmbushRooms) > 0) {");
code("xDatabaseNext(dAmbushRooms);");
code("pos = xGetVector(dAmbushRooms,xAmbushRoomPos);");
code("for(p=1; < ENEMY_PLAYER) {");
code("if (unitDistanceToVector(xGetInt(dPlayerData,xUnitName,p), pos) < 100) {");
code("trQuestVarSetFromRand(\"rand\", 1, trQuestVarGet(\"enemyProtoCount\"),true);");
code("protoName = trStringQuestVarGet(\"enemyProto\"+1*trQuestVarGet(\"rand\"));");
code("trQuestVarSetFromRand(\"count\", trQuestVarGet(\"stage\"), 11, true);");
code("angle = 6.283185 / trQuestVarGet(\"count\");");
code("amt = 57.29578 * angle;");
code("float cSin = 0.0 - xsSin(angle);");
code("float cCos = xsCos(angle);");
code("float heading = 0;");
code("dir = xsVectorSet(0, 0, -1);");
code("for(x=trQuestVarGet(\"count\"); >0) {");
code("trQuestVarSetFromRand(\"dist\", 6, 18, true);");

code("target = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"\"+ENEMY_PLAYER+\",0\",protoName,1,");
code("xsVectorGetX(pos) - trQuestVarGet(\"dist\") * xsVectorGetX(dir),0,");
code("xsVectorGetZ(pos) - trQuestVarGet(\"dist\") * xsVectorGetZ(dir),heading,true);");
code("activateEnemy(target);");

code("heading = heading + amt;");
code("dir = rotationMatrix(dir,cCos,cSin);");
code("}");
code("trSoundPlayFN(\"attackwarning.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"wild.wav\",\"1\",-1,\"\",\"\");");
code("xFreeDatabaseBlock(dAmbushRooms);");
code("break;");
code("}");
code("}");
code("}");
code("}");

code("const int MAP_STANDARD = 0;");
code("const int MAP_PORTALS = 1;");
code("const int MAP_OPEN = 2;");

code("const int TILE_NOT_FOUND = 0;");
code("const int TILE_FOUND = 1;");
code("const int TILE_VISITED = 2;");

code("const int EDGE_NOT_FOUND = 0;");
code("const int EDGE_NORMAL = 1;");
code("const int EDGE_BIG = 2;");
code("const int EDGE_PORTAL = 3;");
code("const int EDGE_WALL = 4;");
code("const int EDGE_MOUNTAIN = 5;");

code("const int ROOM_BASIC = 1;");
code("const int ROOM_AMBUSH = 2;");
code("const int ROOM_BOSS_ENTRANCE = 3;");
code("const int ROOM_TRANSPORTER_GUY = 4;");
code("const int ROOM_CHEST = 5;");
code("const int ROOM_STARTER = 6;");
code("const int ROOM_BOSS = 7;");
code("const int ROOM_NOTTUD = 8;");

code("const int ROOM_VILLAGE = 10;");
code("const int ROOM_TEMPLE = 50;");

code("const int ROOM_CIRCLE = 0;");
code("const int ROOM_SQUARE = 1;");

code("const int TRAP_LASERS = 1;");
code("const int TRAP_CAROUSEL = 2;");

code("int dBasicRooms = 0;");
code("int xRoomNumber = 0;");

code("int dUnlockWalls = 0;");
code("int xWallState = 0;");
code("int xWallTimeout = 0;");
code("int xWallPos = 0;");
code("int xWallMod = 0;");
code("int xWallSFX = 0;");
code("int xWallCircles = 0;");
code("int xWallEnd = 0;");
code("int xWallKey = 0;");

code("int dPoisonRelics = 0;");
code("int xPoisonRelicIndex = 0;");

code("int dEdgeFrontier = 0;");
code("int xEdgeFrontierHeight = 0;");
code("int xEdgeFrontierLoc = 0;");

code("int dMapTiles = 0;");

code("int dFrontier = 0;");
code("int xFrontierEdge = 0;");
code("int xFrontierType = 0;");

code("int dVisited = 0;");

code("int dSkyPassages = 0;");
code("int xSkyPassageExit = 0;");

code("int dMagicalJourney = 0;");

code("int dCloudDeployStars = 0;");


code("rule initialize_map_databases");
code("active");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("dBasicRooms = xInitDatabase(\"basicRooms\");");
code("xRoomNumber = xInitAddInt(dBasicRooms,\"roomNumber\");");

code("dAmbushRooms = xInitDatabase(\"ambushRooms\");");
code("xInitAddInt(dAmbushRooms,\"roomNumber\");");
code("xAmbushRoomType = xInitAddInt(dAmbushRooms,\"type\");");
code("xAmbushRoomPos = xInitAddVector(dAmbushRooms,\"pos\");");

code("dUnlockWalls = xInitDatabase(\"unlockWalls\");");
code("xWallState = xInitAddInt(dUnlockWalls,\"state\");");
code("xWallTimeout = xInitAddInt(dUnlockWalls,\"timeout\");");
code("xWallPos = xInitAddVector(dUnlockWalls,\"pos\");");
code("xWallMod = xInitAddVector(dUnlockWalls,\"mod\");");
code("xWallSFX = xInitAddInt(dUnlockWalls,\"sfxStart\");");
code("xWallCircles = xInitAddInt(dUnlockWalls,\"circlesStart\");");
code("xWallEnd = xInitAddInt(dUnlockWalls,\"end\");");
code("xWallKey = xInitAddInt(dUnlockWalls,\"key\");");
code("}");

code("int deployTownEyecandy(string proto = \"\", int x = 0, int z = 0, int heading = 0) {");
code("int n = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"0,0\",\"Dwarf\",1,x+trQuestVarGet(\"villageX\"),0,z+trQuestVarGet(\"villageZ\"),heading,true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+n, true);");
code("trUnitChangeProtoUnit(proto);");
code("return(n);");
code("}");


code("int edgeName(int first = 0, int second = 0) {");
code("return(16 * xsMin(first, second) + xsMax(first, second));");
code("}");

code("vector randomNearEdge(int x1 = 0 , int z1 = 0, int x2 = 0, int z2 = 0) {");
code("int x0 = x2 - x1;");
code("int z0 = z2 - z1;");
code("trQuestVarSetFromRand(\"x0\", 0, x0);");
code("trQuestVarSetFromRand(\"z0\", 0, z0);");
code("trQuestVarSetFromRand(\"x1\", trQuestVarGet(\"x0\"), x0);");
code("trQuestVarSetFromRand(\"z1\", trQuestVarGet(\"z0\"), z0);");
code("trQuestVarSetFromRand(\"negative\", 0, 1, true);");
code("trQuestVarSet(\"negative\", 1 - 2 * trQuestVarGet(\"negative\"));");
code("x0 = x1 + x2 + trQuestVarGet(\"negative\") * trQuestVarGet(\"x1\");");
code("trQuestVarSetFromRand(\"negative\", 0, 1, true);");
code("trQuestVarSet(\"negative\", 1 - 2 * trQuestVarGet(\"negative\"));");
code("z0 = z1 + z2 + trQuestVarGet(\"negative\") * trQuestVarGet(\"z1\");");
code("return(xsVectorSet(x0, 0, z0));");
code("}");

code("vector randomNearEdgeOfRoom(int room = 0) {");
code("trQuestVarSetFromRand(\"rand\", 1, 2, true);");
code("int i = trQuestVarGet(\"rand\");");
code("vector ans = randomNearEdge(1*trQuestVarGet(\"room\"+room+\"bottom\"+i+\"x\"),1*trQuestVarGet(\"room\"+room+\"bottom\"+i+\"z\"),");
code("1*trQuestVarGet(\"room\"+room+\"top\"+i+\"x\"),1*trQuestVarGet(\"room\"+room+\"top\"+i+\"z\"));");
code("return(ans);");
code("}");

code("void paintRelicEdge(int x1 = 0 , int z1 = 0, int x2 = 0, int z2 = 0) {");
code("vector pos = randomNearEdge(x1, z1, x2, z2);");
code("int count = (x2-x1) / 2;");
code("for(i = count; >0) {");
code("vector loc = vectorToGrid(pos);");
code("if (terrainIsType(loc, TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("pos = randomNearEdge(x1, z1, x2, z2);");
code("} else {");
code("break;");
code("}");
code("}");
code("spawnRelic(pos);");
code("}");

code("void paintEnemies(int x0 = 0, int z0 = 0, int x1 = 0, int z1 = 0) {");
code("vector loc = vector(0,0,0);");
code("int next = 0;");
code("for(a=x0; < x1) {");
code("trQuestVarSetFromRand(\"rand\", 0, 1, false);");
code("if (trQuestVarGet(\"rand\") < trQuestVarGet(\"enemyDensity\")) {");
code("trQuestVarSetFromRand(\"z\", z0, z1, true);");
code("loc = xsVectorSet(a,0,trQuestVarGet(\"z\"));");
code("if (terrainIsType(loc, TERRAIN_WALL, TERRAIN_SUB_WALL) == false) {");
code("trQuestVarSetFromRand(\"heading\", 0, 360, true);");
code("next = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"\"+ENEMY_PLAYER+\",0\",\"Dwarf\",1,2*a,0,2*trQuestVarGet(\"z\"),trQuestVarGet(\"heading\"),true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+next,true);");
code("trUnitChangeProtoUnit(trStringQuestVarGet(\"enemyProto\"+randomLow(1*trQuestVarGet(\"enemyProtoCount\"))));");
code("xSetPointer(dEnemiesIncoming, xAddDatabaseBlock(dEnemiesIncoming));");
code("xSetInt(dEnemiesIncoming,xUnitName,next);");
code("}");
code("}");
code("}");
code("for(b=z0; < z1) {");
code("trQuestVarSetFromRand(\"rand\", 0, 1, false);");
code("if (trQuestVarGet(\"rand\") < trQuestVarGet(\"enemyDensity\")) {");
code("trQuestVarSetFromRand(\"x\", x0, x1, true);");
code("loc = xsVectorSet(trQuestVarGet(\"x\"),0,b);");
code("if (terrainIsType(loc, TERRAIN_WALL, TERRAIN_SUB_WALL) == false) {");
code("trQuestVarSetFromRand(\"heading\", 0, 360, true);");
code("next = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"\"+ENEMY_PLAYER+\",0\",\"Dwarf\",1,2*trQuestVarGet(\"x\"),0,2*b,trQuestVarGet(\"heading\"),true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+next,true);");
code("trUnitChangeProtoUnit(trStringQuestVarGet(\"enemyProto\"+randomLow(1*trQuestVarGet(\"enemyProtoCount\"))));");
code("xSetPointer(dEnemiesIncoming, xAddDatabaseBlock(dEnemiesIncoming));");
code("xSetInt(dEnemiesIncoming,xUnitName,next);");
code("}");
code("}");
code("}");
code("}");

code("void paintEyecandy(int x0 = 0, int z0 = 0, int x1 = 0, int z1 = 0, string type = \"sprite\") {");
code("float scale = trQuestVarGet(type+\"scale\");");
code("int next = 0;");
code("vector loc = vector(0,0,0);");
code("if (trQuestVarGet(type+\"Density\") > 0) {");
code("for(a=x0; < x1) {");
code("trQuestVarSetFromRand(\"deploy\", 0, 1, false);");
code("if (trQuestVarGet(\"deploy\") < trQuestVarGet(type+\"Density\")) {");
code("trQuestVarSetFromRand(\"z\", z0, z1, true);");
code("loc = xsVectorSet(a,0,trQuestVarGet(\"z\"));");
code("if (terrainIsType(loc, TERRAIN_WALL, TERRAIN_SUB_WALL) == false) {");
code("trQuestVarSetFromRand(\"type\", 1, 3, true);");
code("trQuestVarSetFromRand(\"heading\", 0, 360, true);");
code("next = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"1,0\",trStringQuestVarGet(type+\"Proto\"+1*trQuestVarGet(\"type\")),1,");
code("2*a,0,2*trQuestVarGet(\"z\"),trQuestVarGet(\"heading\"),true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+next,true);");
code("trUnitConvert(0);");
code("if (scale > 0) {");
code("trSetSelectedScale(scale,scale,scale);");
code("}");
code("}");
code("}");
code("}");
code("for(b=z0; < z1) {");
code("trQuestVarSetFromRand(\"deploy\", 0, 1, false);");
code("if (trQuestVarGet(\"deploy\") < trQuestVarGet(type+\"Density\")) {");
code("trQuestVarSetFromRand(\"x\", x0, x1, true);");
code("loc = xsVectorSet(trQuestVarGet(\"x\"),0,b);");
code("if (terrainIsType(loc, TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("trQuestVarSetFromRand(\"type\", 1, 3, true);");
code("trQuestVarSetFromRand(\"heading\", 0, 360, true);");
code("next = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"1,0\",trStringQuestVarGet(type+\"Proto\"+1*trQuestVarGet(\"type\")),1,");
code("2*trQuestVarGet(\"x\"),0,2*b,trQuestVarGet(\"heading\"),true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+next,true);");
code("trUnitConvert(0);");
code("if (scale > 0) {");
code("trSetSelectedScale(scale,scale,scale);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");

code("void paintColumns(int x0 = 0, int z0 = 0, int x1 = 0, int z1 = 0) {");
code("if (trQuestVarGet(\"columnDensity\") > 0) {");
code("for(a=x0; < x1) {");
code("trQuestVarSetFromRand(\"deploy\", 0, 1, false);");
code("if (trQuestVarGet(\"deploy\") < trQuestVarGet(\"columnDensity\")) {");
code("trQuestVarSetFromRand(\"z\", z0, z1, true);");
code("trPaintTerrain(a-1, 1*trQuestVarGet(\"z\")-1, a+1, 1*trQuestVarGet(\"z\")+1, TERRAIN_WALL, TERRAIN_SUB_WALL, false);");
code("trChangeTerrainHeight(a, 1*trQuestVarGet(\"z\"), a+1, 1*trQuestVarGet(\"z\")+1, wallHeight, false);");
code("}");
code("}");
code("for(b=z0; < z1) {");
code("trQuestVarSetFromRand(\"deploy\", 0, 1, false);");
code("if (trQuestVarGet(\"deploy\") < trQuestVarGet(\"columnDensity\")) {");
code("trQuestVarSetFromRand(\"x\", x0, x1, true);");
code("trPaintTerrain(1*trQuestVarGet(\"x\")-1, b-1, 1*trQuestVarGet(\"x\")+1, b+1, TERRAIN_WALL, TERRAIN_SUB_WALL, false);");
code("trChangeTerrainHeight(1*trQuestVarGet(\"x\"), b, 1*trQuestVarGet(\"x\")+1, b+1, wallHeight, false);");
code("}");
code("}");
code("}");
code("}");

code("int countRoomEntrances(int x = 0, int z = 0) {");
code("int room = x + 4 * z;");
code("int n = 0;");
code("int count = 0;");
code("for(a=1; >=0) {");
code("for(b=1; >=0) {");
code("trQuestVarSet(\"newX\", (1 - 2 * b) * a + x);");
code("trQuestVarSet(\"newZ\", (1 - 2 * b) * (1 - a) + z);");
code("if (trQuestVarGet(\"newX\") < 0 || trQuestVarGet(\"newZ\") < 0 ||");
code("trQuestVarGet(\"newX\") > 3 || trQuestVarGet(\"newZ\") > 3) {");
code("continue;");
code("}");
code("n = 0 + trQuestVarGet(\"newX\") + 4 * trQuestVarGet(\"newZ\");");
code("if (trQuestVarGet(\"edge\"+edgeName(room, n)) == EDGE_NOT_FOUND) {");
code("continue;");
code("} else {");
code("count = count + 1;");
code("}");
code("}");
code("}");
code("return(count);");
code("}");

code("void paintSecondary(int x0 = 0, int z0 = 0, int x1 = 0, int z1 = 0) {");
code("vector loc = vector(0,0,0);");
code("for(a=x0; < x1) {");
code("trQuestVarSetFromRand(\"z\", z0, z1, true);");
code("loc = xsVectorSet(a,0,trQuestVarGet(\"z\"));");
code("if (terrainIsType(loc, TERRAIN_WALL, TERRAIN_SUB_WALL) == false) {");
code("trPaintTerrain(a, 1*trQuestVarGet(\"z\"), a, 1*trQuestVarGet(\"z\"), TERRAIN_SECONDARY, TERRAIN_SUB_SECONDARY, false);");
code("}");
code("}");
code("for(b=z0; < z1) {");
code("trQuestVarSetFromRand(\"x\", x0, x1, true);");
code("loc = xsVectorSet(trQuestVarGet(\"x\"),0,b);");
code("if (terrainIsType(loc, TERRAIN_WALL, TERRAIN_SUB_WALL) == false) {");
code("trPaintTerrain(1*trQuestVarGet(\"x\"), b, 1*trQuestVarGet(\"x\"), b, TERRAIN_SECONDARY, TERRAIN_SUB_SECONDARY, false);");
code("}");
code("}");
code("}");

code("void paintCircle(int x = 0, int z = 0, int size = 0, int terrainType = 0, int terrainSubType = 0, float height = 0) {");
code("int z0 = size;");
code("for(a=0; < size+3) {");
code("for(b=size+3; >0) {");
code("if (a*a + z0 * z0 <= size * size) {");
code("trPaintTerrain(x*35+20-a, z*35+20-z0, x*35+20+a, z*35+20+z0, terrainType, terrainSubType, false);");
code("trChangeTerrainHeight(x*35+20-a, z*35+20-z0, x*35+20+a, z*35+20+z0, height, false);");
code("break;");
code("} else {");
code("z0 = z0 - 1;");
code("}");
code("}");
code("}");
code("}");

code("void placeTemple(int x = 0, int z = 0, float los = 0) {");
code("trQuestVarSet(\"templeRevealer\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,70*x+41,0,70*z+41,0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"templeRevealer\", true);");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("trQuestVarSet(\"temple\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,70*x+41,0,70*z+41,225,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"temple\", true);");
code("trUnitConvert(0);");
code("trMutateSelected(kbGetProtoUnitID(\"Statue of Lightning\"));");
code("trSetSelectedScale(2,2,2);");
code("trUnitOverrideAnimation(2,0,true,false,-1);");
code("trQuestVarSet(\"templeLOS\", los);");
code("trVectorQuestVarSet(\"templePos\", xsVectorSet(70*x+40,0,70*z+40));");
code("}");
code("const int NPC_RELIC_TRANSPORTER = 0;");
code("const int NPC_RELIC_TRANSPORTER_WTF = 1;");

code("const int NPC_EXPLAIN_SINGLEPLAYER = 2;");

code("const int NPC_ZENO_NEXT_QUESTION = 3;");
code("const int NPC_ZENO_QUIZ_END = 4;");

code("const int NPC_BOSS_ENTRANCE = 5;");

code("const int NPC_MONSTERPEDIA = 6;");

code("const int NPC_NOTTUD = 7;");

code("const int NPC_ZENOS_PARADOX = 8;");

code("const int NPC_EXPLAIN_BOONS = 9;");

code("const int NPC_KASTOR = 10;");



code("const int NPC_QUEST = 100;");


code("const int NPC_QUEST_COMPLETE = 140;");



code("const int NPC_TEMPLE = 200;");

code("const int NPC_TEMPLE_COMPLETE = 300;");

code("const int NPC_ATE_CORPSE = 401;");
code("const int NPC_ATE_BERRIES = 402;");

code("const int NPC_NICK_NO = 403;");
code("const int NPC_NICK_START = 404;");
code("const int NPC_NICK_DROP = 409;");
code("const int NPC_NICK_NEXT = 410;");
code("const int NPC_NICK_QUEST_COMPLETE = 414;");
code("const int NPC_NICK_SLOT_MACHINE = 415;");

code("const int NPC_EXPLAIN_DEEP = 416;");
code("const int NPC_EXPLAIN_CLOUDS = 417;");
code("const int NPC_EXPLAIN_PIT = 418;");
code("const int NPC_EXPLAIN_SPACE = 419;");

code("const int FETCH_NPC = 10;");
code("const int BOUNTY_NPC = 20;");
code("const int SHOP_NPC = 30;");
code("const int FETCH_GUY = 1;");
code("const int BOUNTY_GUY = 2;");
code("const int SHOP_GUY = 3;");

code("void startNPCDialog(int npc = 0) {");
code("xsEnableRule(\"npc_talk_01\");");
code("trQuestVarSet(\"currentNPC\", npc);");
code("trQuestVarSet(\"currentNPCProgress\", 0);");
code("}");

code("int npcDiag(int npc = 0, int dialog = 0) {");
code("dialog = dialog + 1;");
code("int gem = 0;");
code("string extra = \"\";");
code("switch(npc)");
code("{");
code("case NPC_RELIC_TRANSPORTER:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Relic Carrying Company, at your service! You can hire me for just 100 gold!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"I can carry up to 3 relics. After you clear this floor, I will send them to your warehouse.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"You can visit your warehouse by playing this map in singleplayer.\");");
code("}");
code("case 4:");
code("{");
code("uiMessageBox(\"To hire me, simply drop a relic next to me. I will charge you 100 gold. (The relic will be re-equipped)\");");
code("dialog = -1;");
code("}");
code("}");
code("}");
code("case NPC_RELIC_TRANSPORTER_WTF:");
code("{");
code("dialog = -1;");
code("uiMessageBox(\"You want to hire another? What happened to the last guy?!\");");
code("}");
code("case NPC_BOSS_ENTRANCE:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Find the relic matching my symbol and bring it to me to open the portal to the boss room.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");
code("case NPC_MONSTERPEDIA:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"The Monsterpedia is now open! You can see monster stats and abilities by clicking on them!\");");
code("dialog = 0;");
code("}");
code("}");
code("}");
code("case NPC_EXPLAIN_BOONS:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiLookAtUnitByName(\"\"+xGetInt(dBoons,xUnitName));");
code("uiMessageBox(\"You have acquired a Blessing! A Blessing is a powerful passive effect.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"However, you can only have one Blessing at a time. Choose your Blessing by selecting it.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"There are more Blessings to be found in the Tower, and each one requires a unique unlock condition.\");");
code("trQuestVarSet(\"boonUnlocked0\", 1);");
code("dialog = 0;");
code("}");
code("}");
code("}");
code("case NPC_EXPLAIN_SINGLEPLAYER:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("trCameraCut(vector(90,70.710701,90), vector(0.5,-0.707107,0.5), vector(0.5,0.707107,0.5), vector(0.707107,0,-0.707107));");
code("uiMessageBox(\"Welcome to the Ascension Guild! There are many things you can do here!\");");
code("}");
code("case 2:");
code("{");
code("trCameraCut(vector(60,70.710701,90), vector(0.5,-0.707107,0.5), vector(0.5,0.707107,0.5), vector(0.707107,0,-0.707107));");
code("uiMessageBox(\"This is your relic warehouse. This is where all your spare relics are stored.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"If you drop a relic here, it will automatically be kept in the warehouse.\");");
code("}");
code("case 4:");
code("{");
code("trCameraCut(vector(90,70.710701,60), vector(0.5,-0.707107,0.5), vector(0.5,0.707107,0.5), vector(0.707107,0,-0.707107));");
code("uiMessageBox(\"This is your class selection. Click on a class to see its details or switch to it.\");");
code("}");
code("case 5:");
code("{");
code("uiMessageBox(\"Some classes are locked. Each class has a unique unlock condition.\");");
code("}");
code("case 6:");
code("{");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"levelupObelisk\");");
code("trUnitHighlight(15.0, true);");
code("uiMessageBox(\"This is your Ascension Obelisk. Click on this obelisk to level up your current hero.\");");
code("}");
code("case 7:");
code("{");
code("uiMessageBox(\"Level-ups cost gold and gemstones, which are dropped by bosses.\");");
code("}");
code("case 8:");
code("{");
code("uiMessageBox(\"Each level-up increases your hero's relic capacity by 1.\");");
code("}");
code("case 9:");
code("{");
code("uiMessageBox(\"There are more facilities, but they are locked for now. Play the game some more to unlock them!\");");
code("}");
code("case 10:");
code("{");
code("trCameraCut(vector(90,70.710701,90), vector(0.5,-0.707107,0.5), vector(0.5,0.707107,0.5), vector(0.707107,0,-0.707107));");
code("uiMessageBox(\"When you are ready to save your configuration, enter the sky passage in the center.\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"skypassage\");");
code("trUnitHighlight(5.0, true);");
code("}");
code("case 11:");
code("{");
code("dialog = 0;");
code("xsEnableRule(\"gameplay_start_2\");");
code("}");
code("}");
code("}");
code("case NPC_ZENO_NEXT_QUESTION:");
code("{");
code("if (dialog > trQuestVarGet(\"question\"+1*trQuestVarGet(\"currentQuestion\")+\"explainations\")) {");
code("dialog = 0;");
code("trShowChoiceDialog(trStringQuestVarGet(\"question\"+1*trQuestVarGet(\"currentQuestion\")),");
code("trStringQuestVarGet(\"question\"+1*trQuestVarGet(\"currentQuestion\")+\"first\"), 6001,");
code("trStringQuestVarGet(\"question\"+1*trQuestVarGet(\"currentQuestion\")+\"second\"), 6002);");
code("} else {");
code("uiMessageBox(trStringQuestVarGet(\"question\"+1*trQuestVarGet(\"currentQuestion\")+\"explain\"+dialog));");
code("}");
code("}");

code("case NPC_ZENO_QUIZ_END:");
code("{");
code("if (dialog > trQuestVarGet(\"question\"+1*trQuestVarGet(\"currentQuestion\")+\"explainations\")) {");
code("dialog = 0;");
code("uiMessageBox(\"That's all for today! I'll be back after you clear another floor!\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"zenoUnit\");");
code("trUnitChangeProtoUnit(\"Arkantos God Out\");");
code("trSoundPlayFN(\"arrkantosleave.wav\",\"1\",-1,\"\",\"\");");
code("} else {");
code("uiMessageBox(trStringQuestVarGet(\"question\"+1*trQuestVarGet(\"currentQuestion\")+\"explain\"+dialog));");
code("}");
code("}");

code("case NPC_NOTTUD:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Why hello there! It is I, nottud!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Welcome to my humble shop. Everything here costs 300 gold.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"To purchase an item, simply walk next to it and drop a relic. (The relic will be re-equipped)\");");
code("}");
code("case 4:");
code("{");
code("uiMessageBox(\"Your purchased item will be delivered to your warehouse.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_NICK_NO:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Ahhh!! I hate donkeys!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Get away from me you filthy animal!\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_NICK_START:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Oh thank goodness! Finally a human being!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Please help me! I've fallen victim to a bug and turned into a relic!\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"I need to absorb some magical energies in order to return to my original form!\");");
code("}");
code("case 4:");
code("{");
code("uiMessageBox(\"You're my only hope! First, I need to absorb a Sphinx's sandstorm!\");");
code("}");
code("case 5:");
code("{");
code("trMessageSetText(\"Touch a Sphinx's sandstorm while holding the talking relic.\", -1);");
code("trSoundPlayFN(\"xnew_objective.wav\",\"1\",-1,\"\",\"\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_NICK_START + 1:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Remember: I need a Sphinx's sandstorm!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"There should be some Sphinxes on the first floor of the tower.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_NICK_START + 2:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"I need to absorb a Dryad's Blood.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"We can find Dryads on the second floor of the tower.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_NICK_START + 3:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"I need to absorb a Frost Giant's Breath.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"There are Frost Giants on the third floor.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_NICK_START + 4:");
code("{");
code("if (Multiplayer == false) {");
code("uiMessageBox(\"Alright, just set me down over there at the glowing spotlight.\");");
code("trMinimapFlare(1, 3.0, trVectorQuestVarGet(\"nickPos\"), true);");
code("} else {");
code("uiMessageBox(\"Let's return to the Guild to complete my transformation!\");");
code("}");
code("dialog = 0;");
code("}");

code("case NPC_NICK_NEXT:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"*cough* *cough* Oh dear, some of that got in my nose.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Wait, I don't have a nose! Oh please, I just want my body back.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"Let's hurry up and get the next ingredient! I need a Dryad's Blood!\");");
code("}");
code("case 4:");
code("{");
code("trMessageSetText(\"Absorb Dryad's Blood while holding the talking relic.\", -1);");
code("trSoundPlayFN(\"xnew_objective.wav\",\"1\",-1,\"\",\"\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_NICK_NEXT + 1:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Gross! Tastes awful every time.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Anyway, there's one more ingredient that I need to return to my original body.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"I need the Breath of a Frost Giant. Please help me out one more time!\");");
code("}");
code("case 4:");
code("{");
code("uiMessageBox(\"I promise I'll reward you with something good!\");");
code("}");
code("case 5:");
code("{");
code("trMessageSetText(\"Absorb a Frost Giant's breath attack while holding the talking relic.\", -1);");
code("trSoundPlayFN(\"xnew_objective.wav\",\"1\",-1,\"\",\"\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_NICK_NEXT + 2:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Alright! Feeling better already!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Let's return to the Guild to complete my transformation!\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_NICK_DROP:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Hey! Don't leave me!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Where are you going?!\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_NICK_QUEST_COMPLETE:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Ahh, back to my sexy body. Thank you for rescuing me, friend.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"As a reward, I'll let you use my Quantum Relic Machine.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"To use it, drop three relics in front of me and then select me to confirm.\");");
code("}");
code("case 4:");
code("{");
code("uiMessageBox(\"The three relics will be consumed and a new random relic will be generated.\");");
code("}");
code("case 5:");
code("{");
code("uiMessageBox(\"First roll is free. Let's give it a whirl!\");");
code("}");
code("case 6:");
code("{");
code("trQuestVarSet(\"p1nickQuestProgress\", 5);");
code("dialog = 0;");
code("trQuestVarSet(\"quantumSlotMachine\", 2);");
code("trQuestVarSet(\"quantumSlotMachineNext\", trTimeMS() + 3000);");
code("trQuestVarSetFromRand(\"quantumRelic\", 10, 26, true);");
code("xsEnableRule(\"quantum_slot_machine\");");
code("trSoundPlayFN(\"plentybirth.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"skypassageout.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("}");

code("case NPC_NICK_SLOT_MACHINE:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Want to spin the Quantum Slot Machine? Drop three relics here to start the machine!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"You will get a new random relic that is guaranteed to not be one of the ones you dropped.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_EXPLAIN_DEEP:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Here in the ocean depths, the pressure of water will crush you into a pancake.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"However, you are protected in a bubble created by your Caladria.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"If you exit the bubble, you will take massive damage! (The bubble is the Line of Sight of the Caladria)\");");
code("}");
code("case 4:");
code("{");
code("uiMessageBox(\"You only get one Caladria, so keep her safe!\");");
code("}");
code("case 5:");
code("{");
code("uiMessageBox(\"In addition, the Palace of the Deep will constantly spawn hunters to attack you.\");");
code("}");
code("case 6:");
code("{");
code("uiMessageBox(\"Find and destroy the Palace to make the attacks stop.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_EXPLAIN_CLOUDS:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"The thin atmosphere gives you limited resources.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"All players lose 0.5 favor per second on this floor.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"In addition, dangerous tornados wander the skies, dealing high damage.\");");
code("}");
code("case 4:");
code("{");
code("uiMessageBox(\"If you find and destroy the Sky Palace, the tornados will stop.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_EXPLAIN_PIT:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"The flames of the Pits are hostile to the living.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"All allies take 10 damage per second on this floor.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"In addition, the Flame Palace will occasionally rain fireballs upon you.\");");
code("}");
code("case 4:");
code("{");
code("uiMessageBox(\"Destroy the Flame Palace to make the attacks stop.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case FETCH_NPC + 1:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Good day! Welcome to Foothill Camp!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"They call us Foothill Camp because we're at the first floor of the Tower!\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"Oh these pigs? They're not for sale. Don't touch them.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case BOUNTY_NPC + 1:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Welcome, adventurers! Are you here for some training?\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"I don't have any bounties for you today though! Check again later!\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case SHOP_NPC + 1:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"They say there are ten floors in this tower, but no one knows what's at the top.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"No adventurer has made it up there and came back down to tell the tale.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"Maybe they've been abducted by aliens!\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case FETCH_NPC + 2:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Dammit! To think I could only reach the second floor!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"I'm such a useless father!\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"Kastor! Please be safe!\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case BOUNTY_NPC + 2:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Who am I? Who are you?\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Timmy! Don't run that way! No!\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"Wait, who's Timmy?\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case SHOP_NPC + 2:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"We're lost souls. As long as that Wraithwood stands, we're trapped here.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"But I'm hoping an adventurer will come by and sell me a Resurrection Stone.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"Hey, do you have a Resurrection Stone? I'll buy it for 9000 gold.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case FETCH_NPC + 3:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"I never knew there could be native peoples living in this tower.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Turns out there are dwarves living on this floor.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"Have you checked out that dwarf's wares yet? He sells some impressive stuff!\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case BOUNTY_NPC + 3:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"These damn dwarves charge such high prices!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Where am I supposed to find five Frosted Bones to repair this axe?\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"Do they expect me to take down a Frost Giant with my bare fists?!\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case SHOP_NPC + 3:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Welcome, travelers! Come and rest a while. The ascent up this tower can be quite arduous.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"I'm forging something at the moment, but if you come back later, there might be something for sale.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"Us dwarves pride ourselves on our craftsmanship. Quality guaranteed!\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case FETCH_NPC + 4:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"The creatures on this floor are my creations. They escaped from their facility.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Try not to aggravate them. They are quite ferocious.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case BOUNTY_NPC + 4:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Greetings! I am the great wizard Akard!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Would you like to be my test subjects?\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case SHOP_NPC + 4:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Very interesting. What drives people to climb this tower?\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"They don't even know what's at the top and yet they enter without hesitation.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case SHOP_NPC + 5:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Eek! Put on your masks! There's a deadly plague on this floor!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"It deals 25 damage per second!\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case FETCH_NPC + 5:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"I'm running low on rations...\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"This is my last piece of fresh pork. The rest of it rotted away.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"Oh, I hope the next floor has something edible.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case BOUNTY_NPC + 5:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Mmm, the meat on this floor is absolutely delicious!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Much better than the junk I had back at home.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"Y'all got any more of that decaying meat?\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case FETCH_NPC + 6:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Alright, when I laugh maniacally, you quiver in fear, got it?\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"3...\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"2...\");");
code("}");
code("case 4:");
code("{");
code("uiMessageBox(\"1...\");");
code("}");
code("case 5:");
code("{");
code("uiMessageBox(\"MWUAHAHAHA!!!\");");
code("trSoundPlayFN(\"xpack\xdialog\xkri075.mp3\",\"1\",-1,\"\",\"\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case BOUNTY_NPC + 6:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"What do you want?\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Stop bothering me. I have important business to tend to.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case SHOP_NPC + 6:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Once I attain the power of RMS, I shall be unstoppable!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Ahem...\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"What? Stop staring or I'll vaporize you.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_KASTOR:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Damn, to think I could only make it up to the fifth floor...\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Now how am I going to prove my old man wrong?!\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"...Huh?\");");
code("}");
code("case 4:");
code("{");
code("uiMessageBox(\"What the hell are you looking at?\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST + SHOP_NPC + 1:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Hey! It's dangerous to go alone! Buy this!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"If you want this relic, you can buy it for 200 gold. Just drop a relic here to confirm your purchase.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"It will be sent straight to your warehouse.\");");
code("}");
code("case 4:");
code("{");
code("trShowImageDialog(relicIcon(1*trQuestVarGet(\"shopRelic\")),relicName(1*trQuestVarGet(\"shopRelic\")));");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST + SHOP_NPC + 2:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Hey you! Wanna buy this relic?\");");
code("}");
code("case 2:");
code("{");
code("trShowImageDialog(relicIcon(1*trQuestVarGet(\"shopRelic\")),relicName(1*trQuestVarGet(\"shopRelic\")));");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"It's nice and shiny! Only 200 gold!\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST + SHOP_NPC + 3:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Behold! My latest product! I worked for weeks on this!\");");
code("}");
code("case 2:");
code("{");
code("trShowImageDialog(relicIcon(1*trQuestVarGet(\"shopRelic\")),relicName(1*trQuestVarGet(\"shopRelic\")));");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"Dwarven quality goods! Expect the best! For a small sum of 200 gold, of course.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST_COMPLETE + SHOP_NPC:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"The price is 200 gold. This is what's for sale:\");");
code("}");
code("case 2:");
code("{");
code("trShowImageDialog(relicIcon(1*trQuestVarGet(\"shopRelic\")),relicName(1*trQuestVarGet(\"shopRelic\")));");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST + FETCH_NPC + 1:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Adventurers! Help! My pigs have ran off from this impenetrable enclosure!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Please, help me find my precious pigs! There are three of them in total!\");");
code("}");
code("case 3:");
code("{");
code("trSoundPlayFN(\"xnew_objective.wav\",\"1\",-1,\"\",\"\");");
code("trMessageSetText(\"Find three pigs and bring them to the enclosure.\", -1);");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST_COMPLETE + FETCH_NPC + 1:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"My pigs! Thank you so much!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"I didn't know what I would be eating tonight.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"Here, take this as your reward!\");");
code("}");
code("case 4:");
code("{");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"\",\"\");");
code("trShowImageDialog(\"icons\improvement tax collectors icon 64\", \"300 Gold\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST + BOUNTY_NPC + 1:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Adventurers! I have an urgent request!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"A Mummy has been spotted! Such a high-level enemy should not be on the first floor.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"Eliminate it at once! I will reward you handsomely.\");");
code("}");
code("case 4:");
code("{");
code("trMinimapFlare(trCurrentPlayer(), 10, trVectorQuestVarGet(\"bountyTargetPos\"), true);");
code("trSoundPlayFN(\"xnew_objective.wav\",\"1\",-1,\"\",\"\");");
code("trMessageSetText(\"Defeat the Mummy.\", -1);");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST_COMPLETE + BOUNTY_NPC + 1:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Good work defeating the Mummy. There could have been many casualties.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Here is your reward.\");");
code("}");
code("case 3:");
code("{");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"\",\"\");");
code("trShowImageDialog(gemstoneIcon(STARSTONE),gemstoneName(STARSTONE) + \" x1\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST + FETCH_NPC + 2:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Adventurers. I feel like my time is coming. I just want one last look at my family.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"I don't remember where I died, but there should be a picture of my son there. Can you retrieve it?\");");
code("}");
code("case 3:");
code("{");
code("trSoundPlayFN(\"xnew_objective.wav\",\"1\",-1,\"\",\"\");");
code("trMessageSetText(\"Bring back the ghost's picture.\", -1);");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST_COMPLETE + FETCH_NPC + 2:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Thank you, adventurers. This is what I was looking for.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"I don't have hands. Can you do one last thing for me? Please write this down on the picture:\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"I'm sorry. I was wrong. If we ever meet again, I'll be a proper father this time.\");");
code("}");
code("case 4:");
code("{");
code("uiMessageBox(\"...\");");
code("}");
code("case 5:");
code("{");
code("uiMessageBox(\"Thank you.\");");
code("}");
code("case 6:");
code("{");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"\",\"\");");
code("trShowImageDialog(gemstoneIcon(SOULSTONE),gemstoneName(SOULSTONE) + \" x1\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST + BOUNTY_NPC + 2:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Jimmy? Jimmy is that you?\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Jimmy you bastard! It's your fault we all died!\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"I'm going to kill you Jimmy!\");");
code("}");
code("case 4:");
code("{");
code("trSoundPlayFN(\"xnew_objective.wav\",\"1\",-1,\"\",\"\");");
code("trMessageSetText(\"Run!\", -1);");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST_COMPLETE + BOUNTY_NPC + 2:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"I'm sorry... my memory isn't what it used to be. I know you're not Jimmy.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Please take this as compensation... and kill Jimmy if you get the chance.\");");
code("}");
code("case 3:");
code("{");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"\",\"\");");
code("trShowImageDialog(\"icons\improvement tax collectors icon 64\", \"200 Gold\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST + FETCH_NPC + 3:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Excuse me! You there! I need your help! I'll pay you handsomely!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"I have a shipment of goods but it needs an escort. Can you bring it here?\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"Be warned! The goods smell delicious, so wolves may come and attack it!\");");
code("}");
code("case 4:");
code("{");
code("trMinimapFlare(trCurrentPlayer(), 10, trVectorQuestVarGet(\"fetchTargetPos\"), true);");
code("trSoundPlayFN(\"xnew_objective.wav\",\"1\",-1,\"\",\"\");");
code("trMessageSetText(\"Escort the goods to the axeman.\", -1);");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST_COMPLETE + FETCH_NPC + 3:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Thank you, adventurers. Looks like everything's intact.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Here is your reward.\");");
code("}");
code("case 3:");
code("{");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"\",\"\");");
code("trShowImageDialog(\"icons\improvement tax collectors icon 64\", \"300 Gold\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST + BOUNTY_NPC + 3:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Oh, adventurers! I'm at my wit's end! I need that dwarf to repair my axe!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"But in order to repair it, he needs five Frosted Bones! They can be collected from Frost Giants.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"But I can't kill Frost Giants without this axe! You're my only hope!\");");
code("}");
code("case 4:");
code("{");
code("uiMessageBox(\"There are Frost Giants in this canyon. Please kill them and bring their bones to me!\");");
code("}");
code("case 5:");
code("{");
code("trSoundPlayFN(\"xnew_objective.wav\",\"1\",-1,\"\",\"\");");
code("trMessageSetText(\"Kill five Frost Giants.\", -1);");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST_COMPLETE + BOUNTY_NPC + 3:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Frosted Bones! Thank you so much!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Now I'm going to go on a massacre! Mwuahaha!\");");
code("}");
code("case 3:");
code("{");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"\",\"\");");
code("trShowImageDialog(gemstoneIcon(MANASTONE),gemstoneName(MANASTONE) + \" x1\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST + FETCH_NPC + 4:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"This ancient tree will occasionally shed fruits of knowledge.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Bring me the fruit that solves this math problem:\");");
code("}");
code("case 3:");
code("{");
code("trSoundPlayFN(\"xnew_objective.wav\",\"1\",-1,\"\",\"\");");
code("trMessageSetText(\"\"+1*trQuestVarGet(\"operand1\") + \" + \" + 1*trQuestVarGet(\"operand2\") + \" = ?\", -1);");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST_COMPLETE + FETCH_NPC + 4:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Impressive. If you had brought the wrong fruit...\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Nevermind. Here's your reward.\");");
code("}");
code("case 3:");
code("{");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"\",\"\");");
code("trShowImageDialog(gemstoneIcon(STARSTONE),gemstoneName(STARSTONE) + \" x1\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST + BOUNTY_NPC + 4:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Congratulations! You have been randomly selected to be my test subjects!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Please do not resist.\");");
code("}");
code("case 3:");
code("{");
code("trSoundPlayFN(\"xnew_objective.wav\",\"1\",-1,\"\",\"\");");
code("trMessageSetText(\"Defeat the monsters.\", -1);");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST_COMPLETE + BOUNTY_NPC + 4:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"This has been some interesting data.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Thank you for volunteering. Here is your reward.\");");
code("}");
code("case 3:");
code("{");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"\",\"\");");
code("trShowImageDialog(\"icons\improvement tax collectors icon 64\", \"300 Gold\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_ZENOS_PARADOX:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Oh no, not like this! We've entered Zeno's Paradox!\");");
code("}");
code("case 2:");
code("{");
code("extra = \"\" + 1*trQuestVarGet(\"operand1\") + \" + \" + 1*trQuestVarGet(\"operand2\") + \" = \" + 1*trQuestVarGet(\"wrongAnswer\");");
code("uiMessageBox(\"You fools! We're now trapped in a world where \" + extra + \"!\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"We're doomed! We're doomed!\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST + FETCH_NPC + 5:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Hey... please help me... I'm starving...\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"There must be... something edible... on this floor...\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"I'll pay you anything... I just need some food...\");");
code("}");
code("case 4:");
code("{");
code("trMessageSetText(\"Find something edible for the adventurer.\", -1);");
code("trSoundPlayFN(\"xnew_objective.wav\",\"1\",-1,\"\",\"\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_ATE_CORPSE:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Is this all there is? Well, here goes nothing.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Hrrrk! Oh god, what is this?!\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"I'm dying!!!!!\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_ATE_BERRIES:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Berries? Thank you so much! I'll never forget this!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Wait, what's going on? What's happening to my body?\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"AaaAaAhHhhHH!!1!\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST_COMPLETE + FETCH_NPC + 5:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Oh thank goodness! I thought I was going to starve!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"This is just what I needed! Thank you so much! You're a lifesaver!\");");
code("}");
code("case 3:");
code("{");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"\",\"\");");
code("trShowImageDialog(\"icons\improvement tax collectors icon 64\", \"300 Gold\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST + BOUNTY_NPC + 5:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Hey you! I can't get enough of this marvelous meat!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"But it needs a bit more seasoning.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"Please collect some poison using this bucket and bring it back to me.\");");
code("}");
code("case 4:");
code("{");
code("trMessageSetText(\"Equip the Bucket and collect some Poison.\", -1);");
code("trSoundPlayFN(\"xnew_objective.wav\",\"1\",-1,\"\",\"\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST_COMPLETE + BOUNTY_NPC + 5:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Simply exquisite! This is luxury! This is true cuisine!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Would you like to have a bite?\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"No? Okay fine. Have this instead.\");");
code("}");
code("case 4:");
code("{");
code("trShowImageDialog(gemstoneIcon(SOULSTONE),gemstoneName(SOULSTONE) + \" x1\");");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"\",\"\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST + FETCH_NPC + 6:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Adventurers. I have an important task for you.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"One of my special relics has been stolen.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"Fortunately, this magic detector can tell you how far the relic is from you.\");");
code("}");
code("case 4:");
code("{");
code("uiMessageBox(\"However, this magic detector drains your favor in order to function.\");");
code("}");
code("case 5:");
code("{");
code("uiMessageBox(\"If your favor reaches zero while you hold it, it will explode!\");");
code("}");
code("case 6:");
code("{");
code("trSoundPlayFN(\"xnew_objective.wav\",\"1\",-1,\"\",\"\");");
code("trMessageSetText(\"Use the Magic Detector to find Yeebaagooon's missing relic and return it to him.\", -1);");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST_COMPLETE + FETCH_NPC + 6:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Excellent work. You are far more useful than those dwarves I enslaved.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"One of them betrayed me. That's his smoldering corpse over there.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"Anyway, here is your reward.\");");
code("}");
code("case 4:");
code("{");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"\",\"\");");
code("trShowImageDialog(\"icons\improvement tax collectors icon 64\", \"300 Gold\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST + BOUNTY_NPC + 6:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Ah, right on time, adventurers.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"There is a lot of useless junk in my storage. Please get rid of it.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"Don't touch anything else, however.\");");
code("}");
code("case 4:");
code("{");
code("trMessageSetText(\"Move the Worthless Junk out of Yeebaagooon's storage room.\", -1);");
code("trSoundPlayFN(\"xnew_objective.wav\",\"1\",-1,\"\",\"\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_QUEST_COMPLETE + BOUNTY_NPC + 6:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Excellent work. Now I can fill this place with other worthless junk.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Here is your reward.\");");
code("}");
code("case 3:");
code("{");
code("trShowImageDialog(gemstoneIcon(MANASTONE), gemstoneName(MANASTONE));");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"\",\"\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_TEMPLE + 2:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Which is the lie? Which is the truth?\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Pierce the darkness and be rewarded with power!\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"To begin the trial, drop a relic at my feet.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_TEMPLE_COMPLETE + 2:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"The wheel of time turns ever infinitely.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"But for now, I grant you this power.\");");
code("}");
code("case 3:");
code("{");
code("trShowImageDialog(boonIcon(1*trQuestVarGet(\"stageTemple\")), boonName(1*trQuestVarGet(\"stageTemple\")));");
code("}");
code("case 4:");
code("{");
code("uiMessageBox(\"You can equip this Blessing in singleplayer.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_TEMPLE + 3:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Those who endure the harshest winters shall be rewarded.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"To begin the trial, drop a relic at my feet.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_TEMPLE + 4:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Wealth is power! Power absolute!\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Sacrifice your wealth to me, and be rewarded with ever greater power!\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"Relics sacrificed: (\"+1*trQuestVarGet(\"p\"+trCurrentPlayer()+\"relicsSacrificed\")+\"/10)\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_TEMPLE_COMPLETE + 4:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"A most expensive sacrifice. You have proven yourself. I grant you this reward.\");");
code("}");
code("case 2:");
code("{");
code("trShowImageDialog(boonIcon(1*trQuestVarGet(\"stageTemple\")),boonName(1*trQuestVarGet(\"stageTemple\")));");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"You can equip this Blessing in singleplayer.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_TEMPLE + 5:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Do you have the courage to face death?\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"In each of these cups, there is a deadly poison. Drink too much of it, and you die.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"But one cup contains a most powerful lifeblood. Drink it to attain my power.\");");
code("}");
code("case 4:");
code("{");
code("uiMessageBox(\"You have at most three guesses. Find the lifeblood or perish. Do you dare to take the gamble?\");");
code("}");
code("case 5:");
code("{");
code("trMessageSetText(\"Find the correct goblet in three guesses. (Guesses are shared for the whole party)\",-1);");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_TEMPLE_COMPLETE + 5:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Fate has smiled upon you today. And for that, I grant you this power.\");");
code("}");
code("case 2:");
code("{");
code("trShowImageDialog(boonIcon(1*trQuestVarGet(\"stageTemple\")),boonName(1*trQuestVarGet(\"stageTemple\")));");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"You can equip this Blessing in singleplayer/\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_TEMPLE + 6:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"A trial of thunder and lightning. Only the worthy may succeed.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"If you can survive 47 seconds within this room, my power is yours.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"But step one foot outside, and you will be deemed unworthy.\");");
code("}");
code("case 4:");
code("{");
code("uiMessageBox(\"To begin the trial, drop a relic at my feet.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_TEMPLE_COMPLETE + 6:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"You have proven yourself worthy, and as such, I grant you this power.\");");
code("}");
code("case 2:");
code("{");
code("trShowImageDialog(boonIcon(1*trQuestVarGet(\"stageTemple\")), boonName(1*trQuestVarGet(\"stageTemple\")));");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"You can equip this Blessing in singleplayer.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_TEMPLE + 7:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"The tides cannot be stopped, but they can be weathered.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Defeat these hordes and be granted their strength.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"Drop a relic at my feet to begin the trial.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_TEMPLE_COMPLETE + 7:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Your strength has been acknowledged. Accept this power as your reward.\");");
code("}");
code("case 2:");
code("{");
code("trShowImageDialog(boonIcon(1*trQuestVarGet(\"stageTemple\")),boonName(1*trQuestVarGet(\"stageTemple\")));");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"You can equip this Blessing in singleplayer.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_TEMPLE + 8:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"LONG HAVE PLAYERS IGNORED THE DREADED STATUE PUZZLE.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"BUT YOUR TIME IS NIGH. COMPLETE THIS PUZZLE TO RECEIVE MY BLESSING.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"IT'S A REALLY GOOD BLESSING I PROMISE.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_TEMPLE_COMPLETE + 8:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"Wow you actually did it. Touch some grass y'all.\");");
code("}");
code("case 2:");
code("{");
code("trShowImageDialog(boonIcon(1*trQuestVarGet(\"stageTemple\")),boonName(1*trQuestVarGet(\"stageTemple\")));");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"You can equip this Blessing in singleplayer.\");");
code("dialog = 0;");
code("}");
code("}");
code("}");

code("case NPC_TEMPLE + 11:");
code("{");
code("switch(dialog)");
code("{");
code("case 1:");
code("{");
code("uiMessageBox(\"A single question, yet infinite possibilities.\");");
code("}");
code("case 2:");
code("{");
code("uiMessageBox(\"Show thy mettle, and be rewarded with glorious power.\");");
code("}");
code("case 3:");
code("{");
code("uiMessageBox(\"What is \" + 1*trQuestVarGet(\"operand1\") + \" + \" + 1*trQuestVarGet(\"operand2\") + \"?\");");
code("dialog = 0;");
code("}");
code("}");
code("}");
code("}");
code("return(dialog);");
code("}");



code("rule relic_transporter_guy_found");
code("inactive");
code("highFrequency");
code("{");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"relicTransporterGuyName\");");
code("for(p=1; <ENEMY_PLAYER) {");
code("if (trUnitHasLOS(p)) {");
code("xsDisableSelf();");
code("xsEnableRule(\"relic_transporter_guy_always\");");
code("vector pos = trVectorQuestVarGet(\"relicTransporterGuyPos\");");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Revealer\");");
code("trSoundPlayFN(\"villagercreate.wav\",\"1\",-1,\"\",\"\");");
code("break;");
code("}");
code("}");
code("}");

code("rule boss_entrance_found");
code("inactive");
code("highFrequency");
code("{");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossEntranceStatue\");");
code("for(p=1; <ENEMY_PLAYER) {");
code("if (trUnitHasLOS(p)) {");
code("xsDisableSelf();");
code("xsEnableRule(\"boss_entrance_always\");");
code("vector pos = kbGetBlockPosition(\"\"+1*trQuestVarGet(\"bossEntranceStatue\"));");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Revealer\");");
code("trSoundPlayFN(\"sentinelbirth.wav\",\"1\",-1,\"\",\"\");");
code("trMessageSetText(\"The boss entrance has been found!\", -1);");
code("break;");
code("}");
code("}");
code("}");


code("rule relic_transporter_guy_always");
code("inactive");
code("highFrequency");
code("{");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"relicTransporterGuyName\");");
code("if (trUnitIsSelected()) {");
code("trUnitHighlight(5.0, true);");
code("int p = trCurrentPlayer();");
code("if (trQuestVarGet(\"p\"+p+\"transporterPurchased\") == 0) {");
code("startNPCDialog(NPC_RELIC_TRANSPORTER);");
code("} else {");
code("startNPCDialog(NPC_RELIC_TRANSPORTER_WTF);");
code("}");
code("reselectMyself();");
code("}");
code("}");

code("rule npc_talk_01");
code("inactive");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("trQuestVarSet(\"currentNPCProgress\",");
code("npcDiag(1*trQuestVarGet(\"currentNPC\"), 1*trQuestVarGet(\"currentNPCProgress\")));");
code("if (trQuestVarGet(\"currentNPCProgress\") > 0) {");
code("trDelayedRuleActivation(\"npc_talk_02\");");
code("}");
code("}");

code("rule npc_talk_02");
code("inactive");
code("highFrequency");
code("{");
code("if ((trQuestVarGet(\"currentNPCProgress\") > 0) &&");
code("(trIsGadgetVisible(\"ingame-messagedialog\") == false) &&");
code("(trIsGadgetVisible(\"ShowImageBox\") == false)) {");
code("trDelayedRuleActivation(\"npc_talk_01\");");
code("xsDisableSelf();");
code("}");
code("}");

code("void questComplete(int gem = -1, int gold = -1) {");
code("if (gem >= 0) {");
code("trQuestVarSet(\"gemstone\"+gem, 1 + trQuestVarGet(\"gemstone\"+gem));");
code("}");
code("if (gold > 0) {");
code("for(p=1; < ENEMY_PLAYER) {");
code("xSetInt(dPlayerData, xPlayerGold, gold + xGetInt(dPlayerData, xPlayerGold), p);");
code("trPlayerGrantResources(p, \"gold\", gold);");
code("}");
code("}");
code("trQuestVarSet(\"questCount\", 1 + trQuestVarGet(\"questCount\"));");
code("startNPCDialog(NPC_QUEST_COMPLETE + trQuestVarGet(\"stage\") + 10 * trQuestVarGet(\"localQuest\"));");
code("trQuestVarSet(\"questActive\", -1);");
code("uiLookAtUnitByName(\"\"+1*trQuestVarGet(\"questGuy\"));");
code("}");

code("int dQuestLeaves = 0;");
code("int dQuestTargets = 0;");
code("int xLeafType = 0;");

code("int dWorthlessJunk = 0;");

code("int dNottudShop = 0;");
code("int xNottudShopPos = 0;");

code("int dNpcTalk = 0;");
code("int xNpcDialog = 0;");

code("rule initialize_town_database");
code("active");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("dQuestLeaves = initGenericProj(\"questLeaves\",kbGetProtoUnitID(\"Einheriar\"),18,10.0,1.0);");
code("xLeafType = xInitAddInt(dQuestLeaves,\"type\");");

code("dQuestTargets = xInitDatabase(\"questTargets\");");
code("xInitAddInt(dQuestTargets,\"name\");");
code("xInitAddInt(dQuestTargets,\"type\");");

code("dWorthlessJunk = xInitDatabase(\"worthlessJunk\");");
code("xInitAddInt(dWorthlessJunk,\"name\");");

code("dNpcTalk = xInitDatabase(\"npcTalk\",3);");
code("xInitAddInt(dNpcTalk,\"name\");");
code("xNpcDialog = xInitAddInt(dNpcTalk,\"dialog\");");
code("}");

code("rule town_always");
code("inactive");
code("highFrequency");
code("{");
code("int x = 0;");
code("int z = 0;");
code("int p = 0;");
code("int next = 0;");
code("int room = 0;");
code("int action = 0;");
code("float amt = 0;");
code("float angle = 0;");
code("vector center = vector(0,0,0);");
code("vector pos = vector(0,0,0);");
code("vector loc = vector(0,0,0);");
code("vector dir = vector(0,0,0);");
code("if (trQuestVarGet(\"townFound\") == 0) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"guy1\");");
code("for(p=1; < ENEMY_PLAYER) {");
code("if (trUnitHasLOS(p)) {");
code("trQuestVarSet(\"townFound\", 1);");
code("trVectorSetUnitPos(\"questGuyPos\", \"questGuy\");");
code("break;");
code("}");
code("}");
code("if (trQuestVarGet(\"townFound\") == 1) {");
code("x = trQuestVarGet(\"village\");");
code("z = x / 4;");
code("x = trQuestVarGet(\"village\") - 4 * z;");
code("trVectorQuestVarSet(\"townCenter\", xsVectorSet(70*x + 40, 0, 70*z + 40));");
code("trQuestVarSet(\"townCenter\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Revealer to Player\",1,70*x+40,0,70*z+40,225,true);");
code("trSoundPlayFN(\"settlement.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("} else {");
code("xDatabaseNext(dNpcTalk);");
code("xUnitSelect(dNpcTalk,xUnitName);");
code("if (trUnitIsSelected()) {");
code("startNPCDialog(xGetInt(dNpcTalk,xNpcDialog));");
code("reselectMyself();");
code("}");

code("if (trQuestVarGet(\"questActive\") == 0) {");
code("for(p=1; < ENEMY_PLAYER) {");
code("if (unitDistanceToVector(xGetInt(dPlayerData,xPlayerUnit,p), trVectorQuestVarGet(\"questGuyPos\")) < 16) {");
code("uiLookAtUnitByName(\"\"+1*trQuestVarGet(\"questGuy\"));");
code("trQuestVarSet(\"questActive\", 1);");
code("startNPCDialog(NPC_QUEST + trQuestVarGet(\"stage\") + 10 * trQuestVarGet(\"localQuest\"));");
code("break;");
code("}");
code("}");
code("} else if (trQuestVarGet(\"localQuest\") == SHOP_GUY) {");
code("switch(1*trQuestVarGet(\"questActive\"))");
code("{");
code("case 1:");
code("{");
code("trQuestVarSet(\"questActive\", 2);");
code("trQuestVarSetFromRand(\"shopRelic\", 5, 10, true);");
code("trQuestVarSet(\"shopRelic\", trQuestVarGet(\"shopRelic\") + trQuestVarGet(\"stage\"));");
code("trQuestVarSet(\"shopGuyActive\", 1);");
code("trVectorSetUnitPos(\"shopGuyPos\", \"questGuy\");");
code("}");
code("case 2:");
code("{");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"questGuy\");");
code("if (trUnitIsSelected()) {");
code("startNPCDialog(NPC_QUEST_COMPLETE + SHOP_NPC);");
code("reselectMyself();");
code("}");
code("}");
code("}");
code("} else if (trQuestVarGet(\"questActive\") > 0) {");
code("switch(1*trQuestVarGet(\"stage\") + 10 * trQuestVarGet(\"localQuest\"))");
code("{");
code("case FETCH_NPC + 1:");
code("{");
code("switch(1*trQuestVarGet(\"questActive\"))");
code("{");
code("case 1:");
code("{");
code("trQuestVarSet(\"questActive\", 2);");
code("trQuestVarSetFromRand(\"rand\", 1, 8, true);");
code("trQuestVarSet(\"pig\", trQuestVarGet(\"rand\") + trQuestVarGet(\"village\"));");
code("if (trQuestVarGet(\"pig\") > 14) {");
code("trQuestVarSet(\"pig\", trQuestVarGet(\"pig\") - 14);");
code("}");
code("trQuestVarSet(\"pig1\", trGetNextUnitScenarioNameNumber());");
code("z = trQuestVarGet(\"pig\") / 4;");
code("x = trQuestVarGet(\"pig\") - 4 * z;");
code("trArmyDispatch(\"1,0\", \"Dwarf\",1,70 * x + 40,0,70 * z + 40,0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"pig1\", true);");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Pig\");");
code("trQuestVarSetFromRand(\"rand2\", 1, 11 - trQuestVarGet(\"rand\"));");
code("trQuestVarSet(\"pig\", trQuestVarGet(\"rand2\") + trQuestVarGet(\"pig\"));");
code("if (trQuestVarGet(\"pig\") > 14) {");
code("trQuestVarSet(\"pig\", trQuestVarGet(\"pig\") - 14);");
code("}");
code("trQuestVarSet(\"pig2\", trGetNextUnitScenarioNameNumber());");
code("z = trQuestVarGet(\"pig\") / 4;");
code("x = trQuestVarGet(\"pig\") - 4 * z;");
code("trArmyDispatch(\"1,0\", \"Dwarf\",1,70 * x + 40,0,70 * z + 40,0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"pig2\", true);");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Pig\");");
code("trQuestVarSetFromRand(\"rand3\", 1, 15 - trQuestVarGet(\"rand\") - trQuestVarGet(\"rand2\"));");
code("trQuestVarSet(\"pig\", trQuestVarGet(\"rand\") + trQuestVarGet(\"pig\"));");
code("if (trQuestVarGet(\"pig\") > 14) {");
code("trQuestVarSet(\"pig\", trQuestVarGet(\"pig\") - 14);");
code("}");
code("trQuestVarSet(\"pig3\", trGetNextUnitScenarioNameNumber());");
code("z = trQuestVarGet(\"pig\") / 4;");
code("x = trQuestVarGet(\"pig\") - 4 * z;");
code("trArmyDispatch(\"1,0\", \"Dwarf\",1,70 * x + 40,0,70 * z + 40,0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"pig3\", true);");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Pig\");");
code("}");
code("case 2:");
code("{");
code("for(i=1; <4) {");
code("if (trQuestVarGet(\"pigReturned\"+i) == 0) {");
code("pos = kbGetBlockPosition(\"\"+1*trQuestVarGet(\"pig\"+i));");
code("if (vectorInRectangle(pos, trVectorQuestVarGet(\"pigpenLower\"), trVectorQuestVarGet(\"pigpenUpper\"))) {");
code("trQuestVarSet(\"pigReturned\"+i, 1);");
code("trQuestVarSet(\"pigReturnCount\", 1 + trQuestVarGet(\"pigReturnCount\"));");
code("trChatSend(0, \"<color=1,1,1>Pig returned!</color>\");");
code("trSoundPlayFN(\"pigambient.wav\",\"1\",-1,\"\",\"\");");
code("if (trQuestVarGet(\"pigReturnCount\") == 3) {");
code("questComplete(-1, 300);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");
code("case BOUNTY_NPC + 1:");
code("{");
code("switch(1*trQuestVarGet(\"questActive\"))");
code("{");
code("case 1:");
code("{");
code("trQuestVarSet(\"questActive\", 2);");
code("trQuestVarSetFromRand(\"rand\", 6, 9, true);");
code("trQuestVarSet(\"rand\", trQuestVarGet(\"village\") + trQuestVarGet(\"rand\"));");
code("if (trQuestVarGet(\"rand\") > 14) {");
code("trQuestVarSet(\"rand\", trQuestVarGet(\"rand\") - 14);");
code("}");
code("z = trQuestVarGet(\"rand\") / 4;");
code("x = trQuestVarGet(\"rand\") - 4 * z;");
code("trVectorQuestVarSet(\"bountyTargetPos\", xsVectorSet(70*x+40,0,70*z+40));");
code("trQuestVarSet(\"bountyTarget\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\", \"Dwarf\",1,70 * x + 40,0,70 * z + 40,225,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bountyTarget\", true);");
code("trUnitConvert(ENEMY_PLAYER);");
code("trUnitChangeProtoUnit(\"Mummy\");");
code("activateEnemy(1*trQuestVarGet(\"bountyTarget\"), 100);");
code("trModifyProtounit(\"Mummy\", ENEMY_PLAYER, 0, 700);");
code("}");
code("case 2:");
code("{");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bountyTarget\", true);");
code("if (trUnitAlive() == false) {");
code("trMessageSetText(\"Bounty target defeated! Return to the quest giver for your reward!\", -1);");
code("trQuestVarSet(\"questActive\", 3);");
code("}");
code("}");
code("case 3:");
code("{");
code("trVectorSetUnitPos(\"bountyGuyPos\", \"questguy\");");
code("for(p=1; < ENEMY_PLAYER) {");
code("if (unitDistanceToVector(xGetInt(dPlayerData,xPlayerUnit,p), trVectorQuestVarGet(\"questGuyPos\")) < 16) {");
code("questComplete(STARSTONE, 0);");
code("break;");
code("}");
code("}");
code("}");
code("}");
code("}");
code("case FETCH_NPC + 2:");
code("{");
code("switch(1*trQuestVarGet(\"questActive\"))");
code("{");
code("case 1:");
code("{");
code("trQuestVarSet(\"questActive\", 2);");
code("trQuestVarSetFromRand(\"rand\", 6, 9, true);");
code("trQuestVarSet(\"rand\", trQuestVarGet(\"village\") + trQuestVarGet(\"rand\"));");
code("if (trQuestVarGet(\"rand\") > 14) {");
code("trQuestVarSet(\"rand\", trQuestVarGet(\"rand\") - 14);");
code("}");
code("z = trQuestVarGet(\"rand\") / 4;");
code("x = trQuestVarGet(\"rand\") - 4 * z;");
code("trVectorQuestVarSet(\"fetchTargetPos\", xsVectorSet(70*x+40,0,70*z+40));");
code("trQuestVarSet(\"fetchTarget\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\", \"Dwarf\",1,70 * x + 36,0,70 * z + 36,225,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"fetchTarget\", true);");
code("trUnitChangeProtoUnit(\"Relic\");");
code("xSetPointer(dFreeRelics,xAddDatabaseBlock(dFreeRelics));");
code("xSetInt(dFreeRelics,xRelicName,1*trQuestVarGet(\"fetchTarget\"));");
code("xSetInt(dFreeRelics,xRelicType, RELIC_GHOST_PICTURE);");
code("}");
code("case 2:");
code("{");
code("pos = kbGetBlockPosition(\"\"+1*trQuestVarGet(\"fetchTarget\"),true);");
code("if (distanceBetweenVectors(pos, trVectorQuestVarGet(\"questGuyPos\")) < 16.0) {");
code("questComplete(SOULSTONE, 0);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"fetchTarget\", true);");
code("trUnitChangeProtoUnit(\"Osiris Box Glow\");");
code("}");
code("}");
code("}");
code("}");
code("case BOUNTY_NPC + 2:");
code("{");
code("switch(1*trQuestVarGet(\"questActive\"))");
code("{");
code("case 1:");
code("{");
code("trQuestVarSet(\"portalsActive\", 0);");
code("trCounterAddTime(\"countdown\", 10, 1, \"The shade attacks\", -1);");
code("trQuestVarSet(\"shadeAttackTime\", trTime() + 10);");
code("trQuestVarSet(\"questActive\", 2);");
code("trModifyProtounit(\"Shade\", 0, 2, 30);");
code("trModifyProtounit(\"Shade\", 0, 27, 3000);");
code("}");
code("case 2:");
code("{");
code("if (trTime() >= trQuestVarGet(\"shadeAttackTime\")) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"questGuy\", true);");
code("trUnitMoveToPoint(0,0,0,-1,true);");
code("trSoundPlayFN(\"shadeofhadesacknowledge2.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"attackwarning.wav\",\"1\",-1,\"\",\"\");");
code("trChatSendSpoofed(0, \"Shade: JIMMY!!!!\");");
code("trQuestVarSet(\"questActive\", 3);");
code("trQuestVarSet(\"shadeAttackTime\", trTime() + 30);");
code("trCounterAddTime(\"shadecountdown\", 30, 1, \"Survive\", -1);");
code("}");
code("}");
code("case 3:");
code("{");
code("if (trTime() >= trQuestVarGet(\"shadeAttackTime\")) {");
code("trQuestVarSet(\"portalsActive\", 1);");
code("trQuestVarSet(\"questActive\", 4);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"questGuy\", true);");
code("if (trUnitAlive()) {");
code("trUnitDoWorkOnUnit(\"\"+1*trQuestVarGet(\"questGuy\"));");
code("questComplete(-1, 200);");
code("}");
code("} else {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"questGuy\", true);");
code("if (trUnitAlive() == false) {");
code("trSoundPlayFN(\"pestilencebirth.wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSet(\"questActive\", -1);");
code("trCounterAbort(\"shadecountdown\");");
code("trMessageSetText(\"Quest failed!\", -1);");
code("trQuestVarSet(\"portalsActive\", 1);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("case FETCH_NPC + 3:");
code("{");
code("switch(1*trQuestVarGet(\"questActive\"))");
code("{");
code("case 1:");
code("{");
code("trQuestVarSet(\"questActive\", 2);");
code("trQuestVarSetFromRand(\"rand\", 6, 9, true);");
code("trQuestVarSet(\"rand\", trQuestVarGet(\"village\") + trQuestVarGet(\"rand\"));");
code("if (trQuestVarGet(\"rand\") > 14) {");
code("trQuestVarSet(\"rand\", trQuestVarGet(\"rand\") - 14);");
code("}");
code("z = trQuestVarGet(\"rand\") / 4;");
code("x = trQuestVarGet(\"rand\") - 4 * z;");
code("trVectorQuestVarSet(\"fetchTargetPos\", xsVectorSet(70*x+40,0,70*z+40));");
code("trQuestVarSet(\"fetchTarget\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\", \"Dwarf\",1,70 * x + 36,0,70 * z + 36,225,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"fetchTarget\", true);");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Ox Cart\");");
code("trQuestVarSet(\"fetchWolvesSpawn\", zDistanceBetweenVectors(\"fetchTargetPos\", \"townCenter\") - 20);");
code("}");
code("case 2:");
code("{");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"fetchTarget\", true);");
code("for(p=1; < ENEMY_PLAYER) {");
code("if (trUnitHasLOS(p)) {");
code("trSoundPlayFN(\"find.wav\",\"1\",-1,\"\",\"\");");
code("trUnitConvert(p);");
code("trQuestVarSet(\"questActive\", 3);");
code("trMessageSetText(\"Bring the cart back to the town.\");");
code("break;");
code("}");
code("}");
code("}");
code("case 3:");
code("{");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"fetchTarget\", true);");
code("if (trUnitAlive() == false) {");
code("trSoundPlayFN(\"pestilencebirth.wav\",\"1\",-1,\"\",\"\");");
code("trMessageSetText(\"Quest failed!\");");
code("trQuestVarSet(\"questActive\", -1);");
code("} else if (zDistanceToVector(\"fetchTarget\", \"townCenter\") < trQuestVarGet(\"fetchWolvesSpawn\")) {");
code("trQuestVarSet(\"fetchWolvesSpawn\", trQuestVarGet(\"fetchWolvesSpawn\") - 20);");
code("center = kbGetBlockPosition(\"\"+1*trQuestVarGet(\"fetchTarget\"),true);");
code("trQuestVarSetFromRand(\"count\", 1, ENEMY_PLAYER, true);");
code("for(x=trQuestVarGet(\"count\"); >0) {");
code("trQuestVarSetFromRand(\"angle\", 0, 6.283185, false);");
code("angle = trQuestVarGet(\"angle\");");
code("dir = xsVectorSet(xsSin(angle),0,xsCos(angle));");
code("trQuestVarSet(\"heading\", 57.29578 * angle - 180);");
code("pos = xsVectorSet(20.0 * xsVectorGetX(dir) + xsVectorGetX(center),0,20.0 * xsVectorGetZ(dir) + xsVectorGetZ(center));");
code("next = trGetNextUnitScenarioNameNumber();");
code("loc = vectorToGrid(pos);");
code("if (terrainIsType(loc, TERRAIN_WALL, TERRAIN_SUB_WALL) == false) {");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),trQuestVarGet(\"heading\"),true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+next,true);");
code("trUnitConvert(ENEMY_PLAYER);");
code("trUnitChangeProtoUnit(\"Fenris Wolf\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+next,true);");
code("trUnitMoveToPoint(xsVectorGetX(center),0,xsVectorGetZ(center),-1,true);");
code("activateEnemy(next);");
code("}");
code("}");
code("} else if (zDistanceToVectorSquared(\"fetchTarget\", \"townCenter\") < 400) {");
code("questComplete(-1, 300);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"fetchTarget\", true);");
code("trUnitConvert(0);");
code("}");
code("}");
code("}");
code("}");
code("case BOUNTY_NPC + 3:");
code("{");
code("switch(1*trQuestVarGet(\"questActive\"))");
code("{");
code("case 1:");
code("{");
code("trQuestVarSet(\"questActive\", 2);");
code("trQuestVarSet(\"frostGiantBones\", 0);");
code("trQuestVarSet(\"frostGiantBonesLast\", 0);");
code("trQuestVarSet(\"frostGiantHunt\", 1);");
code("for(i=1; < 14) {");
code("if (i == trQuestVarGet(\"village\")) {");
code("continue;");
code("} else {");
code("z = i / 4;");
code("x = i - z * 4;");
code("next = trGetNextUnitScenarioNameNumber();");
code("trQuestVarSetFromRand(\"heading\", 0, 360, true);");
code("trArmyDispatch(\"1,0\", \"Dwarf\", 1, 70*x+40,0,70*z+40,trQuestVarGet(\"heading\"),true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(ENEMY_PLAYER);");
code("trUnitChangeProtoUnit(\"Frost Giant\");");
code("xSetPointer(dEnemiesIncoming,xAddDatabaseBlock(dEnemiesIncoming));");
code("xSetInt(dEnemiesIncoming,xUnitName,next);");
code("}");
code("}");
code("}");
code("case 2:");
code("{");
code("if (trQuestVarGet(\"frostGiantBones\") > trQuestVarGet(\"frostGiantBonesLast\")) {");
code("if (trQuestVarGet(\"frostGiantBones\") >= 5) {");
code("trQuestVarSet(\"frostGiantHunt\", 0);");
code("trMessageSetText(\"Return to the axeman for your reward.\", -1);");
code("trQuestVarSet(\"questActive\", 3);");
code("} else {");
code("trQuestVarSet(\"frostGiantBonesLast\", trQuestVarGet(\"frostGiantBones\"));");
code("trChatSend(0, \"<color=1,1,1>Frosted Bone collected! (\"+1*trQuestVarGet(\"frostGiantBones\")+\"/5)\");");
code("}");
code("}");
code("}");
code("case 3:");
code("{");
code("trVectorSetUnitPos(\"bountyGuyPos\", \"questguy\");");
code("pos = kbGetBlockPosition(\"\"+1*trQuestVarGet(\"questguy\"),true);");
code("for(p=1; < ENEMY_PLAYER) {");
code("if (unitDistanceToVector(xGetInt(dPlayerData,xPlayerUnit,p), pos) < 16) {");
code("questComplete(MANASTONE, 0);");
code("break;");
code("}");
code("}");
code("}");
code("}");
code("}");
code("case BOUNTY_NPC + 4:");
code("{");
code("switch(1*trQuestVarGet(\"questActive\"))");
code("{");
code("case 1:");
code("{");
code("trQuestVarSet(\"questActive\", 2);");
code("trQuestVarSet(\"questSpawns\", 12);");
code("trQuestVarSetFromRand(\"questAngle\", 0, 3.14, false);");
code("trVectorSetFromAngle(\"questDir\", trQuestVarGet(\"questAngle\"));");
code("trQuestVarSet(\"questNext\", trTimeMS());");
code("trSoundPlayFN(\"changeunit.wav\",\"1\",-1,\"\",\"\");");
code("trBlockAllSounds(true);");
code("}");
code("case 2:");
code("{");
code("if (xGetDatabaseCount(dQuestLeaves) > 0) {");
code("action = processGenericProj(dQuestLeaves);");
code("if (action == PROJ_GROUND) {");
code("xUnitSelectByID(dQuestLeaves,xUnitID);");
code("trUnitChangeProtoUnit(\"Dryad\");");
code("xUnitSelectByID(dQuestLeaves,xUnitID);");
code("trDamageUnitPercent(-100);");
code("activateEnemy(xGetInt(dQuestLeaves,xUnitName),-1,0);");
code("xSetPointer(dQuestTargets,xAddDatabaseBlock(dQuestTargets));");
code("xSetInt(dQuestTargets,xUnitName,xGetInt(dQuestLeaves,xUnitName));");
code("xFreeDatabaseBlock(dQuestLeaves);");
code("if (trQuestVarGet(\"questSpawns\") == 0) {");
code("trQuestVarSet(\"questActive\", 3);");
code("trUnblockAllSounds();");
code("}");
code("}");
code("}");
code("if (trQuestVarGet(\"questSpawns\") > 0) {");
code("if (trTimeMS() > trQuestVarGet(\"questNext\")) {");
code("for(i=trQuestVarGet(\"akardTower\"); < trQuestVarGet(\"akardTowerEnd\")) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+i, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");
code("}");
code("trQuestVarSet(\"questSpawns\", trQuestVarGet(\"questSpawns\") - 1);");
code("trQuestVarSet(\"questNext\", trQuestVarGet(\"questNext\") + 500);");
code("z = trQuestVarGet(\"village\") / 4;");
code("x = trQuestVarGet(\"village\") - 4 * z;");
code("trQuestVarSetFromRand(\"rand\", 8, 20, false);");
code("addGenericProj(dQuestLeaves,xsVectorSet(70*x+40,0,70*z+40),trVectorQuestVarGet(\"questDir\"),");
code("ENEMY_PLAYER,trQuestVarGet(\"rand\"),1);");
code("trVectorQuestVarSet(\"questDir\", rotationMatrix(trVectorQuestVarGet(\"questDir\"), -0.757322, 0.653041));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"akardTower\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Tower Mirror\"));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"akardGuild1\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Guild\"));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"akardGuild2\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Guild\"));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"akardTree\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Tamarisk Tree\"));");
code("}");
code("}");
code("}");
code("case 3:");
code("{");
code("if (xGetDatabaseCount(dQuestTargets) > 0) {");
code("xDatabaseNext(dQuestTargets);");
code("xUnitSelect(dQuestTargets,xUnitName);");
code("if (trUnitAlive() == false) {");
code("xFreeDatabaseBlock(dQuestTargets);");
code("}");
code("} else {");
code("questComplete(-1, 300);");
code("}");
code("}");
code("}");
code("}");
code("case FETCH_NPC + 4:");
code("{");
code("switch(1*trQuestVarGet(\"questActive\"))");
code("{");
code("case 1:");
code("{");
code("trQuestVarSetFromRand(\"operand1\", 1, 10, true);");
code("trQuestVarSetFromRand(\"operand2\", 1, 10, true);");
code("trQuestVarSet(\"questAnswer\", trQuestVarGet(\"operand1\") + trQuestVarGet(\"operand2\"));");
code("trQuestVarSet(\"questActive\", 2);");
code("trQuestVarSet(\"questSpawns\", 20);");
code("trQuestVarSetFromRand(\"questAngle\", 0, 3.14, false);");
code("trVectorSetFromAngle(\"questDir\", trQuestVarGet(\"questAngle\"));");
code("trQuestVarSet(\"questNext\", trTimeMS());");
code("trSoundPlayFN(\"changeunit.wav\",\"1\",-1,\"\",\"\");");
code("trBlockAllSounds(true);");
code("}");
code("case 2:");
code("{");
code("if (xGetDatabaseCount(dQuestLeaves) > 0) {");
code("action = processGenericProj(dQuestLeaves);");
code("if (action == PROJ_GROUND) {");
code("xUnitSelectByID(dQuestLeaves,xUnitID);");
code("trUnitChangeProtoUnit(\"Relic\");");
code("xUnitSelectByID(dQuestLeaves,xUnitID);");
code("trDamageUnitPercent(-100);");
code("xSetPointer(dFreeRelics,xAddDatabaseBlock(dFreeRelics));");
code("xSetInt(dFreeRelics,xRelicName,xGetInt(dQuestLeaves,xUnitName));");
code("xSetInt(dFreeRelics,xRelicType,xGetInt(dQuestLeaves,xLeafType));");

code("xSetPointer(dQuestTargets,xAddDatabaseBlock(dQuestTargets));");
code("xSetInt(dQuestTargets,xUnitName,xGetInt(dQuestLeaves,xUnitName));");
code("xSetInt(dQuestTargets,xRelicType,xGetInt(dQuestLeaves,xLeafType));");

code("xFreeDatabaseBlock(dQuestLeaves);");
code("if (xGetDatabaseCount(dQuestLeaves) + trQuestVarGet(\"questSpawns\") == 0) {");
code("trQuestVarSet(\"questActive\", 3);");
code("trUnblockAllSounds();");
code("}");
code("}");
code("}");
code("if (trQuestVarGet(\"questSpawns\") > 0) {");
code("if (trTimeMS() > trQuestVarGet(\"questNext\")) {");

code("for(i=trQuestVarGet(\"akardTower\"); < trQuestVarGet(\"akardTowerEnd\")) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+i, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");
code("}");

code("trQuestVarSet(\"questNext\", trQuestVarGet(\"questNext\") + 200);");
code("z = trQuestVarGet(\"village\") / 4;");
code("x = trQuestVarGet(\"village\") - 4 * z;");
code("trQuestVarSetFromRand(\"rand\", 12, 16, false);");
code("addGenericProj(dQuestLeaves,xsVectorSet(70*x+36,0,70*z+36),trVectorQuestVarGet(\"questDir\"),");
code("ENEMY_PLAYER,trQuestVarGet(\"rand\"));");
code("xSetInt(dQuestLeaves,xLeafType, RELIC_MATH_PROBLEM + trQuestVarGet(\"questSpawns\"));");
code("trQuestVarSet(\"questSpawns\", trQuestVarGet(\"questSpawns\") - 1);");
code("trVectorQuestVarSet(\"questDir\", rotationMatrix(trVectorQuestVarGet(\"questDir\"), -0.757322, 0.653041));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"akardTower\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Tower Mirror\"));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"akardGuild1\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Guild\"));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"akardGuild2\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Guild\"));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"akardTree\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Tamarisk Tree\"));");

code("}");
code("}");
code("}");
code("case 3:");
code("{");
code("xDatabaseNext(dQuestTargets);");
code("if (unitDistanceToVector(xGetInt(dQuestTargets,xUnitName), trVectorQuestVarGet(\"questGuyPos\")) < 9) {");
code("xUnitSelect(dQuestTargets,xUnitName);");
code("if (xGetInt(dQuestTargets, xRelicType) - RELIC_MATH_PROBLEM == trQuestVarGet(\"questAnswer\")) {");
code("trUnitChangeProtoUnit(\"Osiris Box Glow\");");
code("questComplete(STARSTONE, -1);");
code("} else {");
code("trQuestVarSet(\"wrongAnswer\", xGetInt(dQuestTargets, xRelicType) - RELIC_MATH_PROBLEM);");
code("xsDisableRule(\"gameplay_always\");");
code("xsDisableRule(\"town_always\");");
code("xsDisableRule(\"boss_entrance_always\");");
code("xsDisableRule(\"enter_boss_room\");");
code("xsDisableRule(\"nottud_always\");");
code("xsDisableRule(\"class_shop_always\");");
code("xsDisableRule(\"relic_transporter_guy_always\");");
code("xsDisableRule(\"relic_transporter_guy_found\");");
code("trUnitChangeProtoUnit(\"Dwarf\");");
code("xUnitSelect(dQuestTargets,xUnitName);");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Implode Sphere Effect\");");
code("trSoundPlayFN(\"wonderdeath.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"changeunit.wav\",\"1\",-1,\"\",\"\");");
code("trChatSendSpoofed(0, \"Akard: OH GOD! WHAT HAVE YOU DONE?! THAT'S THE WRONG-\");");
code("xsEnableRule(\"zenos_paradox_00\");");
code("trQuestVarSet(\"cinNext\", 0);");
code("trQuestVarSet(\"cinStep\", 0);");
code("xClearDatabase(dQuestTargets);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("case FETCH_NPC + 5:");
code("{");
code("switch(1*trQuestVarGet(\"questActive\"))");
code("{");
code("case 1:");
code("{");
code("trQuestVarSet(\"questActive\", 2);");
code("trQuestVarSetFromRand(\"rand\", 1, xGetDatabaseCount(dBasicRooms) - 1, true);");
code("for(i=0; < trQuestVarGet(\"rand\")) {");
code("xDatabaseNext(dBasicRooms);");
code("}");
code("room = xGetInt(dBasicRooms,xRoomNumber);");
code("pos = randomNearEdgeOfRoom(room);");
code("trQuestVarSet(\"fecesRelic\", trGetNextUnitScenarioNameNumber());");
code("spawnRelicSpecific(pos,RELIC_LITERAL_FECES);");
code("trQuestVarSetFromRand(\"rand\", 1, xGetDatabaseCount(dBasicRooms) - 1, true);");
code("for(i=0; < trQuestVarGet(\"rand\")) {");
code("xDatabaseNext(dBasicRooms);");
code("}");
code("room = xGetInt(dBasicRooms,xRoomNumber);");
code("pos = randomNearEdgeOfRoom(room);");
code("trQuestVarSet(\"berryRelic\", trGetNextUnitScenarioNameNumber());");
code("spawnRelicSpecific(pos,RELIC_BERRY_BUSH);");
code("trQuestVarSetFromRand(\"rand\", 1, xGetDatabaseCount(dBasicRooms) - 1, true);");
code("for(i=0; < trQuestVarGet(\"rand\")) {");
code("xDatabaseNext(dBasicRooms);");
code("}");
code("room = xGetInt(dBasicRooms,xRoomNumber);");
code("pos = randomNearEdgeOfRoom(room);");
code("trQuestVarSet(\"corpseRelic\", trGetNextUnitScenarioNameNumber());");
code("spawnRelicSpecific(pos,RELIC_A_FUCKING_CORPSE);");
code("}");
code("case 2:");
code("{");
code("if (zDistanceToVectorSquared(\"berryRelic\", \"questGuyPos\") < 16) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"berryRelic\", true);");
code("trUnitChangeProtoUnit(\"Regeneration SFX\");");
code("trQuestVarSet(\"questActive\", 4);");
code("trQuestVarSet(\"questNext\", trTime() + 5);");
code("trSoundPlayFN(\"colossuseat.wav\",\"1\",-1,\"\",\"\");");
code("startNPCDialog(NPC_ATE_BERRIES);");
code("} else if (zDistanceToVectorSquared(\"corpseRelic\", \"questGuyPos\") < 16) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"corpseRelic\", true);");
code("trUnitChangeProtoUnit(\"Scarab Blood\");");
code("trQuestVarSet(\"questActive\", 5);");
code("trQuestVarSet(\"questNext\", trTime() + 5);");
code("trSoundPlayFN(\"colossuseat.wav\",\"1\",-1,\"\",\"\");");
code("startNPCDialog(NPC_ATE_CORPSE);");
code("} else if (zDistanceToVectorSquared(\"fecesRelic\", \"questGuyPos\") < 16) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"fecesRelic\", true);");
code("trUnitChangeProtoUnit(\"Osiris Box Glow\");");
code("trSoundPlayFN(\"colossuseat.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"heal.wav\",\"1\",-1,\"\",\"\");");
code("questComplete(-1, 300);");
code("}");
code("}");
code("case 4:");
code("{");
code("if (trTime() > trQuestVarGet(\"questNext\")) {");
code("trQuestVarSet(\"questActive\", -1);");
code("trMessageSetText(\"Quest failed!\", -1);");
code("trSoundPlayFN(\"changeunit.wav\",\"1\",-1,\"\",\"\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"questGuy\", true);");
code("trUnitDestroy();");
code("pos = trVectorQuestVarGet(\"questGuyPos\");");
code("next = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),180,true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+next,true);");
code("trUnitConvert(ENEMY_PLAYER);");
code("trUnitChangeProtoUnit(\"Walking Berry Bush\");");
code("activateEnemy(next, 10);");
code("}");
code("}");
code("case 5:");
code("{");
code("if (trTime() > trQuestVarGet(\"questNext\")) {");
code("trQuestVarSet(\"questActive\", -1);");
code("trMessageSetText(\"Quest failed!\", -1);");
code("trSoundPlayFN(\"argusfreezeattack.wav\",\"1\",-1,\"\",\"\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"questGuy\", true);");
code("trUnitDelete(false);");
code("}");
code("}");
code("}");
code("}");
code("case BOUNTY_NPC + 5:");
code("{");
code("switch(1*trQuestVarGet(\"questActive\"))");
code("{");
code("case 1:");
code("{");
code("trQuestVarSet(\"poisonBucket\", trGetNextUnitScenarioNameNumber());");
code("pos = trVectorQuestVarGet(\"questGuyPos\");");
code("pos = xsVectorSet(xsVectorGetX(pos) - 2, 0, xsVectorGetZ(pos) - 2);");
code("spawnRelicSpecific(pos,RELIC_POISON_BUCKET);");
code("trQuestVarSet(\"questActive\", 2);");
code("}");
code("case 2:");
code("{");
code("p = trQuestVarGet(\"poisonBucketHolder\");");
code("if (p > 0) {");
code("if (xGetInt(dPlayerUnits, xPoisonStatus, xGetInt(dPlayerData,xPlayerIndex,p)) > 0) {");
code("if (trTime() > trQuestVarGet(\"poisonBucketNext\")) {");
code("trQuestVarSet(\"poisonBucketNext\", trTime());");
code("trQuestVarSet(\"poisonBucketFill\", trQuestVarGet(\"poisonBucketFill\") + 3);");
code("if (trQuestVarGet(\"poisonBucketFill\") >= 100) {");
code("trQuestVarSet(\"poisonBucketFill\", 100);");
code("trMessageSetText(\"Poison bucket has been filled. Return to the quest giver.\", -1);");
code("trQuestVarSet(\"questActive\", 3);");
code("}");
code("trChatSend(0, \"<color=0.3,1,0.5>Poison bucket: \" + 1*trQuestVarGet(\"poisonBucketFill\") + \"/100\");");
code("}");
code("}");
code("}");
code("}");
code("case 3:");
code("{");
code("if (zDistanceToVectorSquared(\"poisonBucket\", \"questGuyPos\") < 16) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"poisonBucket\", true);");
code("trUnitChangeProtoUnit(\"Lampades Blood\");");
code("trSoundPlayFN(\"lampadesblood.wav\",\"1\",-1,\"\",\"\");");
code("questComplete(SOULSTONE, -1);");
code("}");
code("}");
code("}");
code("}");
code("case FETCH_NPC + 6:");
code("{");
code("switch(1*trQuestVarGet(\"questActive\"))");
code("{");
code("case 1:");
code("{");
code("trQuestVarSetFromRand(\"rand\", 1, xGetDatabaseCount(dBasicRooms), true);");
code("for(i=0; < trQuestVarGet(\"rand\")) {");
code("xDatabaseNext(dBasicRooms);");
code("}");
code("room = xGetInt(dBasicRooms,xRoomNumber);");
code("pos = randomNearEdgeOfRoom(room);");
code("trQuestVarSet(\"yeebRelic\", trGetNextUnitScenarioNameNumber());");
code("spawnRelicSpecific(pos, RELIC_YEEBAAGOOON);");
code("trQuestVarSet(\"questActive\", 2);");
code("trQuestVarSet(\"magicDetectorRelic\", trGetNextUnitScenarioNameNumber());");
code("pos = trVectorQuestVarGet(\"questGuyPos\");");
code("pos = xsVectorSet(xsVectorGetX(pos) - 2, 0, xsVectorGetZ(pos) - 2);");
code("spawnRelicSpecific(pos, RELIC_MAGIC_DETECTOR);");
code("xsEnableRule(\"yeeb_hit_list\");");
code("}");
code("case 2:");
code("{");
code("p = trQuestVarGet(\"magicDetectorHolder\");");
code("trVectorSetUnitPos(\"pos\", \"yeebRelic\");");
code("if (zDistanceBetweenVectorsSquared(\"pos\", \"questGuyPos\") < 16) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"yeebRelic\", true);");
code("trUnitChangeProtoUnit(\"Osiris Box Glow\");");
code("questComplete(-1, 300);");
code("xsDisableRule(\"yeeb_hit_list\");");
code("trQuestVarSet(\"yeebHit\", 0);");
code("trQuestVarSet(\"yeebBossFight\", 0);");
code("} else if (p > 0) {");
code("if (trTime() > trQuestVarGet(\"magicDetectorNext\")) {");
code("trQuestVarSet(\"magicDetectorNext\", trTime());");
code("amt = zDistanceToVector(\"magicDetectorRelic\", \"pos\");");
code("if (trCurrentPlayer() == p) {");
code("if (trPlayerResourceCount(p, \"favor\") < 10) {");
code("trChatSend(0, \"<color=1,0,0>Distance: \" + 1*amt);");
code("trSoundPlayFN(\"attackwarning.wav\",\"1\",-1,\"\",\"\");");
code("} else {");
code("trChatSend(0, \"<color=1,1,1>Distance: \" + 1*amt);");
code("}");
code("}");
code("}");
code("if (trPlayerResourceCount(p, \"favor\") == 0) {");
code("trMessageSetText(\"Quest failed!\");");
code("trQuestVarSet(\"questActive\", -1);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"yeebRelic\", true);");
code("trUnitDestroy();");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"magicDetectorRelic\", true);");
code("trUnitDestroy();");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dPlayerData,xPlayerUnit,p));");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"1,0\");");
code("trDamageUnitPercent(100);");
code("trUnitChangeProtoUnit(\"Implode Sphere Effect\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData,xPlayerUnit,p),true);");
code("trUnitDelete(false);");
code("trSoundPlayFN(\"cinematics\32_out\explosion.mp3\",\"1\",-1,\"\",\"\");");
code("trCameraShake(1.0, 0.5);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("case BOUNTY_NPC + 6:");
code("{");
code("switch(1*trQuestVarGet(\"questActive\"))");
code("{");
code("case 1:");
code("{");
code("xsEnableRule(\"yeeb_hit_list\");");
code("trQuestVarSet(\"questActive\", 2);");
code("}");
code("case 2:");
code("{");
code("if (xGetDatabaseCount(dWorthlessJunk) > 0) {");
code("xDatabaseNext(dWorthlessJunk);");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dWorthlessJunk,xUnitName));");
code("if (vectorInRectangle(pos, trVectorQuestVarGet(\"yeebRoomBottom\"), trVectorQuestVarGet(\"yeebRoomTop\")) == false) {");
code("xUnitSelect(dWorthlessJunk,xUnitName);");
code("trUnitChangeProtoUnit(\"Dust Large\");");
code("trSoundPlayFN(\"swing2.wav\",\"1\",-1,\"\",\"\");");
code("trChatSend(0, \"<color=1,1,1>Worthless junk removed.\");");
code("xFreeDatabaseBlock(dWorthlessJunk);");
code("}");
code("} else {");
code("xsDisableRule(\"yeeb_hit_list\");");
code("trQuestVarSet(\"yeebHit\", 0);");
code("trQuestVarSet(\"yeebBossFight\", 0);");
code("questComplete(MANASTONE, -1);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");


code("if ((trTime() > trQuestVarGet(\"townHealNext\")) && (boss == 0)) {");
code("trQuestVarSet(\"townHealNext\", trTime());");
code("pos = trVectorQuestVarGet(\"townCenter\");");
code("for(p=1; < ENEMY_PLAYER) {");
code("if (unitDistanceToVector(xGetInt(dPlayerData,xPlayerUnit,p),pos) < 400) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData,xPlayerUnit,p),true);");
code("if (trUnitAlive()) {");
code("trDamageUnitPercent(-1);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");

code("rule nottud_always");
code("inactive");
code("highFrequency");
code("{");
code("int relic = 0;");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"nottud\");");
code("if (trQuestVarGet(\"nottudFound\") == 0) {");
code("for(p=1; < ENEMY_PLAYER) {");
code("if (trUnitHasLOS(p)) {");
code("trQuestVarSet(\"nottudFound\", 1);");
code("break;");
code("}");
code("}");
code("if (trQuestVarGet(\"nottudFound\") == 1) {");
code("trVectorSetUnitPos(\"pos\", \"nottud\");");
code("vector pos = kbGetBlockPosition(\"\"+1*trQuestVarGet(\"nottud\"), true);");
code("trArmyDispatch(\"1,0\",\"Revealer to Player\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),225,true);");
code("trSoundPlayFN(\"oracledone.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("} else {");
code("if (trUnitIsSelected()) {");
code("startNPCDialog(NPC_NOTTUD);");
code("reselectMyself();");
code("}");
code("xDatabaseNext(dNottudShop);");
code("xUnitSelect(dNottudShop,xUnitName);");
code("if (trUnitIsSelected()) {");
code("relic = xGetInt(dNottudShop, xRelicType);");
code("trShowImageDialog(relicIcon(relic), relicName(relic));");
code("reselectMyself();");
code("}");
code("}");
code("}");

code("rule zenos_paradox_00");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > trQuestVarGet(\"cinNext\")) {");
code("trQuestVarSet(\"cinStep\", 1 + trQuestVarGet(\"cinStep\"));");
code("switch(1*trQuestVarGet(\"cinStep\"))");
code("{");
code("case 1:");
code("{");
code("trUIFadeToColor(255,255,255,5000,0,true);");
code("trCameraShake(5.0, 0.3);");
code("trQuestVarSet(\"cinNext\", trTime() + 6);");
code("}");
code("case 2:");
code("{");
code("trChatHistoryClear();");
code("trQuestVarSet(\"cinNext\", trTime() + 3);");
code("trQuestVarSet(\"stage\", 11);");
code("xsEnableRule(\"rebuild_map\");");
code("trOverlayText(\"Zeno's Paradox\",3,-1,-1,-1);");
code("}");
code("case 3:");
code("{");
code("xsDisableRule(\"enter_boss_room\");");
code("xsDisableSelf();");
code("}");
code("}");
code("}");
code("}");

code("rule yeeb_hit_list");
code("inactive");
code("highFrequency");
code("{");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"yeebRelic\", true);");
code("if (trUnitIsOwnedBy(0)) {");
code("trQuestVarSet(\"yeebHit\", 0);");
code("trQuestVarSet(\"yeebBossFight\", 0);");
code("} else {");
code("trQuestVarSet(\"yeebBossFight\", 1);");
code("if (trUnitIsOwnedBy(trCurrentPlayer())) {");
code("trQuestVarSet(\"yeebHit\", 1);");
code("}");
code("}");
code("}");

code("rule nick_dialog");
code("inactive");
code("minInterval 3");
code("{");
code("int p = trCurrentPlayer();");
code("if (trQuestVarGet(\"nickEquippedLocal\") != trQuestVarGet(\"p\"+p+\"nickEquipped\")) {");
code("trQuestVarSet(\"nickEquippedLocal\", trQuestVarGet(\"p\"+p+\"nickEquipped\"));");
code("if (trQuestVarGet(\"nickEquippedLocal\") == 0) {");
code("if (Multiplayer) {");
code("startNPCDialog(NPC_NICK_DROP);");
code("} else if (trQuestVarGet(\"nickQuestProgressLocal\") == 4) {");
code("if (unitDistanceToVector(xGetInt(dPlayerData,xPlayerUnit,p), trVectorQuestVarGet(\"nickPos\")) < 4) {");
code("xSetPointer(dFreeRelics,xGetNewestPointer(dFreeRelics));");
code("for(i=xGetDatabaseCount(dFreeRelics); >0) {");
code("if (xGetInt(dFreeRelics,xRelicType) != RELIC_NICKONHAWK) {");
code("xDatabaseNext(dFreeRelics);");
code("} else {");
code("break;");
code("}");
code("}");
code("xUnitSelect(dFreeRelics,xUnitName);");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("trQuestVarSet(\"nickonhawk\", xGetInt(dFreeRelics,xUnitName));");
code("xFreeDatabaseBlock(dFreeRelics);");
code("trQuestVarSet(\"cinTime\", trTimeMS() + 5000);");
code("trQuestVarSet(\"cinStep\", 0);");
code("xsEnableRule(\"nick_transform\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"nickSpotlight\", true);");
code("trUnitChangeProtoUnit(\"Osiris Birth\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"nickSpotlight\", true);");
code("trSetSelectedScale(0,0,0);");
code("xsDisableSelf();");
code("trSoundPlayFN(\"cinematics\24_in\magic.mp3\", \"5\", -1, \"\",\"\");");
code("}");
code("}");
code("} else {");
code("startNPCDialog(NPC_NICK_START + trQuestVarGet(\"nickQuestProgressLocal\"));");
code("if (trQuestVarGet(\"nickQuestProgressLocal\") == 0) {");
code("trQuestVarSet(\"nickQuestProgressLocal\", 1);");
code("}");
code("}");
code("}");
code("}");

code("rule nick_next_dialog");
code("inactive");
code("highFrequency");
code("{");
code("int p = trCurrentPlayer();");
code("if (trCountUnitsInArea(\"\"+xGetInt(dPlayerData,xPlayerUnit,p),ENEMY_PLAYER,\"Unit\",20) == 0) {");
code("xsDisableSelf();");
code("startNPCDialog(NPC_NICK_NEXT + trQuestVarGet(\"p\"+p+\"nickQuestProgress\") - 2);");
code("trQuestVarSet(\"nickQuestProgressLocal\", trQuestVarGet(\"p\"+p+\"nickQuestProgress\"));");
code("}");
code("}");
code("const int WALL_WAITING = 0;");
code("const int WALL_FALLING = 1;");

code("void processWalls() {");
code("vector pos = vector(0,0,0);");
code("vector wallpos = vector(0,0,0);");
code("vector wallmod = vector(0,0,0);");
code("if (xGetDatabaseCount(dUnlockWalls) > 0) {");
code("xDatabaseNext(dUnlockWalls);");
code("wallpos = xGetVector(dUnlockWalls,xWallPos);");
code("wallmod = xGetVector(dUnlockWalls,xWallMod);");
code("switch(xGetInt(dUnlockWalls, xWallState))");
code("{");
code("case WALL_WAITING:");
code("{");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dUnlockWalls,xWallKey));");
code("if ((xsVectorGetX(wallpos) - xsVectorGetX(wallmod) - 7 < xsVectorGetX(pos)) &&");
code("(xsVectorGetX(wallpos) + xsVectorGetX(wallmod) + 7 > xsVectorGetX(pos)) &&");
code("(xsVectorGetZ(wallpos) - xsVectorGetZ(wallmod) - 7 < xsVectorGetZ(pos)) &&");
code("(xsVectorGetZ(wallpos) + xsVectorGetZ(wallmod) + 7 > xsVectorGetZ(pos))) {");
code("xSetInt(dUnlockWalls,xWallState, WALL_FALLING);");
code("xSetInt(dUnlockWalls,xWallTimeout, trTimeMS() + 2500);");
code("for(x=xGetInt(dUnlockWalls, xWallCircles); < xGetInt(dUnlockWalls, xWallEnd)) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+x);");
code("trUnitDestroy();");
code("}");
code("for(x=xGetInt(dUnlockWalls, xWallSFX); < xGetInt(dUnlockWalls, xWallCircles)) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+x);");
code("trUnitChangeProtoUnit(\"Heka Shockwave SFX\");");
code("}");
code("xUnitSelect(dUnlockWalls,xWallKey);");
code("trUnitChangeProtoUnit(\"Osiris Box Glow\");");
code("trSoundPlayFN(\"xpack\xcinematics\8_in\pyramidscrape.mp3\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("case WALL_FALLING:");
code("{");
code("float progress = (xGetInt(dUnlockWalls, xWallTimeout) - trTimeMS()) / 2500.0;");
code("int x0 = (xsVectorGetX(wallpos) - xsVectorGetX(wallmod)) / 2;");
code("int x1 = (xsVectorGetX(wallpos) + xsVectorGetX(wallmod)) / 2;");
code("int z0 = (xsVectorGetZ(wallpos) - xsVectorGetZ(wallmod)) / 2;");
code("int z1 = (xsVectorGetZ(wallpos) + xsVectorGetZ(wallmod)) / 2;");
code("if (progress > 0) {");
code("progress = progress * (wallHeight - worldHeight) + worldHeight;");
code("trChangeTerrainHeight(x0, z0, x1 + 1, z1 + 1, progress, false);");
code("} else {");
code("trChangeTerrainHeight(x0, z0, x1 + 1, z1 + 1, worldHeight, false);");
code("trPaintTerrain(x0-1,z0-1,x1+1,z1+1,TERRAIN_PRIMARY,TERRAIN_SUB_PRIMARY,false);");
code("trPaintTerrain(0,0,5,5,0,70,true);");
code("trPaintTerrain(0,0,5,5,TERRAIN_WALL,TERRAIN_SUB_WALL,false);");
code("trSoundPlayFN(\"cinematics\12_in\bang1.mp3\",\"1\",-1,\"\",\"\");");
code("for(x=xGetInt(dUnlockWalls, xWallSFX); < xGetInt(dUnlockWalls, xWallCircles)) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+x);");
code("trUnitDestroy();");
code("}");
code("xFreeDatabaseBlock(dUnlockWalls);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("const int CHEST_STATE_CLOSED = 0;");
code("const int CHEST_STATE_UNLOCKED = 1;");
code("const int CHEST_STATE_REWARDING = 2;");
code("const int CHEST_STATE_COUNTDOWN = 3;");

code("int xStatuePosition = 0;");
code("int xStatueAngle = 0;");
code("int xStatueState = 0;");
code("int xStatueTimeout = 0;");
code("int xStatueConnections = 0;");
code("int xStatueArray = 0;");
code("int xStatuePos = 0;");

code("int dRainingRelics = 0;");
code("int xRainingRelicMorphed = 0;");

code("int dChestHitbox = 0;");
code("int xChestHitboxCenter = 0;");
code("int xChestHitboxStart = 0;");
code("int xChestHitboxDist = 0;");

code("int dChests = 0;");
code("int xChestType = 0;");
code("int xChestState = 0;");
code("int xChestRoom = 0;");
code("int xChestSFX = 0;");

code("int xChestKey = 0;");
code("int xChestCount = 0;");

code("int xChestBegin = 0;");
code("int xChestEnd = 0;");

code("rule initialize_chest_database");
code("active");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("dRainingRelics = xInitDatabase(\"rainingRelics\");");
code("xInitAddInt(dRainingRelics,\"name\");");
code("xRainingRelicMorphed = xInitAddInt(dRainingRelics,\"morphed\");");

code("dChestHitbox = xInitDatabase(\"chestHitboxes\");");
code("xChestHitboxCenter = xInitAddVector(dChestHitbox,\"center\");");
code("xChestHitboxStart = xInitAddInt(dChestHitbox,\"start\");");
code("xChestHitboxDist = xInitAddFloat(dChestHitbox,\"dist\");");

code("dChests = xInitDatabase(\"chests\");");
code("xInitAddInt(dChests,\"name\");");
code("xChestType = xInitAddInt(dChests,\"type\");");
code("xChestState = xInitAddInt(dChests,\"state\");");
code("xChestRoom = xInitAddInt(dChests,\"room\");");
code("xChestSFX = xInitAddInt(dChests,\"sfx\");");
code("xChestKey = xInitAddInt(dChests,\"key\");");
code("xChestCount = xChestKey;");
code("xChestBegin = xChestSFX;");
code("xChestEnd = xChestKey;");
code("}");

code("void initializeStatuePuzzle(int room = 0) {");
code("int db = xInitDatabase(\"statuesIn\"+room);");
code("trQuestVarSet(\"statuesIn\"+room, db);");
code("xInitAddInt(db,\"name\");");
code("xStatueState = xInitAddInt(db,\"state\");");
code("xStatuePosition = xInitAddInt(db,\"position\");");
code("xStatueAngle = xInitAddFloat(db,\"angle\");");
code("xStatueTimeout = xInitAddInt(db,\"timeout\");");
code("xStatueConnections = xInitAddInt(db,\"connections\");");
code("xStatueArray = xInitAddInt(db,\"array\");");
code("xStatuePos = xInitAddVector(db,\"pos\");");
code("}");

code("void turnStatue(int room = 0, int index = 0, bool first = false, bool immediate = false) {");
code("int db = trQuestVarGet(\"statuesIn\"+room);");
code("int old = xGetPointer(db);");
code("if (index > 0) {");
code("xSetPointer(db, index);");
code("}");
code("xSetFloat(db, xStatueAngle, fModulo(6.283185, 1.570796 + xGetFloat(db, xStatueAngle)));");
code("xSetInt(db, xStatuePosition, 1 + xGetInt(db, xStatuePosition));");
code("if (xGetInt(db, xStatuePosition) >= 4) {");
code("xSetInt(db, xStatuePosition, 0);");
code("trQuestVarSet(\"correctStatuesIn\"+room, 1 + trQuestVarGet(\"correctStatuesIn\"+room));");
code("} else if (xGetInt(db, xStatuePosition) == 1) {");
code("trQuestVarSet(\"correctStatuesIn\"+room, trQuestVarGet(\"correctStatuesIn\"+room) - 1);");
code("}");
code("xUnitSelect(db, xUnitName);");
code("trDamageUnitPercent(-100);");
code("if (immediate) {");
code("trVectorSetFromAngle(\"dir\", xGetFloat(db, xStatueAngle));");
code("trSetUnitOrientation(trVectorQuestVarGet(\"dir\"),vector(0,1,0),true);");
code("} else {");
code("trUnitConvert(0);");
code("if (xGetInt(db, xStatueState) == 1) {");
code("xSetInt(db, xStatueTimeout, 1000 + xGetInt(db, xStatueTimeout));");
code("} else {");
code("xSetInt(db, xStatueState, 1);");
code("xSetInt(db, xStatueTimeout, trTimeMS() + 1000);");
code("trQuestVarSet(\"movingStatuesIn\"+room, 1 + trQuestVarGet(\"movingStatuesIn\"+room));");
code("}");
code("}");

code("if (first) {");
code("for(x=0; < xGetInt(db, xStatueConnections)) {");
code("turnStatue(room, aiPlanGetUserVariableInt(ARRAYS,xGetInt(db,xStatueArray),x), false, immediate);");
code("}");
code("if (immediate == false) {");
code("trSoundPlayFN(\"trojangateopen.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");

code("if (index > 0) {");
code("xSetPointer(db, old);");
code("}");
code("}");

code("void processChests() {");
code("int room = 0;");
code("int db = 0;");
code("float dist = 0;");
code("float angle = 0;");
code("float amt = 0;");
code("vector pos = vector(0,0,0);");
code("vector loc = vector(0,0,0);");
code("if (xGetDatabaseCount(dChestHitbox) > 0) {");
code("xDatabaseNext(dChestHitbox);");
code("pos = xGetVector(dChestHitbox,xChestHitboxCenter);");
code("dist = xsPow(0.015 * (trTimeMS() - xGetInt(dChestHitbox,xChestHitboxStart)), 2);");
code("bool hit = false;");
code("amt = xGetFloat(dChestHitbox,xChestHitboxDist);");
code("for(i=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("xUnitSelectByID(dPlayerUnits,xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else {");
code("angle = unitDistanceToVector(xGetInt(dPlayerUnits,xUnitName),pos);");
code("if (angle > xGetFloat(dChestHitbox,xChestHitboxDist) && angle < dist) {");
code("damagePlayerUnit(1000.0);");
code("if (angle > amt) {");
code("amt = angle;");
code("}");
code("}");
code("}");
code("}");
code("for(i=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies,xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else {");
code("angle = unitDistanceToVector(xGetInt(dEnemies,xUnitName),pos);");
code("if (angle > xGetFloat(dChestHitbox,xChestHitboxDist) && angle < dist) {");
code("trDamageUnit(1000.0);");
code("if (angle > amt) {");
code("amt = angle;");
code("}");
code("}");
code("}");
code("}");
code("xSetFloat(dChestHitbox,xChestHitboxDist,amt);");
code("if (trTimeMS() - xGetInt(dChestHitbox,xChestHitboxStart) > 1.5) {");
code("xFreeDatabaseBlock(dChestHitbox);");
code("}");
code("}");
code("for(x=xGetDatabaseCount(dRainingRelics); > 0) {");
code("xDatabaseNext(dRainingRelics);");
code("xUnitSelect(dRainingRelics,xUnitName);");
code("if (xGetInt(dRainingRelics, xRainingRelicMorphed) == 1) {");
code("xSetInt(dRainingRelics, xRainingRelicMorphed, 0);");
code("trMutateSelected(kbGetProtoUnitID(\"Curse SFX\"));");
code("trUnitSetAnimationPath(\"0,0,0,0,0,0,0\");");
code("} else if (xGetInt(dRainingRelics, xRainingRelicMorphed) == 2) {");
code("xSetInt(dRainingRelics, xRainingRelicMorphed, 3);");
code("trMutateSelected(kbGetProtoUnitID(\"Meteorite death\"));");
code("} else if (xGetInt(dRainingRelics, xRainingRelicMorphed) == 3) {");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dRainingRelics,xUnitName));");
code("if (xsVectorGetY(pos) <= 0) {");
code("trUnitChangeProtoUnit(\"Cinematic Scorch\");");
code("xUnitSelect(dRainingRelics,xUnitName);");
code("trDamageUnitPercent(-100);");
code("trUnitSetAnimationPath(\"2,0,0,0,0,0,0\");");
code("xFreeDatabaseBlock(dRainingRelics);");
code("}");
code("} else {");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dRainingRelics,xUnitName));");
code("if (xsVectorGetY(pos) <= worldHeight + 0.3) {");
code("trUnitChangeProtoUnit(\"Relic\");");
code("xUnitSelect(dRainingRelics,xUnitName);");
code("trDamageUnitPercent(-100);");
code("xSetPointer(dFreeRelics,xAddDatabaseBlock(dFreeRelics));");
code("xSetInt(dFreeRelics,xRelicName,xGetInt(dRainingRelics,xUnitName));");
code("xSetInt(dFreeRelics,xRelicType,randomStageClosest(20));");
code("xFreeDatabaseBlock(dRainingRelics);");
code("}");
code("}");
code("}");
code("if (xGetDatabaseCount(dChests) > 0) {");
code("xDatabaseNext(dChests);");
code("xUnitSelect(dChests,xUnitName);");
code("switch(xGetInt(dChests,xChestState))");
code("{");
code("case CHEST_STATE_CLOSED:");
code("{");
code("switch(xGetInt(dChests,xChestType))");
code("{");
code("case CHEST_KEY:");
code("{");
code("if (trUnitIsSelected()) {");
code("reselectMyself();");
code("uiMessageBox(\"Find a relic with a matching symbol and bring it here to open this chest.\");");
code("}");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dChests,xChestKey));");
code("if (unitDistanceToVector(xGetInt(dChests,xUnitName), pos) < 16) {");
code("xSetInt(dChests,xChestState,CHEST_STATE_UNLOCKED);");
code("xUnitSelect(dChests,xChestKey);");
code("trUnitChangeProtoUnit(\"Osiris Box Glow\");");
code("xUnitSelect(dChests,xChestSFX);");
code("trUnitChangeProtoUnit(\"Rocket\");");
code("}");
code("}");
code("case CHEST_STATUES:");
code("{");
code("if (trUnitIsSelected()) {");
code("reselectMyself();");
code("uiMessageBox(\"Make all the statues face the chest to open it.\");");
code("}");
code("room = xGetInt(dChests,xChestRoom);");
code("db = trQuestVarGet(\"statuesIn\"+room);");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xUnitSelect(db,xUnitName);");
code("switch(xGetInt(db, xStatueState))");
code("{");
code("case 0:");
code("{");
code("if (trUnitPercentDamaged() > 0) {");
code("turnStatue(room,0,true,false);");
code("}");
code("}");
code("case 1:");
code("{");
code("angle = 0.001 * (xGetInt(db, xStatueTimeout) - trTimeMS());");
code("if (angle < 0) {");
code("angle = xGetFloat(db, xStatueAngle);");
code("xSetInt(db, xStatueState, 0);");
code("trUnitConvert(ENEMY_PLAYER);");
code("trDamageUnitPercent(-100);");
code("trQuestVarSet(\"movingStatuesIn\"+room, trQuestVarGet(\"movingStatuesIn\"+room) - 1);");
code("} else {");
code("angle = fModulo(6.283185, xGetFloat(db, xStatueAngle) - angle * 1.570796);");
code("}");
code("trVectorSetFromAngle(\"dir\", angle);");
code("trSetUnitOrientation(trVectorQuestVarGet(\"dir\"),vector(0,1,0),true);");
code("}");
code("}");
code("}");
code("if ((trQuestVarGet(\"correctStatuesIn\"+room) == xGetDatabaseCount(db)) &&");
code("trQuestVarGet(\"movingStatuesIn\"+room) == 0) {");
code("if (xGetInt(dChests,xChestCount) == 0) {");
code("xSetInt(dChests,xChestState,CHEST_STATE_UNLOCKED);");
code("} else {");
code("trQuestVarSet(\"boonUnlocked\"+1*trQuestVarGet(\"stageTemple\"),1);");
code("startNPCDialog(NPC_TEMPLE_COMPLETE + 8);");
code("xFreeDatabaseBlock(dChests);");
code("}");
code("trSoundPlayFN(\"sentinelbirth.wav\",\"1\",-1,\"\",\"\");");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xUnitSelect(db,xUnitName);");
code("trDamageUnitPercent(-100);");
code("trUnitConvert(0);");
code("}");
code("}");
code("}");
code("case CHEST_ENCOUNTER:");
code("{");
code("if (trUnitIsSelected()) {");
code("reselectMyself();");
code("uiMessageBox(\"You must defeat all the enemies in this room to open this chest.\");");
code("}");
code("bool allDead = true;");
code("for(x=xGetInt(dChests, xChestSFX); < xGetInt(dChests, xChestKey)) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+x);");
code("if (trUnitAlive()) {");
code("allDead = false;");
code("break;");
code("}");
code("}");
code("if (allDead) {");
code("xSetInt(dChests,xChestState,CHEST_STATE_UNLOCKED);");
code("}");
code("}");
code("}");
code("}");
code("case CHEST_STATE_UNLOCKED:");
code("{");
code("trQuestVarSet(\"chestCount\", 1 + trQuestVarGet(\"chestCount\"));");
code("xUnitSelect(dChests,xUnitName);");
code("trUnitSetAnimation(\"SE_Great_Box_Opening\",false,-1);");
code("trSoundPlayFN(\"siegetowerdeath.wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSetFromRand(\"rand\", 1, 10, true);");
code("if (trQuestVarGet(\"rand\") == 1) {");
code("xSetInt(dChests, xChestState, CHEST_STATE_COUNTDOWN);");
code("trUnitHighlight(4.0, true);");
code("trUnitChangeProtoUnit(\"Phoenix Egg\");");
code("xSetInt(dChests,xChestSFX, trTimeMS() + 1000);");
code("xSetInt(dChests,xChestCount, 3);");
code("trSoundPlayFN(\"attackwarning.wav\",\"1\",-1,\"\",\"\");");
code("trMessageSetText(\"The chest was a bomb! Run!\",-1);");
code("} else {");
code("room = xGetInt(dChests,xChestRoom);");
code("trQuestVarSetFromRand(\"rand\", 1, 1*trQuestVarGet(\"rand\"), true);");
code("trQuestVarSet(\"rand\", trQuestVarGet(\"rand\") + trQuestVarGet(\"correctStatuesIn\"+room));");
code("if (trQuestVarGet(\"rand\") < ENEMY_PLAYER) {");
code("trQuestVarSet(\"rand\", ENEMY_PLAYER);");
code("}");
code("xSetInt(dChests,xChestState,CHEST_STATE_REWARDING);");
code("xSetInt(dChests,xChestSFX, trTimeMS());");
code("xSetInt(dChests,xChestCount,1*trQuestVarGet(\"rand\"));");
code("trSoundPlayFN(\"plentybirth.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("case CHEST_STATE_REWARDING:");
code("{");
code("if (trTimeMS() > xGetInt(dChests, xChestSFX)) {");
code("if (xGetInt(dChests, xChestCount) == 0) {");
code("xFreeDatabaseBlock(dChests);");
code("} else {");
code("trSoundPlayFN(\"tributereceived.wav\",\"1\",-1,\"\",\"\");");
code("xSetInt(dChests,xChestSFX,trTimeMS() + 500);");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dChests,xUnitName));");
code("xSetPointer(dRainingRelics, xAddDatabaseBlock(dRainingRelics));");
code("xSetInt(dRainingRelics,xUnitName,trGetNextUnitScenarioNameNumber());");
code("xSetInt(dRainingRelics,xRainingRelicMorphed,1);");
code("trQuestVarSetFromRand(\"heading\",1,360,true);");
code("trArmyDispatch(\"0,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),trQuestVarGet(\"heading\"),true);");
code("trQuestVarSetFromRand(\"speed\", 2, 10);");
code("zSetProtoUnitStat(\"Kronny Flying\", 0, 1, trQuestVarGet(\"speed\"));");
code("trArmySelect(\"0,0\");");
code("trMutateSelected(kbGetProtoUnitID(\"Kronny Flying\"));");
code("trDamageUnitPercent(100);");
code("trSetSelectedScale(0,-3,0);");
code("xSetInt(dChests,xChestCount,xGetInt(dChests,xChestCount) - 1);");
code("}");
code("}");
code("}");
code("case CHEST_STATE_COUNTDOWN:");
code("{");
code("xUnitSelect(dChests,xUnitName);");
code("float scale = 4.0 - xGetInt(dChests, xChestCount) + 0.001 * (trTimeMS() - xGetInt(dChests, xChestSFX) + 1000);");
code("trSetSelectedScale(scale, scale, scale);");
code("if (trTimeMS() > xGetInt(dChests, xChestSFX)) {");
code("xSetInt(dChests, xChestSFX, trTimeMS() + 1000);");
code("xSetInt(dChests, xChestCount, xGetInt(dChests, xChestCount) - 1);");
code("if (xGetInt(dChests, xChestCount) == 0) {");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dChests,xUnitName));");
code("trQuestVarSet(\"heading\", 0);");
code("zSetProtoUnitStat(\"Kronny Flying\", 0, 1, 15);");
code("for(x=18; >0) {");
code("xSetPointer(dRainingRelics,xAddDatabaseBlock(dRainingRelics));");
code("xSetInt(dRainingRelics,xUnitName,trGetNextUnitScenarioNameNumber());");
code("xSetInt(dRainingRelics,xRainingRelicMorphed,2);");
code("trArmyDispatch(\"0,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),trQuestVarGet(\"heading\"),true);");
code("trArmySelect(\"0,0\");");
code("trDamageUnitPercent(100);");
code("trMutateSelected(kbGetProtoUnitID(\"Kronny Flying\"));");
code("trSetSelectedScale(0,-2.0,0);");
code("trQuestVarSet(\"heading\", trQuestVarGet(\"heading\") + 20);");
code("}");

code("xSetPointer(dChestHitbox,xAddDatabaseBlock(dChestHitbox));");
code("xSetVector(dChestHitbox,xChestHitboxCenter,pos);");
code("xSetInt(dChestHitbox,xChestHitboxStart,trTimeMS());");

code("xUnitSelect(dChests,xUnitName);");
code("trSoundPlayFN(\"cinematics\35_out\strike.mp3\",\"1\",-1,\"\",\"\");");
code("if (trUnitVisToPlayer()) {");
code("trUIFadeToColor(255,255,255,1000,0,false);");
code("trCameraShake(3.0, 0.25);");
code("}");
code("trDamageUnitPercent(100);");
code("xFreeDatabaseBlock(dChests);");
code("} else {");
code("trSoundPlayFN(\"attackwarning.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");


code("int dLaserRooms = 0;");
code("int xLaserRoomActive = 0;");
code("int xLaserRoomNext = 0;");
code("int xLaserRoomPos = 0;");
code("int xLaserRoomXBottom = 0;");
code("int xLaserRoomXTop = 0;");
code("int xLaserRoomZBottom = 0;");
code("int xLaserRoomZTop = 0;");

code("int dShrinkingLasers = 0;");
code("int xShrinkingLaserTimeout = 0;");

code("void initializeLaserTrapDatabase() {");
code("dLaserRooms = xInitDatabase(\"laserRooms\");");
code("xInitAddInt(dLaserRooms,\"name\");");
code("xLaserRoomActive = xInitAddInt(dLaserRooms,\"active\");");
code("xLaserRoomNext = xInitAddInt(dLaserRooms,\"next\");");
code("xLaserRoomPos = xInitAddVector(dLaserRooms,\"pos\");");
code("xLaserRoomXBottom = xLaserRoomPos + 1;");
code("xLaserRoomXTop = xLaserRoomXBottom + 8;");
code("xLaserRoomZBottom = xLaserRoomXTop + 8;");
code("xLaserRoomZTop = xLaserRoomZBottom + 8;");
code("for(x=32; > 0) {");
code("xInitAddVector(dLaserRooms,\"laser\"+x);");
code("}");

code("dShrinkingLasers = xInitDatabase(\"shrinkingLasers\");");
code("xInitAddInt(dShrinkingLasers,\"name\");");
code("xShrinkingLaserTimeout = xInitAddInt(dShrinkingLasers,\"timeout\");");
code("}");

code("rule laser_rooms_always");
code("inactive");
code("highFrequency");
code("{");
code("int laser = 0;");
code("float scale = 0;");
code("vector pos = vector(0,0,0);");
code("if (xGetDatabaseCount(dLaserRooms) > 0) {");
code("xDatabaseNext(dLaserRooms);");
code("if (trTimeMS() > xGetInt(dLaserRooms, xLaserRoomNext)) {");
code("if (xGetInt(dLaserRooms, xLaserRoomActive) == 0) {");
code("xSetInt(dLaserRooms, xLaserRoomNext, trTimeMS() + 3000);");
code("pos = xGetVector(dLaserRooms,xLaserRoomPos);");
code("for(x=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("xUnitSelectByID(dPlayerUnits,xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (unitDistanceToVector(xGetInt(dPlayerUnits,xUnitName), pos) < 400) {");
code("xSetInt(dLaserRooms, xLaserRoomActive, 1);");
code("xSetInt(dLaserRooms, xLaserRoomNext, trTimeMS());");
code("trSoundPlayFN(\"attackwarning.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"automatonspcbirth.wav\",\"1\",-1,\"\",\"\");");
code("break;");
code("}");
code("}");
code("} else {");
code("xSetInt(dLaserRooms, xLaserRoomNext, xGetInt(dLaserRooms, xLaserRoomNext) + 200);");
code("laser = xGetInt(dLaserRooms, xLaserRoomActive);");
code("if (laser < 9) {");
code("laser = laser - 1;");
code("xUnitSelect(dLaserRooms,xUnitName);");
code("if (trUnitVisToPlayer()) {");
code("trSoundPlayFN(\"skypassagein.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("for(x=1;<=4) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+(x+xGetInt(dLaserRooms,xUnitName)+4*laser));");
code("trSetSelectedScale(3,0,21);");
code("}");
code("} else {");
code("laser = laser - 9;");
code("xUnitSelect(dLaserRooms,xUnitName);");
code("if (trUnitVisToPlayer()) {");
code("trSoundPlayFN(\"sky passage.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"phoenixattack.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("xSetPointer(dShrinkingLasers,xAddDatabaseBlock(dShrinkingLasers));");
code("xSetInt(dShrinkingLasers,xUnitName,xGetInt(dLaserRooms,xUnitName) + 4*laser + 1);");
code("xSetInt(dShrinkingLasers,xShrinkingLaserTimeout, trTimeMS() + 500);");

code("for(x=1;<=4) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+(x+xGetInt(dLaserRooms,xUnitName) + 4*laser));");
code("trUnitHighlight(3.0, false);");
code("trSetSelectedScale(6,0,21);");
code("}");
code("for(x=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("xUnitSelectByID(dPlayerUnits,xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else {");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dPlayerUnits,xUnitName));");
code("if (vectorInRectangle(pos, xGetVector(dLaserRooms,xLaserRoomXBottom + laser),");
code("xGetVector(dLaserRooms,xLaserRoomXTop + laser))) {");
code("damagePlayerUnit(300);");
code("} else if (vectorInRectangle(pos, xGetVector(dLaserRooms,xLaserRoomZBottom + laser),");
code("xGetVector(dLaserRooms,xLaserRoomZTop + laser))) {");
code("damagePlayerUnit(300);");
code("}");
code("}");
code("}");
code("}");


code("xSetInt(dLaserRooms, xLaserRoomActive, xGetInt(dLaserRooms, xLaserRoomActive) + 1);");
code("if (xGetInt(dLaserRooms, xLaserRoomActive) == 9) {");
code("xSetInt(dLaserRooms, xLaserRoomNext, xGetInt(dLaserRooms, xLaserRoomNext) + 400);");
code("} else if (xGetInt(dLaserRooms, xLaserRoomActive) == 17) {");
code("xSetInt(dLaserRooms, xLaserRoomActive, 0);");
code("xSetInt(dLaserRooms, xLaserRoomNext, xGetInt(dLaserRooms, xLaserRoomNext) + 2000);");
code("pos = xGetVector(dLaserRooms,xLaserRoomPos);");
code("for(x=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("xUnitSelectByID(dPlayerUnits,xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (unitDistanceToVector(dPlayerUnits, pos) < 400) {");
code("xSetInt(dLaserRooms, xLaserRoomActive, 1);");
code("break;");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");
code("if (xGetDatabaseCount(dShrinkingLasers) > 0) {");
code("xDatabaseNext(dShrinkingLasers);");
code("scale = xGetInt(dShrinkingLasers, xShrinkingLaserTimeout) - trTimeMS();");
code("if (scale > 0) {");
code("scale = 0.012 * scale;");
code("} else {");
code("scale = 0;");
code("xFreeDatabaseBlock(dShrinkingLasers);");
code("}");
code("for(x=0; <4) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+(x+xGetInt(dShrinkingLasers,xUnitName)), true);");
code("trSetSelectedScale(scale, scale, 21);");
code("}");
code("}");
code("}");



code("rule choose_stage_00");
code("inactive");
code("highFrequency");
code("{");
code("xDatabaseNext(dStageChoices);");
code("int n = xGetInt(dStageChoices, xUnitName);");
code("xUnitSelect(dStageChoices,xUnitName);");
code("if (trCountUnitsInArea(\"\"+n, 1, \"Athena\",3) == 1) {");
code("trQuestVarSet(\"stage\", xGetInt(dStageChoices,xStageChoicesStage));");
code("if (trQuestVarGet(\"stage\") == 0) {");
code("xsEnableRule(\"pvp_build_map\");");
code("} else {");
code("xsEnableRule(\"choose_stage_02\");");
code("trStringQuestVarSet(\"advice\", \"Having difficulty at higher floors? Level up and bring some friends!\");");
code("}");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"chooser\", true);");
code("trUnitChangeProtoUnit(\"Rocket\");");
code("for(x=xGetDatabaseCount(dStageChoices); >0) {");
code("xDatabaseNext(dStageChoices);");
code("xUnitSelect(dStageChoices,xUnitName);");
code("trUnitDestroy();");
code("}");
code("aiPlanDestroy(dStageChoices);");
code("xsDisableSelf();");
code("trForceNonCinematicModels(true);");
code("trLetterBox(true);");
code("trUIFadeToColor(0,0,0,1000,0,true);");
code("trSoundPlayFN(\"ui\thunder2.wav\",\"1\",-1,\"\",\"\");");
code("trOverlayText(stageName(1*trQuestVarGet(\"stage\")), 3.0, -1, -1, -1);");
code("for(p=ENEMY_PLAYER; >0) {");
code("for(i=trQuestVarGet(\"stage\"); >1) {");
code("for(j=3; >0) {");
code("trTechSetStatus(p, 78, 4);");
code("}");
code("}");
code("for(i=trQuestVarGet(\"stage\")/2; >0) {");
code("trTechSetStatus(p, 76, 4);");
code("if ((trQuestVarGet(\"stage\") > 6) && (p == ENEMY_PLAYER)) {");
code("trTechSetStatus(p, 76, 4);");
code("}");
code("}");
code("}");
code("for(i=trQuestVarGet(\"stage\"); >1) {");
code("for(j=7; >0) {");
code("trTechSetStatus(ENEMY_PLAYER, 78, 4);");
code("}");
code("}");
code("xsEnableRule(\"delayed_modify\");");
code("} else if (trUnitIsSelected()) {");
code("uiClearSelection();");
code("trShowImageDialog(stageIcon(xGetInt(dStageChoices,xStageChoicesStage)),");
code("\"Stage \" + xGetInt(dStageChoices,xStageChoicesStage) + \": \" + stageName(xGetInt(dStageChoices,xStageChoicesStage)));");
code("}");
code("}");


code("void buildRoom(int x = 0, int z = 0, int type = 0) {");
code("int next = 0;");
code("int room = x + 4 * z;");
code("int size = 0;");
code("int x0 = 0;");
code("int z0 = 0;");
code("int x1 = 0;");
code("int z1 = 0;");
code("bool trapped = false;");
code("vector pos = vector(0,0,0);");
code("vector dir = vector(0,0,0);");
code("trQuestVarSet(\"room\"+room, type);");
code("if (type < ROOM_CHEST) {");
code("if ((trQuestVarGet(\"trapRooms\") > 0) &&");
code("(countRoomEntrances(x, z) > 1) &&");
code("(trQuestVarGet(\"relictransporterguy\") != room)) {");
code("trQuestVarSetFromRand(\"rand\", 1, 3, true);");
code("if (trQuestVarGet(\"rand\") == 1) {");
code("trQuestVarSet(\"trapRooms\", trQuestVarGet(\"trapRooms\") - 1);");
code("trapped = true;");
code("switch(1*trQuestVarGet(\"trapType\"))");
code("{");
code("case TRAP_LASERS:");
code("{");
code("x0 = x * 35 + 12;");
code("x1 = x * 35 + 28;");
code("z0 = z * 35 + 12;");
code("z1 = z * 35 + 28;");
code("trPaintTerrain(x0, z0, x1, z1, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x0, z0, x1 + 1, z1 + 1, worldHeight, false);");
code("trVectorQuestVarSet(\"room\"+room+\"top1\", xsVectorSet(x1,0,z1));");
code("trVectorQuestVarSet(\"room\"+room+\"bottom1\", xsVectorSet(x0,0,z0));");
code("next = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,x*70+41,0,z*70+41,0,true);");
code("xSetPointer(dLaserRooms, xAddDatabaseBlock(dLaserRooms));");
code("xSetInt(dLaserRooms,xUnitName,next);");
code("xSetVector(dLaserRooms,xLaserRoomPos,xsVectorSet(x * 70 + 40, z * 70 + 40));");
code("for(a=0; <8) {");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,2*x0+4*a+3,0,2*z0+1,180,false);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,2*x0+4*a+3,0,2*z1-1,0,false);");
code("xSetVector(dLaserRooms,xLaserRoomXBottom + a,");
code("xsVectorSet(2 * x0 + 4 * a + 2, 0, 2 * z0));");
code("xSetVector(dLaserRooms,xLaserRoomXTop + a,");
code("xsVectorSet(2 * x1 + 4 * a + 4, 0, 2 * z1));");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,2*x0+1,0,2*z0+4*a+3,270,false);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,2*x1-1,0,2*z0+4*a+3,90,false);");
code("xSetVector(dLaserRooms,xLaserRoomZBottom + a,");
code("xsVectorSet(2 * x0, 0, 2 * z0 + 4 * a + 2));");
code("xSetVector(dLaserRooms,xLaserRoomZTop + a,");
code("xsVectorSet(2 * x1, 0, 2 * z1 + 4 * a + 4));");
code("}");
code("trArmySelect(\"1,0\");");
code("trUnitSetStance(\"Passive\");");
code("trSetSelectedScale(0,0,0);");
code("trMutateSelected(kbGetProtoUnitID(\"Petosuchus Projectile\"));");

code("paintSecondary(x0, z0, x1, z1);");
code("paintEyecandy(x0, z0, x1, z1, \"tree\");");
code("paintEyecandy(x0, z0, x1, z1, \"rock\");");
code("paintEyecandy(x0, z0, x1, z1, \"sprite\");");
code("for(j=randomLow(11) - 8; >0) {");
code("paintRelicEdge(x0, z0, x1, z1);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("if (trapped == false) {");
code("if (trQuestVarGet(\"mapType\") < MAP_OPEN) {");
code("for (i=2; >0) {");
code("trQuestVarSetFromRand(\"x0\", x * 35 + 5, x * 35 + 18, true);");
code("trQuestVarSetFromRand(\"z0\", z * 35 + 5, z * 35 + 18, true);");
code("trQuestVarSetFromRand(\"x1\", x * 35 + 22, x * 35 + 35, true);");
code("trQuestVarSetFromRand(\"z1\", z * 35 + 22, z * 35 + 35, true);");
code("x0 = trQuestVarGet(\"x0\");");
code("x1 = trQuestVarGet(\"x1\");");
code("z0 = trQuestVarGet(\"z0\");");
code("z1 = trQuestVarGet(\"z1\");");
code("trPaintTerrain(x0, z0, x1, z1, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x0, z0, x1 + 1, z1 + 1, worldHeight, false);");
code("trVectorQuestVarSet(\"room\"+room+\"top\"+i, xsVectorSet(x1,0,z1));");
code("trVectorQuestVarSet(\"room\"+room+\"bottom\"+i, xsVectorSet(x0,0,z0));");
code("paintSecondary(x0, z0, x1, z1);");
code("paintEyecandy(x0, z0, x1, z1, \"tree\");");
code("paintEyecandy(x0, z0, x1, z1, \"rock\");");
code("paintEyecandy(x0, z0, x1, z1, \"sprite\");");

code("for(j=randomLow(11) - 8; >0) {");
code("paintRelicEdge(x0, z0, x1, z1);");
code("}");
code("}");
code("paintColumns(x * 35 + 5, z * 35 + 5, x * 35 + 35, z * 35 + 35);");
code("} else if (trQuestVarGet(\"mapType\") == MAP_OPEN) {");
code("paintColumns(x * 35 + 5, z * 35 + 5, x * 35 + 35, z * 35 + 35);");
code("trQuestVarSetFromRand(\"x0\", x * 35 + 5, x * 35 + 15, true);");
code("trQuestVarSetFromRand(\"z0\", z * 35 + 5, z * 35 + 15, true);");
code("trQuestVarSetFromRand(\"x1\", x * 35 + 25, x * 35 + 35, true);");
code("trQuestVarSetFromRand(\"z1\", z * 35 + 25, z * 35 + 35, true);");
code("x0 = trQuestVarGet(\"x0\");");
code("x1 = trQuestVarGet(\"x1\");");
code("z0 = trQuestVarGet(\"z0\");");
code("z1 = trQuestVarGet(\"z1\");");
code("trVectorQuestVarSet(\"room\"+room+\"top1\", xsVectorSet(x1,0,z1));");
code("trVectorQuestVarSet(\"room\"+room+\"bottom1\", xsVectorSet(x0,0,z0));");
code("paintSecondary(x0, z0, x1, z1);");
code("paintEyecandy(x0, z0, x1, z1, \"tree\");");
code("paintEyecandy(x0, z0, x1, z1, \"rock\");");
code("paintEyecandy(x0, z0, x1, z1, \"sprite\");");

code("for(j=randomLow(11) - 8; >0) {");
code("paintRelicEdge(x0, z0, x1, z1);");
code("}");
code("}");
code("}");
code("if (trQuestVarGet(\"room\"+room+\"key\") > 0) {");
code("vector v0 = randomNearEdge(x0, z0, x1, z1);");
code("xSetInt(dUnlockWalls,xWallKey, trGetNextUnitScenarioNameNumber(), 1*trQuestVarGet(\"room\"+room+\"index\"));");
code("spawnRelicSpecific(v0,1*trQuestVarGet(\"room\"+room+\"key\"));");
code("trQuestVarSet(\"room\"+room+\"key\", 0);");
code("}");
code("} else if (trQuestVarGet(\"room\"+room+\"key\") > 0) {");
code("debugLog(\"room was a special room.\");");
code("xSetInt(dUnlockWalls,xWallKey, trGetNextUnitScenarioNameNumber(), 1*trQuestVarGet(\"room\"+room+\"index\"));");
code("spawnRelicSpecific(xsVectorSet(70 * x + 36,0,70 * z + 36),1*trQuestVarGet(\"room\"+room+\"key\"));");
code("trQuestVarSet(\"room\"+room+\"key\", 0);");
code("}");
code("switch(type)");
code("{");
code("case ROOM_BASIC:");
code("{");
code("for(i = 2; >0) {");
code("pos = trVectorQuestVarGet(\"room\"+room+\"bottom\"+i);");
code("x0 = xsVectorGetX(pos);");
code("z0 = xsVectorGetZ(pos);");
code("pos = trVectorQuestVarGet(\"room\"+room+\"top\"+i);");
code("x1 = xsVectorGetX(pos);");
code("z1 = xsVectorGetZ(pos);");
code("paintEnemies(x0, z0, x1, z1);");
code("}");
code("xSetPointer(dBasicRooms, xAddDatabaseBlock(dBasicRooms));");
code("xSetInt(dBasicRooms, xRoomNumber, room);");
code("}");
code("case ROOM_AMBUSH:");
code("{");
code("trQuestVarSetFromRand(\"type\", 1, trQuestVarGet(\"enemyProtoCount\"), true);");
code("xSetPointer(dAmbushRooms, xAddDatabaseBlock(dAmbushRooms));");
code("xSetInt(dAmbushRooms,xRoomNumber,room);");
code("xSetInt(dAmbushRooms,xAmbushRoomType,1*trQuestVarGet(\"type\"));");
code("xSetVector(dAmbushRooms,xAmbushRoomPos, xsVectorSet(x * 70 + 40, 0, 70 * z + 40));");

code("trQuestVarSetFromRand(\"spawnRelic\", 0, 1, false);");
code("if (trQuestVarGet(\"spawnRelic\") < 0.5) {");
code("spawnRelic(xsVectorSet(x * 70 + 40, 0, z * 70 + 40));");
code("}");
code("pos = trVectorQuestVarGet(\"room\"+room+\"bottom1\");");
code("x0 = xsVectorGetX(pos);");
code("z0 = xsVectorGetZ(pos);");
code("pos = trVectorQuestVarGet(\"room\"+room+\"top1\");");
code("x1 = xsVectorGetX(pos);");
code("z1 = xsVectorGetZ(pos);");
code("paintEnemies(x0, z0, x1, z1);");
code("xSetPointer(dBasicRooms, xAddDatabaseBlock(dBasicRooms));");
code("xSetInt(dBasicRooms, xRoomNumber, room);");
code("}");
code("case ROOM_BOSS_ENTRANCE:");
code("{");
code("trPaintTerrain(x * 35 + 10, z * 35 + 10, x * 35 + 25, z * 35 + 25, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x * 35 + 10, z * 35 + 10, x * 35 + 25, z * 35 + 25, worldHeight, false);");
code("paintSecondary(x * 35 + 10, z * 35 + 10, x * 35 + 25, z * 35 + 25);");
code("trQuestVarSet(\"bossEntranceStatue\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,x*70+40,0,z*70+40,225,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossEntranceStatue\", true);");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Monument 5\");");
code("trQuestVarSet(\"bossEntranceSymbol\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,x*70+36,0,z*70+36,225,true);");
code("trQuestVarSet(\"keyType\", trQuestVarGet(\"keyType\") - 1);");
code("xsEnableRule(\"boss_entrance_found\");");
code("}");
code("case ROOM_CHEST:");
code("{");
code("trQuestVarSetFromRand(\"chestType\", CHEST_KEY, CHEST_STATUES, true);");
code("if (trQuestVarGet(\"chestType\") < CHEST_STATUES) {");
code("buildRoom(x, z, ROOM_BASIC);");
code("trQuestVarSet(\"room\"+room, ROOM_CHEST);");
code("trPaintTerrain(x*35+15, z*35+15, x*35+25, z*35+25, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x*35+15, z*35+15, x*35+25, z*35+25, worldHeight, false);");
code("} else {");
code("size = 12;");
code("z0 = size;");
code("for(a=0; < size) {");
code("for(b=size; >0) {");
code("if (a*a + z0 * z0 <= size * size) {");
code("trPaintTerrain(x*35+20-a, z*35+20-z0, x*35+20+a, z*35+20+z0, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x*35+20-a, z*35+20-z0, x*35+20+a, z*35+20+z0, worldHeight, false);");
code("break;");
code("} else {");
code("z0 = z0 - 1;");
code("}");
code("}");
code("}");
code("}");

code("if (trQuestVarGet(\"chestType\") == CHEST_KEY) {");
code("if (trQuestVarGet(\"keyType\") < RELIC_KEY_GREEK) {");
code("trQuestVarSet(\"chestType\", CHEST_ENCOUNTER);");
code("} else {");
code("trQuestVarSet(\"keyType\", trQuestVarGet(\"keyType\") - 1);");
code("}");
code("}");
code("xSetPointer(dChests, xAddDatabaseBlock(dChests));");
code("xSetInt(dChests,xUnitName,trGetNextUnitScenarioNameNumber());");
code("xSetInt(dChests,xChestType, 1*trQuestVarGet(\"chestType\"));");
code("xSetInt(dChests,xChestRoom,room);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,x * 70 + 40,0, z * 70 + 40, 135, true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Great Box\");");
code("}");
code("case ROOM_TRANSPORTER_GUY:");
code("{");
code("pos = trVectorQuestVarGet(\"room\"+room+\"bottom1\");");
code("x0 = xsVectorGetX(pos);");
code("z0 = xsVectorGetZ(pos);");
code("pos = trVectorQuestVarGet(\"room\"+room+\"top1\");");
code("x1 = xsVectorGetX(pos);");
code("z1 = xsVectorGetZ(pos);");
code("trPaintTerrain(x0,z0,x1,z1,TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x0,z0,x1,z1,worldHeight, false);");
code("pos = randomNearEdge(x0, z0, x1, z1);");
code("trVectorQuestVarSet(\"relictransporterguypos\", pos);");
code("trQuestVarSet(\"heading\", 180.0 / 3.141592 * angleBetweenVectors(pos, xsVectorSet(x0 + x1, 0, z0 + z1)));");
code("trQuestVarSet(\"relicTransporterGuyName\", trGetNextUnitScenarioNameNumber());");
code("x0 = xsVectorGetX(pos);");
code("z0 = xsVectorGetZ(pos);");
code("trArmyDispatch(\"1,0\",\"Villager Atlantean Hero\",1,x0,0,z0,trQuestVarGet(\"heading\"), true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"relicTransporterGuyName\", true);");
code("trUnitConvert(0);");
code("trArmyDispatch(\"1,0\", \"Dwarf\",1,x0,0,z0,0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Gaia Forest effect\");");
code("xsEnableRule(\"relic_transporter_guy_found\");");
code("}");
code("case ROOM_VILLAGE + 1:");
code("{");
code("trPaintTerrain(x * 35 + 10, z * 35 + 10, x * 35 + 30, z * 35 + 30, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x * 35 + 10, z * 35 + 10, x * 35 + 30, z * 35 + 30, worldHeight, false);");
code("paintSecondary(x * 35 + 10, z * 35 + 10, x * 35 + 30, z * 35 + 30);");
code("paintEyecandy(x * 35 + 10, z * 35 + 10, x * 35 + 30, z * 35 + 30, \"sprite\");");

code("trQuestVarSet(\"villageX\", 70 * x + 20);");
code("trQuestVarSet(\"villageZ\", 70 * z + 20);");

code("deployTownEyecandy(\"Savannah Tree\",15,37,0);");
code("deployTownEyecandy(\"Savannah Tree\",11,33,50);");
code("deployTownEyecandy(\"Savannah Tree\",5,21,90);");
code("deployTownEyecandy(\"Savannah Tree\",29,31,47);");
code("deployTownEyecandy(\"Savannah Tree\",33,29,127);");

code("deployTownEyecandy(\"House\",7,29,180);");
code("deployTownEyecandy(\"House\",9,15,0);");

code("deployTownEyecandy(\"Granary\",7,33,0);");
code("deployTownEyecandy(\"Dock\",9,13,0);");
code("deployTownEyecandy(\"Tower\",33,15,270);");
code("deployTownEyecandy(\"Counter Building\",23,29,180);");

code("deployTownEyecandy(\"Fence Wood\",19,15,180);");
code("deployTownEyecandy(\"Fence Wood\",19,11,180);");
code("deployTownEyecandy(\"Fence Wood\",21,9,270);");
code("deployTownEyecandy(\"Fence Wood\",25,17,270);");
code("deployTownEyecandy(\"Fence Wood\",27,15,180);");
code("deployTownEyecandy(\"Fence Wood\",27,11,180);");
code("trQuestVarSet(\"pigpenLowerX\", 19 + trQuestVarGet(\"villageX\"));");
code("trQuestVarSet(\"pigpenLowerZ\", 9 + trQuestVarGet(\"villageZ\"));");
code("trQuestVarSet(\"pigpenUpperX\", 27 + trQuestVarGet(\"villageX\"));");
code("trQuestVarSet(\"pigpenUpperZ\", 17 + trQuestVarGet(\"villageZ\"));");

code("trQuestVarSetFromRand(\"localQuest\", 1, 3, true);");

code("trQuestVarSet(\"guy\"+FETCH_GUY, trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Villager Chinese\",23,19,315);");
code("trQuestVarSet(\"guy\"+BOUNTY_GUY, trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Maceman\",19,25,225);");
code("xSetPointer(dStunnedUnits, xAddDatabaseBlock(dStunnedUnits));");
code("xSetInt(dStunnedUnits, xUnitName, 1*trQuestVarGet(\"guy\"+BOUNTY_GUY));");
code("xSetInt(dStunnedUnits, xStunnedProto, kbGetProtoUnitID(\"Maceman\"));");
code("trQuestVarSet(\"guy\"+SHOP_GUY, trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Villager Egyptian\",11,27,180);");

code("if (trQuestVarGet(\"localQuest\") > 1) {");
code("trQuestVarSet(\"pigStart\", trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Pig\",21,15,120);");
code("deployTownEyecandy(\"Pig\",25,13,56);");
code("deployTownEyecandy(\"Pig\",21,11,222);");
code("trQuestVarSet(\"pigEnd\", trGetNextUnitScenarioNameNumber());");
code("for(x=trQuestVarGet(\"pigStart\"); < trQuestVarGet(\"pigEnd\")) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+x, true);");
code("trUnitConvert(ENEMY_PLAYER);");
code("}");
code("}");
code("}");
code("case ROOM_VILLAGE + 2:");
code("{");
code("size = 12;");
code("z0 = size;");
code("for(a=0; < size) {");
code("for(b=size; >0) {");
code("if (a*a + z0 * z0 <= size * size) {");
code("trPaintTerrain(x*35+20-a, z*35+20-z0, x*35+20+a, z*35+20+z0, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x*35+20-a, z*35+20-z0, x*35+20+a, z*35+20+z0, worldHeight, false);");
code("break;");
code("} else {");
code("z0 = z0 - 1;");
code("}");
code("}");
code("}");
code("trQuestVarSet(\"villageX\", 70 * x + 16);");
code("trQuestVarSet(\"villageZ\", 70 * z + 16);");

code("trQuestVarSet(\"start\", trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Marsh Tree\",25,41,250);");
code("deployTownEyecandy(\"Marsh Tree\",23,41,75);");
code("deployTownEyecandy(\"Marsh Tree\",17,39,321);");
code("deployTownEyecandy(\"Marsh Tree\",13,37,266);");
code("deployTownEyecandy(\"Marsh Tree\",5,29,240);");
code("deployTownEyecandy(\"Marsh Tree\",5,21,80);");
code("deployTownEyecandy(\"Marsh Tree\",9,15,44);");
code("deployTownEyecandy(\"Marsh Tree\",9,11,280);");
code("deployTownEyecandy(\"Marsh Tree\",13,5,140);");
code("deployTownEyecandy(\"Marsh Tree\",19,7,275);");
code("deployTownEyecandy(\"Marsh Tree\",25,7,121);");
code("deployTownEyecandy(\"Marsh Tree\",29,7,100);");
code("deployTownEyecandy(\"Marsh Tree\",37,11,155);");
code("deployTownEyecandy(\"Marsh Tree\",37,17,44);");
code("deployTownEyecandy(\"Marsh Tree\",39,17,145);");
code("deployTownEyecandy(\"Marsh Tree\",39,25,131);");
code("deployTownEyecandy(\"Marsh Tree\",39,31,178);");
code("deployTownEyecandy(\"Marsh Tree\",29,37,33);");
code("for(a=trQuestVarGet(\"start\"); < trGetNextUnitScenarioNameNumber()) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+a, true);");
code("trSetSelectedScale(2,2,2);");
code("}");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Runestone\", 35,35,225);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trSetSelectedScale(2.5,2.5,2.5);");
code("deployTownEyecandy(\"Shrine\",15,31,90);");
code("deployTownEyecandy(\"Shrine\",17,11,0);");
code("deployTownEyecandy(\"Shrine\",35,15,270);");

code("trQuestVarSetFromRand(\"localQuest\", 1, 3, true);");


code("trQuestVarSet(\"guy\"+FETCH_GUY, trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Shade\",25,35,180);");
code("trQuestVarSet(\"guy\"+BOUNTY_GUY, trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Shade\",37,27,270);");
code("trQuestVarSet(\"guy\"+SHOP_GUY, trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Shade\",21,19,30);");
code("}");
code("case ROOM_VILLAGE + 3:");
code("{");
code("trPaintTerrain(x * 35 + 10, z * 35 + 10, x * 35 + 30, z * 35 + 30, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x * 35 + 10, z * 35 + 10, x * 35 + 31, z * 35 + 31, worldHeight, false);");
code("paintSecondary(x * 35 + 10, z * 35 + 10, x * 35 + 30, z * 35 + 30);");
code("paintEyecandy(x * 35 + 10, z * 35 + 10, x * 35 + 30, z * 35 + 30, \"sprite\");");

code("trQuestVarSet(\"villageX\", 70 * x + 20);");
code("trQuestVarSet(\"villageZ\", 70 * z + 20);");

code("deployTownEyecandy(\"Dwarf Foundry\",29,29,180);");
code("deployTownEyecandy(\"Dwarven Forge\", 11, 29,180);");
code("deployTownEyecandy(\"Armory\",27,9,270);");
code("deployTownEyecandy(\"Dwarven Forge\",11,11,0);");

code("trQuestVarSetFromRand(\"localQuest\", 1, 3, true);");

code("trQuestVarSet(\"guy\"+FETCH_GUY, trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Throwing Axeman\",21,9,270);");
code("trQuestVarSet(\"guy\"+BOUNTY_GUY, trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Ulfsark\",15,23,135);");
code("trQuestVarSet(\"guy\"+SHOP_GUY, trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Dwarf\",25,25,225);");
code("xSetPointer(dStunnedUnits, xAddDatabaseBlock(dStunnedUnits));");
code("xSetInt(dStunnedUnits, xUnitName, 1*trQuestVarGet(\"guy\"+FETCH_GUY));");
code("xSetInt(dStunnedUnits, xStunnedProto, kbGetProtoUnitID(\"Throwing Axeman\"));");
code("xSetPointer(dStunnedUnits, xAddDatabaseBlock(dStunnedUnits));");
code("xSetInt(dStunnedUnits, xUnitName, 1*trQuestVarGet(\"guy\"+BOUNTY_GUY));");
code("xSetInt(dStunnedUnits, xStunnedProto, kbGetProtoUnitID(\"Ulfsark\"));");
code("}");
code("case ROOM_VILLAGE + 4:");
code("{");
code("trPaintTerrain(x * 35 + 10, z * 35 + 10, x * 35 + 30, z * 35 + 30, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x * 35 + 10, z * 35 + 10, x * 35 + 30, z * 35 + 30, worldHeight, false);");
code("paintSecondary(x * 35 + 10, z * 35 + 10, x * 35 + 30, z * 35 + 30);");
code("paintEyecandy(x * 35 + 10, z * 35 + 10, x * 35 + 30, z * 35 + 30, \"sprite\");");

code("trQuestVarSet(\"villageX\", 70 * x + 24);");
code("trQuestVarSet(\"villageZ\", 70 * z + 24);");


code("trQuestVarSet(\"akardTower\", trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Tower Mirror\",12,12,0);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"akardTower\");");
code("trUnitOverrideAnimation(2,0,true,false,-1);");
code("trSetSelectedScale(2,2,2);");
code("trQuestVarSet(\"akardGuild1\", trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Guild\",16,12,180);");
code("trQuestVarSet(\"akardGuild2\", trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Guild\",12,16,270);");
code("trQuestVarSet(\"akardTree\", trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Tamarisk Tree\", 16, 16, 0);");
code("trQuestVarSet(\"akardTowerEnd\", trGetNextUnitScenarioNameNumber());");

code("trQuestVarSetFromRand(\"localQuest\", 1, 2, true);");

code("trQuestVarSet(\"guy\"+FETCH_GUY, trGetNextUnitScenarioNameNumber());");
code("trQuestVarSet(\"guy\"+BOUNTY_GUY, trGetNextUnitScenarioNameNumber());");
code("trQuestVarSet(\"guy\"+SHOP_GUY, trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Oracle Scout\",8,8,225);");
code("}");
code("case ROOM_VILLAGE + 5:");
code("{");
code("trPaintTerrain(x * 35 + 10, z * 35 + 10, x * 35 + 30, z * 35 + 30, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x * 35 + 10, z * 35 + 10, x * 35 + 31, z * 35 + 31, worldHeight, false);");
code("paintSecondary(x * 35 + 10, z * 35 + 10, x * 35 + 30, z * 35 + 30);");
code("paintEyecandy(x * 35 + 10, z * 35 + 10, x * 35 + 30, z * 35 + 30, \"sprite\");");

code("trQuestVarSet(\"villageX\", 70 * x + 20);");
code("trQuestVarSet(\"villageZ\", 70 * z + 20);");

code("deployTownEyecandy(\"Tent\", 7, 33, 45);");
code("deployTownEyecandy(\"Tent\", 31, 33, 135);");
code("deployTownEyecandy(\"Tent\", 35, 21, 180);");
code("deployTownEyecandy(\"Tent\", 19, 9, 180);");
code("deployTownEyecandy(\"Tent\", 11, 17, 90);");
code("deployTownEyecandy(\"Columns Fallen\", 5, 25, 220);");
code("deployTownEyecandy(\"Columns Fallen\", 19, 33, 150);");
code("deployTownEyecandy(\"Columns\", 33, 13, 0);");
code("deployTownEyecandy(\"Columns\", 27, 7, 0);");
code("deployTownEyecandy(\"Campfire\", 9, 7, 0);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Runestone\", 33,7,315);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trSetSelectedScale(2.5,2.5,2.5);");

code("trQuestVarSetFromRand(\"localQuest\", 1, 3, true);");

code("trQuestVarSet(\"guy\"+SHOP_GUY, trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Toxotes\",35,17,270);");
code("trQuestVarSet(\"guy\"+BOUNTY_GUY, trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Halberdier\",13,9,270);");
code("trQuestVarSet(\"guy\"+FETCH_GUY, trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Hypaspist\",9,13,180);");
code("trQuestVarSet(\"kastor\", trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Kastor\", 11, 29, 135);");
code("xSetPointer(dNpcTalk, xAddDatabaseBlock(dNpcTalk));");
code("xSetInt(dNpcTalk, xUnitName, 1*trQuestVarGet(\"kastor\"));");
code("xSetInt(dNpcTalk, xNpcDialog, NPC_KASTOR);");

code("xSetPointer(dStunnedUnits, xAddDatabaseBlock(dStunnedUnits));");
code("xSetInt(dStunnedUnits, xUnitName, 1*trQuestVarGet(\"guy\"+SHOP_GUY));");
code("xSetInt(dStunnedUnits, xStunnedProto, kbGetProtoUnitID(\"Toxotes\"));");
code("xSetPointer(dStunnedUnits, xAddDatabaseBlock(dStunnedUnits));");
code("xSetInt(dStunnedUnits, xUnitName, 1*trQuestVarGet(\"guy\"+BOUNTY_GUY));");
code("xSetInt(dStunnedUnits, xStunnedProto, kbGetProtoUnitID(\"Halberdier\"));");
code("xSetPointer(dStunnedUnits, xAddDatabaseBlock(dStunnedUnits));");
code("xSetInt(dStunnedUnits, xUnitName, 1*trQuestVarGet(\"Kastor\"));");
code("xSetInt(dStunnedUnits, xStunnedProto, kbGetProtoUnitID(\"Kastor\"));");
code("}");
code("case ROOM_VILLAGE + 6:");
code("{");
code("trPaintTerrain(x * 35 + 13, z * 35 + 13, x * 35 + 27, z * 35 + 27, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x * 35 + 13, z * 35 + 13, x * 35 + 28, z * 35 + 28, worldHeight, false);");

code("trQuestVarSet(\"villageX\", 70 * x + 26);");
code("trQuestVarSet(\"villageZ\", 70 * z + 26);");

code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Statue of Lightning\", 25, 25, 225);");
code("deployTownEyecandy(\"Statue of Lightning\", 5, 25, 135);");
code("deployTownEyecandy(\"Statue of Lightning\", 25, 5, 315);");
code("deployTownEyecandy(\"Statue of Lightning\", 5, 5, 45);");
code("for(i=trQuestVarGet(\"next\"); < trGetNextUnitScenarioNameNumber()) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+i, true);");
code("trUnitOverrideAnimation(2,0,true,false,-1);");
code("}");

code("trQuestVarSetFromRand(\"localQuest\", 1, 2, true);");

code("trQuestVarSet(\"guy\"+FETCH_GUY, trGetNextUnitScenarioNameNumber());");
code("trQuestVarSet(\"guy\"+BOUNTY_GUY, trGetNextUnitScenarioNameNumber());");
code("trQuestVarSet(\"guy\"+SHOP_GUY, trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Pharaoh of Osiris\", 19, 19, 225);");
code("xSetPointer(dStunnedUnits, xAddDatabaseBlock(dStunnedUnits));");
code("xSetInt(dStunnedUnits, xUnitName, 1*trQuestVarGet(\"guy1\"));");
code("xSetInt(dStunnedUnits, xStunnedProto, kbGetProtoUnitID(\"Pharaoh of Osiris\"));");

code("if (trQuestVarGet(\"localQuest\") == FETCH_GUY) {");
code("deployTownEyecandy(\"Cinematic Scorch\", 15, 9);");
code("deployTownEyecandy(\"Smoke\", 15, 9);");
code("} else {");
code("trVectorQuestVarSet(\"yeebRoomBottom\", xsVectorSet(70 * x + 26, 0, 70 * z + 26));");
code("trVectorQuestVarSet(\"yeebRoomTop\", xsVectorSet(70 * x + 56, 0, 70 * z + 56));");
code("trQuestVarSet(\"yeebRelic\", trGetNextUnitScenarioNameNumber());");
code("pos = randomNearEdge(x * 35 + 15, z * 35 + 15, x * 35 + 25, z * 35 + 25);");
code("spawnRelicSpecific(pos, RELIC_YEEBAAGOOON);");
code("for(i=10; >0) {");
code("xSetPointer(dWorthlessJunk, xAddDatabaseBlock(dWorthlessJunk));");
code("xSetInt(dWorthlessJunk, xUnitName, trGetNextUnitScenarioNameNumber());");
code("pos = randomNearEdge(x * 35 + 15, z * 35 + 15, x * 35 + 25, z * 35 + 25);");
code("spawnRelicSpecific(pos, RELIC_WORTHLESS_JUNK);");
code("}");
code("xsEnableRule(\"yeeb_hit_list\");");
code("}");
code("}");
code("case ROOM_VILLAGE + 7:");
code("{");
code("trPaintTerrain(x * 35 + 5, z * 35 + 5, x * 35 + 35, z * 35 + 35, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x * 35 + 5, z * 35 + 5, x * 35 + 35, z * 35 + 35, worldHeight, false);");
code("paintSecondary(x * 35 + 5, z * 35 + 5, x * 35 + 35, z * 35 + 35);");
code("trQuestVarSet(\"villageX\", 70 * x + 20);");
code("trQuestVarSet(\"villageZ\", 70 * z + 20);");
code("trQuestVarSet(\"stageWonder\", trGetNextUnitScenarioNameNumber());");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+deployTownEyecandy(\"Cinematic Block\", 21, 21, 180), true);");
code("trUnitConvert(ENEMY_PLAYER);");
code("trMutateSelected(kbGetProtoUnitID(\"Wonder SPC\"));");
code("trUnitSetAnimationPath(\"3,1,0,0,0,0,0\");");

code("deployTownEyecandy(\"Atlantis Wall Connector\", 3, 3);");
code("deployTownEyecandy(\"Atlantis Wall Connector\", 3, 15);");
code("deployTownEyecandy(\"Atlantis Wall Connector\", 15, 3);");
code("deployTownEyecandy(\"Atlantis Wall Long\", 9, 3);");
code("deployTownEyecandy(\"Atlantis Wall Long\", 3, 9, 90);");

code("deployTownEyecandy(\"Atlantis Wall Connector\", 39, 39);");
code("deployTownEyecandy(\"Atlantis Wall Connector\", 39, 27);");
code("deployTownEyecandy(\"Atlantis Wall Connector\", 27, 39);");
code("deployTownEyecandy(\"Atlantis Wall Long\", 33, 39);");
code("deployTownEyecandy(\"Atlantis Wall Long\", 39, 33, 90);");

code("deployTownEyecandy(\"Atlantis Wall Connector\", 39, 3);");
code("deployTownEyecandy(\"Atlantis Wall Connector\", 27, 3);");
code("deployTownEyecandy(\"Atlantis Wall Connector\", 39, 15);");
code("deployTownEyecandy(\"Atlantis Wall Long\", 33, 3);");
code("deployTownEyecandy(\"Atlantis Wall Long\", 39, 9, 90);");

code("deployTownEyecandy(\"Atlantis Wall Connector\", 3, 39);");
code("deployTownEyecandy(\"Atlantis Wall Connector\", 3, 27);");
code("deployTownEyecandy(\"Atlantis Wall Connector\", 15, 39);");
code("deployTownEyecandy(\"Atlantis Wall Long\", 3, 33, 90);");
code("deployTownEyecandy(\"Atlantis Wall Long\", 9, 39);");

code("trQuestVarSet(\"deepDeployCenterX\", 70 * x + 40);");
code("trQuestVarSet(\"deepDeployCenterZ\", 70 * z + 40);");

code("trPaintTerrain(x * 35 + 11, z * 35 + 11, x * 35 + 17, z * 35 + 11, TERRAIN_WALL, TERRAIN_SUB_WALL, false);");
code("trPaintTerrain(x * 35 + 11, z * 35 + 11, x * 35 + 11, z * 35 + 17, TERRAIN_WALL, TERRAIN_SUB_WALL, false);");

code("trPaintTerrain(x * 35 + 29, z * 35 + 29, x * 35 + 23, z * 35 + 29, TERRAIN_WALL, TERRAIN_SUB_WALL, false);");
code("trPaintTerrain(x * 35 + 29, z * 35 + 29, x * 35 + 29, z * 35 + 23, TERRAIN_WALL, TERRAIN_SUB_WALL, false);");

code("trPaintTerrain(x * 35 + 29, z * 35 + 11, x * 35 + 23, z * 35 + 11, TERRAIN_WALL, TERRAIN_SUB_WALL, false);");
code("trPaintTerrain(x * 35 + 29, z * 35 + 11, x * 35 + 29, z * 35 + 17, TERRAIN_WALL, TERRAIN_SUB_WALL, false);");

code("trPaintTerrain(x * 35 + 11, z * 35 + 29, x * 35 + 11, z * 35 + 23, TERRAIN_WALL, TERRAIN_SUB_WALL, false);");
code("trPaintTerrain(x * 35 + 11, z * 35 + 29, x * 35 + 17, z * 35 + 29, TERRAIN_WALL, TERRAIN_SUB_WALL, false);");

code("paintEnemies(x * 35 + 5, z * 35 + 5, x * 35 + 35, z * 35 + 35);");

code("xsEnableRule(\"deep_village_always\");");
code("trQuestVarSet(\"deepDeployNext\", trTime() + 30);");
code("}");
code("case ROOM_VILLAGE + 8:");
code("{");
code("paintCircle(x, z, 12, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, worldHeight);");
code("trQuestVarSet(\"villageX\", 70 * x + 16);");
code("trQuestVarSet(\"villageZ\", 70 * z + 16);");
code("trQuestVarSet(\"stageWonder\", trGetNextUnitScenarioNameNumber());");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+deployTownEyecandy(\"Cinematic Block\", 34, 34, 225), true);");
code("trUnitConvert(ENEMY_PLAYER);");
code("trMutateSelected(kbGetProtoUnitID(\"Wonder SPC\"));");
code("dir = vector(0,0,-1);");
code("for(i=0; < 7) {");
code("xSetPointer(dEnemiesIncoming, xAddDatabaseBlock(dEnemiesIncoming));");
code("xSetInt(dEnemiesIncoming, xUnitName, trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+ENEMY_PLAYER+\",0\",\"Statue of Lightning\",1,");
code("70.0 * x + 41.0 - 16.0 * xsVectorGetX(dir),0,70.0 * z + 41.0 - 16.0 * xsVectorGetZ(dir),0,true);");
code("trArmySelect(\"\"+ENEMY_PLAYER+\",0\");");
code("trSetUnitOrientation(dir,vector(0,1,0),true);");
code("dir = rotationMatrix(dir, 0.707107, 0.707107);");
code("}");
code("}");
code("case ROOM_VILLAGE + 11:");
code("{");
code("");
code("trPaintTerrain(x * 35 + 13, z * 35 + 13, x * 35 + 27, z * 35 + 27, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x * 35 + 13, z * 35 + 13, x * 35 + 28, z * 35 + 28, worldHeight, false);");

code("trQuestVarSet(\"villageX\", 70 * x + 26);");
code("trQuestVarSet(\"villageZ\", 70 * z + 26);");

code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("deployTownEyecandy(\"Runestone\", 15, 15, 225);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trSetSelectedScale(2.5, 2.5, 2.5);");

code("deployTownEyecandy(\"Columns\", 23, 19);");
code("deployTownEyecandy(\"Columns\", 23, 11);");

code("deployTownEyecandy(\"Columns\", 19, 23);");
code("deployTownEyecandy(\"Columns\", 11, 23);");

code("deployTownEyecandy(\"Columns\", 7, 19);");
code("deployTownEyecandy(\"Columns\", 7, 11);");

code("deployTownEyecandy(\"Columns\", 19, 7);");
code("deployTownEyecandy(\"Columns\", 11, 7);");
code("}");
code("case ROOM_STARTER:");
code("{");
code("trPaintTerrain(x * 35 + 10, z * 35 + 10, x * 35 + 30, z * 35 + 30, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x * 35 + 10, z * 35 + 10, x * 35 + 31, z * 35 + 31, worldHeight, false);");
code("paintSecondary(x * 35 + 10, z * 35 + 10, x * 35 + 30, z * 35 + 30);");
code("trVectorQuestVarSet(\"startPosition\", xsVectorSet(x*70 + 40,0,z*70+40));");
code("if (trQuestVarGet(\"newPlayers\") > 0) {");
code("trVectorQuestVarSet(\"choice1\", xsVectorSet(x*70+48,0,z*70+54));");
code("trVectorQuestVarSet(\"choice2\", xsVectorSet(x*70+54,0,z*70+48));");
code("trQuestVarSet(\"choice1unit\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\", \"Hero Greek Theseus\", 1, trQuestVarGet(\"choice1x\"),0,trQuestVarGet(\"choice1z\"),225,true);");
code("trQuestVarSet(\"choice2unit\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\", \"Hero Greek Hippolyta\", 1, trQuestVarGet(\"choice2x\"),0,trQuestVarGet(\"choice2z\"),225,false);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(0);");
code("xSetPointer(dStunnedUnits, xAddDatabaseBlock(dStunnedUnits));");
code("xSetInt(dStunnedUnits, xUnitName, 1*trQuestVarGet(\"choice1unit\"));");
code("xSetInt(dStunnedUnits, xStunnedProto, kbGetProtoUnitID(\"Hero Greek Theseus\"));");
code("xSetPointer(dStunnedUnits, xAddDatabaseBlock(dStunnedUnits));");
code("xSetInt(dStunnedUnits, xUnitName, 1*trQuestVarGet(\"choice2unit\"));");
code("xSetInt(dStunnedUnits, xStunnedProto, kbGetProtoUnitID(\"Hero Greek Hippolyta\"));");
code("xsEnableRule(\"class_shop_always\");");
code("}");
code("}");
code("case ROOM_BOSS:");
code("{");
code("size = trQuestVarGet(\"bossRoomSize\");");
code("if (trQuestVarGet(\"mapType\") == MAP_OPEN) {");
code("trPaintTerrain(x*35+17-size,z*35+17-size,x*35+23+size,z*35+23+size, TERRAIN_WALL, TERRAIN_SUB_WALL, false);");
code("trChangeTerrainHeight(x*35+17-size,z*35+17-size,x*35+24+size,z*35+24+size, wallHeight, false);");
code("trQuestVarSet(\"bossEntranceRadius\", xsPow(8, 2));");
code("} else {");
code("trQuestVarSet(\"bossEntranceRadius\", xsPow(2*size, 2));");
code("}");
code("switch(1*trQuestVarGet(\"bossRoomShape\"))");
code("{");
code("case ROOM_CIRCLE:");
code("{");
code("z0 = size;");
code("for(a=0; < size+3) {");
code("for(b=size+3; >0) {");
code("if (a*a + z0 * z0 <= size * size) {");
code("if (trQuestVarGet(\"stage\") == 3) {");
code("trPaintTerrain(x*35+20-a, z*35+20-z0, x*35+20+a, z*35+20+z0, 5, 0, false);");
code("} else {");
code("trPaintTerrain(x*35+20-a, z*35+20-z0, x*35+20+a, z*35+20+z0, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("}");
code("trChangeTerrainHeight(x*35+20-a, z*35+20-z0, x*35+20+a, z*35+20+z0, worldHeight, false);");
code("break;");
code("} else {");
code("z0 = z0 - 1;");
code("}");
code("}");
code("}");
code("}");
code("case ROOM_SQUARE:");
code("{");
code("trPaintTerrain(x*35+20-size,z*35+20-size,x*35+20+size,z*35+20+size, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x*35+20-size,z*35+20-size,x*35+21+size,z*35+21+size, worldHeight, false);");
code("}");

code("}");
code("paintSecondary(x*35+20-size,z*35+20-size,x*35+20+size,z*35+20+size);");
code("trVectorQuestVarSet(\"bossRoomCenter\", xsVectorSet(x * 70 + 40, 0, z * 70 + 40));");
code("trVectorQuestVarSet(\"bossRoomLoc\", vectorToGrid(trVectorQuestVarGet(\"bossRoomCenter\")));");
code("trVectorQuestVarSet(\"bossRoomEntrance\", trVectorQuestVarGet(\"bossRoomCenter\"));");

code("xsEnableRule(\"enter_boss_room\");");
code("}");
code("case ROOM_NOTTUD:");
code("{");
code("dNottudShop = xInitDatabase(\"nottudShop\");");
code("xInitAddInt(dNottudShop,\"name\");");
code("xInitAddInt(dNottudShop,\"type\");");
code("xNottudShopPos = xInitAddVector(dNottudShop,\"pos\");");

code("paintCircle(x, z, 10, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, worldHeight);");
code("trQuestVarSet(\"nottud\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\", \"Victory Marker\", 1, 70*x+40, 0, 70*z+40,225,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"nottud\", true);");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Minotaur\");");
code("xSetPointer(dStunnedUnits, xAddDatabaseBlock(dStunnedUnits));");
code("xSetInt(dStunnedUnits, xUnitName, 1*trQuestVarGet(\"nottud\"));");
code("xSetInt(dStunnedUnits, xStunnedProto, kbGetProtoUnitID(\"Minotaur\"));");
code("xsEnableRule(\"nottud_always\");");
code("for(i=0; <5) {");
code("trQuestVarSet(\"choice\"+i, RELIC_CURSED_RANGE + i);");
code("}");
code("trQuestVarSet(\"obeliskx0\", 70*x+46);");
code("trQuestVarSet(\"obeliskz0\", 70*z+46);");
code("trQuestVarSet(\"obeliskx1\", 70*x+46);");
code("trQuestVarSet(\"obeliskz1\", 70*z+34);");
code("trQuestVarSet(\"obeliskx2\", 70*x+34);");
code("trQuestVarSet(\"obeliskz2\", 70*z+46);");
code("for(i=0; <3) {");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"obeliskx\"+i),0,trQuestVarGet(\"obeliskz\"+i),225,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Osiris Box Glow\"));");
code("trSetSelectedScale(0,1,0);");
code("trSetSelectedUpVector(0,-1,0);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"obeliskx\"+i),0,trQuestVarGet(\"obeliskz\"+i),225,true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(0);");
code("trMutateSelected(kbGetProtoUnitID(\"Outpost\"));");
code("trQuestVarSetFromRand(\"rand\", 0, 4 - i, true);");
code("xSetPointer(dNottudShop, xAddDatabaseBlock(dNottudShop));");
code("xSetInt(dNottudShop, xUnitName, 1*trQuestVarGet(\"next\"));");
code("xSetInt(dNottudShop, xRelicType, 1*trQuestVarGet(\"choice\"+1*trQuestVarGet(\"rand\")));");
code("xSetVector(dNottudShop, xNottudShopPos, xsVectorSet(trQuestVarGet(\"obeliskx\"+i),0,trQuestVarGet(\"obeliskz\"+i)));");
code("trQuestVarSet(\"choice\"+1*trQuestVarGet(\"rand\"), trQuestVarGet(\"choice\"+(4-i)));");
code("}");
code("}");
code("case ROOM_TEMPLE + 2:");
code("{");
code("trQuestVarSet(\"templeSize\", 20);");
code("trVectorQuestVarSet(\"templePos\", xsVectorSet(70*x+39,0,70*z+39));");
code("paintCircle(x, z, 10, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, worldHeight);");
code("placeTemple(x, z, 16);");
code("dir = vector(1,0,0);");
code("trQuestVarSetFromRand(\"templeShadeTrue\", 0, 15, true);");
code("trQuestVarSet(\"templeShadesStart\", trGetNextUnitScenarioNameNumber());");
code("for(i=0; < 16) {");
code("if (trQuestVarGet(\"templeShadeTrue\") == i) {");
code("trQuestVarSet(\"templeShadeTrue\", trGetNextUnitScenarioNameNumber());");
code("}");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"0,0\",\"Hoplite\",1,1,0,1,0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\");");
code("trSetUnitOrientation(dir,vector(0,1,0),true);");
code("trUnitTeleport(70.0*x+40.0-xsVectorGetX(dir)*12.0,0,70.0*z+40.0-xsVectorGetZ(dir)*12.0);");
code("dir = rotationMatrix(dir, 0.923879, 0.382683);");
code("}");
code("trQuestVarSet(\"templeShadesEnd\", trGetNextUnitScenarioNameNumber());");
code("xsEnableRule(\"shade_temple_always\");");
code("xsEnableRule(\"shade_temple_init\");");
code("}");
code("case ROOM_TEMPLE + 3:");
code("{");
code("trVectorQuestVarSet(\"templePos\", xsVectorSet(70*x+39,0,70*z+39));");
code("trQuestVarSet(\"frostDriftSFX\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"templePosX\"),0,trQuestVarGet(\"templePosZ\"),0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("paintCircle(x,z,8,5,0,worldHeight);");
code("placeTemple(x, z, 16);");
code("xsEnableRule(\"snow_temple_always\");");
code("}");
code("case ROOM_TEMPLE + 4:");
code("{");
code("trQuestVarSet(\"templeChallengeActive\", 1);");
code("trPaintTerrain(x*35+12, z*35+12, x*35+28, z*35+28, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x*35+12, z*35+12, x*35+28, z*35+28, worldHeight, false);");
code("placeTemple(x, z, 10);");
code("if (trQuestVarGet(\"p\"+trCurrentPlayer()+\"relicsSacrificed\") < 10) {");
code("xsEnableRule(\"greedy_temple_always\");");
code("}");
code("}");
code("case ROOM_TEMPLE + 5:");
code("{");
code("dPoisonRelics = xInitDatabase(\"poisonRelics\", 9);");
code("xInitAddInt(dPoisonRelics, \"name\");");
code("xPoisonRelicIndex = xInitAddInt(dPoisonRelics, \"index\");");
code("trPaintTerrain(x*35+12, z*35+12, x*35+28, z*35+28, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x*35+12, z*35+12, x*35+28, z*35+28, worldHeight, false);");
code("placeTemple(x, z, 10);");
code("x0 = x * 70 + 31;");
code("z0 = z * 70 + 47;");
code("trQuestVarSetFromRand(\"rand\",0,8,true);");
code("for(i=0; < 9) {");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"0,0\",\"Dwarf\",1,x0,0,z0,225,true);");
code("trArmySelect(\"0,0\");");
code("trUnitChangeProtoUnit(\"Relic\");");
code("if (i == trQuestVarGet(\"rand\")) {");
code("trQuestVarSet(\"correctGoblet\", trQuestVarGet(\"next\"));");
code("}");
code("xSetPointer(dPoisonRelics, xAddDatabaseBlock(dPoisonRelics));");
code("xSetInt(dPoisonRelics, xUnitName, 1*trQuestVarGet(\"next\"));");
code("xSetInt(dPoisonRelics, xPoisonRelicIndex, xAddDatabaseBlock(dFreeRelics));");
code("xSetPointer(dFreeRelics, xGetNewestPointer(dFreeRelics));");
code("xSetInt(dFreeRelics, xUnitName, xGetInt(dPoisonRelics, xUnitName));");
code("xSetInt(dFreeRelics, xRelicType, RELIC_BINARY_POISON);");
code("x0 = x0 + 2;");
code("z0 = z0 - 2;");
code("}");
code("trQuestVarSet(\"poisonGuesses\", 3);");
code("trQuestVarSet(\"templeChallengeActive\", 1);");
code("xsEnableRule(\"poison_temple_always\");");
code("}");
code("case ROOM_TEMPLE + 6:");
code("{");
code("trQuestVarSet(\"templeSize\", 16);");
code("trVectorQuestVarSet(\"templePos\", xsVectorSet(70*x+40,0,70*z+40));");
code("trQuestVarSet(\"templeRoomUpperX\", 70*x+56);");
code("trQuestVarSet(\"templeRoomUpperZ\", 70*z+56);");
code("trQuestVarSet(\"templeRoomLowerX\", 70*x+24);");
code("trQuestVarSet(\"templeRoomLowerZ\", 70*z+24);");
code("trPaintTerrain(x*35+12, z*35+12, x*35+28, z*35+28, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x*35+12, z*35+12, x*35+28, z*35+28, worldHeight, false);");
code("placeTemple(x, z, 20);");
code("xsEnableRule(\"yeebaagooon_temple_always\");");
code("}");
code("case ROOM_TEMPLE + 7:");
code("{");
code("trPaintTerrain(x*35+10, z*35+10, x*35+30, z*35+30, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x*35+10, z*35+10, x*35+30, z*35+30, worldHeight, false);");
code("paintSecondary(x*35+10, z*35+10, x*35+30, z*35+30);");
code("paintEyecandy(x*35+10, z*35+10, x*35+30, z*35+30);");
code("placeTemple(x, z, 10);");
code("trVectorQuestVarSet(\"templePos\", xsVectorSet(70*x+40,0,70*z+40));");
code("dir = vector(1,0,0);");
code("trQuestVarSet(\"columnsStart\", trGetNextUnitScenarioNameNumber());");
code("for(i=0; < 8) {");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"0,0\",\"Hoplite\",1,1,0,1,0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\");");
code("trSetUnitOrientation(dir,vector(0,1,0),true);");
code("trUnitTeleport(70.0*x+40.0-xsVectorGetX(dir)*16.0,0,70.0*z+40.0-xsVectorGetZ(dir)*16.0);");
code("dir = rotationMatrix(dir, 0.707107, 0.707107);");
code("}");
code("trQuestVarSet(\"columnsEnd\", trGetNextUnitScenarioNameNumber());");
code("xsEnableRule(\"monster_temple_init\");");
code("xsEnableRule(\"monster_temple_always\");");
code("}");
code("case ROOM_TEMPLE + 8:");
code("{");
code("size = 12;");
code("paintCircle(x, z, size, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, worldHeight);");
code("placeTemple(x, z, 24);");
code("xSetPointer(dChests, xAddDatabaseBlock(dChests));");
code("xSetInt(dChests, xUnitName, 1*trQuestVarGet(\"temple\"));");
code("xSetInt(dChests, xChestType, CHEST_STATUES);");
code("xSetInt(dChests, xChestRoom, room);");
code("xSetInt(dChests, xChestKey, 1);");
code("}");
code("case ROOM_TEMPLE + 11:");
code("{");
code("size = 12;");
code("paintCircle(x, z, size, 0, 53, worldHeight);");
code("placeTemple(x, z, 20);");
code("trVectorQuestVarSet(\"templePos\", xsVectorSet(70*x+41,worldHeight + 15.0,70*z+41));");
code("xsEnableRule(\"zeno_temple_always\");");
code("}");
code("}");
code("}");

code("int getOtherVertex(int edge = 0, int v = 0) {");
code("if (edge >= 16 * v) {");
code("return(edge - 16 * v);");
code("} else {");
code("return(edge / 16);");
code("}");
code("}");

code("void buildEdge(int edge = 0, int type = 0) {");
code("int first = edge / 16;");
code("int second = edge - 16 * first;");
code("int z0 = first / 4;");
code("int x0 = first - 4 * z0;");
code("int z1 = second / 4;");
code("int x1 = second - 4 * z1;");
code("int x = 0;");
code("int z = 0;");
code("float height = 0;");
code("vector pos = vector(0,0,0);");
code("if (trQuestVarGet(\"edge\"+edge) == EDGE_NOT_FOUND) {");
code("if (type == EDGE_MOUNTAIN) {");
code("xClearDatabase(dEdgeFrontier);");
code("x0 = x0 * 35;");
code("z0 = z0 * 35;");
code("x1 = x1 * 35;");
code("z1 = z1 * 35;");
code("x1 = (x0 + x1) / 2 + 20;");
code("z1 = (z0 + z1) / 2 + 20;");
code("xSetPointer(dEdgeFrontier, xAddDatabaseBlock(dEdgeFrontier));");
code("xSetFloat(dEdgeFrontier, xEdgeFrontierHeight, wallHeight - worldHeight);");
code("xSetVector(dEdgeFrontier, xEdgeFrontierLoc, xsVectorSet(x1,0,z1));");
code("aiPlanSetUserVariableBool(dMapTiles,x1,z1, true);");

code("trQuestVarSetFromRand(\"size\", 40, 80);");
code("for(a=trQuestVarGet(\"size\"); >0) {");
code("trQuestVarSetFromRand(\"rand\", 0, 7, true);");
code("xDatabaseNext(dEdgeFrontier);");
code("for(b=trQuestVarGet(\"rand\"); >0) {");
code("xDatabaseNext(dEdgeFrontier);");
code("}");
code("pos = xGetVector(dEdgeFrontier, xEdgeFrontierLoc);");
code("x0 = xsVectorGetX(pos);");
code("z0 = xsVectorGetZ(pos);");
code("trPaintTerrain(x0-2,z0-2,x0+1,z0+1,TERRAIN_WALL, TERRAIN_SUB_WALL, false);");
code("trChangeTerrainHeight(x0-1,z0-1,x0+1,z0+1,worldHeight+xGetFloat(dEdgeFrontier,xEdgeFrontierHeight),false);");
code("if (xsPow(x0-x1, 2) + xsPow(z0-z1,2) < 324) {");
code("for(b=0; < 4) {");
code("trQuestVarSetFromRand(\"next\", -1, 0, true);");
code("height = trQuestVarGet(\"next\") + xGetFloat(dEdgeFrontier,xEdgeFrontierHeight);");
code("if (height > 0) {");
code("x = x0 + 2 * trQuestVarGet(\"rotX\"+b);");
code("z = z0 + 2 * trQuestVarGet(\"rotZ\"+b);");
code("if (aiPlanGetUserVariableBool(dMapTiles, x, z) == false) {");
code("xSetPointer(dEdgeFrontier, xAddDatabaseBlock(dEdgeFrontier));");
code("xSetFloat(dEdgeFrontier, xEdgeFrontierHeight, height);");
code("xSetVector(dEdgeFrontier, xEdgeFrontierLoc, xsVectorSet(x,0,z));");
code("aiPlanSetUserVariableBool(dMapTiles, x, z, true);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("} else if (type == EDGE_PORTAL) {");
code("if (x0 + 4 * z0 != trQuestVarGet(\"village\")) {");
code("buildRoom(x0, z0, ROOM_BASIC);");
code("}");
code("if (x1 + 4 * z1 != trQuestVarGet(\"village\")) {");
code("buildRoom(x1, z1, ROOM_BASIC);");
code("}");
code("trQuestVarSet(\"next1\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,x0*70+41,0,z0*70+41,0,true);");
code("trQuestVarSet(\"next2\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,x1*70+41,0,z1*70+41,0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next1\", true);");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next1\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Sky Passage\"));");
code("trSetSelectedScale(0,0.2,0);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next2\", true);");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next2\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Sky Passage\"));");
code("trSetSelectedScale(0,0.2,0);");
code("xAddDatabaseBlock(dSkyPassages, true);");
code("xSetInt(dSkyPassages, xUnitName, 1*trQuestVarGet(\"next1\"));");
code("xSetInt(dSkyPassages, xSkyPassageExit, 1*trQuestVarGet(\"next2\"));");
code("xAddDatabaseBlock(dSkyPassages, true);");
code("xSetInt(dSkyPassages, xUnitName, 1*trQuestVarGet(\"next2\"));");
code("xSetInt(dSkyPassages, xSkyPassageExit, 1*trQuestVarGet(\"next1\"));");
code("} else {");
code("z0 = z0 * 35 + 17;");
code("x0 = x0 * 35 + 17;");
code("z1 = z1 * 35 + 23;");
code("x1 = x1 * 35 + 23;");
code("if (type == EDGE_BIG) {");
code("trQuestVarSetFromRand(\"rand\", 0, 7, true);");
code("z0 = z0 - trQuestVarGet(\"rand\");");
code("x0 = x0 - trQuestVarGet(\"rand\");");
code("trQuestVarSetFromRand(\"rand\", 0, 7, true);");
code("z1 = z1 + trQuestVarGet(\"rand\");");
code("x1 = x1 + trQuestVarGet(\"rand\");");
code("}");
code("trQuestVarSet(\"rand\", 0);");
code("if (trQuestVarGet(\"stage\") == 11) {");
code("trQuestVarSetFromRand(\"rand\", 1, 5, true);");
code("}");
code("if (trQuestVarGet(\"rand\") == 5) {");
code("trPaintTerrain(x0, z0, x1, z1, 5, 4, false);");
code("paintEyecandy(x0, z0, x1, z1, \"sparkles\");");
code("} else {");
code("trPaintTerrain(x0, z0, x1, z1, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x0, z0, x1 + 1, z1 + 1, worldHeight, false);");
code("paintSecondary(x0, z0, x1, z1);");
code("}");

code("if ((type == EDGE_WALL) && (trQuestVarGet(\"wallEdges\") * xGetDatabaseCount(dVisited) > 0)) {");
code("trQuestVarSetFromRand(\"rand\", 1, 16, true);");
code("for (x=trQuestVarGet(\"rand\"); >0) {");
code("xDatabaseNext(dVisited);");
code("}");
code("trQuestVarSet(\"room\"+xGetInt(dVisited,xRoomNumber)+\"key\", trQuestVarGet(\"keyType\"));");
code("trQuestVarSet(\"room\"+xGetInt(dVisited,xRoomNumber)+\"index\", xAddDatabaseBlock(dUnlockWalls, true));");
code("xSetInt(dUnlockWalls, xWallSFX, trGetNextUnitScenarioNameNumber());");
code("xSetVector(dUnlockWalls, xWallPos, xsVectorSet(x0 + x1, 0, z0 + z1));");
code("xFreeDatabaseBlock(dVisited);");

code("if (x1 - x0 > z1 - z0) {");
code("xSetVector(dUnlockWalls, xWallMod, xsVectorSet(0, 0, z1 - z0));");
code("x0 = (x0 + x1);");
code("for(z=z0; <= z1) {");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,x0+2,0,2*z,0,true);");
code("trArmySelect(\"1,0\");");
code("trMutateSelected(kbGetProtoUnitID(\"UI Range Indicator Greek SFX\"));");
code("}");
code("x0 = x0 / 2;");
code("trPaintTerrain(x0-1, z0-1, x0+1, z1+1, TERRAIN_WALL, TERRAIN_SUB_WALL, false);");
code("trChangeTerrainHeight(x0, z0, x0+1, z1+1, wallHeight, false);");
code("xSetInt(dUnlockWalls, xWallCircles, trGetNextUnitScenarioNameNumber());");
code("x0 = x0 * 2;");
code("for(z=z0; <= z1) {");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,x0,0,2*z,270,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(kbGetProtoUnitName(relicProto(1*trQuestVarGet(\"keyType\"))));");
code("}");
code("} else {");
code("xSetVector(dUnlockWalls, xWallMod, xsVectorSet(x1-x0,0,0));");
code("z0 = (z0 + z1);");
code("for(x=x0; <= x1) {");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,2*x,0,z0,90,true);");
code("trArmySelect(\"1,0\");");
code("trMutateSelected(kbGetProtoUnitID(\"UI Range Indicator Greek SFX\"));");
code("}");
code("z0 = z0 / 2;");
code("trPaintTerrain(x0-1, z0-1, x1+1, z0+1, TERRAIN_WALL, TERRAIN_SUB_WALL, false);");
code("trChangeTerrainHeight(x0, z0, x1+1, z0+1, wallHeight, false);");
code("xSetInt(dUnlockWalls, xWallCircles, trGetNextUnitScenarioNameNumber());");
code("z0 = z0 * 2;");
code("for(x=x0; <= x1) {");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,2*x,0,z0,180,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(kbGetProtoUnitName(relicProto(1*trQuestVarGet(\"keyType\"))));");
code("}");
code("}");
code("xSetInt(dUnlockWalls, xWallEnd, trGetNextUnitScenarioNameNumber());");
code("trQuestVarSet(\"keyType\", trQuestVarGet(\"keyType\") - 1);");
code("trQuestVarSet(\"wallEdges\", trQuestVarGet(\"wallEdges\") - 1);");
code("}");

code("}");
code("trQuestVarSet(\"edge\"+edge, type);");
code("}");
code("}");

code("void connectStatues(int index1 = 0, int index2 = 0, int room = 0) {");
code("int db = trQuestVarGet(\"statuesIn\"+room);");
code("xSetPointer(db, index1);");
code("int index = xGetInt(db, xStatueConnections);");
code("xSetInt(db, xStatueConnections, 1 + index);");
code("aiPlanSetNumberUserVariableValues(ARRAYS,xGetInt(db,xStatueArray),xGetInt(db,xStatueConnections),false);");
code("aiPlanSetUserVariableInt(ARRAYS,xGetInt(db,xStatueArray),index,index2);");
code("vector first = xGetVector(db,xStatuePos);");

code("xSetPointer(db, index2);");
code("index = xGetInt(db, xStatueConnections);");
code("xSetInt(db, xStatueConnections, 1 + index);");
code("aiPlanSetNumberUserVariableValues(ARRAYS,xGetInt(db,xStatueArray),xGetInt(db,xStatueConnections),false);");
code("aiPlanSetUserVariableInt(ARRAYS,xGetInt(db,xStatueArray),index,index1);");
code("vector second = xGetVector(db,xStatuePos);");

code("vector dir = getUnitVector(first, second);");
code("dir = rotationMatrix(dir, 0, 1);");

code("float dist = distanceBetweenVectors(first, second, false);");
code("float x = 0.5 * (xsVectorGetX(first) + xsVectorGetX(second));");
code("float z = 0.5 * (xsVectorGetZ(first) + xsVectorGetZ(second));");

code("trArmyDispatch(\"1,0\",\"Dwarf\",1,1,0,1,0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(0);");
code("trSetSelectedScale(dist / 9.0, 1, 0.3);");
code("trSetUnitOrientation(dir,vector(0,1,0),true);");
code("trUnitTeleport(x,0,z);");
code("trMutateSelected(kbGetProtoUnitID(\"undermine ground decal long\"));");
code("}");

code("rule choose_stage_02");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 1) {");
code("xsDisableSelf();");
code("trBlockAllSounds();");

code("int chests = 3;");
code("int x = 0;");
code("int z = 0;");
code("int n = 0;");
code("int total = 0;");
code("int backtrack = 5;");
code("int index = 0;");

code("int room = 0;");
code("int x0 = 0;");
code("int z0 = 0;");
code("int x1 = 0;");
code("int z1 = 0;");
code("string pName = \"\";");

code("int next = 0;");

code("vector pos = vector(0,0,0);");
code("vector dir = vector(0,0,0);");

code("trQuestVarSetFromRand(\"village\", 1, 14, true);");

code("switch(1*trQuestVarGet(\"stage\"))");
code("{");
code("case 1:");
code("{");
code("trQuestVarSet(\"templeRoom\", -1);");
code("trSetCivAndCulture(0, 5, 1);");
code("trQuestVarSet(\"bossRoomSize\", 16);");
code("trQuestVarSet(\"extraEdges\", 9);");
code("TERRAIN_WALL = 2;");
code("TERRAIN_SUB_WALL = 0;");

code("TERRAIN_PRIMARY = 0;");
code("TERRAIN_SUB_PRIMARY = 34;");

code("TERRAIN_SECONDARY = 4;");
code("TERRAIN_SUB_SECONDARY = 12;");

code("trQuestVarSet(\"mapType\", MAP_OPEN);");
code("trQuestVarSet(\"treeDensity\", 0.06);");
code("trStringQuestVarSet(\"treeProto1\", \"Statue Lion Left\");");
code("trStringQuestVarSet(\"treeProto2\", \"Statue Lion Right\");");
code("trStringQuestVarSet(\"treeProto3\", \"Savannah Tree\");");
code("trQuestVarSet(\"spriteDensity\", 0.6);");
code("trStringQuestVarSet(\"spriteProto1\", \"Rock Sandstone Sprite\");");
code("trStringQuestVarSet(\"spriteProto2\", \"Grass\");");
code("trStringQuestVarSet(\"spriteProto3\", \"Rock Limestone Sprite\");");
code("trQuestVarSet(\"rockDensity\", 0.25);");
code("trStringQuestVarSet(\"rockProto1\", \"Rock Sandstone Big\");");
code("trStringQuestVarSet(\"rockProto2\", \"Rock River Sandy\");");
code("trStringQuestVarSet(\"rockProto3\", \"Rock Sandstone Small\");");

code("trQuestVarSet(\"enemyDensity\", 0.03 + 0.03 * ENEMY_PLAYER);");
code("trQuestVarSet(\"enemyProtoCount\", 5);");
code("trStringQuestVarSet(\"enemyProto1\", \"Golden Lion\");");
code("trStringQuestVarSet(\"enemyProto2\", \"Anubite\");");
code("trStringQuestVarSet(\"enemyProto3\", \"Terracotta Soldier\");");
code("trStringQuestVarSet(\"enemyProto4\", \"Sphinx\");");
code("trStringQuestVarSet(\"enemyProto5\", \"Petsuchos\");");

code("trQuestVarSet(\"columnDensity\", 0.05);");

code("trStringQuestVarSet(\"bossProto\", \"Nemean Lion\");");
code("bossScale = 2;");

code("trModifyProtounit(\"Nemean Lion\", ENEMY_PLAYER, 0, 9999999999999999999.0);");
code("trModifyProtounit(\"Nemean Lion\", ENEMY_PLAYER, 0, -9999999999999999999.0);");
code("trModifyProtounit(\"Nemean Lion\", ENEMY_PLAYER, 0, 4000 * ENEMY_PLAYER);");
code("trModifyProtounit(\"Nemean Lion\", ENEMY_PLAYER, 1, 2.4);");

code("trModifyProtounit(\"Hero Boar 2\", ENEMY_PLAYER, 0, 9999999999999999999.0);");
code("trModifyProtounit(\"Hero Boar 2\", ENEMY_PLAYER, 0, -9999999999999999999.0);");
code("trModifyProtounit(\"Hero Boar 2\", ENEMY_PLAYER, 0, 4000 * ENEMY_PLAYER);");
code("}");
code("case 2:");
code("{");
code("trQuestVarSet(\"stageTemple\", BOON_DECAY_HALVED);");
code("trSetCivAndCulture(0, 8, 2);");
code("trQuestVarSet(\"bossRoomSize\", 12);");
code("trSetLighting(\"Fimbulwinter\", 0.1);");
code("TERRAIN_WALL = 2;");
code("TERRAIN_SUB_WALL = 4;");

code("TERRAIN_PRIMARY = 0;");
code("TERRAIN_SUB_PRIMARY = 58;");

code("TERRAIN_SECONDARY = 0;");
code("TERRAIN_SUB_SECONDARY = 22;");

code("trQuestVarSet(\"mapType\", MAP_PORTALS);");
code("trQuestVarSet(\"treeDensity\", 0.2);");
code("trQuestVarSet(\"treeScale\", 2);");
code("trStringQuestVarSet(\"treeProto1\", \"Marsh Tree\");");
code("trStringQuestVarSet(\"treeProto2\", \"Marsh Tree\");");
code("trStringQuestVarSet(\"treeProto3\", \"Marsh Tree\");");
code("trQuestVarSet(\"spriteDensity\", 0.3);");
code("trStringQuestVarSet(\"spriteProto1\", \"Rock Limestone Sprite\");");
code("trStringQuestVarSet(\"spriteProto2\", \"Water Reeds\");");
code("trStringQuestVarSet(\"spriteProto3\", \"Flowers\");");
code("trQuestVarSet(\"rockDensity\", 0.15);");
code("trStringQuestVarSet(\"rockProto1\", \"Rock Granite Big\");");
code("trStringQuestVarSet(\"rockProto2\", \"Imperial Examination\");");
code("trStringQuestVarSet(\"rockProto3\", \"Rock Granite Small\");");

code("trQuestVarSet(\"enemyDensity\", 0.02 + 0.02 * ENEMY_PLAYER);");
code("trQuestVarSet(\"enemyProtoCount\", 5);");
code("trStringQuestVarSet(\"enemyProto1\", \"Walking Woods Marsh\");");
code("trStringQuestVarSet(\"enemyProto2\", \"Centaur\");");
code("trStringQuestVarSet(\"enemyProto3\", \"Dryad\");");
code("trStringQuestVarSet(\"enemyProto4\", \"Medusa\");");
code("trStringQuestVarSet(\"enemyProto5\", \"Mountain Giant\");");

code("trQuestVarSet(\"columnDensity\", 0);");

code("trStringQuestVarSet(\"bossProto\", \"Tamarisk Tree\");");
code("bossScale = 1.5;");
code("}");
code("case 3:");
code("{");
code("trQuestVarSet(\"stageTemple\", BOON_REGENERATE_HEALTH);");
code("trSetCivAndCulture(0, 7, 2);");
code("trQuestVarSet(\"bossRoomSize\", 14);");
code("trQuestVarSet(\"extraEdges\", 0);");
code("trQuestVarSet(\"wallEdges\", 4);");
code("TERRAIN_WALL = 2;");
code("TERRAIN_SUB_WALL = 3;");

code("TERRAIN_PRIMARY = 0;");
code("TERRAIN_SUB_PRIMARY = 41;");

code("TERRAIN_SECONDARY = 5;");
code("TERRAIN_SUB_SECONDARY = 0;");

code("trQuestVarSet(\"mapType\", MAP_STANDARD);");
code("trQuestVarSet(\"treeDensity\", 0.1);");
code("trStringQuestVarSet(\"treeProto1\", \"Pine Snow\");");
code("trStringQuestVarSet(\"treeProto2\", \"Pine Snow\");");
code("trStringQuestVarSet(\"treeProto3\", \"Snow Drift Archery\");");
code("trQuestVarSet(\"spriteDensity\", 0.25);");
code("trStringQuestVarSet(\"spriteProto1\", \"Rock Granite Sprite\");");
code("trStringQuestVarSet(\"spriteProto2\", \"Ice Block\");");
code("trStringQuestVarSet(\"spriteProto3\", \"Rock Granite Small\");");
code("trQuestVarSet(\"rockDensity\", 0.15);");
code("trStringQuestVarSet(\"rockProto1\", \"Rock Granite Big\");");
code("trStringQuestVarSet(\"rockProto2\", \"Rock River Icy\");");
code("trStringQuestVarSet(\"rockProto3\", \"Rock River Icy\");");

code("trQuestVarSet(\"enemyDensity\", 0.02 + 0.02 * ENEMY_PLAYER);");
code("trQuestVarSet(\"enemyProtoCount\", 5);");
code("trStringQuestVarSet(\"enemyProto1\", \"Fenris Wolf\");");
code("trStringQuestVarSet(\"enemyProto2\", \"Valkyrie\");");
code("trStringQuestVarSet(\"enemyProto3\", \"Ballista\");");
code("trStringQuestVarSet(\"enemyProto4\", \"Mountain Giant\");");
code("trStringQuestVarSet(\"enemyProto5\", \"Frost Giant\");");



code("trQuestVarSet(\"columnDensity\", 0.05);");

code("trStringQuestVarSet(\"bossProto\", \"King Folstag\");");
code("bossScale = 1.25;");

code("trModifyProtounit(\"King Folstag\", ENEMY_PLAYER, 0, 9999999999999999999.0);");
code("trModifyProtounit(\"King Folstag\", ENEMY_PLAYER, 0, -9999999999999999999.0);");
code("trModifyProtounit(\"King Folstag\", ENEMY_PLAYER, 0, 8000 * ENEMY_PLAYER);");
code("trModifyProtounit(\"King Folstag\", ENEMY_PLAYER, 1, 1.075);");

code("trModifyProtounit(\"Hero Boar 2\", ENEMY_PLAYER, 0, 9999999999999999999.0);");
code("trModifyProtounit(\"Hero Boar 2\", ENEMY_PLAYER, 0, -9999999999999999999.0);");
code("trModifyProtounit(\"Hero Boar 2\", ENEMY_PLAYER, 0, 8000 * ENEMY_PLAYER);");
code("}");
code("case 4:");
code("{");
code("trQuestVarSet(\"stageTemple\", BOON_MORE_GOLD);");
code("trSetCivAndCulture(0, statueCiv(1*trQuestVarGet(\"stageTemple\")), statueCulture(1*trQuestVarGet(\"stageTemple\")));");
code("trQuestVarSet(\"eyecandyStart\", trGetNextUnitScenarioNameNumber());");
code("wallHeight = worldHeight + 6;");
code("trQuestVarSet(\"bossRoomSize\", 14);");
code("TERRAIN_WALL = 2;");
code("TERRAIN_SUB_WALL = 1;");

code("TERRAIN_PRIMARY = 0;");
code("TERRAIN_SUB_PRIMARY = 25;");

code("TERRAIN_SECONDARY = 0;");
code("TERRAIN_SUB_SECONDARY = 3;");

code("trQuestVarSet(\"mapType\", MAP_OPEN);");
code("trQuestVarSet(\"treeDensity\", 0.3);");
code("trStringQuestVarSet(\"treeProto1\", \"Pine\");");
code("trStringQuestVarSet(\"treeProto2\", \"Pine\");");
code("trStringQuestVarSet(\"treeProto3\", \"Ruins\");");
code("trQuestVarSet(\"spriteDensity\", 0.6);");
code("trStringQuestVarSet(\"spriteProto1\", \"Flowers\");");
code("trStringQuestVarSet(\"spriteProto2\", \"Grass\");");
code("trStringQuestVarSet(\"spriteProto3\", \"Rock Limestone Sprite\");");
code("trQuestVarSet(\"rockDensity\", 0.4);");
code("trStringQuestVarSet(\"rockProto1\", \"Rock Granite Big\");");
code("trStringQuestVarSet(\"rockProto2\", \"Columns Broken\");");
code("trStringQuestVarSet(\"rockProto3\", \"Rock Granite Small\");");

code("trQuestVarSet(\"enemyDensity\", 0.03 + 0.03 * ENEMY_PLAYER);");

code("trQuestVarSet(\"enemyProtoCount\", 5);");
code("trStringQuestVarSet(\"enemyProto1\", \"Cyclops\");");
code("trStringQuestVarSet(\"enemyProto2\", \"Satyr\");");
code("trStringQuestVarSet(\"enemyProto3\", \"Behemoth\");");
code("trStringQuestVarSet(\"enemyProto4\", \"Medusa\");");
code("trStringQuestVarSet(\"enemyProto5\", \"Avenger\");");

code("trStringQuestVarSet(\"bossProto\", \"Chimera\");");
code("bossScale = 1.5;");

code("trModifyProtounit(\"Chimera\", ENEMY_PLAYER, 0, 9999999999999999999.0);");
code("trModifyProtounit(\"Chimera\", ENEMY_PLAYER, 0, -9999999999999999999.0);");
code("trModifyProtounit(\"Chimera\", ENEMY_PLAYER, 0, 12000 * ENEMY_PLAYER);");

code("trModifyProtounit(\"Hero Boar 2\", ENEMY_PLAYER, 0, 9999999999999999999.0);");
code("trModifyProtounit(\"Hero Boar 2\", ENEMY_PLAYER, 0, -9999999999999999999.0);");
code("trModifyProtounit(\"Hero Boar 2\", ENEMY_PLAYER, 0, 12000 * ENEMY_PLAYER);");
code("}");
code("case 5:");
code("{");
code("trQuestVarSet(\"stageTemple\", BOON_SPELL_POISON);");
code("trSetCivAndCulture(0, 3, 1);");
code("trQuestVarSet(\"bossRoomShape\", ROOM_SQUARE);");
code("trQuestVarSet(\"bossRoomSize\", 11);");
code("trSetLighting(\"dawn\", 0.1);");
code("TERRAIN_WALL = 2;");
code("TERRAIN_SUB_WALL = 11;");

code("TERRAIN_PRIMARY = 0;");
code("TERRAIN_SUB_PRIMARY = 32;");

code("TERRAIN_SECONDARY = 0;");
code("TERRAIN_SUB_SECONDARY = 33;");

code("trQuestVarSet(\"mapType\", MAP_PORTALS);");
code("trQuestVarSet(\"treeDensity\", 0.1);");
code("trStringQuestVarSet(\"treeProto1\", \"Statue Pharaoh\");");
code("trStringQuestVarSet(\"treeProto2\", \"Statue Pharaoh\");");
code("trStringQuestVarSet(\"treeProto3\", \"Statue Pharaoh\");");
code("trQuestVarSet(\"spriteDensity\", 0.3);");
code("trStringQuestVarSet(\"spriteProto1\", \"Rock Dirt Sprite\");");
code("trStringQuestVarSet(\"spriteProto2\", \"Cinematic Scorch\");");
code("trStringQuestVarSet(\"spriteProto3\", \"Skeleton\");");
code("trQuestVarSet(\"rockDensity\", 0.2);");
code("trStringQuestVarSet(\"rockProto1\", \"Rock Dirt Big\");");
code("trStringQuestVarSet(\"rockProto2\", \"Columns Broken\");");
code("trStringQuestVarSet(\"rockProto3\", \"Pestilence SFX1\");");

code("trQuestVarSet(\"enemyDensity\", 0.03 + 0.03 * ENEMY_PLAYER);");

code("trQuestVarSet(\"enemyProtoCount\", 6);");
code("trStringQuestVarSet(\"enemyProto1\", \"Dryad\");");
code("trStringQuestVarSet(\"enemyProto2\", \"Sphinx\");");
code("trStringQuestVarSet(\"enemyProto3\", \"Wadjet\");");
code("trStringQuestVarSet(\"enemyProto4\", \"Scorpion Man\");");
code("trStringQuestVarSet(\"enemyProto5\", \"Scarab\");");
code("trStringQuestVarSet(\"enemyProto6\", \"Mummy\");");

code("trQuestVarSet(\"columnDensity\", 0.1);");

code("trStringQuestVarSet(\"bossProto\", \"Shade of Hades\");");
code("bossScale = 1.5;");
code("trModifyProtounit(\"Shade of Hades\", ENEMY_PLAYER, 0, 9999999999999999999.0);");
code("trModifyProtounit(\"Shade of Hades\", ENEMY_PLAYER, 0, -9999999999999999999.0);");
code("trModifyProtounit(\"Shade of Hades\", ENEMY_PLAYER, 0, 16000 * ENEMY_PLAYER);");

code("trModifyProtounit(\"Hero Boar 2\", ENEMY_PLAYER, 0, 9999999999999999999.0);");
code("trModifyProtounit(\"Hero Boar 2\", ENEMY_PLAYER, 0, -9999999999999999999.0);");
code("trModifyProtounit(\"Hero Boar 2\", ENEMY_PLAYER, 0, 16000 * ENEMY_PLAYER);");

code("trQuestVarSet(\"pestilenceStart\", trGetNextUnitScenarioNameNumber());");
code("}");
code("case 6:");
code("{");
code("trQuestVarSet(\"stageTemple\", BOON_STATUS_COOLDOWNS);");
code("xsEnableRule(\"laser_rooms_always\");");
code("initializeLaserTrapDatabase();");
code("trTechSetStatus(ENEMY_PLAYER, 59, 4);");
code("ambientColor(100,50,0);");
code("sunColor(150,150,0);");
code("trSetCloudData(1.0, 50.0, 50.0, 0.0, 1.0, 0.0);");
code("trSetCloudMap(\"shockwall\");");
code("trSetCivAndCulture(0, 4, 1);");
code("trQuestVarSet(\"bossRoomShape\", ROOM_SQUARE);");
code("trQuestVarSet(\"bossRoomSize\", 10);");
code("trQuestVarSet(\"wallEdges\", 4);");
code("trQuestVarSet(\"trapRooms\", 3);");
code("trQuestVarSet(\"trapType\", TRAP_LASERS);");
code("TERRAIN_WALL = 2;");
code("TERRAIN_SUB_WALL = 5;");

code("TERRAIN_PRIMARY = 0;");
code("TERRAIN_SUB_PRIMARY = 70;");

code("TERRAIN_SECONDARY = 0;");
code("TERRAIN_SUB_SECONDARY = 64;");

code("trQuestVarSet(\"mapType\", MAP_STANDARD);");
code("trQuestVarSet(\"spriteDensity\", 0.15);");
code("trStringQuestVarSet(\"spriteProto1\", \"Cinematic Scorch\");");
code("trStringQuestVarSet(\"spriteProto2\", \"Cinematic Scorch\");");
code("trStringQuestVarSet(\"spriteProto3\", \"Cinematic Scorch\");");

code("trQuestVarSet(\"rockDensity\", 0.1);");
code("trStringQuestVarSet(\"rockProto1\", \"Smoke\");");
code("trStringQuestVarSet(\"rockProto2\", \"Broken Siege Weapons\");");
code("trStringQuestVarSet(\"rockProto3\", \"Thor Hammer\");");

code("trQuestVarSet(\"enemyDensity\", 0.03 + 0.03 * ENEMY_PLAYER);");
code("trQuestVarSet(\"enemyProtoCount\", 5);");

code("trStringQuestVarSet(\"enemyProto1\", \"Automaton SPC\");");
code("trStringQuestVarSet(\"enemyProto2\", \"Ballista\");");
code("trStringQuestVarSet(\"enemyProto3\", \"Fire Siphon\");");
code("trStringQuestVarSet(\"enemyProto4\", \"Battle Boar\");");
code("trStringQuestVarSet(\"enemyProto5\", \"Colossus\");");

code("trStringQuestVarSet(\"bossProto\", \"Helepolis\");");
code("bossScale = 0.25;");

code("trModifyProtounit(\"Helepolis\", ENEMY_PLAYER, 0, 9999999999999999999.0);");
code("trModifyProtounit(\"Helepolis\", ENEMY_PLAYER, 0, -9999999999999999999.0);");
code("trModifyProtounit(\"Helepolis\", ENEMY_PLAYER, 0, 20000 * ENEMY_PLAYER);");

code("trModifyProtounit(\"Hero Boar 2\", ENEMY_PLAYER, 0, 9999999999999999999.0);");
code("trModifyProtounit(\"Hero Boar 2\", ENEMY_PLAYER, 0, -9999999999999999999.0);");
code("trModifyProtounit(\"Hero Boar 2\", ENEMY_PLAYER, 0, 20000 * ENEMY_PLAYER);");

code("trModifyProtounit(\"Helepolis\", ENEMY_PLAYER, 13, -2);");
code("}");
code("case 7:");
code("{");
code("xDeepDamageLast = xInitAddInt(dPlayerUnits, \"deepDamageLast\");");
code("trQuestVarSet(\"stageTemple\", BOON_MONSTER_COMPANION);");
code("trSetLighting(\"fimbulwinter\", 0.01);");
code("wallHeight = worldHeight + 3;");
code("trSetCivAndCulture(0, 11, 3);");
code("trQuestVarSet(\"bossRoomSize\", 15);");
code("TERRAIN_WALL = 2;");
code("TERRAIN_SUB_WALL = 11;");

code("TERRAIN_PRIMARY = 3;");
code("TERRAIN_SUB_PRIMARY = 8;");

code("TERRAIN_SECONDARY = 3;");
code("TERRAIN_SUB_SECONDARY = 9;");

code("trQuestVarSet(\"mapType\", MAP_OPEN);");
code("trQuestVarSet(\"treeDensity\", 0.3);");
code("trStringQuestVarSet(\"treeProto1\", \"Columns\");");
code("trStringQuestVarSet(\"treeProto2\", \"Columns Broken\");");
code("trStringQuestVarSet(\"treeProto3\", \"Columns Fallen\");");
code("trQuestVarSet(\"spriteDensity\", 0.7);");
code("trStringQuestVarSet(\"spriteProto1\", \"Seaweed\");");
code("trStringQuestVarSet(\"spriteProto2\", \"Water Reeds\");");
code("trStringQuestVarSet(\"spriteProto3\", \"Rock Granite Small\");");
code("trQuestVarSet(\"rockDensity\", 0.4);");
code("trStringQuestVarSet(\"rockProto1\", \"Rock Granite Big\");");
code("trStringQuestVarSet(\"rockProto2\", \"Rock Limestone Sprite\");");
code("trStringQuestVarSet(\"rockProto3\", \"Shipwreck\");");

code("trModifyProtounit(\"Seaweed\",1,55,1);");
code("trModifyProtounit(\"Shipwreck\",1,55,1);");

code("trQuestVarSet(\"enemyDensity\", 0.04 + 0.04 * ENEMY_PLAYER);");

code("trQuestVarSet(\"enemyProtoCount\", 6);");
code("trStringQuestVarSet(\"enemyProto1\", \"Servant\");");
code("trStringQuestVarSet(\"enemyProto2\", \"Nereid\");");
code("trStringQuestVarSet(\"enemyProto3\", \"Wadjet\");");
code("trStringQuestVarSet(\"enemyProto4\", \"Kraken\");");
code("trStringQuestVarSet(\"enemyProto5\", \"Medusa\");");
code("trStringQuestVarSet(\"enemyProto6\", \"Hydra\");");

code("trStringQuestVarSet(\"bossProto\", \"Scylla\");");
code("bossScale = 1.3;");

code("trModifyProtounit(\"Scylla\", ENEMY_PLAYER, 0, 9999999999999999999.0);");
code("trModifyProtounit(\"Scylla\", ENEMY_PLAYER, 0, -9999999999999999999.0);");
code("trModifyProtounit(\"Scylla\", ENEMY_PLAYER, 0, 24000 * ENEMY_PLAYER);");

code("trModifyProtounit(\"Hero Boar 2\", ENEMY_PLAYER, 0, 9999999999999999999.0);");
code("trModifyProtounit(\"Hero Boar 2\", ENEMY_PLAYER, 0, -9999999999999999999.0);");
code("trModifyProtounit(\"Hero Boar 2\", ENEMY_PLAYER, 0, 24000 * ENEMY_PLAYER);");

code("trQuestVarSet(\"fishHawks\", zNewArray(mInt, 30, \"fishHawks\"));");
code("trQuestVarSet(\"fishes\", zNewArray(mInt, 30, \"fishes\"));");
code("for(i=0; < 30) {");
code("next = trGetNextUnitScenarioNameNumber();");
code("aiPlanSetUserVariableInt(ARRAYS, 1*trQuestVarGet(\"fishHawks\"), i, next);");
code("trQuestVarSetFromRand(\"rand\",1,360,true);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,150,0,150,trQuestVarGet(\"rand\"),true);");

code("spyEffect(next, kbGetProtoUnitID(\"Cinematic Block\"), xsVectorSet(ARRAYS, 1*trQuestVarGet(\"fishes\"), i));");
code("}");
code("xsEnableRule(\"the_deep_build_01\");");
code("}");
code("case 8:");
code("{");
code("dCloudDeployStars = initGenericProj(\"cloudDeployStars\",kbGetProtoUnitID(\"Lampades\"),18,0.01,2.5,0.0,ENEMY_PLAYER);");
code("xDeepDamageLast = xInitAddInt(dPlayerUnits, \"deepDamageLast\");");
code("xsEnableRule(\"the_clouds_build_01\");");
code("xsEnableRule(\"the_clouds_build_02\");");
code("worldHeight = 5;");
code("wallHeight = -3;");
code("trQuestVarSet(\"stageTemple\", BOON_DOUBLE_FAVOR);");
code("trSetCivAndCulture(0, 0, 0);");
code("trSetCivAndCulture(ENEMY_PLAYER, 0, 0);");
code("trQuestVarSet(\"bossRoomShape\", ROOM_CIRCLE);");
code("trQuestVarSet(\"bossRoomSize\", 10);");
code("TERRAIN_WALL = 2;");
code("TERRAIN_SUB_WALL = 1;");

code("TERRAIN_PRIMARY = 0;");
code("TERRAIN_SUB_PRIMARY = 53;");

code("TERRAIN_SECONDARY = 0;");
code("TERRAIN_SUB_SECONDARY = 50;");

code("trQuestVarSet(\"mapType\", MAP_PORTALS);");
code("trQuestVarSet(\"treeDensity\", 0.1);");
code("trStringQuestVarSet(\"treeProto1\", \"Ruins\");");
code("trStringQuestVarSet(\"treeProto2\", \"Rock Granite Big\");");
code("trStringQuestVarSet(\"treeProto3\", \"Mist\");");
code("trQuestVarSet(\"spriteDensity\", 0.3);");
code("trStringQuestVarSet(\"spriteProto1\", \"Rock Granite Sprite\");");
code("trStringQuestVarSet(\"spriteProto2\", \"Rock Granite Small\");");
code("trStringQuestVarSet(\"spriteProto3\", \"Rock Limestone Small\");");
code("trQuestVarSet(\"rockDensity\", 0.2);");
code("trStringQuestVarSet(\"rockProto1\", \"Columns\");");
code("trStringQuestVarSet(\"rockProto2\", \"Columns Broken\");");
code("trStringQuestVarSet(\"rockProto3\", \"Columns Fallen\");");

code("trQuestVarSet(\"enemyDensity\", 0.04 + 0.04 * ENEMY_PLAYER);");

code("trQuestVarSet(\"enemyProtoCount\", 6);");
code("trStringQuestVarSet(\"enemyProto1\", \"Griffon\");");
code("trStringQuestVarSet(\"enemyProto2\", \"Satyr\");");
code("trStringQuestVarSet(\"enemyProto3\", \"Einheriar\");");
code("trStringQuestVarSet(\"enemyProto4\", \"Avenger\");");
code("trStringQuestVarSet(\"enemyProto5\", \"Statue of Lightning\");");
code("trStringQuestVarSet(\"enemyProto6\", \"Lampades\");");

code("trModifyProtounit(\"Statue of Lightning\", ENEMY_PLAYER, 1, 3.0);");

code("trModifyProtounit(\"Nidhogg\", ENEMY_PLAYER, 0, 9999999999999999999.0);");
code("trModifyProtounit(\"Nidhogg\", ENEMY_PLAYER, 0, -9999999999999999999.0);");
code("trModifyProtounit(\"Nidhogg\", ENEMY_PLAYER, 0, 24000 * ENEMY_PLAYER);");
code("trModifyProtounit(\"Nidhogg\", ENEMY_PLAYER, 24, 1);");
code("trModifyProtounit(\"Nidhogg\", ENEMY_PLAYER, 25, 1);");
code("trModifyProtounit(\"Nidhogg\", ENEMY_PLAYER, 26, 1);");

code("trStringQuestVarSet(\"bossProto\", \"Nidhogg\");");
code("bossScale = 1.0;");

code("trQuestVarSet(\"cloudTornados\", zNewArray(mInt, 10, \"cloudTornados\"));");
code("trQuestVarSet(\"cloudTornadoSFX\", zNewArray(mInt, 10, \"cloudTornadoSFX\"));");
code("trQuestVarSet(\"cloudTornadoBlock\", zNewArray(mInt, 10, \"cloudTornadoBlock\"));");
code("for(i=0; <10) {");
code("next = trGetNextUnitScenarioNameNumber();");
code("trQuestVarSetFromRand(\"heading\", 1, 360, true);");
code("aiPlanSetUserVariableInt(ARRAYS,1*trQuestVarGet(\"cloudTornados\"),i,next);");
code("trArmyDispatch(\"\"+ENEMY_PLAYER+\",0\",\"Militia\",1,145,0,145,trQuestVarGet(\"heading\"),true);");
code("trArmySelect(\"\"+ENEMY_PLAYER+\",0\");");
code("spyEffect(next,kbGetProtoUnitID(\"Cinematic Block\"),xsVectorSet(ARRAYS, 1*trQuestVarGet(\"cloudTornadoSFX\"), i));");
code("spyEffect(next,kbGetProtoUnitID(\"Invisible Target\"),xsVectorSet(ARRAYS, 1*trQuestVarGet(\"cloudTornadoBlock\"), i));");
code("}");
code("}");
code("case 9:");
code("{");
code("worldHeight = 5;");
code("wallHeight = -3;");
code("trQuestVarSet(\"stageTemple\", -1);");
code("trQuestVarSet(\"templeRoom\", -1);");
code("trSetCivAndCulture(0, 9, 3);");
code("trSetCivAndCulture(ENEMY_PLAYER, 9, 3);");
code("trQuestVarSet(\"bossRoomShape\", ROOM_CIRCLE);");
code("trQuestVarSet(\"bossRoomSize\", 12);");
code("trQuestVarSet(\"wallEdges\", 5);");
code("trQuestVarSet(\"trapRooms\", 3);");
code("trQuestVarSet(\"trapType\", TRAP_CAROUSEL);");
code("TERRAIN_WALL = 2;");
code("TERRAIN_SUB_WALL = 11;");

code("TERRAIN_PRIMARY = 0;");
code("TERRAIN_SUB_PRIMARY = 84;");

code("TERRAIN_SECONDARY = 0;");
code("TERRAIN_SUB_SECONDARY = 85;");

code("trQuestVarSet(\"mapType\", MAP_STANDARD);");
code("trQuestVarSet(\"treeDensity\", 0.1);");
code("trStringQuestVarSet(\"treeProto1\", \"Ruins\");");
code("trStringQuestVarSet(\"treeProto2\", \"Rock Granite Big\");");
code("trStringQuestVarSet(\"treeProto3\", \"Smoke\");");
code("trQuestVarSet(\"spriteDensity\", 0.3);");
code("trStringQuestVarSet(\"spriteProto1\", \"Skeleton\");");
code("trStringQuestVarSet(\"spriteProto2\", \"Rock Granite Small\");");
code("trStringQuestVarSet(\"spriteProto3\", \"Rock Limestone Small\");");
code("trQuestVarSet(\"rockDensity\", 0.2);");
code("trStringQuestVarSet(\"rockProto1\", \"Stalagmite\");");
code("trStringQuestVarSet(\"rockProto2\", \"Rock Granite Big\");");
code("trStringQuestVarSet(\"rockProto3\", \"Stalagmite\");");

code("trQuestVarSet(\"enemyDensity\", 0.04 + 0.04 * ENEMY_PLAYER);");

code("trQuestVarSet(\"enemyProtoCount\", 6);");
code("trStringQuestVarSet(\"enemyProto1\", \"Tartarian Spawn\");");
code("trStringQuestVarSet(\"enemyProto2\", \"Troll\");");
code("trStringQuestVarSet(\"enemyProto3\", \"Manticore\");");
code("trStringQuestVarSet(\"enemyProto4\", \"Mountain Giant\");");
code("trStringQuestVarSet(\"enemyProto5\", \"Frost Giant\");");
code("trStringQuestVarSet(\"enemyProto6\", \"Fire Giant\");");

code("trModifyProtounit(\"Guardian\", ENEMY_PLAYER, 0, 9999999999999999999.0);");
code("trModifyProtounit(\"Guardian\", ENEMY_PLAYER, 0, -9999999999999999999.0);");
code("trModifyProtounit(\"Guardian\", ENEMY_PLAYER, 0, 32000 * ENEMY_PLAYER);");

code("trStringQuestVarSet(\"bossProto\", \"Guardian\");");
code("bossScale = 1.2;");
code("}");
code("case 11:");
code("{");
code("trQuestVarSet(\"stageTemple\", BOON_SPELL_ATTACK);");
code("trStringQuestVarSet(\"advice\", \"And then there were none...\");");
code("xsEnableRule(\"laser_rooms_always\");");
code("initializeLaserTrapDatabase();");
code("trSetCivAndCulture(0, statueCiv(1*trQuestVarGet(\"stageTemple\")), statueCulture(1*trQuestVarGet(\"stageTemple\")));");
code("worldHeight = 0;");
code("wallHeight = 0;");
code("trQuestVarSet(\"bossRoomShape\", ROOM_SQUARE);");
code("trQuestVarSet(\"bossRoomSize\", 11);");
code("trSetLighting(\"eclipse\", 0.1);");

code("trQuestVarSet(\"trapRooms\", 3);");
code("trQuestVarSet(\"trapType\", TRAP_LASERS);");
code("TERRAIN_WALL = 2;");
code("TERRAIN_SUB_WALL = 13;");

code("TERRAIN_PRIMARY = 9;");
code("TERRAIN_SUB_PRIMARY = 0;");

code("TERRAIN_SECONDARY = 0;");
code("TERRAIN_SUB_SECONDARY = 73;");

code("trQuestVarSet(\"mapType\", MAP_STANDARD);");
code("trQuestVarSet(\"treeDensity\", 0.2);");
code("trStringQuestVarSet(\"treeProto1\", \"Oak Tree Burning\");");
code("trStringQuestVarSet(\"treeProto2\", \"Marsh Tree\");");
code("trStringQuestVarSet(\"treeProto3\", \"Pine Snow\");");
code("trQuestVarSet(\"spriteDensity\", 0.5);");
code("trStringQuestVarSet(\"spriteProto1\", \"Cinematic Dead Bodies\");");
code("trStringQuestVarSet(\"spriteProto2\", \"Cinematic Dead Bodies Xpack\");");
code("trStringQuestVarSet(\"spriteProto3\", \"Columns\");");
code("trQuestVarSet(\"rockDensity\", 0.2);");
code("trStringQuestVarSet(\"rockProto1\", \"Ruins\");");
code("trStringQuestVarSet(\"rockProto2\", \"Columns Broken\");");
code("trStringQuestVarSet(\"rockProto3\", \"Cinematic Dead Bodies\");");
code("trQuestVarSet(\"sparklesDensity\", 0.5);");
code("trStringQuestVarSet(\"sparklesProto1\", \"Armor Glow Small\");");
code("trStringQuestVarSet(\"sparklesProto2\", \"Armor Glow Small\");");
code("trStringQuestVarSet(\"sparklesProto3\", \"Armor Glow Small\");");

code("trQuestVarSet(\"enemyDensity\", 0.02 + 0.02 * ENEMY_PLAYER);");


code("trQuestVarSet(\"enemyProtoCount\", ENEMY_PLAYER - 1);");
code("for(p=1; < ENEMY_PLAYER) {");
code("trStringQuestVarSet(\"enemyProto\" + p,");
code("kbGetProtoUnitName(xGetInt(dClass, xClassProto, xGetInt(dPlayerData, xPlayerClass, p))));");
code("}");

code("trQuestVarSet(\"timeshiftHawks\", zNewArray(mInt, 20, \"timeshiftHawks\"));");
code("trQuestVarSet(\"timeshiftHawkSFX\", zNewArray(mInt, 20, \"timeshiftHawkSFX\"));");
code("for(i=0; < 20) {");
code("next = trGetNextUnitScenarioNameNumber();");
code("aiPlanSetUserVariableInt(ARRAYS,1*trQuestVarGet(\"timeshiftHawks\"),i,next);");
code("trQuestVarSetFromRand(\"rand\",1,360,true);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,150,0,150,trQuestVarGet(\"rand\"),true);");
code("spyEffect(next,kbGetProtoUnitID(\"Timeshift In\"),xsVectorSet(ARRAYS, 1*trQuestVarGet(\"timeshiftHawkSFX\"), i));");
code("}");
code("xsEnableRule(\"zenos_paradox_build_01\");");

code("trQuestVarSet(\"templeRoom\", 5);");

code("trQuestVarSet(\"akard\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,50,0,50,225,true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Oracle Scout\");");
code("}");
code("}");

code("trChangeTerrainHeight(0,0,145,145,wallHeight,false);");
code("trPaintTerrain(0,0,145,145,TERRAIN_WALL, TERRAIN_SUB_WALL,false);");

code("if (trQuestVarGet(\"mapType\") == MAP_OPEN) {");
code("trChangeTerrainHeight(5,5,140,140,worldHeight,false);");
code("trPaintTerrain(5,5,139,139,TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY,false);");
code("paintSecondary(5,5,139,139);");
code("}");

code("dSkyPassages = xInitDatabase(\"skyPassages\");");
code("xInitAddInt(dSkyPassages,\"name\");");
code("xSkyPassageExit = xInitAddInt(dSkyPassages, \"exit\");");

code("dMagicalJourney = xInitDatabase(\"magicalJourney\");");
code("xInitAddInt(dMagicalJourney, \"name\");");

code("trQuestVarSet(\"keyType\", RELIC_KEY_EGYPT);");

code("bool edgeIsPortal = false;");
code("trQuestVarSet(\"tile0\", TILE_VISITED);");
code("trQuestVarSet(\"tile1\", TILE_FOUND);");
code("trQuestVarSet(\"tile4\", TILE_FOUND);");

code("if (trQuestVarGet(\"mapType\") == MAP_PORTALS) {");
code("trQuestVarSet(\"portalsActive\", 1);");
code("total = 1;");
code("trQuestVarSet(\"tile\"+1*trQuestVarGet(\"village\"), TILE_VISITED);");
code("trQuestVarSetFromRand(\"villageEntrance\", 1, 13, true);");
code("trQuestVarSet(\"villageEntrance\", trQuestVarGet(\"village\") + trQuestVarGet(\"villageEntrance\"));");
code("if (trQuestVarGet(\"villageEntrance\") > 14) {");
code("trQuestVarSet(\"villageEntrance\", trQuestVarGet(\"villageEntrance\") - 14);");
code("}");
code("buildEdge(edgeName(1*trQuestVarGet(\"villageEntrance\"), 1*trQuestVarGet(\"village\")), EDGE_PORTAL);");
code("} else if (trQuestVarGet(\"mapType\") == MAP_OPEN) {");
code("trQuestVarSetFromRand(\"bossRoomEntranceMod\", 1, 13, true);");
code("trQuestVarSet(\"bossEntranceRoom\", trQuestVarGet(\"village\") + trQuestVarGet(\"bossRoomEntranceMod\"));");
code("if (trQuestVarGet(\"bossEntranceRoom\") > 14) {");
code("trQuestVarSet(\"bossEntranceRoom\", trQuestVarGet(\"bossEntranceRoom\") - 14);");
code("}");
code("trQuestVarSetFromRand(\"bossKeyRoomMod\", 1, 13, true);");
code("trQuestVarSet(\"bossKeyRoom\", trQuestVarGet(\"bossEntranceRoom\") + trQuestVarGet(\"bossKeyRoomMod\"));");
code("if (trQuestVarGet(\"bossKeyRoom\") > 14) {");
code("trQuestVarSet(\"bossKeyRoom\", trQuestVarGet(\"bossKeyRoom\") - 14);");
code("}");
code("dMapTiles = aiPlanCreate(\"mapTiles\", 8);");
code("dEdgeFrontier = xInitDatabase(\"edgeFrontier\");");
code("xEdgeFrontierHeight = xInitAddFloat(dEdgeFrontier, \"height\");");
code("xEdgeFrontierLoc = xInitAddVector(dEdgeFrontier, \"location\");");
code("for(i=0; < 144) {");
code("if (aiPlanAddUserVariableBool(dMapTiles,i,\"row\"+i,144) == false) {");
code("trSoundPlayFN(\"cantdothat.wav\",\"1\",-1,\"\",\"\");");
code("debugLog(\"Cannot create new user variable at \" + i);");
code("}");
code("}");
code("}");

code("if (trQuestVarGet(\"templeRoom\") == 0) {");
code("trQuestVarSetFromRand(\"templeRoom\", 1, 14, true);");
code("trQuestVarSet(\"templeRoom\", trQuestVarGet(\"templeRoom\") + trQuestVarGet(\"village\"));");
code("if (trQuestVarGet(\"templeRoom\") > 14) {");
code("trQuestVarSet(\"templeRoom\", trQuestVarGet(\"templeRoom\") - 14);");
code("}");
code("}");

code("dVisited = xInitDatabase(\"visited\");");
code("xInitAddInt(dVisited,\"roomNumber\");");
code("dFrontier = xInitDatabase(\"frontier\");");
code("xInitAddInt(dFrontier, \"tile\");");
code("xInitAddInt(dFrontier,\"roomNumber\");");
code("xFrontierEdge = xInitAddInt(dFrontier, \"edge\");");
code("xFrontierType = xInitAddInt(dFrontier, \"type\");");

code("if (trQuestVarGet(\"tile1\") == TILE_FOUND) {");
code("xAddDatabaseBlock(dFrontier, true);");
code("xSetInt(dFrontier, xRoomNumber, 1);");
code("xSetInt(dFrontier, xFrontierEdge, edgeName(0, 1));");
code("xSetInt(dFrontier, xFrontierType, EDGE_NORMAL);");
code("}");
code("if (trQuestVarGet(\"mapType\") == MAP_OPEN) {");
code("xSetInt(dFrontier, xFrontierType, EDGE_MOUNTAIN);");
code("}");

code("if (trQuestVarGet(\"tile4\") == TILE_FOUND) {");
code("xAddDatabaseBlock(dFrontier, true);");
code("xSetInt(dFrontier, xRoomNumber, 4);");
code("xSetInt(dFrontier, xFrontierEdge, edgeName(0, 4));");
code("xSetInt(dFrontier, xFrontierType, EDGE_NORMAL);");
code("}");
code("if (trQuestVarGet(\"mapType\") == MAP_OPEN) {");
code("xSetInt(dFrontier, xFrontierType, EDGE_MOUNTAIN);");
code("}");

code("trQuestVarSetFromRand(\"relicTransporterDepth\", 1, 5, true);");

code("for(i=0; < 64) {");
code("trQuestVarSetFromRand(\"search\", 0, backtrack, true);");
code("for(j=trQuestVarGet(\"search\"); >0) {");
code("xDatabaseNext(dFrontier, true);");
code("}");
code("index = xGetPointer(dFrontier);");
code("if (trQuestVarGet(\"tile\"+xGetInt(dFrontier, xRoomNumber)) < TILE_VISITED) {");
code("z = xGetInt(dFrontier, xRoomNumber) / 4;");
code("x = xGetInt(dFrontier, xRoomNumber) - 4 * z;");
code("buildEdge(xGetInt(dFrontier, xFrontierEdge), xGetInt(dFrontier, xFrontierType));");

code("edgeIsPortal = (xGetInt(dFrontier, xFrontierType) == EDGE_PORTAL);");
code("trQuestVarSet(\"tile\"+xGetInt(dFrontier, xRoomNumber), TILE_VISITED);");
code("if (xGetInt(dFrontier, xRoomNumber) < 15 && xGetInt(dFrontier, xRoomNumber) != trQuestVarGet(\"village\")) {");
code("xAddDatabaseBlock(dVisited, true);");
code("xSetInt(dVisited, xRoomNumber, xGetInt(dFrontier, xRoomNumber));");
code("}");
code("if (xGetInt(dFrontier, xRoomNumber) < 15 && xGetInt(dFrontier, xRoomNumber) != trQuestVarGet(\"village\")) {");
code("for(a=1; >=0) {");
code("for(b=1; >=0) {");
code("trQuestVarSet(\"newX\", (1 - 2 * b) * a + x);");
code("trQuestVarSet(\"newZ\", (1 - 2 * b) * (1 - a) + z);");
code("if (trQuestVarGet(\"newX\") < 0 || trQuestVarGet(\"newZ\") < 0 ||");
code("trQuestVarGet(\"newX\") > 3 || trQuestVarGet(\"newZ\") > 3) {");
code("continue;");
code("}");
code("n = 0 + trQuestVarGet(\"newX\") + 4 * trQuestVarGet(\"newZ\");");
code("if (trQuestVarGet(\"tile\"+n) < TILE_VISITED) {");
code("xAddDatabaseBlock(dFrontier, true);");
code("xSetInt(dFrontier, xRoomNumber, n);");
code("xSetInt(dFrontier, xFrontierEdge, edgeName(xGetInt(dFrontier, xRoomNumber, index), n));");
code("xSetInt(dFrontier, xFrontierType, EDGE_NORMAL);");
code("if (trQuestVarGet(\"wallEdges\") > 0 && xGetDatabaseCount(dVisited) > 0) {");
code("trQuestVarSetFromRand(\"rand\", 1, xsMin(3, trQuestVarGet(\"wallEdges\")), true);");
code("if (trQuestVarGet(\"rand\") == 1) {");
code("xSetInt(dFrontier, xFrontierType, EDGE_WALL);");
code("}");
code("}");
code("if (trQuestVarGet(\"mapType\") == MAP_OPEN) {");
code("xSetInt(dFrontier, xFrontierType, EDGE_MOUNTAIN);");
code("}");
code("}");
code("}");
code("}");
code("if (edgeIsPortal == false) {");
code("trQuestVarSet(\"relicTransporterDepth\", trQuestVarGet(\"relicTransporterDepth\") - 1);");
code("if ((trQuestVarGet(\"relicTransporterDepth\") <= 0) &&");
code("(trQuestVarGet(\"relictransporterguy\") == 0) &&");
code("(xGetInt(dFrontier, xRoomNumber, index) != trQuestVarGet(\"villageEntrance\")) &&");
code("(xGetInt(dFrontier, xRoomNumber, index) != trQuestVarGet(\"bossEntranceRoom\"))) {");
code("trQuestVarSet(\"relicTransporterGuy\", xGetInt(dFrontier, xRoomNumber, index));");
code("} else if (trQuestVarGet(\"mapType\") == MAP_PORTALS) {");
code("trQuestVarSetFromRand(\"rand\", 1, 14, true);");
code("n = trQuestVarGet(\"rand\");");
code("if (trQuestVarGet(\"tile\"+n) < TILE_VISITED &&");
code("n != trQuestVarGet(\"villageEntrance\") &&");
code("n != trQuestVarGet(\"relicTransporterGuy\") &&");
code("trQuestVarGet(\"villageEntrance\") != xGetInt(dFrontier, xRoomNumber, index)) {");
code("xAddDatabaseBlock(dFrontier, true);");
code("xSetInt(dFrontier, xRoomNumber, n);");
code("xSetInt(dFrontier, xFrontierEdge, edgeName(xGetInt(dFrontier, xRoomNumber, index), n));");
code("xSetInt(dFrontier, xFrontierType, EDGE_PORTAL);");
code("}");
code("}");
code("}");
code("}");

code("total = total + 1;");
code("if (total == 15) {");
code("break;");
code("}");
code("} else {");
code("backtrack = backtrack + 1;");
code("}");
code("xFreeDatabaseBlock(dFrontier, index);");
code("}");

code("buildRoom(0,0, ROOM_STARTER);");
code("buildRoom(3,3, ROOM_BOSS);");

code("for(x=xGetDatabaseCount(dSkyPassages); >0) {");
code("xDatabaseNext(dSkyPassages);");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dSkyPassages, xUnitName));");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos)-4,0,xsVectorGetZ(pos),0,true);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos)+4,0,xsVectorGetZ(pos),0,false);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos)-4,0,false);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos)+4,0,false);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos)+3,0,xsVectorGetZ(pos)+3,0,false);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos)+3,0,xsVectorGetZ(pos)-3,0,false);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos)-3,0,xsVectorGetZ(pos)+3,0,false);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos)-3,0,xsVectorGetZ(pos)-3,0,false);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Garrison Flag Sky Passage\");");
code("}");

code("bool nottudSpawn = false;");
code("trQuestVarSetFromRand(\"nottudSpawn\", 0, 20, true);");
code("if (trQuestVarGet(\"nottudSpawn\") < trQuestVarGet(\"stage\")) {");
code("nottudSpawn = true;");
code("}");

code("if (trQuestVarGet(\"stage\") > 10) {");
code("trQuestVarSet(\"relicTransporterGuy\", -1);");
code("trQuestVarSet(\"bossEntranceRoom\", -1);");
code("chests = 0;");
code("nottudSpawn = false;");
code("}");

code("for (i=1; < 15) {");
code("z = i / 4;");
code("x = i - z * 4;");
code("if (trQuestVarGet(\"room\"+i) == 0) {");
code("if (chests > 0) {");
code("trQuestVarSetFromRand(\"chestRand\", 1, 12 - trQuestVarGet(\"stage\"), true);");
code("} else {");
code("trQuestVarSet(\"chestRand\", 0);");
code("}");
code("if (i == 1*trQuestVarGet(\"bossEntranceRoom\")) {");
code("buildRoom(x, z, ROOM_BOSS_ENTRANCE);");
code("} else if (i == 1*trQuestVarGet(\"relicTransporterGuy\")) {");
code("buildRoom(x, z, ROOM_TRANSPORTER_GUY);");
code("} else if (i == 1*trQuestVarGet(\"village\")) {");
code("xsEnableRule(\"town_always\");");
code("buildRoom(x, z, ROOM_VILLAGE + trQuestVarGet(\"stage\"));");
code("for(x=3; >0) {");
code("if (trQuestVarGet(\"localQuest\") == x) {");
code("pos = kbGetBlockPosition(\"\"+1*trQuestVarGet(\"guy\"+x));");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Healing SFX\");");
code("trQuestVarSet(\"questGuy\", trQuestVarGet(\"guy\"+x));");
code("} else {");
code("xAddDatabaseBlock(dNpcTalk, true);");
code("xSetInt(dNpcTalk, xUnitName, 1*trQuestVarGet(\"guy\"+x));");
code("xSetInt(dNpcTalk, xNpcDialog, 10 * x + trQuestVarGet(\"stage\"));");
code("}");
code("}");
code("} else if (nottudSpawn && (countRoomEntrances(x, z) == 1)) {");
code("buildRoom(x, z, ROOM_NOTTUD);");
code("nottudSpawn = false;");
code("} else if (trQuestVarGet(\"templeRoom\") == i) {");
code("xsEnableRule(\"find_temple\");");
code("buildRoom(x, z, ROOM_TEMPLE + trQuestVarGet(\"stage\"));");
code("} else if (trQuestVarGet(\"chestRand\") == 1) {");
code("chests = chests - 1;");
code("buildRoom(x, z, ROOM_CHEST);");
code("} else {");
code("trQuestVarSetFromRand(\"roomType\", ROOM_BASIC, ROOM_AMBUSH, true);");
code("trQuestVarSetFromRand(\"roomType2\", ROOM_BASIC, ROOM_AMBUSH, true);");
code("if (trQuestVarGet(\"roomType2\") < trQuestVarGet(\"roomType\")) {");
code("trQuestVarSet(\"roomType\", trQuestVarGet(\"roomType2\"));");
code("}");
code("buildRoom(x, z, 1*trQuestVarGet(\"roomType\"));");
code("}");
code("}");
code("}");

code("int dStatuesReady = xInitDatabase(\"statuesReady\");");
code("int xStatuesReadyIndex = xInitAddInt(dStatuesReady, \"index\");");

code("trQuestVarSet(\"keyType\", RELIC_KEY_GREEK);");
code("for(i=xGetDatabaseCount(dChests); >0) {");
code("xDatabaseNext(dChests);");
code("room = xGetInt(dChests, xChestRoom);");
code("pos = trVectorQuestVarGet(\"room\"+room+\"bottom1\");");
code("x0 = xsVectorGetX(pos);");
code("z0 = xsVectorGetZ(pos);");
code("pos = trVectorQuestVarGet(\"room\"+room+\"top1\");");
code("x1 = xsVectorGetX(pos);");
code("z1 = xsVectorGetZ(pos);");
code("switch(xGetInt(dChests,xChestType))");
code("{");
code("case CHEST_KEY:");
code("{");
code("paintEnemies(x0, z0, x1, z1);");
code("trQuestVarSetFromRand(\"key\", 1, 14, true);");
code("for(j=trQuestVarGet(\"key\"); >0) {");
code("room = xDatabaseNext(dBasicRooms);");
code("}");
code("pos = trVectorQuestVarGet(\"room\"+room+\"bottom1\");");
code("x0 = xsVectorGetX(pos);");
code("z0 = xsVectorGetZ(pos);");
code("pos = trVectorQuestVarGet(\"room\"+room+\"top1\");");
code("x1 = xsVectorGetX(pos);");
code("z1 = xsVectorGetZ(pos);");
code("pos = randomNearEdge(x0, z0, x1, z1);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Militia\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitChangeProtoUnit(\"Relic\");");
code("xAddDatabaseBlock(dFreeRelics,true);");
code("xSetInt(dFreeRelics,xRelicName, 1*trQuestVarGet(\"next\"));");
code("xSetInt(dFreeRelics, xRelicType, 1*trQuestVarGet(\"keyType\"));");

code("xSetInt(dChests, xChestKey, 1*trQuestVarGet(\"next\"));");

code("pos = kbGetBlockPosition(\"\"+xGetInt(dChests,xUnitName));");
code("pos = xsVectorSet(xsVectorGetX(pos) - 2, 0, xsVectorGetZ(pos) - 2);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),225,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(kbGetProtoUnitName(relicProto(1*trQuestVarGet(\"keyType\"))));");
code("xSetInt(dChests, xChestSFX, 1*trQuestVarGet(\"next\"));");

code("trQuestVarSet(\"keyType\", 1 + trQuestVarGet(\"keyType\"));");
code("}");
code("case CHEST_STATUES:");
code("{");
code("initializeStatuePuzzle(room);");
code("int db = trQuestVarGet(\"statuesIn\"+room);");
code("float statueX = 0;");
code("float statueZ = 0;");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dChests,xUnitName));");
code("trQuestVarSetFromRand(\"rand\", 4, 7, true);");
code("if (xGetInt(dChests, xChestKey) == 1) {");
code("trQuestVarSet(\"rand\", 9);");
code("}");
code("float angle = 0.785398;");
code("float angleMod = 6.283185 / trQuestVarGet(\"rand\");");
code("for(x=0; < trQuestVarGet(\"rand\")) {");
code("dir = xsVectorSet(xsSin(angle),0,xsCos(angle));");
code("if (xGetInt(dChests, xChestKey) == 0) {");
code("statueX = xsVectorGetX(pos) - 10.0 * xsVectorGetX(dir);");
code("statueZ = xsVectorGetZ(pos) - 10.0 * xsVectorGetZ(dir);");
code("} else {");
code("statueX = xsVectorGetX(pos) - 15.0 * xsVectorGetX(dir);");
code("statueZ = xsVectorGetZ(pos) - 15.0 * xsVectorGetZ(dir);");
code("}");

code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,1,0,1,180,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitConvert(ENEMY_PLAYER);");
code("trUnitTeleport(statueX,0,statueZ);");
code("trMutateSelected(kbGetProtoUnitID(\"Monument 2\"));");
code("trSetUnitOrientation(dir,vector(0,1,0),true);");

code("xAddDatabaseBlock(dStatuesReady, true);");
code("xSetInt(dStatuesReady, xStatuesReadyIndex, xAddDatabaseBlock(db, true));");
code("xSetInt(db, xUnitName, 1*trQuestVarGet(\"next\"));");
code("xSetFloat(db, xStatueAngle, angle);");
code("xSetVector(db, xStatuePos, xsVectorSet(statueX, 0, statueZ));");
code("xSetInt(db, xStatueArray, zNewArray(mInt, 1*trQuestVarGet(\"rand\") - 1, \"statue\"+xGetPointer(db)));");

code("trQuestVarSetFromRand(\"jump\", 1, 2, true);");
code("for (y=trQuestVarGet(\"jump\"); >0) {");
code("xDatabaseNext(dStatuesReady);");
code("}");

code("angle = fModulo(6.283185, angle + angleMod);");
code("}");

code("for(x=trQuestVarGet(\"rand\"); >0) {");
code("xDatabaseNext(dStatuesReady);");
code("int pointer = xGetPointer(dStatuesReady);");
code("trQuestVarSetFromRand(\"jump\", 1, (trQuestVarGet(\"rand\") - 1) / 2, true);");
code("for(y=trQuestVarGet(\"jump\"); >0) {");
code("xDatabaseNext(dStatuesReady);");
code("}");
code("connectStatues(xGetInt(dStatuesReady, xStatuesReadyIndex, pointer), xGetInt(dStatuesReady, xStatuesReadyIndex), room);");
code("xSetPointer(dStatuesReady, pointer);");
code("}");
code("trQuestVarSet(\"correctStatuesIn\"+room, trQuestVarGet(\"rand\"));");
code("for(x=trQuestVarGet(\"rand\"); >1) {");
code("xDatabaseNext(db);");
code("trQuestVarSetFromRand(\"amt\",1,3,true);");
code("for(y=trQuestVarGet(\"amt\"); >0) {");
code("turnStatue(room, 0, true, true);");
code("}");
code("}");
code("xClearDatabase(dStatuesReady);");
code("}");
code("case CHEST_ENCOUNTER:");
code("{");
code("vector loc = vector(0,0,0);");
code("xSetInt(dChests, xChestBegin, trGetNextUnitScenarioNameNumber());");
code("pName = trStringQuestVarGet(\"enemyProto\"+1*trQuestVarGet(\"enemyProtoCount\"));");
code("trQuestVarSetFromRand(\"count\", 1, 6, true);");
code("for(j=trQuestVarGet(\"count\"); >0) {");
code("trQuestVarSetFromRand(\"x0\", 2*x0, 2*x1, true);");
code("trQuestVarSetFromRand(\"z0\", 2*z0, 2*z1, true);");
code("trQuestVarSetFromRand(\"heading\", 1, 360, true);");
code("pos = xsVectorSet(trQuestVarGet(\"x0\"),0,trQuestVarGet(\"z0\"));");

code("loc = vectorToGrid(pos);");
code("if (terrainIsType(loc, TERRAIN_WALL, TERRAIN_SUB_WALL) == false) {");
code("xAddDatabaseBlock(dEnemiesIncoming, true);");
code("xSetInt(dEnemiesIncoming, xUnitName, trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",pName,1,xsVectorGetX(pos),0,xsVectorGetZ(pos),trQuestVarGet(\"heading\"),true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(ENEMY_PLAYER);");
code("}");
code("}");
code("pos = trVectorQuestVarGet(\"room\"+room+\"bottom2\");");
code("x0 = xsVectorGetX(pos);");
code("z0 = xsVectorGetZ(pos);");
code("pos = trVectorQuestVarGet(\"room\"+room+\"top2\");");
code("x1 = xsVectorGetX(pos);");
code("z1 = xsVectorGetZ(pos);");
code("trQuestVarSetFromRand(\"count\", 1, 6, true);");
code("for(j=trQuestVarGet(\"count\"); >0) {");
code("trQuestVarSetFromRand(\"x0\", 2*x0, 2*x1, true);");
code("trQuestVarSetFromRand(\"z0\", 2*z0, 2*z1, true);");
code("trQuestVarSetFromRand(\"heading\", 1, 360, true);");
code("pos = xsVectorSet(trQuestVarGet(\"x0\"),0,trQuestVarGet(\"z0\"));");

code("loc = vectorToGrid(pos);");
code("if (terrainIsType(loc, TERRAIN_WALL, TERRAIN_SUB_WALL) == false) {");
code("xAddDatabaseBlock(dEnemiesIncoming, true);");
code("xSetInt(dEnemiesIncoming, xUnitName, trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",pName,1,xsVectorGetX(pos),0,xsVectorGetZ(pos),trQuestVarGet(\"heading\"),true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(ENEMY_PLAYER);");
code("}");
code("}");
code("xSetInt(dChests,xChestEnd, trGetNextUnitScenarioNameNumber());");
code("}");
code("}");
code("}");

code("aiPlanDestroy(dStatuesReady);");

code("if (trQuestVarGet(\"mapType\") == MAP_OPEN) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossEntranceSymbol\", true);");
code("trUnitChangeProtoUnit(kbGetProtoUnitName(relicProto(1*trQuestVarGet(\"keyType\"))));");

code("i = trQuestVarGet(\"bossKeyRoom\");");
code("z = i / 4;");
code("x = i - z * 4;");
code("trQuestVarSet(\"bossKey\", trGetNextUnitScenarioNameNumber());");
code("spawnRelicSpecific(xsVectorSet(x * 70 + 40, 0, z * 70 + 40), 1*trQuestVarGet(\"keyType\"));");
code("trQuestVarSet(\"keyType\", 1 + trQuestVarGet(\"keyType\"));");
code("}");

code("if (trQuestVarGet(\"pestilenceStart\") > 0) {");
code("for(x=trQuestVarGet(\"pestilenceStart\"); < trGetNextUnitScenarioNameNumber()) {");
code("if (kbGetUnitBaseTypeID(kbGetBlockID(\"\"+x)) == kbGetProtoUnitID(\"Pestilence SFX1\")) {");
code("pos = kbGetBlockPosition(\"\"+x);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(ENEMY_PLAYER);");
code("trUnitChangeProtoUnit(\"Victory Marker\");");
code("}");
code("}");
code("}");

code("if ((trQuestVarGet(\"nickQuestSpawn\") == 1) &&");
code("(trQuestVarGet(\"stage\") < 6)) {");
code("trQuestVarSetFromRand(\"rand\", 1, xGetDatabaseCount(dBasicRooms));");
code("for(x=trQuestVarGet(\"rand\"); >0) {");
code("xDatabaseNext(dBasicRooms);");
code("}");
code("pos = randomNearEdgeOfRoom(xGetInt(dBasicRooms, xRoomNumber));");
code("trQuestVarSet(\"nickonhawkRelicObject\", trGetNextUnitScenarioNameNumber());");
code("spawnRelicSpecific(pos, RELIC_NICKONHAWK);");
code("}");

code("trUnblockAllSounds();");
code("if (trQuestVarGet(\"newPlayers\") > 0) {");
code("xsEnableRule(\"choose_stage_03\");");
code("trSoundPlayFN(\"default\",\"1\",-1,");
code("\"Zenophobia: Looks like we have some new faces today!\", \"icons\infantry g hoplite icon 64\");");
code("} else if (trQuestVarGet(\"yeebBossFight\") > 0) {");
code("xsEnableRule(\"yeeb_boss_message\");");
code("trQuestVarSet(\"yeebStep\", 0);");
code("trPaintTerrain(30, 5, 32, 30, TERRAIN_WALL, TERRAIN_SUB_WALL, false);");
code("trPaintTerrain(5, 30, 30, 32, TERRAIN_WALL, TERRAIN_SUB_WALL, false);");
code("trChangeTerrainHeight(31, 5, 32, 32, wallHeight, false);");
code("trChangeTerrainHeight(5, 31, 32, 32, wallHeight, false);");
code("} else {");
code("xsEnableRule(\"gameplay_start\");");
code("trUIFadeToColor(0,0,0,1000,0,false);");
code("trLetterBox(false);");
code("}");

code("for(x=xGetDatabaseCount(dEnemiesIncoming); >0) {");
code("xDatabaseNext(dEnemiesIncoming);");
code("if (kbGetBlockID(\"\"+xGetInt(dEnemiesIncoming, xUnitName)) == -1) {");
code("debugLog(\"Enemy \" + xGetInt(dEnemiesIncoming, xUnitName) + \" removed!\");");
code("xFreeDatabaseBlock(dEnemiesIncoming);");
code("}");
code("}");

code("trPaintTerrain(0,0,5,5,0,70,true);");
code("trPaintTerrain(0,0,5,5,TERRAIN_WALL,TERRAIN_SUB_WALL,false);");

code("if (trQuestVarGet(\"mapType\") == MAP_OPEN) {");
code("aiPlanDestroy(dMapTiles);");
code("aiPlanDestroy(dEdgeFrontier);");
code("}");
code("aiPlanDestroy(dFrontier);");
code("}");
code("}");

code("rule choose_stage_03");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 5) {");
code("trSoundPlayFN(\"default\",\"1\",-1,");
code("\"Zenophobia: I'll let you have the starter characters for free.\", \"icons\infantry g hoplite icon 64\");");
code("xsEnableRule(\"choose_stage_04\");");
code("xsDisableSelf();");
code("}");
code("}");

code("rule choose_stage_04");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 6) {");
code("trUIFadeToColor(0,0,0,1000,0,false);");
code("trLetterBox(false);");
code("xsEnableRule(\"gameplay_start\");");
code("xsDisableSelf();");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"choice1\", true);");
code("trUnitSetStance(\"Passive\");");
code("trUnitHighlight(30.0, true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"choice2\", true);");
code("trUnitSetStance(\"Passive\");");
code("trUnitHighlight(30.0, true);");
code("}");
code("}");

code("rule zenos_paradox_build_01");
code("inactive");
code("highFrequency");
code("{");
code("int db = trQuestVarGet(\"timeshiftHawks\");");
code("if (trQuestVarGet(\"spyfound\") == trQuestVarGet(\"spyfind\")) {");
code("for(x=0; < 20) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+aiPlanGetUserVariableInt(ARRAYS,db,x),true);");
code("trMutateSelected(kbGetProtoUnitID(\"Hawk\"));");
code("trSetSelectedScale(0,0,0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+aiPlanGetUserVariableInt(ARRAYS,1*trQuestVarGet(\"timeshiftHawkSFX\"),x), true);");
code("trUnitSetAnimationPath(\"0,1,1,0,0,0,0\");");
code("}");
code("xsDisableSelf();");

code("db = xInitDatabase(\"zenoRelicsIncoming\");");
code("xInitAddInt(db, \"name\");");
code("xInitAddInt(db, \"type\");");
code("trQuestVarSet(\"zenoRelicsIncoming\", db);");
code("int jump = xGetDatabaseCount(dEnemiesIncoming) / 20;");
code("for(x=20; >0) {");
code("for(i=jump; >0) {");
code("xDatabaseNext(dEnemiesIncoming);");
code("}");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,1,0,1,0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitChangeProtoUnit(\"Relic\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trImmediateUnitGarrison(\"\"+xGetInt(dEnemiesIncoming,xUnitName));");
code("xAddDatabaseBlock(db, true);");
code("xSetInt(db, xUnitName, 1*trQuestVarGet(\"next\"));");
code("xSetInt(db, xRelicType, RELIC_MATH_PROBLEM + x);");
code("}");
code("}");
code("}");


code("rule the_deep_build_01");
code("inactive");
code("highFrequency");
code("{");
code("if (trQuestVarGet(\"spyfound\") == trQuestVarGet(\"spyfind\")) {");
code("int db = trQuestVarGet(\"fishHawks\");");
code("int fishes = trQuestVarGet(\"fishes\");");
code("for(x=0; < 30) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+aiPlanGetUserVariableInt(ARRAYS,db,x),true);");
code("trMutateSelected(kbGetProtoUnitID(\"Hawk\"));");
code("trSetSelectedScale(0,0,0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+aiPlanGetUserVariableInt(ARRAYS,fishes,x),true);");
code("trQuestVarSetFromRand(\"rand\", 1, 3, true);");
code("switch(1*trQuestVarGet(\"rand\"))");
code("{");
code("case 1:");
code("{");
code("trUnitChangeProtoUnit(\"Fish - Salmon\");");
code("}");
code("case 2:");
code("{");
code("trUnitChangeProtoUnit(\"Fish - Mahi\");");
code("}");
code("case 3:");
code("{");
code("trUnitChangeProtoUnit(\"Fish - Perch\");");
code("}");
code("}");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+aiPlanGetUserVariableInt(ARRAYS,fishes,x),true);");
code("trSetSelectedUpVector(0,-10,0);");
code("trQuestVarSetFromRand(\"scale\", 1, 2, false);");
code("trSetSelectedScale(trQuestVarGet(\"scale\"),0.1 * trQuestVarGet(\"scale\"),trQuestVarGet(\"scale\"));");
code("}");
code("xsEnableRule(\"the_deep_build_02\");");
code("xsDisableSelf();");
code("}");
code("}");

code("rule the_deep_build_02");
code("inactive");
code("highFrequency");
code("{");
code("int class = 0;");
code("string proto = \"\";");
code("vector pos = trVectorQuestVarGet(\"startPosition\");");
code("if (trQuestVarGet(\"play\") == 1) {");
code("for(p=1; < ENEMY_PLAYER) {");
code("class = xGetInt(dPlayerData, xPlayerClass, p);");
code("proto = kbGetProtoUnitName(xGetInt(dClass, xClassProto, class));");
code("trModifyProtounit(proto, p, 2, -999);");
code("trModifyProtounit(\"Dog\", p, 2, -999);");
code("trModifyProtounit(\"Wolf\", p, 2, -999);");
code("trModifyProtounit(\"Minion\", p, 2, -999);");
code("trModifyProtounit(\"Audrey\", p, 2, -999);");
code("trModifyProtounit(\"Walking Berry Bush\", p, 2, -999);");

code("trModifyProtounit(\"Flying Medic\", p, 55, 1);");
code("zSetProtoUnitStat(\"Flying Medic\", p, 2, 25.0);");

code("trQuestVarSet(\"p\"+p+\"medic\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\",\"Flying Medic\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("}");
code("for (i=1; < 40) {");
code("proto = kbGetProtoUnitName(monsterPetProto(i));");
code("for(p=1; < ENEMY_PLAYER) {");
code("trModifyProtounit(proto, p, 2, -999);");
code("}");
code("}");
code("xsEnableRule(\"the_deep_damage\");");
code("startNPCDialog(NPC_EXPLAIN_DEEP);");
code("xsDisableSelf();");
code("}");
code("}");

code("rule the_clouds_build_01");
code("inactive");
code("highFrequency");
code("{");
code("bool paint = true;");
code("for(x=0; < 146) {");
code("for(z=0; < 146) {");
code("paint = true;");
code("for(i=2;>= -1) {");
code("for(j=2;>= -1) {");
code("if (trGetTerrainHeight(x+i,z+j) > -2.0) {");
code("paint = false;");
code("break;");
code("}");
code("}");
code("if (paint == false) {");
code("break;");
code("}");
code("}");
code("if (paint) {");
code("trPaintTerrain(x,z,x,z,4,15,false);");
code("}");
code("}");
code("}");
code("xsDisableSelf();");
code("}");

code("rule the_clouds_build_02");
code("inactive");
code("highFrequency");
code("{");
code("if (trQuestVarGet(\"play\") == 1) {");

code("trModifyProtounit(\"Hawk\", ENEMY_PLAYER, 1, -2);");
code("trModifyProtounit(\"Tornado\", 0, 2, -999);");

code("int db = trQuestVarGet(\"cloudTornados\");");
code("int cloudSFX = trQuestVarGet(\"cloudTornadoSFX\");");
code("int cloudBlock = trQuestVarGet(\"cloudTornadoBlock\");");

code("for(i=0; < 10) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+aiPlanGetUserVariableInt(ARRAYS,db,i),true);");
code("trMutateSelected(kbGetProtoUnitID(\"Hawk\"));");
code("trSetSelectedScale(0,0,0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+aiPlanGetUserVariableInt(ARRAYS,cloudSFX,i), true);");
code("trUnitChangeProtoUnit(\"Tornado\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+aiPlanGetUserVariableInt(ARRAYS,cloudSFX,i), true);");
code("trUnitOverrideAnimation(1,0,true,true,-1);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+aiPlanGetUserVariableInt(ARRAYS,cloudBlock,i), true);");
code("trUnitChangeProtoUnit(\"Invisible Target\");");
code("}");


code("for(p=1; < ENEMY_PLAYER) {");
code("xSetFloat(dPlayerData,xPlayerFavorRegen, xGetFloat(dPlayerData,xPlayerFavorRegen) - 0.5, p);");
code("}");
code("startNPCDialog(NPC_EXPLAIN_CLOUDS);");
code("xsEnableRule(\"the_cloud_damage\");");
code("trQuestVarSet(\"cloudDeployNext\", trTime() + 90);");
code("trVectorQuestVarSet(\"cloudDeployDir\", vector(0,0,1));");
code("xsDisableSelf();");
code("}");
code("}");



code("rule rebuild_map");
code("inactive");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("trQuestVarSet(\"play\", 0);");
code("trQuestVarSet(\"yeebBossFight\", 0);");
code("for(p=1; < ENEMY_PLAYER) {");
code("xSetInt(dPlayerData, xPlayerUnit, 0, p);");
code("xClearDatabase(getCharactersDB(p));");
code("xClearDatabase(getRelicsDB(p));");
code("xClearDatabase(getWarehouseDB(p));");
code("}");
code("xClearDatabase(dFreeRelics);");
code("xClearDatabase(dEnemies);");
code("xClearDatabase(dEnemiesIncoming);");
code("xClearDatabase(dAmbushRooms);");
code("xClearDatabase(dBasicRooms);");
code("xClearDatabase(dChests);");
code("xClearDatabase(dPlayerCharacters);");
code("xClearDatabase(dPlayerUnits);");
code("for(i = trQuestVarGet(\"eyecandyStart\"); < trGetNextUnitScenarioNameNumber()) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+i, true);");
code("trUnitDestroy();");
code("}");
code("int x = 0;");
code("int z = 0;");
code("for(i = 0; <16) {");
code("trQuestVarSet(\"tile\"+i, 0);");
code("trQuestVarSet(\"room\"+i, 0);");
code("z = i / 4;");
code("x = i - z * 4;");
code("for(j=0; <4) {");
code("trQuestVarSet(\"edge\"+edgeName(i, x + trQuestVarGet(\"rotX\"+j) + 4 * (z + trQuestVarGet(\"rotZ\"+j))), EDGE_NOT_FOUND);");
code("}");
code("}");
code("xsEnableRule(\"choose_stage_02\");");
code("}");
code("const int moonbeamCooldown = 18;");
code("const float moonbeamDamage = 30;");
code("const float moonbeamDuration = 6;");
code("const float moonbeamRadius = 6;");

code("const int crescentCooldown = 12;");
code("const float crescentCount = 3;");
code("const float crescentDamage = 50;");

code("const float protectionDelay = 83.33;");

code("int xCrescentCount = 0;");
code("int xCrescentTimeout = 0;");
code("int xCrescentSFX = 0;");
code("int xCrescentOn = 0;");

code("int xMoonbeamRadius = 0;");
code("int xMoonbeamDamage = 0;");
code("int xMoonbeamTimeout = 0;");
code("int xMoonbeamStart = 0;");
code("int xMoonbeamPos = 0;");
code("int xMoonbeamNext = 0;");
code("int xMoonbeamEnd = 0;");

code("void removeMoonblade(int p = 0) {");
code("removePlayerSpecific(p);");
code("}");

code("void moonbladeAlways(int eventID = -1) {");
code("xsSetContextPlayer(0);");
code("int p = eventID - 12 * MOONBLADE;");
code("int db = getCharactersDB(p);");
code("int moonbeams = trQuestVarGet(\"p\"+p+\"moonbeams\");");
code("xSetPointer(dPlayerData, p);");
code("int id = 0;");
code("int hit = 0;");
code("int target = 0;");
code("int index = xGetPointer(dEnemies);");
code("float dist = 0;");
code("float amt = 0;");

code("vector pos = vector(0,0,0);");
code("vector dir = vector(0,0,0);");

code("if (xGetDatabaseCount(db) > 0) {");
code("xDatabaseNext(db);");
code("id = xGetInt(db, xUnitID);");
code("xUnitSelectByID(db, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeMoonblade(p);");
code("} else {");
code("hit = CheckOnHit(p);");
code("if (hit > ON_HIT_ATTACKING) {");
code("if (xGetInt(db, xCrescentCount) > 0) {");
code("xSetInt(db, xCrescentCount, xGetInt(db, xCrescentCount) - 1);");
code("xSetInt(db, xCrescentTimeout, trTimeMS() + 5000);");
code("target = xGetPointer(dEnemies);");
code("if (xSetPointer(dEnemies, xGetInt(db, xCharAttackTargetIndex))) {");
code("stunUnit(dEnemies, 2.0, p);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("damageEnemy(p, crescentDamage * xGetFloat(dPlayerData,xPlayerSpellDamage), false);");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dEnemies, xUnitName));");

code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Lightning Sparks Ground\");");
code("gainFavor(p, 3.0);");
code("}");
code("}");
code("amt = xGetFloat(dPlayerData, xPlayerHealth) * xGetFloat(dPlayerData, xPlayerSpellDamage) * 0.03;");
code("for(x=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("xUnitSelectByID(dPlayerUnits, xUnitID);");
code("healUnit(p, amt);");
code("}");
code("if (hit == ON_HIT_SPECIAL) {");
code("if (trCurrentPlayer() == p) {");
code("trSoundPlayFN(\"mythcreate.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("pos = kbGetBlockPosition(\"\"+xGetInt(db, xUnitName));");
code("xAddDatabaseBlock(dPlayerWolves, true);");
code("xSetInt(dPlayerWolves, xUnitName, trGetNextUnitScenarioNameNumber());");
code("spawnPlayerUnit(p, kbGetProtoUnitID(\"Wolf\"), pos, calculateDecay(p, 5.0));");
code("}");
code("}");
code("if ((xGetInt(db, xCrescentCount) > 0) &&");
code("(trTimeMS() > xGetInt(db, xCrescentTimeout))) {");
code("xSetInt(db, xCrescentTimeout, trTimeMS() + 5000);");
code("xSetInt(db, xCrescentCount, xGetInt(db, xCrescentCount) - 1);");
code("}");

code("if (xGetBool(db, xCrescentOn) && (xGetInt(db, xCrescentCount) <= 0)) {");
code("xSetBool(db, xCrescentOn, false);");
code("xUnitSelect(db, xCrescentSFX);");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");
code("}");
code("}");
code("}");

code("if (xGetBool(dPlayerData, xPlayerWellActivated)) {");
code("xSetBool(dPlayerData, xPlayerWellActivated, false);");
code("trSoundPlayFN(\"eclipsebirth.wav\",\"1\",-1,\"\",\"\");");
code("pos = vectorSnapToGrid(xGetVector(dPlayerData, xPlayerWellPos));");
code("xAddDatabaseBlock(moonbeams, true);");
code("xSetFloat(moonbeams, xMoonbeamRadius, xsPow(moonbeamRadius * xGetFloat(dPlayerData, xPlayerSpellRange), 2));");
code("xSetFloat(moonbeams, xMoonbeamDamage, moonbeamDamage * xGetFloat(dPlayerData, xPlayerSpellDamage));");
code("xSetInt(moonbeams,xMoonbeamTimeout, trTimeMS() + 1000 * moonbeamDuration * xGetFloat(dPlayerData,xPlayerSpellDuration));");
code("xSetInt(moonbeams, xMoonbeamStart, trGetNextUnitScenarioNameNumber());");
code("xSetVector(moonbeams, xMoonbeamPos, pos);");
code("xSetInt(moonbeams, xMoonbeamNext, trTimeMS());");
code("dir = xsVectorSet(moonbeamRadius * xGetFloat(dPlayerData, xPlayerSpellRange), 0, 0);");
code("for(x=0; <16) {");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,xsVectorGetX(dir)+xsVectorGetX(pos),0,xsVectorGetZ(dir)+xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"\"+p+\",0\");");
code("trMutateSelected(kbGetProtoUnitID(\"Healing SFX\"));");
code("dir = rotationMatrix(dir, 0.92388, 0.382683);");
code("}");
code("xSetInt(moonbeams, xMoonbeamEnd, trGetNextUnitScenarioNameNumber());");
code("}");

code("if (xGetBool(dPlayerData, xPlayerLureActivated)) {");
code("xSetBool(dPlayerData, xPlayerLureActivated, false);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"lureObject\", true);");
code("trUnitDestroy();");
code("trQuestVarSet(\"p\"+p+\"crescentStarted\", 1);");
code("trSoundPlayFN(\"olympustemplesfx.wav\",\"1\",-1,\"\",\"\");");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xSetInt(db, xCrescentCount, xGetInt(db, xCrescentCount) + 3);");
code("xSetInt(db, xCrescentTimeout, trTimeMS() + 5000);");
code("xSetBool(db, xCrescentOn, true);");
code("if ((xGetInt(db, xCrescentSFX) == 0) ||");
code("(kbGetBlockID(\"\"+xGetInt(db, xCrescentSFX)) == -1)) {");
code("spyEffect(xGetInt(db, xUnitName),kbGetProtoUnitID(\"Rocket\"), xsVectorSet(db,xCrescentSFX,xGetPointer(db)));");
code("}");
code("}");
code("}");

code("if (xGetBool(dPlayerData, xPlayerRainActivated)) {");
code("xSetBool(dPlayerData, xPlayerRainActivated, false);");
code("trQuestVarSet(\"p\"+p+\"protection\", 1 - trQuestVarGet(\"p\"+p+\"protection\"));");
code("if (trQuestVarGet(\"p\"+p+\"protection\") == 1) {");
code("if (trPlayerResourceCount(p, \"favor\") < 1) {");
code("if (trCurrentPlayer() == p) {");
code("trSoundPlayFN(\"cantdothat.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("trQuestVarSet(\"p\"+p+\"protection\", 0);");
code("} else {");
code("trQuestVarSet(\"protectionCount\", 1 + trQuestVarGet(\"protectionCount\"));");
code("trQuestVarSet(\"p\"+p+\"protectionNext\",");
code("trTimeMS() + protectionDelay / xGetFloat(dPlayerData, xPlayerUltimateCost));");
code("trSoundPlayFN(\"bronzebirth.wav\",\"1\",-1,\"\",\"\");");
code("for(x=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("id = xGetInt(dPlayerUnits, xUnitID);");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("xsSetContextPlayer(xGetInt(dPlayerUnits,xPlayerOwner));");
code("amt = kbUnitGetCurrentHitpoints(id);");
code("xsSetContextPlayer(0);");
code("xSetFloat(dPlayerUnits, xCurrentHealth, amt);");
code("}");
code("}");
code("} else {");
code("trQuestVarSet(\"protectionCount\", trQuestVarGet(\"protectionCount\") - 1);");
code("if (trCurrentPlayer() == p) {");
code("trSoundPlayFN(\"godpowerfailed.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("}");

code("if (PvP && (trQuestVarGet(\"p\"+p+\"protection\") == 1)) {");
code("for(x=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("id = xGetInt(dPlayerUnits, xUnitID);");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("trUnitHighlight(0.2, false);");
code("xsSetContextPlayer(xGetInt(dPlayerUnits, xPlayerOwner));");
code("amt = kbUnitGetCurrentHitpoints(id);");
code("xsSetContextPlayer(0);");
code("if (amt > xGetFloat(dPlayerUnits, xCurrentHealth)) {");
code("xSetFloat(dPlayerUnits, xCurrentHealth, amt);");
code("} else {");
code("trDamageUnit(amt - xGetFloat(dPlayerUnits, xCurrentHealth));");
code("}");
code("}");
code("}");

code("if ((trQuestVarGet(\"p\"+p+\"crescentStarted\") == 1) && (trQuestVarGet(\"spyFind\") == trQuestVarGet(\"spyFound\"))) {");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xUnitSelect(db, xCrescentSFX);");
code("trMutateSelected(kbGetProtoUnitID(\"Outpost\"));");
code("trSetSelectedScale(0.0,0.0,0.0);");
code("}");
code("trQuestVarSet(\"p\"+p+\"crescentStarted\", 0);");
code("}");

code("if (xGetDatabaseCount(moonbeams) > 0) {");
code("target = 0;");
code("xDatabaseNext(moonbeams);");
code("if (trTimeMS() > xGetInt(moonbeams, xMoonbeamNext)) {");
code("xSetInt(moonbeams, xMoonbeamNext, xGetInt(moonbeams, xMoonbeamNext) + 500);");
code("pos = xGetVector(moonbeams, xMoonbeamPos);");
code("dist = xGetFloat(moonbeams, xMoonbeamRadius);");

code("amt = xGetFloat(moonbeams, xMoonbeamDamage);");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (unitDistanceToVector(xGetInt(dEnemies, xUnitName), pos) < dist) {");
code("silenceUnit(dEnemies,1.0,p);");
code("damageEnemy(p, amt);");
code("}");
code("}");
code("if (trTimeMS() > xGetInt(moonbeams, xMoonbeamTimeout)) {");
code("for(x=xGetInt(moonbeams, xMoonbeamStart); < xGetInt(moonbeams, xMoonbeamEnd)) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+x, true);");
code("trUnitDestroy();");
code("}");
code("xFreeDatabaseBlock(moonbeams);");
code("}");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"protection\") == 1) {");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"protectionNext\")) {");
code("trQuestVarSet(\"p\"+p+\"protectionNext\",");
code("trQuestVarGet(\"p\"+p+\"protectionNext\") + protectionDelay / xGetFloat(dPlayerData, xPlayerUltimateCost));");
code("gainFavor(p, 0.0 - 1);");
code("if (trPlayerResourceCount(p, \"favor\") < 1) {");
code("trQuestVarSet(\"p\"+p+\"protection\", 0);");
code("trQuestVarSet(\"protectionCount\", trQuestVarGet(\"protectionCount\") - 1);");
code("trSoundPlayFN(\"godpowerfailed.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("}");
code("xSetPointer(dEnemies, index);");
code("poisonKillerBonus(p);");
code("}");

code("void chooseMoonblade(int eventID = -1) {");
code("xsSetContextPlayer(0);");
code("int p = eventID - 1000 - 12 * MOONBLADE;");
code("int db = getCharactersDB(p);");
code("resetCharacterCustomVars(p);");
code("xSetPointer(dPlayerData,p);");
code("if (trCurrentPlayer() == p) {");
code("map(\"q\", \"game\", \"uiSetSpecialPower(133) uiSpecialPowerAtPointer\");");
code("wellName = \"(Q) Moonbeam\";");
code("wellIsUltimate = false;");
code("map(\"e\", \"game\", \"uiSetSpecialPower(156) uiSpecialPowerAtPointer\");");
code("rainName = \"(E) Protection\";");
code("rainIsUltimate = false;");
code("map(\"w\", \"game\", \"uiSetSpecialPower(227) uiSpecialPowerAtPointer\");");
code("lureName = \"(W) Crescent Strikes\";");
code("lureIsUltimate = false;");
code("}");
code("xSetInt(dPlayerData,xPlayerWellCooldown, moonbeamCooldown);");
code("xSetFloat(dPlayerData,xPlayerWellCost,0);");
code("xSetInt(dPlayerData,xPlayerLureCooldown, crescentCooldown);");
code("xSetFloat(dPlayerData,xPlayerLureCost,0);");
code("xSetInt(dPlayerData,xPlayerRainCooldown,1);");
code("xSetFloat(dPlayerData,xPlayerRainCost, 0);");

code("xCrescentCount = xInitAddInt(db, \"crescentCount\");");
code("xCrescentTimeout = xInitAddInt(db, \"crescentTimeout\");");
code("xCrescentSFX = xInitAddInt(db, \"crescentSFX\");");
code("xCrescentOn = xInitAddBool(db, \"crescentOn\");");

code("if (trQuestVarGet(\"p\"+p+\"moonbeams\") == 0) {");
code("db = xInitDatabase(\"p\"+p+\"moonbeams\");");
code("trQuestVarSet(\"p\"+p+\"moonbeams\", db);");
code("xMoonbeamRadius = xInitAddFloat(db, \"radius\");");
code("xMoonbeamDamage = xInitAddFloat(db, \"damage\");");
code("xMoonbeamTimeout = xInitAddInt(db, \"timeout\");");
code("xMoonbeamStart = xInitAddInt(db, \"start\");");
code("xMoonbeamEnd = xInitAddInt(db, \"end\");");
code("xMoonbeamPos = xInitAddVector(db, \"pos\");");
code("xMoonbeamNext = xInitAddInt(db, \"next\");");
code("}");
code("}");

code("void moonbladeModify(int eventID = -1) {");
code("xsSetContextPlayer(0);");
code("int p = eventID - 5000 - 12 * MOONBLADE;");
code("zSetProtoUnitStat(\"Wolf\", p, 0, 0.2 * xGetFloat(dPlayerData, xPlayerHealth, p));");
code("zSetProtoUnitStat(\"Wolf\", p, 27, 0.2 * xGetFloat(dPlayerData, xPlayerAttack, p));");
code("}");

code("rule moonblade_init");
code("active");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("for(p=1; < ENEMY_PLAYER) {");
code("trEventSetHandler(12 * MOONBLADE + p, \"moonbladeAlways\");");
code("trEventSetHandler(1000 + 12 * MOONBLADE + p, \"chooseMoonblade\");");
code("trEventSetHandler(5000 + 12 * MOONBLADE + p, \"moonbladeModify\");");
code("}");
code("}");
code("int sunlightCooldown = 18;");
code("float sunlightRadius = 6;");
code("float sunlightDuration = 6;");
code("float sunlightPower = 60;");

code("int healingRaysCooldown = 12;");
code("float healingRaysPower = 100;");
code("float healingRaysDuration = 6;");

code("float searingDelay = 200;");

code("int xSearingSFX = 0;");

code("int xSunlightRadius = 0;");
code("int xSunlightDamage = 0;");
code("int xSunlightTimeout = 0;");
code("int xSunlightStart = 0;");
code("int xSunlightEnd = 0;");
code("int xSunlightPos = 0;");
code("int xSunlightNext = 0;");

code("void removeSunbow(int p = 0) {");
code("removePlayerSpecific(p);");
code("}");

code("void sunbowAlways(int eventID = -1) {");
code("xsSetContextPlayer(0);");
code("int p = eventID - 12 * SUNBOW;");
code("int id = 0;");
code("int hit = 0;");
code("int target = 0;");
code("int next = 0;");
code("int index = xGetPointer(dEnemies);");
code("int db = getCharactersDB(p);");
code("int sunlights = trQuestVarGet(\"p\"+p+\"sunlights\");");
code("float amt = 0;");
code("float dist = 0;");
code("xSetPointer(dPlayerData, p);");

code("vector end = vector(0,0,0);");
code("vector pos = vector(0,0,0);");
code("vector dir = vector(0,0,0);");
code("if (xGetDatabaseCount(db) > 0) {");
code("xDatabaseNext(db);");
code("id = xGetInt(db, xUnitID);");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("if (trUnitAlive() == false) {");
code("removeSunbow(p);");
code("} else {");
code("hit = CheckOnHit(p);");
code("if (hit == ON_HIT_NORMAL) {");
code("if (trQuestVarGet(\"p\"+p+\"healingRays\") == 1) {");
code("hit = 0;");
code("target = trGetUnitScenarioNameNumber(xGetInt(db, xCharAttackTarget));");
code("end = kbGetBlockPosition(\"\"+target, true);");
code("pos = kbGetBlockPosition(\"\"+xGetInt(db, xUnitName), true);");
code("dir = getUnitVector(pos, end);");

code("next = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+next, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Petosuchus Projectile\"));");
code("trUnitHighlight(1.0, false);");
code("trSetUnitOrientation(xsVectorSet(0.0 - xsVectorGetX(dir),0, 0.0 - xsVectorGetZ(dir)), vector(0,1,0), true);");
code("xAddDatabaseBlock(dPlayerLasers, true);");
code("xSetInt(dPlayerLasers, xUnitName, next);");
code("xSetInt(dPlayerLasers, xPlayerLaserTimeout, trTimeMS() + 500);");
code("xSetFloat(dPlayerLasers, xPlayerLaserRange, xGetFloat(dPlayerData, xPlayerRange) * 1.4);");
code("amt = healingRaysPower * xGetFloat(dPlayerData, xPlayerSpellDamage);");
code("dist = xGetFloat(dPlayerData, xPlayerRange) + 3.0;");
code("for(x=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("xUnitSelectByID(dPlayerUnits, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (rayCollision(dPlayerUnits, pos, dir, dist, 9.0)) {");
code("healUnit(p, amt);");
code("hit = hit + 1;");
code("}");
code("}");
code("if (trQuestVarGet(\"p\"+p+\"searing\") == 1) {");
code("amt = amt * xGetFloat(dPlayerData, xPlayerHealBoost);");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (rayCollision(dEnemies, pos, dir, dist, 9.0)) {");
code("hit = hit + 1;");
code("damageEnemy(p, amt, true);");
code("OnHit(p, xGetPointer(dEnemies), true);");
code("}");
code("}");
code("}");
code("gainFavor(p, hit);");
code("}");
code("}");
code("}");
code("}");

code("if (xGetBool(dPlayerData, xPlayerWellActivated)) {");
code("xSetBool(dPlayerData, xPlayerWellActivated, false);");
code("trSoundPlayFN(\"restorationbirth.wav\",\"1\",-1,\"\",\"\");");
code("pos = vectorSnapToGrid(xGetVector(dPlayerData, xPlayerWellPos));");
code("xAddDatabaseBlock(sunlights, true);");
code("xSetFloat(sunlights, xSunlightRadius, xsPow(sunlightRadius * xGetFloat(dPlayerData, xPlayerSpellRange), 2));");
code("xSetFloat(sunlights, xSunlightDamage, sunlightPower * xGetFloat(dPlayerData, xPlayerSpellDamage));");
code("xSetInt(sunlights, xSunlightTimeout,");
code("trTimeMS() + 1000 * sunlightDuration * xGetFloat(dPlayerData, xPlayerSpellDuration));");
code("xSetInt(sunlights, xSunlightStart, trGetNextUnitScenarioNameNumber());");
code("xSetVector(sunlights, xSunlightPos, pos);");
code("xSetInt(sunlights, xSunlightNext, trTimeMS());");
code("dir = xsVectorSet(sunlightRadius * xGetFloat(dPlayerData, xPlayerSpellRange), 0, 0);");
code("for(x=0; <16) {");
code("next = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,xsVectorGetX(dir)+xsVectorGetX(pos),0,xsVectorGetZ(dir)+xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"\"+p+\",0\");");
code("trUnitChangeProtoUnit(\"Relic\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+next, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Hero Birth\"));");
code("dir = rotationMatrix(dir, 0.92388, 0.382683);");
code("}");
code("xSetInt(sunlights, xSunlightEnd, trGetNextUnitScenarioNameNumber());");
code("}");

code("if (xGetBool(dPlayerData, xPlayerLureActivated)) {");
code("xSetBool(dPlayerData, xPlayerLureActivated, false);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"lureObject\", true);");
code("trUnitDestroy();");
code("trQuestVarSet(\"p\"+p+\"healingrays\", 1);");
code("trQuestVarSet(\"p\"+p+\"healingRaysTimeout\",");
code("trTimeMS() + 1000 * healingRaysDuration * xGetFloat(dPlayerData, xPlayerSpellDuration));");
code("trSoundPlayFN(\"skypassagein.wav\",\"1\",-1,\"\",\"\");");
code("xSetInt(dPlayerData, xPlayerNextDelay,");
code("xGetInt(dClass, xClassNextDelay, SUNBOW) * 2.0 / (1.0 + xGetInt(dPlayerData, xPlayerProjectiles)));");
code("}");

code("if ((trQuestVarGet(\"p\"+p+\"healingRays\") == 1) && (trTimeMS() > trQuestVarGet(\"p\"+p+\"healingRaysTimeout\"))) {");
code("trQuestVarSet(\"p\"+p+\"healingRays\", 0);");
code("trSoundPlayFN(\"godpowerfailed.wav\",\"1\",-1,\"\",\"\");");
code("xSetInt(dPlayerData, xPlayerNextDelay, xGetInt(dClass, xClassNextDelay, SUNBOW));");
code("}");

code("if (xGetBool(dPlayerData, xPlayerRainActivated)) {");
code("xSetBool(dPlayerData, xPlayerRainActivated, false);");
code("trQuestVarSet(\"p\"+p+\"searing\", 1 - trQuestVarGet(\"p\"+p+\"searing\"));");
code("if (trQuestVarGet(\"p\"+p+\"searing\") == 1) {");
code("if (trPlayerResourceCount(p, \"favor\") < 1) {");
code("if (trCurrentPlayer() == p) {");
code("trSoundPlayFN(\"cantdothat.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("trQuestVarSet(\"p\"+p+\"searing\", 0);");
code("} else {");
code("trQuestVarSet(\"p\"+p+\"searingNext\",");
code("trTimeMS() + searingDelay / xGetFloat(dPlayerData, xPlayerUltimateCost));");
code("trSoundPlayFN(\"forestfirebirth.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("} else {");
code("if (trCurrentPlayer() == p) {");
code("trSoundPlayFN(\"godpowerfailed.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"searing\") == 1) {");
code("target = kbGetProtoUnitID(\"Ball of Fire Impact\");");
code("} else {");
code("target = kbGetProtoUnitID(\"Rocket\");");
code("}");

code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("if ((xGetInt(db, xSearingSFX) == 0) ||");
code("(kbGetBlockID(\"\"+xGetInt(db, xSearingSFX)) == -1)) {");
code("xUnitSelectByID(db, xUnitID);");
code("spyEffect(xGetInt(db, xUnitName),target, xsVectorSet(db, xSearingSFX, xGetPointer(db)));");
code("} else {");
code("xUnitSelect(db, xSearingSFX);");
code("trMutateSelected(target);");
code("}");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"searing\") == 1) {");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"searingNext\")) {");
code("trQuestVarSet(\"p\"+p+\"searingNext\",");
code("trQuestVarGet(\"p\"+p+\"searingNext\") + searingDelay / xGetFloat(dPlayerData, xPlayerUltimateCost));");
code("gainFavor(p, 0 - 1);");
code("if (trPlayerResourceCount(p, \"favor\") < 1) {");
code("trQuestVarSet(\"p\"+p+\"searing\", 0);");
code("trSoundPlayFN(\"godpowerfailed.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("}");

code("if (xGetDatabaseCount(sunlights) > 0) {");
code("target = 0;");
code("xDatabaseNext(sunlights);");
code("if (trTimeMS() > xGetInt(sunlights, xSunlightNext)) {");
code("gainFavor(p, 1);");
code("xSetInt(sunlights, xSunlightNext, xGetInt(sunlights, xSunlightNext) + 500);");
code("pos = xGetVector(sunlights, xSunlightPos);");
code("amt = xGetFloat(sunlights, xSunlightDamage);");
code("dist = xGetFloat(sunlights, xSunlightRadius);");


code("for (x=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("xUnitSelectByID(dPlayerUnits, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (unitDistanceToVector(xGetInt(dPlayerUnits, xUnitName), pos) < dist) {");
code("healUnit(p, amt);");
code("}");
code("}");

code("amt = amt * xGetFloat(dPlayerData, xPlayerHealBoost);");
code("if (trQuestVarGet(\"p\"+p+\"searing\") == 1) {");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (unitDistanceToVector(dPlayerUnits, pos) < dist) {");
code("damageEnemy(p, amt);");
code("}");
code("}");
code("}");

code("if (trTimeMS() > xGetInt(sunlights, xSunlightTimeout)) {");
code("for(x=xGetInt(sunlights, xSunlightStart); < xGetInt(sunlights, xSunlightEnd)) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+x, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Rocket\"));");
code("trUnitDestroy();");
code("}");
code("xFreeDatabaseBlock(sunlights);");
code("}");
code("}");
code("}");

code("xSetPointer(dEnemies, index);");
code("poisonKillerBonus(p);");
code("}");

code("void chooseSunbow(int eventID = -1) {");
code("xsSetContextPlayer(0);");
code("int p = eventID - 1000 - 12 * SUNBOW;");
code("int db = getCharactersDB(p);");
code("resetCharacterCustomVars(p);");
code("xSetPointer(dPlayerData, p);");
code("if (trCurrentPlayer() == p) {");
code("map(\"q\", \"game\", \"uiSetSpecialPower(133) uiSpecialPowerAtPointer\");");
code("wellName = \"(Q) Sunlight\";");
code("wellIsUltimate = false;");
code("map(\"e\", \"game\", \"uiSetSpecialPower(156) uiSpecialPowerAtPointer\");");
code("rainName = \"(E) Searing Light\";");
code("rainIsUltimate = false;");
code("map(\"w\", \"game\", \"uiSetSpecialPower(227) uiSpecialPowerAtPointer\");");
code("lureName = \"(W) Healing Rays\";");
code("lureIsUltimate = false;");
code("}");
code("xSetInt(dPlayerData,xPlayerWellCooldown, sunlightCooldown);");
code("xSetFloat(dPlayerData,xPlayerWellCost,0);");
code("xSetInt(dPlayerData,xPlayerLureCooldown, healingRaysCooldown);");
code("xSetFloat(dPlayerData,xPlayerLureCost,0);");
code("xSetInt(dPlayerData,xPlayerRainCooldown,1);");
code("xSetFloat(dPlayerData,xPlayerRainCost, 0);");

code("xSearingSFX = xInitAddInt(db, \"searingSFX\");");

code("if (trQuestVarGet(\"p\"+p+\"sunlights\") == 0) {");
code("db = xInitDatabase(\"p\"+p+\"sunlights\");");
code("trQuestVarSet(\"p\"+p+\"sunlights\", db);");
code("xSunlightRadius = xInitAddFloat(db, \"radius\");");
code("xSunlightDamage = xInitAddFloat(db, \"damage\");");
code("xSunlightTimeout = xInitAddInt(db, \"timeout\");");
code("xSunlightStart = xInitAddInt(db, \"start\");");
code("xSunlightEnd = xInitAddInt(db, \"end\");");
code("xSunlightPos = xInitAddVector(db, \"pos\");");
code("xSunlightNext = xInitAddInt(db, \"next\");");
code("}");
code("}");

code("void modifySunbow(int eventID = -1) {");
code("xsSetContextPlayer(0);");
code("int p = eventID - 5000 - 12 * SUNBOW;");
code("if (trQuestVarGet(\"p\"+p+\"healingRays\") == 1) {");
code("xSetInt(dPlayerData, xPlayerNextDelay,");
code("xGetInt(dClass, xClassNextDelay, SUNBOW) * 2.0 / (1.0 + xGetInt(dPlayerData, xPlayerProjectiles)));");
code("}");
code("}");

code("rule sunbow_init");
code("active");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("for(p=1; < ENEMY_PLAYER) {");
code("trEventSetHandler(12 * SUNBOW + p, \"sunbowAlways\");");
code("trEventSetHandler(1000 + 12 * SUNBOW + p, \"chooseSunbow\");");
code("trEventSetHandler(5000 + 12 * SUNBOW + p, \"modifySunbow\");");
code("}");
code("}");
code("float rainOfLightningCost = 50;");
code("float rainOfLightningDuration = 10;");
code("float rainOfLightningRadius = 5;");

code("int disengageCooldown = 8;");
code("float disengageRadius = 4;");
code("float disengageRange = 12;");

code("int shockArrowCooldown = 10;");
code("float shockArrowRange = 30;");
code("float shockArrowDamage = 100;");

code("int xRainStormSFX = 0;");

code("int xSpearedIndex = 0;");
code("int xSpearedPrev = 0;");
code("int xSpearedDir = 0;");
code("int xSpearedDist = 0;");


code("int xShockArrowPrev = 0;");
code("int xShockArrowDest = 0;");
code("int xShockArrowDir = 0;");
code("int xShockArrowTimeout = 0;");
code("int xShockArrowDist = 0;");

code("void removeStormcutter(int p = 0) {");
code("removePlayerSpecific(p);");
code("}");

code("void stormcutterAlways(int eventID = -1) {");
code("xsSetContextPlayer(0);");
code("int p = eventID - 12 * STORMCUTTER;");
code("int id = 0;");
code("int hit = 0;");
code("int target = 0;");
code("int index = xGetPointer(dEnemies);");
code("int db = getCharactersDB(p);");
code("int spearedUnits = trQuestVarGet(\"p\"+p+\"spearedUnits\");");
code("int shockArrows = trQuestVarGet(\"p\"+p+\"shockArrows\");");
code("float amt = 0;");
code("float dist = 0;");
code("float current = 0;");
code("vector pos = vector(0,0,0);");
code("vector start = vector(0,0,0);");
code("vector end = vector(0,0,0);");
code("vector dir = vector(0,0,0);");
code("xSetPointer(dPlayerData, p);");
code("if (xGetDatabaseCount(db) > 0) {");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeStormcutter(p);");
code("} else {");
code("hit = CheckOnHit(p);");
code("if (hit == ON_HIT_NORMAL) {");
code("target = xGetInt(db, xCharAttackTarget);");
code("pos = kbGetBlockPosition(\"\"+xGetInt(db, xUnitName), true);");
code("end = kbGetBlockPosition(\"\"+trGetUnitScenarioNameNumber(target));");
code("dist = distanceBetweenVectors(pos, end, false);");
code("trQuestVarSet(\"p\"+p+\"stormbonus\", dist * 0.02);");
code("xSetFloat(dPlayerData, xPlayerAttack,");
code("xGetFloat(dPlayerData, xPlayerBaseAttack) * (1.0 + trQuestVarGet(\"p\"+p+\"stormbonus\")));");
code("zSetProtoUnitStat(\"Archer Atlantean Hero\", p, 31, xGetFloat(dPlayerData, xPlayerAttack));");
code("if (trQuestVarGet(\"p\"+p+\"rainOfLightning\") == 1) {");
code("trChatSetStatus(false);");
code("trDelayedRuleActivation(\"enable_chat\");");
code("trUnitSelectClear();");
code("trUnitSelectByID(target);");
code("trTechInvokeGodPower(0, \"bolt\", vector(0,0,0), vector(0,0,0));");
code("dist = xsPow(rainOfLightningRadius * xGetFloat(dPlayerData, xPlayerSpellRange), 2);");
code("amt = xGetFloat(dPlayerData, xPlayerAttack) * xGetFloat(dPlayerData, xPlayerSpellDamage);");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (unitDistanceToVector(xGetInt(dEnemies,xUnitName), end) < dist) {");
code("trUnitHighlight(0.2, false);");
code("damageEnemy(p, amt, false, 1.0);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");

code("if (xGetBool(dPlayerData, xPlayerWellActivated)) {");
code("xSetBool(dPlayerData, xPlayerWellActivated, false);");
code("end = xGetVector(dPlayerData, xPlayerWellPos);");
code("dist = disengageRadius * xGetFloat(dPlayerData, xPlayerSpellRange);");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (trCountUnitsInArea(\"\"+xGetInt(dEnemies, xUnitName),p,\"Archer Atlantean Hero\", dist) >0) {");
code("stunUnit(dEnemies, 2.0, p);");
code("gainFavor(p, 1.0);");
code("}");
code("}");
code("trSoundPlayFN(\"sphinxteleportout.wav\",\"1\",-1,\"\",\"\");");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeStormcutter(p);");
code("} else {");
code("pos = kbGetBlockPosition(\"\"+xGetInt(db, xUnitName), true);");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"\"+p+\",0\");");
code("trUnitChangeProtoUnit(\"Dust Large\");");
code("target = 1 + xsMin(disengageRange * xGetFloat(dPlayerData, xPlayerSpellRange),");
code("unitDistanceToVector(xGetInt(db, xUnitName), end)) / 2;");
code("dir = getUnitVector(pos, end);");
code("for(i=target; >0) {");
code("pos = xsVectorSet(xsVectorGetX(pos) + 2.0 * xsVectorGetX(dir), 0, xsVectorGetZ(pos) + 2.0 * xsVectorGetZ(dir));");
code("if (terrainIsType(vectorToGrid(pos), TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("break;");
code("}");
code("}");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\", \"Transport Ship Greek\", 1, xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("xUnitSelectByID(db, xUnitID);");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"next\"));");
code("trMutateSelected(kbGetProtoUnitID(\"Siege Tower\"));");
code("trUnitChangeProtoUnit(\"Archer Atlantean Hero\");");
code("xUnitSelectByID(db, xUnitID);");
code("trSetUnitOrientation(dir, vector(0,1,0), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Archer Atlantean Hero\"));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitChangeProtoUnit(\"Lightning Sparks\");");
code("}");
code("}");
code("equipRelicsAgain(p);");
code("}");

code("if (xGetDatabaseCount(spearedUnits) > 0) {");
code("xDatabaseNext(spearedUnits);");
code("bool launched = false;");
code("if (PvP) {");
code("hit = xGetInt(dEnemies, xDoppelganger, xGetInt(spearedUnits, xSpearedIndex));");
code("launched = xGetBool(dPlayerUnits, xLaunched, hit);");
code("} else {");
code("launched = xGetBool(dEnemies, xLaunched, xGetInt(spearedUnits, xSpearedIndex));");
code("}");
code("if (launched == false) {");
code("if (xGetInt(dEnemies, xStunStatus, xGetInt(spearedUnits, xSpearedIndex)) > 0) {");
code("if (xSetPointer(dEnemies, xGetInt(spearedUnits, xSpearedIndex))) {");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("damageEnemy(p,");
code("shockArrowDamage * xGetFloat(dPlayerData, xPlayerSpellDamage) * (1.0 + 0.02 * xGetFloat(spearedUnits, xSpearedDist)));");
code("}");
code("}");
code("xFreeDatabaseBlock(spearedUnits);");
code("} else {");
code("pos = xGetVector(spearedUnits, xSpearedPrev);");
code("end = kbGetBlockPosition(\"\"+xGetInt(spearedUnits, xUnitName));");

code("dist = distanceBetweenVectors(pos, end, false);");
code("if (dist > 2.0) {");
code("xSetFloat(spearedUnits, xSpearedDist, xGetFloat(spearedUnits, xSpearedDist) + dist);");
code("dir = xGetVector(spearedUnits, xSpearedDir);");
code("dir = dir + dir;");
code("for(x=dist / 2; >0) {");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Lightning Sparks\");");
code("pos = pos + dir;");
code("}");
code("xSetVector(spearedUnits, xSpearedPrev, end);");
code("}");
code("}");
code("}");

code("if (xGetDatabaseCount(shockArrows) > 0) {");
code("xDatabaseNext(shockArrows);");
code("start = xGetVector(shockArrows, xShockArrowPrev);");
code("pos = kbGetBlockPosition(\"\"+xGetInt(shockArrows, xUnitName), true);");
code("dist = distanceBetweenVectors(start, pos, false);");
code("dir = xGetVector(shockArrows, xShockArrowDir);");
code("end = xGetVector(shockArrows, xShockArrowDest);");
code("hit = 0;");
code("if (dist > 2.0) {");
code("xSetFloat(shockArrows, xShockArrowDist, xGetFloat(shockArrows, xShockArrowDist) + dist);");
code("if (xGetInt(shockArrows, xShockArrowTimeout) == -1) {");
code("xSetInt(shockArrows, xShockArrowTimeout, trTimeMS() + 1000 * xGetFloat(dPlayerData, xPlayerSpellRange));");
code("}");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (rayCollision(dEnemies, start, dir, dist + 1.0, 2.0)) {");
code("hit = 1;");
code("gainFavor(p, 5.0);");
code("trQuestVarSetFromRand(\"sound\", 1, 2, true);");
code("if (trUnitVisToPlayer()) {");
code("trSoundPlayFN(\"titanpunch\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("}");
code("damageEnemy(p,");
code("shockArrowDamage * xGetFloat(dPlayerData, xPlayerSpellDamage) * (1.0 + 0.02 * xGetFloat(shockArrows, xShockArrowDist)));");
code("if (trUnitAlive()) {");
code("xAddDatabaseBlock(spearedUnits, true);");
code("xSetInt(spearedUnits, xUnitName, xGetInt(dEnemies, xUnitName));");
code("xSetInt(spearedUnits, xSpearedIndex, xGetPointer(dEnemies));");
code("xSetVector(spearedUnits, xSpearedPrev, start);");
code("xSetVector(spearedUnits, xSpearedDir, dir);");
code("xSetFloat(spearedUnits, xSpearedDist, xGetFloat(shockArrows, xShockArrowDist));");
code("launchUnit(dEnemies, end);");
code("}");

code("break;");
code("}");
code("}");
code("dir = dir + dir;");
code("for (x=dist/2; >0) {");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(start),0,xsVectorGetZ(start),0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Lightning Sparks\");");
code("start = start + dir;");
code("}");
code("xSetVector(shockArrows, xShockArrowPrev, pos);");
code("if (terrainIsType(vectorToGrid(pos), TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("hit = 2;");
code("}");
code("} else if ((trTimeMS() > xGetInt(shockArrows, xShockArrowTimeout)) && (xGetInt(shockArrows, xShockArrowTimeout) > 0)) {");
code("hit = 1;");
code("} else if (distanceBetweenVectors(pos, end) < 1.0) {");
code("hit = 1;");
code("}");

code("if (hit >= 1) {");
code("xUnitSelect(shockArrows, xUnitName);");
code("trUnitChangeProtoUnit(\"Dust Small\");");
code("xFreeDatabaseBlock(shockArrows);");
code("if (hit == 2) {");
code("trQuestVarSetFromRand(\"sound\", 1, 3, true);");
code("trSoundPlayFN(\"mine\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("}");

code("if (xGetBool(dPlayerData, xPlayerLureActivated)) {");
code("xSetBool(dPlayerData, xPlayerLureActivated, false);");
code("trSoundPlayFN(\"ui\thunder2.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"ui\lightning4.wav\",\"1\",-1,\"\",\"\");");
code("end = kbGetBlockPosition(\"\"+1*trQuestVarGet(\"p\"+p+\"lureObject\"));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"lureObject\");");
code("trUnitDestroy();");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeStormcutter(p);");
code("} else {");
code("start = kbGetBlockPosition(\"\"+xGetInt(db, xUnitName), true);");
code("dir = getUnitVector(start, end);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,xsVectorGetX(start),0,xsVectorGetZ(start),0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\");");
code("trMutateSelected(kbGetProtoUnitID(\"Ballista Shot\"));");
code("trSetUnitOrientation(dir,vector(0,1,0),true);");
code("pos = vectorSetAsTargetVector(start,end,30.0 * xGetFloat(dPlayerData, xPlayerSpellRange));");
code("trUnitMoveToPoint(xsVectorGetX(pos),0,xsVectorGetZ(pos));");
code("xAddDatabaseBlock(shockArrows, true);");
code("xSetInt(shockArrows, xUnitName, 1*trQuestVarGet(\"next\"));");
code("xSetVector(shockArrows, xShockArrowPrev, start);");
code("xSetVector(shockArrows, xShockArrowDest, pos);");
code("xSetVector(shockArrows, xShockArrowDir, dir);");
code("}");
code("}");
code("}");

code("if ((trQuestVarGet(\"p\"+p+\"rainOfLightning\") == 2) && (trQuestVarGet(\"spyfind\") == trQuestVarGet(\"spyfound\"))) {");
code("trQuestVarSet(\"p\"+p+\"rainOfLightning\", 1);");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xUnitSelectByID(db, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeStormcutter(p);");
code("} else {");
code("xUnitSelect(db, xRainStormSFX);");
code("trMutateSelected(kbGetProtoUnitID(\"Arkantos God\"));");
code("trSetSelectedScale(0,0,0);");
code("}");
code("}");
code("}");

code("if (xGetBool(dPlayerData, xPlayerRainActivated)) {");
code("xSetBool(dPlayerData, xPlayerRainActivated, false);");
code("gainFavor(p, 0.0 - rainOfLightningCost * xGetFloat(dPlayerData, xPlayerUltimateCost));");
code("trSoundPlayFN(\"lightningbirth.wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSet(\"p\"+p+\"rainOfLightning\", 2);");
code("trQuestVarSet(\"p\"+p+\"rainOfLightningTimeout\",");
code("trTimeMS() + 1000 * rainOfLightningDuration * xGetFloat(dPlayerData, xPlayerSpellDuration));");
code("xSetInt(dPlayerData, xPlayerNextDelay,");
code("xGetInt(dClass, xClassNextDelay, STORMCUTTER) * 2.0 / (1.0 + xGetInt(dPlayerData, xPlayerProjectiles)));");
code("zSetProtoUnitStat(\"Archer Atlantean Hero\", p, 13, 1);");
code("trQuestVarSet(\"p\"+p+\"arrowNext\", trGetNextUnitScenarioNameNumber() - 1);");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xUnitSelectByID(db, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeStormcutter(p);");
code("} else if (kbGetBlockID(\"\"+xGetInt(db, xRainStormSFX)) == -1) {");
code("spyEffect(xGetInt(db, xUnitName),kbGetProtoUnitID(\"Cinematic Block\"),xsVectorSet(db, xRainStormSFX, xGetPointer(db)));");
code("}");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"rainOfLightning\") == 1) {");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"rainOfLightningTimeout\")) {");
code("trQuestVarSet(\"p\"+p+\"rainOfLightning\", 0);");
code("xSetInt(dPlayerData, xPlayerNextDelay, xGetInt(dClass, xClassNextDelay, STORMCUTTER));");
code("zSetProtoUnitStat(\"Archer Atlantean Hero\", p, 13, xGetInt(dPlayerData, xPlayerProjectiles));");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeStormcutter(p);");
code("} else {");
code("xUnitSelect(db, xRainStormSFX);");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");
code("}");
code("}");
code("}");
code("id = yFindLatest(\"p\"+p+\"arrowNext\", \"Arrow Flaming\", p);");
code("if (id > 0) {");
code("trUnitDestroy();");
code("}");
code("}");

code("xSetPointer(dEnemies, index);");
code("poisonKillerBonus(p);");
code("}");

code("void chooseStormcutter(int eventID = -1) {");
code("xsSetContextPlayer(0);");
code("int p = eventID - 1000 - 12 * STORMCUTTER;");
code("int db = getCharactersDB(p);");
code("resetCharacterCustomVars(p);");
code("xSetPointer(dPlayerData, p);");
code("if (trCurrentPlayer() == p) {");
code("map(\"w\", \"game\", \"uiSetSpecialPower(133) uiSpecialPowerAtPointer\");");
code("wellName = \"(W) Disengage\";");
code("wellIsUltimate = false;");
code("map(\"e\", \"game\", \"uiSetSpecialPower(156) uiSpecialPowerAtPointer\");");
code("rainName = \"(E) Rain of Lightning\";");
code("rainIsUltimate = true;");
code("map(\"q\", \"game\", \"uiSetSpecialPower(227) uiSpecialPowerAtPointer\");");
code("lureName = \"(Q) Shock Arrow\";");
code("lureIsUltimate = false;");
code("}");
code("xRainStormSFX = xInitAddInt(db, \"rainSFX\");");

code("xSetInt(dPlayerData,xPlayerWellCooldown, disengageCooldown);");
code("xSetFloat(dPlayerData,xPlayerWellCost,0);");
code("xSetInt(dPlayerData,xPlayerLureCooldown, shockArrowCooldown);");
code("xSetFloat(dPlayerData,xPlayerLureCost,0);");
code("xSetInt(dPlayerData,xPlayerRainCooldown,1);");
code("xSetFloat(dPlayerData,xPlayerRainCost, rainOfLightningCost);");

code("if (trQuestVarGet(\"p\"+p+\"spearedUnits\") == 0) {");
code("db = xInitDatabase(\"p\"+p+\"spearedUnits\");");
code("trQuestVarSet(\"p\"+p+\"spearedUnits\", db);");
code("xInitAddInt(db, \"name\");");
code("xSpearedIndex = xInitAddInt(db, \"index\");");
code("xSpearedPrev = xInitAddVector(db, \"prev\");");
code("xSpearedDir = xInitAddVector(db, \"dir\");");
code("xSpearedDist = xInitAddFloat(db, \"dist\");");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"shockArrows\") == 0) {");
code("db = xInitDatabase(\"p\"+p+\"shockArrows\");");
code("trQuestVarSet(\"p\"+p+\"shockArrows\", db);");
code("xInitAddInt(db, \"name\");");
code("xShockArrowPrev = xInitAddVector(db, \"prev\");");
code("xShockArrowDest = xInitAddVector(db, \"dest\");");
code("xShockArrowDir = xInitAddVector(db, \"dir\");");
code("xShockArrowTimeout = xInitAddInt(db, \"timeout\", -1);");
code("xShockArrowDist = xInitAddFloat(db, \"dist\");");
code("}");
code("}");

code("void modifyStormcutter(int eventID = -1) {");
code("xsSetContextPlayer(0);");
code("int p = eventID - 5000 - 12 * STORMCUTTER;");
code("if (trQuestVarGet(\"p\"+p+\"rainOfLightning\") == 1) {");
code("zSetProtoUnitStat(\"Archer Atlantean Hero\", p, 13, 1);");
code("xSetInt(dPlayerData, xPlayerNextDelay,");
code("xGetInt(dClass, xClassNextDelay, STORMCUTTER) * 2.0 / (1.0 + xGetInt(dPlayerData, xPlayerProjectiles)));");
code("}");
code("}");

code("rule stormcutter_init");
code("active");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("for(p=1; < ENEMY_PLAYER) {");
code("trEventSetHandler(12 * STORMCUTTER + p, \"stormcutterAlways\");");
code("trEventSetHandler(1000 + 12 * STORMCUTTER + p, \"chooseStormcutter\");");
code("trEventSetHandler(5000 + 12 * STORMCUTTER + p, \"modifyStormcutter\");");
code("}");
code("}");
code("const int POTION_STUN = 0;");
code("const int POTION_POISON = 1;");
code("const int POTION_HEAL = 2;");

code("int xPotionTimeout = 0;");
code("int xPotionPos = 0;");
code("int xPotionType = 0;");

code("int xDuplicateIndex = 0;");
code("int xDuplicateDecay = 0;");
code("int xDuplicateDecayNext = 0;");

code("int xNextPotion = 0;");


code("float potionHeal = 5;");

code("int elixirCooldown = 12;");
code("float elixirHeal = 200;");

code("float duplicateCost = 50;");

code("void removeAlchemist(int p = 0) {");
code("removePlayerSpecific(p);");
code("}");

code("void alchemistAlways(int eventID = -1) {");
code("xsSetContextPlayer(0);");
code("int p = eventID - 12 * ALCHEMIST;");
code("int id = 0;");
code("int hit = 0;");
code("int target = 0;");
code("int db = getCharactersDB(p);");
code("int index = xGetPointer(dEnemies);");
code("int potions = trQuestVarGet(\"p\"+p+\"potions\");");
code("int duplicates = trQuestVarGet(\"p\"+p+\"duplicates\");");
code("float amt = 0;");
code("float dist = 0;");
code("float current = 0;");
code("vector pos = vector(0,0,0);");
code("vector end = vector(0,0,0);");
code("xSetPointer(dPlayerData, p);");
code("if (xGetDatabaseCount(db) > 0) {");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeAlchemist(p);");
code("} else {");
code("hit = CheckOnHit(p);");
code("if (hit == ON_HIT_NORMAL) {");
code("target = xGetInt(db, xCharAttackTarget);");
code("xSetInt(db, xNextPotion, 1 + xGetInt(db, xNextPotion));");
code("if (xGetInt(db, xNextPotion) == 3) {");
code("gainFavor(p, xGetInt(dPlayerData, xPlayerProjectiles));");
code("xSetInt(db, xNextPotion, 0);");
code("if (trQuestVarGet(\"p\"+p+\"potion\") == POTION_HEAL) {");
code("amt = potionHeal * xGetFloat(dPlayerData, xPlayerSpellDamage) * xGetFloat(dPlayerData, xPlayerHealBoost);");
code("amt = amt * xGetInt(dPlayerData, xPlayerProjectiles);");
code("for(x=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("xUnitSelectByID(dPlayerUnits, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (xGetInt(dPlayerUnits, xPoisonStatus) == 0) {");
code("trDamageUnitPercent(0.0 - amt);");
code("}");
code("}");
code("} else {");
code("xAddDatabaseBlock(potions, true);");
code("xSetInt(potions, xUnitName, trGetUnitScenarioNameNumber(target));");
code("xSetInt(potions, xPotionType, 1*trQuestVarGet(\"p\"+p+\"potion\"));");
code("pos = kbGetBlockPosition(\"\"+xGetInt(db, xUnitName), true);");
code("end = kbGetBlockPosition(\"\"+xGetInt(potions, xUnitName), true);");
code("xSetInt(potions, xPotionTimeout, trTimeMS() + 33 * distanceBetweenVectors(pos, end, false));");
code("xSetVector(potions, xPotionPos, end);");
code("}");
code("}");

code("}");
code("}");
code("}");

code("if (xGetDatabaseCount(potions) >0) {");
code("xDatabaseNext(potions);");
code("if (trTimeMS() > xGetInt(potions, xPotionTimeout)) {");
code("pos = xGetVector(potions, xPotionPos);");
code("switch(xGetInt(potions, xPotionType))");
code("{");
code("case POTION_STUN:");
code("{");
code("hit = xGetInt(dPlayerData, xPlayerProjectiles) - 1;");
code("for (x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (xGetInt(dEnemies, xUnitName) == xGetInt(potions, xUnitName)) {");
code("stunUnit(dEnemies, 2.0, p);");
code("break;");
code("}");
code("}");
code("if (hit > 0) {");
code("for (x=xGetDatabaseCount(dEnemies) - 1; >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (unitDistanceToVector(xGetInt(dEnemies, xUnitName), pos) < 25.0) {");
code("stunUnit(dEnemies, 2.0, p);");
code("hit = hit - 1;");
code("if (hit == 0) {");
code("break;");
code("}");
code("}");
code("}");
code("}");
code("}");
code("case POTION_POISON:");
code("{");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Lampades Blood\");");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (unitDistanceToVector(xGetInt(dEnemies, xUnitName), pos) < 25.0) {");
code("poisonUnit(dEnemies, 12.0,12.0 * xGetInt(dPlayerData, xPlayerProjectiles), p);");
code("}");
code("}");
code("}");
code("}");
code("xFreeDatabaseBlock(potions);");
code("}");
code("}");

code("for(y=xGetInt(dPlayerData, xPlayerProjectiles); >0) {");
code("if (yFindLatest(\"p\"+p+\"latestProj\", \"Priest Projectile\", p) > 0) {");
code("for (x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("id = xGetInt(db, xUnitID);");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("if (trUnitAlive() == false) {");
code("removeAlchemist(p);");
code("} else if (kbUnitGetAnimationActionType(id) == 12) {");
code("if (xGetInt(db, xNextPotion) == 2) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"latestProj\", true);");
code("switch(1*trQuestVarGet(\"p\"+p+\"potion\"))");
code("{");
code("case POTION_STUN:");
code("{");
code("trMutateSelected(kbGetProtoUnitID(\"Lampades Bolt\"));");
code("}");
code("case POTION_POISON:");
code("{");
code("trMutateSelected(kbGetProtoUnitID(\"Poison SFX\"));");
code("}");
code("case POTION_HEAL:");
code("{");
code("trMutateSelected(kbGetProtoUnitID(\"Curse SFX\"));");
code("}");
code("}");
code("}");
code("break;");
code("}");
code("}");
code("} else {");
code("break;");
code("}");
code("}");


code("if (xGetBool(dPlayerData, xPlayerWellActivated)) {");
code("xSetBool(dPlayerData, xPlayerWellActivated, false);");
code("pos = xGetVector(dPlayerData, xPlayerWellPos);");
code("dist = 100;");
code("hit = -1;");
code("for(x=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("xUnitSelectByID(dPlayerUnits, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else {");
code("amt = unitDistanceToVector(xGetInt(dPlayerUnits, xUnitName), pos);");
code("if (amt < dist) {");
code("dist = amt;");
code("hit = xGetPointer(dPlayerUnits);");
code("}");
code("}");
code("}");
code("if (hit > 0) {");
code("xSetPointer(dPlayerUnits, hit);");
code("xSetInt(dPlayerUnits, xPoisonTimeout, 0);");
code("xSetInt(dPlayerUnits, xStunTimeout, 0);");
code("xSetInt(dPlayerUnits, xSilenceTimeout, 0);");
code("trSoundPlayFN(\"recreation.wav\",\"1\",-1,\"\",\"\");");
code("xUnitSelectByID(dPlayerUnits, xUnitID);");
code("healUnit(p, elixirHeal * xGetFloat(dPlayerData, xPlayerSpellDamage));");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dPlayerUnits, xUnitName), true);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"1,0\");");
code("if (Multiplayer) {");
code("trUnitChangeProtoUnit(\"Recreation\");");
code("} else {");
code("trUnitChangeProtoUnit(\"Hero Birth\");");
code("}");
code("} else {");
code("if (trCurrentPlayer() == p) {");
code("trCounterAbort(\"well\");");
code("trSoundPlayFN(\"cantdothat.wav\",\"1\",-1,\"\",\"\");");
code("trChatSend(0, \"You must target an ally!\");");
code("}");
code("xSetInt(dPlayerData, xPlayerWellCooldownStatus, ABILITY_COST);");
code("}");
code("}");

code("if (xGetBool(dPlayerData, xPlayerLureActivated)) {");
code("xSetBool(dPlayerData, xPlayerLureActivated, false);");
code("pos = xGetVector(dPlayerData, xPlayerLurePos);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"lureObject\", true);");
code("trUnitDestroy();");
code("dist = 81;");
code("hit = -1;");
code("for(x=xGetDatabaseCount(dPlayerCharacters); >0) {");
code("xDatabaseNext(dPlayerCharacters);");
code("xUnitSelectByID(dPlayerCharacters, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerCharacter();");
code("} else {");
code("amt = unitDistanceToVector(xGetInt(dPlayerCharacters, xUnitName), pos);");
code("if (amt < dist) {");
code("dist = amt;");
code("hit = xGetPointer(dPlayerCharacters);");
code("}");
code("}");
code("}");
code("if (hit > 0) {");
code("gainFavor(p, 0.0 - duplicateCost * xGetFloat(dPlayerData, xPlayerUltimateCost));");
code("xSetPointer(dPlayerCharacters, hit);");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dPlayerCharacters, xUnitName));");
code("xAddDatabaseBlock(duplicates, true);");
code("xSetInt(duplicates, xUnitName, trGetNextUnitScenarioNameNumber());");

code("xSetInt(duplicates, xDuplicateIndex, spawnPlayerClone(xGetInt(dPlayerCharacters, xPlayerOwner), pos));");
code("xSetFloat(duplicates, xDuplicateDecayNext, trTime());");
code("trSoundPlayFN(\"changeunit.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"sonofosirisbirth.wav\",\"1\",-1,\"\",\"\");");
code("if (trCurrentPlayer() == xGetInt(dPlayerCharacters, xPlayerOwner)) {");
code("trMessageSetText(trStringQuestVarGet(\"p\"+p+\"name\") + \" has summoned a copy of you!\");");
code("}");
code("} else if (trCurrentPlayer() == p) {");
code("trSoundPlayFN(\"cantdothat.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");


code("if (xGetBool(dPlayerData, xPlayerRainActivated)) {");
code("xSetBool(dPlayerData, xPlayerRainActivated, false);");
code("trQuestVarSet(\"p\"+p+\"potion\", 1 + trQuestVarGet(\"p\"+p+\"potion\"));");
code("if (trQuestVarGet(\"p\"+p+\"potion\") > 2) {");
code("trQuestVarSet(\"p\"+p+\"potion\", 0);");
code("}");
code("if (trCurrentPlayer() == p) {");
code("switch(1*trQuestVarGet(\"p\"+p+\"potion\"))");
code("{");
code("case POTION_POISON:");
code("{");
code("trSetCounterDisplay(\"Potion: POISON\");");
code("trSoundPlayFN(\"lampadesblood.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("case POTION_STUN:");
code("{");
code("trSetCounterDisplay(\"Potion: FREEZE\");");
code("trSoundPlayFN(\"icestereo.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("case POTION_HEAL:");
code("{");
code("trSetCounterDisplay(\"Potion: HEAL\");");
code("trSoundPlayFN(\"heal.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("}");
code("}");

code("if (xGetDatabaseCount(duplicates) > 0) {");
code("xDatabaseNext(duplicates);");
code("xUnitSelect(duplicates, xUnitName);");
code("if (trUnitAlive() == false) {");
code("xFreeDatabaseBlock(duplicates);");
code("} else if (trTime() > xGetInt(duplicates, xDuplicateDecayNext)) {");
code("xSetInt(duplicates, xDuplicateDecayNext, 1 + xGetInt(duplicates, xDuplicateDecayNext));");
code("xSetFloat(duplicates, xDuplicateDecay, xGetFloat(duplicates, xDuplicateDecay) + calculateDecay(p, 1.0));");
code("trDamageUnitPercent(xGetFloat(duplicates, xDuplicateDecay));");
code("}");
code("}");

code("xSetPointer(dEnemies, index);");
code("poisonKillerBonus(p);");
code("}");

code("void chooseAlchemist(int eventID = -1) {");
code("xsSetContextPlayer(0);");
code("int p = eventID - 1000 - 12 * ALCHEMIST;");
code("int db = getCharactersDB(p);");
code("resetCharacterCustomVars(p);");
code("xSetPointer(dPlayerData, p);");
code("trQuestVarSet(\"p\"+p+\"latestProj\", trGetNextUnitScenarioNameNumber() - 1);");
code("if (trCurrentPlayer() == p) {");
code("map(\"q\", \"game\", \"uiSetSpecialPower(133) uiSpecialPowerAtPointer\");");
code("wellName = \"(Q) Elixir\";");
code("wellIsUltimate = false;");
code("map(\"w\", \"game\", \"uiSetSpecialPower(156) uiSpecialPowerAtPointer\");");
code("rainName = \"(W) Swap Potion\";");
code("rainIsUltimate = false;");
code("map(\"e\", \"game\", \"uiSetSpecialPower(227) uiSpecialPowerAtPointer\");");
code("lureName = \"(E) Duplicate\";");
code("lureIsUltimate = true;");
code("trSetCounterDisplay(\"Potion: FREEZE\");");
code("}");
code("trQuestVarSet(\"p\"+p+\"potion\", POTION_STUN);");

code("xNextPotion = xInitAddInt(db, \"nextPotion\");");

code("xSetInt(dPlayerData,xPlayerWellCooldown, elixirCooldown);");
code("xSetFloat(dPlayerData,xPlayerWellCost,0);");
code("xSetInt(dPlayerData,xPlayerLureCooldown, 0);");
code("xSetFloat(dPlayerData,xPlayerLureCost, duplicateCost);");
code("xSetInt(dPlayerData,xPlayerRainCooldown,1);");
code("xSetFloat(dPlayerData,xPlayerRainCost, 0);");

code("if (trQuestVarGet(\"p\"+p+\"potions\") == 0) {");
code("db = xInitDatabase(\"p\"+p+\"potions\");");
code("trQuestVarSet(\"p\"+p+\"potions\", db);");
code("xInitAddInt(db, \"name\");");
code("xPotionTimeout = xInitAddInt(db, \"timeout\");");
code("xPotionPos = xInitAddVector(db, \"pos\");");
code("xPotionType = xInitAddInt(db, \"type\");");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"duplicates\") == 0) {");
code("db = xInitDatabase(\"p\"+p+\"duplicates\");");
code("trQuestVarSet(\"p\"+p+\"duplicates\", db);");
code("xInitAddInt(db, \"name\");");
code("xDuplicateIndex = xInitAddInt(db, \"index\");");
code("xDuplicateDecay = xInitAddFloat(db, \"decay\");");
code("xDuplicateDecayNext = xInitAddInt(db, \"next\");");
code("}");
code("}");


code("rule alchemist_init");
code("active");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("for(p=1; < ENEMY_PLAYER) {");
code("trEventSetHandler(12 * ALCHEMIST + p, \"alchemistAlways\");");
code("trEventSetHandler(1000 + 12 * ALCHEMIST + p, \"chooseAlchemist\");");
code("}");
code("}");

code("float spellstealerPassiveRadius = 6;");

code("float bladeDanceCost = 10;");
code("float bladeDanceRadius = 15;");

code("float negationCloakDuration = 3;");
code("int negationCloakCooldown = 12;");

code("int spellbladesCooldown = 9;");
code("int spellbladesCount = 3;");

code("int xBladeDanceIndex = 0;");
code("int xBladeDanceStatus = 0;");

code("int xSpellbladePrev = 0;");
code("int xSpellbladeDir = 0;");
code("int xSpellbladeStatus = 0;");

code("int xCloakSFX = 0;");

code("void removeSpellstealer(int p = 0) {");
code("removePlayerSpecific(p);");
code("}");

code("void spellstealerAlways(int eventID = -1) {");
code("xsSetContextPlayer(0);");
code("int p = eventID - 12 * SPELLSTEALER;");
code("int id = 0;");
code("int hit = 0;");
code("int target = 0;");
code("int db = getCharactersDB(p);");
code("int bladeDanceTargets = trQuestVarGet(\"p\"+p+\"bladeDanceTargets\");");
code("int spellblades = trQuestVarGet(\"p\"+p+\"spellblades\");");
code("int index = xGetPointer(dEnemies);");
code("int stunned = 0;");
code("int poisoned = 0;");
code("int silenced = 0;");
code("float amt = 0;");
code("float dist = 0;");
code("float current = 0;");
code("xSetPointer(dPlayerData, p);");

code("vector pos = vector(0,0,0);");
code("vector end = vector(0,0,0);");
code("vector dir = vector(0,0,0);");

code("if (xGetDatabaseCount(db) > 0) {");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeSpellstealer(p);");
code("} else {");
code("hit = CheckOnHit(p);");
code("if (hit >= ON_HIT_NORMAL) {");
code("if (xSetPointer(dEnemies, xGetInt(db, xCharAttackTargetIndex))) {");
code("amt = 1;");
code("if (xGetInt(dEnemies, xStunStatus) > 0) {");
code("amt = amt * 2;");
code("}");
code("amt = amt * xsPow(2, xGetInt(dEnemies, xPoisonStatus) + xGetInt(dEnemies, xSilenceStatus)) - 1;");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("damageEnemy(p, amt * xGetFloat(dPlayerData, xPlayerAttack), false);");
code("if (hit == ON_HIT_SPECIAL) {");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dEnemies, xUnitName), true);");
code("dist = xsPow(spellstealerPassiveRadius * xGetFloat(dPlayerData, xPlayerSpellRange), 2);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Lampades Blood\");");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (unitDistanceToVector(xGetInt(dEnemies, xUnitName), pos) < dist) {");
code("poisonUnit(dEnemies, 12.0, 12.0, p);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");

code("if (xGetBool(dPlayerData, xPlayerLureActivated)) {");
code("xSetBool(dPlayerData, xPlayerLureActivated, false);");
code("pos = xGetVector(dPlayerData, xPlayerLurePos);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"lureObject\", true);");
code("trUnitDestroy();");
code("dist = xsPow(bladeDanceRadius * xGetFloat(dPlayerData, xPlayerSpellRange), 2);");
code("amt = dist;");
code("target = -1;");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeEnemy();");
code("} else {");
code("current = unitDistanceToVector(xGetInt(dEnemies, xUnitName), pos);");
code("if (current < dist) {");
code("xAddDatabaseBlock(bladeDanceTargets, true);");
code("xSetInt(bladeDanceTargets, xUnitName, xGetInt(dEnemies, xUnitName));");
code("xSetInt(bladeDanceTargets, xBladeDanceIndex, xGetPointer(dEnemies));");
code("if (current < amt) {");
code("amt = current;");
code("target = xGetNewestPointer(bladeDanceTargets);");
code("}");
code("}");
code("}");
code("}");
code("if (target > 0) {");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeSpellstealer(p);");
code("} else {");
code("trMutateSelected(kbGetProtoUnitID(\"Revealer to Player\"));");
code("}");
code("}");
code("xSetBool(dPlayerData, xPlayerLaunched, true);");

code("amt = bladeDanceCost * xGetFloat(dPlayerData, xPlayerUltimateCost);");

code("xSetPointer(bladeDanceTargets, target);");
code("xSetInt(bladeDanceTargets, xBladeDanceStatus, 1*trQuestVarGet(\"p\"+p+\"spellStealStatus\"));");
code("if (xSetPointer(dEnemies, xGetInt(bladeDanceTargets, xBladeDanceIndex))) {");
code("stunned = xGetInt(dEnemies, xStunStatus);");
code("poisoned = xGetInt(dEnemies, xPoisonStatus);");
code("silenced = xGetInt(dEnemies, xSilenceStatus);");
code("}");

code("for(x=xGetDatabaseCount(bladeDanceTargets); >0) {");
code("xDatabaseNext(bladeDanceTargets);");
code("if (target != xGetPointer(bladeDanceTargets)) {");
code("id = xGetInt(bladeDanceTargets, xBladeDanceIndex);");
code("hit = xGetInt(dEnemies, xStunStatus, id) * stunned;");
code("hit = hit + xGetInt(dEnemies, xPoisonStatus, id) * poisoned;");
code("hit = hit + xGetInt(dEnemies, xSilenceStatus, id) * silenced;");
code("if ((hit == 0) || (trPlayerResourceCount(p, \"favor\") < 2.0 * amt)) {");
code("xFreeDatabaseBlock(bladeDanceTargets);");
code("} else {");
code("xSetInt(bladeDanceTargets, xBladeDanceStatus, trQuestVarGet(\"p\"+p+\"spellStealStatus\"));");
code("}");
code("}");
code("}");
code("trQuestVarSet(\"p\"+p+\"spellstealStatus\", 0);");
code("trQuestVarSet(\"p\"+p+\"bladeDanceNext\", trTimeMS() - 1);");
code("xSetPointer(bladeDanceTargets, target);");

code("if (xGetDatabaseCount(bladeDanceTargets) > 1) {");
code("amt = amt * 2;");
code("}");
code("gainFavor(p, 0.0 - amt);");
code("} else {");
code("xClearDatabase(bladeDanceTargets);");
code("if (trCurrentPlayer() == p) {");
code("trSoundPlayFN(\"cantdothat.wav\",\"1\",-1,\"\",\"\");");
code("trChatSend(0, \"There are no enemies near your cursor!\");");
code("}");
code("}");
code("}");

code("if (xGetDatabaseCount(bladeDanceTargets) > 0) {");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"bladeDanceNext\")) {");
code("trQuestVarSet(\"p\"+p+\"bladeDanceNext\", trQuestVarGet(\"p\"+p+\"bladeDanceNext\") + 300);");
code("for(x=xGetDatabaseCount(bladeDanceTargets); >0) {");
code("xDatabaseNext(bladeDanceTargets);");
code("xUnitSelect(bladeDanceTargets, xUnitName);");
code("if (trUnitAlive() == false) {");
code("xFreeDatabaseBlock(bladeDanceTargets);");
code("} else if (xSetPointer(dEnemies, xGetInt(bladeDanceTargets, xBladeDanceIndex))) {");
code("trSoundPlayFN(\"shadeofhadesacknowledge2.wav\",\"1\",-1,\"\",\"\");");
code("hit = xGetInt(bladeDanceTargets, xBladeDanceStatus);");
code("amt = xGetFloat(dPlayerData, xPlayerAttack) * xGetFloat(dPlayerData, xPlayerSpellDamage);");
code("if (hit >= xsPow(2, STATUS_SILENCE)) {");
code("hit = hit - xsPow(2, STATUS_SILENCE);");
code("silenceUnit(dEnemies, 9.0, p);");
code("}");
code("if (hit >= xsPow(2, STATUS_POISON)) {");
code("hit = hit - xsPow(2, STATUS_POISON);");
code("poisonUnit(dEnemies, 12.0, 12.0, p);");
code("}");
code("if (hit >= xsPow(2, STATUS_STUN)) {");
code("hit = hit - xsPow(2, STATUS_STUN);");
code("stunUnit(dEnemies, 2.0, p);");
code("}");
code("if (xGetInt(dEnemies, xStunStatus) > 0) {");
code("amt = amt * 2;");
code("}");
code("amt = amt * xsPow(2, xGetInt(dEnemies, xPoisonStatus) + xGetInt(dEnemies, xSilenceStatus));");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dEnemies, xUnitName), true);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\", \"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("xUnitSelect(bladeDanceTargets, xUnitName);");
code("damageEnemy(p, amt, false, 1.0);");
code("OnHit(p, xGetInt(bladeDanceTargets, xBladeDanceIndex), false);");
code("xFreeDatabaseBlock(bladeDanceTargets);");
code("break;");
code("}");
code("}");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("if (xGetDatabaseCount(bladeDanceTargets) == 0) {");
code("trUnitChangeProtoUnit(\"Transport Ship Greek\");");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db, xUnitID);");
code("trMutateSelected(kbGetProtoUnitID(\"Dwarf\"));");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"next\"));");
code("trUnitChangeProtoUnit(\"Swordsman Hero\");");
code("xUnitSelectByID(db, xUnitID);");
code("trMutateSelected(kbGetProtoUnitID(\"Swordsman Hero\"));");
code("}");
code("xSetBool(dPlayerData, xPlayerLaunched, false);");
code("equipRelicsAgain(p);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitChangeProtoUnit(\"Kronny Birth SFX\");");
code("} else {");
code("trUnitChangeProtoUnit(\"Kronny Birth SFX\");");
code("}");
code("}");
code("}");

code("for(y=xsMin(2, xGetDatabaseCount(spellblades)); >0) {");
code("hit = 0;");
code("xDatabaseNext(spellblades);");
code("pos = xGetVector(spellblades, xSpellbladePrev);");
code("dir = xGetVector(spellblades, xSpellbladeDir);");
code("dist = unitDistanceToVector(xGetInt(spellblades, xUnitName), pos, false);");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies,xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (rayCollision(dEnemies, pos, dir, dist + 3.0, 9.0)) {");
code("trQuestVarSet(\"spellsound\", 2);");
code("amt = 0.5 * xGetFloat(dPlayerData, xPlayerAttack) * xGetFloat(dPlayerData, xPlayerSpellDamage);");
code("hit = xGetInt(spellblades, xSpellbladeStatus);");
code("if (hit >= xsPow(2, STATUS_SILENCE)) {");
code("hit = hit - xsPow(2, STATUS_SILENCE);");
code("silenceUnit(dEnemies, 9.0, p);");
code("}");
code("if (hit >= xsPow(2, STATUS_POISON)) {");
code("hit = hit - xsPow(2, STATUS_POISON);");
code("poisonUnit(dEnemies, 12.0, 12.0, p);");
code("}");
code("if (hit >= xsPow(2, STATUS_STUN)) {");
code("hit = hit - xsPow(2, STATUS_STUN);");
code("stunUnit(dEnemies, 2.0, p);");
code("}");
code("if (xGetInt(dEnemies, xStunStatus) > 0) {");
code("amt = amt * 2;");
code("}");
code("amt = amt * xsPow(2, xGetInt(dEnemies, xPoisonStatus) + xGetInt(dEnemies, xSilenceStatus));");
code("damageEnemy(p, amt, true);");
code("hit = 1;");
code("}");
code("}");
code("if (hit == 0) {");
code("pos = kbGetBlockPosition(\"\"+xGetInt(spellblades, xUnitName), true);");
code("if (terrainIsType(vectorToGrid(pos), TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("hit = 1;");
code("trQuestVarSet(\"spellsound\", 1);");
code("} else {");
code("xSetVector(spellblades, xSpellbladePrev, pos);");
code("}");
code("}");

code("if (hit == 1) {");
code("gainFavor(p, 1);");
code("xUnitSelect(spellblades, xUnitName);");
code("trUnitChangeProtoUnit(\"Lightning Sparks Ground\");");
code("xUnitSelect(spellblades, xUnitName);");
code("trDamageUnitPercent(-100);");
code("xFreeDatabaseBlock(spellblades);");
code("}");
code("}");

code("if (trQuestVarGet(\"spellsound\") == 1) {");
code("trQuestVarSetFromRand(\"sound\", 1, 3, true);");
code("trSoundPlayFN(\"mine\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("} else if (trQuestVarGet(\"spellsound\") == 2) {");
code("trQuestVarSetFromRand(\"sound\", 1,4,true);");
code("trSoundPlayFN(\"arrowonflesh\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("}");
code("trQuestVarSet(\"spellsound\", 0);");

code("if (xGetBool(dPlayerData, xPlayerWellActivated)) {");
code("xSetBool(dPlayerData, xPlayerWellActivated, false);");
code("trSoundPlayFN(\"manticorespecialattack.wav\",\"1\",-1,\"\",\"\");");
code("for(y=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeSpellstealer(p);");
code("} else {");
code("pos = kbGetBlockPosition(\"\"+xGetInt(db, xUnitName), true);");
code("hit = spellbladesCount + 2 * xGetInt(dPlayerData, xPlayerProjectiles);");
code("amt = angleBetweenVectors(pos, xGetVector(dPlayerData, xPlayerWellPos));");
code("amt = fModulo(6.283185, amt - 0.196349 * (hit - 1) * 0.5);");
code("for(x=hit; >0) {");
code("dir = xsVectorSet(xsSin(amt),0,xsCos(amt));");
code("end = pos + dir;");
code("end = vectorSetAsTargetVector(pos,end,300.0);");
code("amt = fModulo(6.283185, amt + 0.196349);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Stymph Bird Feather\"));");
code("trSetUnitOrientation(dir,vector(0,1,0),true);");
code("trUnitMoveToPoint(xsVectorGetX(end),0,xsVectorGetZ(end),-1,false);");
code("xAddDatabaseBlock(spellblades, true);");
code("xSetInt(spellblades, xUnitName, 1*trQuestVarGet(\"next\"));");
code("xSetVector(spellblades, xSpellbladePrev, pos);");
code("xSetVector(spellblades, xSpellbladeDir, dir);");
code("xSetInt(spellblades, xSpellbladeStatus, 1*trQuestVarGet(\"p\"+p+\"spellstealStatus\"));");
code("}");
code("}");
code("}");
code("trQuestVarSet(\"p\"+p+\"spellstealStatus\", 0);");
code("}");

code("if (xGetBool(dPlayerData, xPlayerRainActivated)) {");
code("xSetBool(dPlayerData, xPlayerRainActivated, false);");
code("trQuestVarSet(\"p\"+p+\"negationCloak\", 1);");
code("trQuestVarSet(\"p\"+p+\"negationCloakTimeout\",");
code("trTimeMS() + 1000 * negationCloakDuration * xGetFloat(dPlayerData, xPlayerSpellDuration));");
code("trSoundPlayFN(\"spybirth.wav\",\"1\",-1,\"\",\"\");");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"negationCloak\") == 1) {");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"negationCloakTimeout\")) {");
code("trSoundPlayFN(\"godpowerfailed.wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSet(\"p\"+p+\"negationCloak\", 0);");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeSpellstealer(p);");
code("} else {");
code("xUnitSelect(db, xCloakSFX);");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("}");
code("}");
code("} else if (trTime() > trQuestVarGet(\"p\"+p+\"negationCloakNext\")) {");
code("trQuestVarSet(\"p\"+p+\"negationCloakNext\", trTime());");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeSpellstealer(p);");
code("} else {");
code("if (kbGetBlockID(\"\"+xGetInt(db, xCloakSFX)) == -1) {");
code("spyEffect(xGetInt(db, xUnitName),kbGetProtoUnitID(\"Kronny Birth SFX\"), xsVectorSet(db, xCloakSFX, xGetPointer(db)));");
code("} else {");
code("xUnitSelect(db, xCloakSFX);");
code("trUnitChangeProtoUnit(\"Kronny Birth SFX\");");
code("}");
code("}");
code("}");
code("}");
code("}");

code("xSetPointer(dEnemies, index);");
code("poisonKillerBonus(p);");
code("}");

code("void chooseSpellstealer(int eventID = -1) {");
code("xsSetContextPlayer(0);");
code("int p = eventID - 1000 - 12 * SPELLSTEALER;");
code("int db = getCharactersDB(p);");
code("resetCharacterCustomVars(p);");
code("xSetPointer(dPlayerData, p);");
code("if (trCurrentPlayer() == p) {");
code("map(\"q\", \"game\", \"uiSetSpecialPower(133) uiSpecialPowerAtPointer\");");
code("wellName = \"(Q) Spellblades\";");
code("wellIsUltimate = false;");
code("map(\"w\", \"game\", \"uiSetSpecialPower(156) uiSpecialPowerAtPointer\");");
code("rainName = \"(W) Negation Cloak\";");
code("rainIsUltimate = false;");
code("map(\"e\", \"game\", \"uiSetSpecialPower(227) uiSpecialPowerAtPointer\");");
code("lureName = \"(E) Blade Dance\";");
code("lureIsUltimate = true;");
code("}");

code("xCloakSFX = xInitAddInt(db, \"cloakSFX\");");

code("xSetInt(dPlayerData,xPlayerWellCooldown, spellbladesCooldown);");
code("xSetFloat(dPlayerData,xPlayerWellCost,0);");
code("xSetInt(dPlayerData,xPlayerLureCooldown, 1);");
code("xSetFloat(dPlayerData,xPlayerLureCost, bladeDanceCost);");
code("xSetInt(dPlayerData,xPlayerRainCooldown,negationCloakCooldown);");
code("xSetFloat(dPlayerData,xPlayerRainCost, 0);");

code("if (trQuestVarGet(\"p\"+p+\"bladeDanceTargets\") == 0) {");
code("db = xInitDatabase(\"p\"+p+\"bladeDanceTargets\");");
code("trQuestVarSet(\"p\"+p+\"bladeDanceTargets\", db);");
code("xInitAddInt(db, \"name\");");
code("xBladeDanceIndex = xInitAddInt(db, \"index\");");
code("xBladeDanceStatus = xInitAddInt(db, \"status\");");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"spellblades\") == 0) {");
code("db = xInitDatabase(\"p\"+p+\"spellblades\");");
code("trQuestVarSet(\"p\"+p+\"spellblades\", db);");
code("xInitAddInt(db, \"name\");");
code("xSpellbladePrev = xInitAddVector(db, \"prev\");");
code("xSpellbladeDir = xInitAddVector(db, \"dir\");");
code("xSpellbladeStatus = xInitAddInt(db, \"status\");");
code("}");
code("}");


code("rule spellstealer_init");
code("active");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("for(p=1; < ENEMY_PLAYER) {");
code("trEventSetHandler(12 * SPELLSTEALER + p, \"spellstealerAlways\");");
code("trEventSetHandler(1000 + 12 * SPELLSTEALER + p, \"chooseSpellstealer\");");
code("}");
code("}");
code("int shrapnelCooldown = 10;");

code("int echoBombCooldown = 20;");
code("float echoBombDuration = 6;");
code("float echoBombRadius = 12;");

code("float minigunRange = 1.5;");

code("int xShotgunHitboxStartPos = 0;");
code("int xShotgunHitboxStartTime = 0;");
code("int xShotgunHitboxDamage = 0;");
code("int xShotgunHitboxAngle1 = 0;");
code("int xShotgunHitboxAngle2 = 0;");
code("int xShotgunHitboxDist = 0;");

code("int xPelletIncomingStartPos = 0;");
code("int xPelletIncomingStartTime = 0;");
code("int xPelletIncomingType = 0;");

code("int xShotgunPelletStartTime = 0;");
code("int xShotgunPelletStartPos = 0;");
code("int xShotgunPelletPrev = 0;");
code("int xShotgunPelletDir = 0;");
code("int xShotgunPelletType = 0;");
code("int xShotgunPelletDist = 0;");

code("int xShrapnelShotDir = 0;");
code("int xShrapnelShotPrev = 0;");
code("int xShrapnelShotTimeout = 0;");

code("int xEchoBombStartingHealth = 0;");
code("int xEchoBombCurrentHealth = 0;");
code("int xEchoBombSize = 0;");
code("int xEchoBombPos = 0;");
code("int xEchoBombIndex = 0;");
code("int xEchoBombTimeout = 0;");
code("int xEchoBombUnit = 0;");

code("void removeCommando(int p = 0) {");
code("removePlayerSpecific(p);");
code("}");

code("void minigunOff(int p = 0) {");
code("trQuestVarSet(\"p\"+p+\"minigun\", 0);");
code("xSetInt(dPlayerData, xPlayerFirstDelay, 1000);");
code("xSetInt(dPlayerData, xPlayerNextDelay, 2000);");
code("zSetProtoUnitStat(\"Javelin Cavalry Hero\", p, 11, xGetFloat(dPlayerData, xPlayerRange));");
code("if (trCurrentPlayer() == p) {");
code("trSetCounterDisplay(\"Minigun: OFF\");");
code("}");
code("}");

code("void shootShotgun(int p = 0, vector start = vector(0,0,0), vector dir = vector(0,0,0), int count = 3) {");
code("int shotgunHitboxes = trQuestVarGet(\"p\"+p+\"shotgunHitboxes\");");
code("int pelletsIncoming = trQuestVarGet(\"p\"+p+\"pelletsIncoming\");");
code("float amt = angleOfVector(dir);");
code("float dist = 0.5 * (3.0 + count) / 7.0;");
code("amt = fModulo(6.283185, amt - 0.5 * dist);");
code("dist = dist / (count - 1);");
code("xAddDatabaseBlock(shotgunHitboxes, true);");
code("xSetFloat(shotgunHitboxes, xShotgunHitboxDamage, 0.6 * xGetFloat(dPlayerData, xPlayerAttack) * count);");
code("xSetVector(shotgunHitboxes, xShotgunHitboxStartPos, start);");
code("xSetFloat(shotgunHitboxes, xShotgunHitboxAngle1, amt);");
code("for(x=count; >0) {");
code("dir = xsVectorSet(xsSin(amt),0,xsCos(amt));");
code("amt = fModulo(6.283185, amt + dist);");
code("addGenericProj(pelletsIncoming,start,dir);");
code("xSetInt(pelletsIncoming, xPelletIncomingType, 0);");
code("xSetVector(pelletsIncoming, xPelletIncomingStartPos, start);");
code("xSetInt(pelletsIncoming, xPelletIncomingStartTime, trTimeMS());");
code("}");
code("xSetFloat(shotgunHitboxes, xShotgunHitboxAngle2, amt);");
code("xSetInt(shotgunHitboxes, xShotgunHitboxStartTime, trTimeMS());");
code("}");

code("void commandoAlways(int eventID = -1) {");
code("xsSetContextPlayer(0);");
code("int p = eventID - 12 * COMMANDO;");
code("int id = 0;");
code("int hit = 0;");
code("int target = 0;");
code("int index = xGetPointer(dEnemies);");
code("int db = getCharactersDB(p);");
code("int shotgunHitboxes = trQuestVarGet(\"p\"+p+\"shotgunHitboxes\");");
code("int pelletsIncoming = trQuestVarGet(\"p\"+p+\"pelletsIncoming\");");
code("int pellets = trQuestVarGet(\"p\"+p+\"pellets\");");
code("int shrapnelShots = trQuestVarGet(\"p\"+p+\"shrapnelShots\");");
code("int harpies = trQuestVarGet(\"p\"+p+\"fireharpies\");");
code("int echoBombs = trQuestVarGet(\"p\"+p+\"echoBombs\");");
code("float amt = 0;");
code("float dist = 0;");
code("float current = 0;");
code("float angleDiff = 0;");
code("float curDiff = 0;");
code("float curDist = 0;");
code("float outer = 0;");
code("float inner = 0;");
code("xSetPointer(dPlayerData, p);");

code("vector start = vector(0,0,0);");
code("vector end = vector(0,0,0);");
code("vector prev = vector(0,0,0);");
code("vector dir = vector(0,0,0);");
code("vector pos = vector(0,0,0);");
code("vector left = vector(0,0,0);");
code("vector right = vector(0,0,0);");

code("if (yFindLatest(\"p\"+p+\"latestProj\", \"Javelin Flaming\", p) > 0) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"latestProj\", true);");
code("trUnitChangeProtoUnit(\"Rocket\");");
code("}");

code("for(y=xsMin(3 + xGetInt(dPlayerData, xPlayerProjectiles), xGetDatabaseCount(pellets)); >0) {");
code("xDatabaseNext(pellets);");
code("dir = xGetVector(pellets, xShotgunPelletDir);");
code("start = xGetVector(pellets, xShotgunPelletStartPos);");
code("dist = 0.03 * (trTimeMS() - xGetInt(pellets, xShotgunPelletStartTime));");
code("pos = xsVectorSet(xsVectorGetX(start) + dist * xsVectorGetX(dir), 0, xsVectorGetZ(start) + dist * xsVectorGetZ(dir));");

code("if (terrainIsType(vectorToGrid(pos), TERRAIN_WALL, TERRAIN_SUB_WALL) || dist > 30.0) {");
code("xUnitSelect(pellets, xUnitName);");
code("trUnitChangeProtoUnit(\"Dust Small\");");
code("xUnitSelect(pellets, xUnitName);");
code("trDamageUnitPercent(-100);");
code("if (dist < 30.0) {");
code("trQuestVarSet(\"minesound\", 1);");
code("}");
code("xFreeDatabaseBlock(pellets);");
code("} else if (xGetInt(pellets,xShotgunPelletType) == 1) {");
code("hit = 0;");
code("prev = xGetVector(pellets, xShotgunPelletPrev);");
code("current = dist - xGetFloat(pellets, xShotgunPelletDist);");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (rayCollision(dEnemies, prev, dir, current + 2.0, 4.0)) {");
code("hit = xGetPointer(dEnemies);");
code("damageEnemy(p, xGetFloat(dPlayerData, xPlayerAttack), false);");
code("}");
code("}");
code("if (hit > 0) {");
code("gainFavor(p, 0.0 - xGetInt(dPlayerData, xPlayerFavorFromAttacks));");
code("OnHit(p, hit, false);");
code("xUnitSelect(pellets, xUnitName);");
code("trUnitChangeProtoUnit(\"Lightning Sparks Ground\");");
code("xUnitSelect(pellets, xUnitName);");
code("trDamageUnitPercent(-100);");
code("xFreeDatabaseBlock(pellets);");
code("} else {");
code("xSetFloat(pellets, xShotgunPelletDist, dist);");
code("xSetVector(pellets, xShotgunPelletPrev, pos);");
code("}");
code("}");
code("}");

code("if (trQuestVarGet(\"minesound\") == 1) {");
code("trQuestVarSet(\"minesound\", 0);");
code("trQuestVarSetFromRand(\"sound\", 1, 3, true);");
code("trSoundPlayFN(\"mine\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("}");

code("for(x=xGetDatabaseCount(pelletsIncoming); >0) {");
code("if (processGenericProj(pelletsIncoming) == PROJ_BOUNCE) {");
code("trSetSelectedScale(0.3,0.3,-0.2);");
code("trUnitSetAnimationPath(\"3,0,0,0,0,0,0\");");
code("xAddDatabaseBlock(pellets, true);");
code("xSetInt(pellets, xUnitName, xGetInt(pelletsIncoming, xUnitName));");
code("xSetInt(pellets, xShotgunPelletType, xGetInt(pelletsIncoming, xPelletIncomingType));");
code("xSetVector(pellets, xShotgunPelletDir, xGetVector(pelletsIncoming, xProjDir));");
code("xSetVector(pellets, xShotgunPelletStartPos, xGetVector(pelletsIncoming, xPelletIncomingStartPos));");
code("xSetVector(pellets, xShotgunPelletPrev, xGetVector(pelletsIncoming, xPelletIncomingStartPos));");
code("xSetInt(pellets, xShotgunPelletStartTime, xGetInt(pelletsIncoming, xPelletIncomingStartTime));");
code("xFreeDatabaseBlock(pelletsIncoming);");
code("}");
code("}");

code("if (xGetDatabaseCount(shotgunHitboxes) > 0) {");
code("xDatabaseNext(shotgunHitboxes);");
code("start = xGetVector(shotgunHitboxes, xShotgunHitboxStartPos);");
code("amt = xGetFloat(shotgunHitboxes, xShotgunHitboxAngle1);");
code("left = xsVectorSet(xsSin(amt),0,xsCos(amt));");
code("amt = xGetFloat(shotgunHitboxes, xShotgunHitboxAngle2);");
code("right = xsVectorSet(xsSin(amt),0,xsCos(amt));");

code("angleDiff = dotProduct(left, right);");

code("dist = (trTimeMS() - xGetInt(shotgunHitboxes, xShotgunHitboxStartTime)) * 0.03;");
code("if (dist < 4.0) {");
code("left = xsVectorSet(0.0 - xsVectorGetX(right),0, 0.0 - xsVectorGetZ(right));");
code("angleDiff = -1;");
code("}");
code("curDist = dist;");
code("curDiff = 0;");
code("amt = xGetFloat(shotgunHitboxes, xShotgunHitboxDamage);");
code("outer = dist * dist;");
code("inner = xsPow(xGetFloat(shotgunHitboxes, xShotgunHitboxDist), 2);");
code("dist = xGetFloat(shotgunHitboxes, xShotgunHitboxDist);");
code("target = 0;");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeEnemy();");
code("} else {");
code("current = unitDistanceToVector(xGetInt(dEnemies, xUnitName), start);");
code("if (current < outer && current > inner) {");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dEnemies, xUnitName));");
code("dir = getUnitVector(start, pos);");
code("curDiff = dotProduct(dir, left);");
code("if (curDiff > angleDiff) {");
code("if (dotProduct(dir, right) > angleDiff) {");
code("current = xsSqrt(current);");
code("dist = xsMax(current, dist);");
code("damageEnemy(p, (30.0 - current) / 30.0 * amt, false);");
code("target = 1;");
code("gainFavor(p, 1);");
code("OnHit(p, xGetPointer(dEnemies), false);");
code("}");
code("}");
code("}");
code("}");
code("}");

code("if (trTimeMS() > xGetInt(shotgunHitboxes, xShotgunHitboxStartTime) + 1000) {");
code("xFreeDatabaseBlock(shotgunHitboxes);");
code("} else if (target == 1) {");
code("xSetFloat(shotgunHitboxes, xShotgunHitboxDist, 0.5 * (curDist + dist));");
code("trQuestVarSetFromRand(\"sound\", 1,4,true);");
code("trSoundPlayFN(\"arrowonflesh\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("} else if (curDist > xGetFloat(shotgunHitboxes, xShotgunHitboxDist) + 2.0) {");
code("xSetFloat(shotgunHitboxes, xShotgunHitboxDist, curDist);");
code("}");
code("}");

code("if (xGetDatabaseCount(db) > 0) {");
code("xDatabaseNext(db);");
code("xUnitSelect(db, xUnitName);");
code("if (trUnitAlive() == false) {");
code("removeCommando(p);");
code("} else {");
code("hit = CheckOnHit(p,false);");
code("start = kbGetBlockPosition(\"\"+xGetInt(db, xUnitName));");
code("if (hit == ON_HIT_NORMAL) {");
code("if (xSetPointer(dEnemies, xGetInt(db, xCharAttackTargetIndex))) {");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dEnemies, xUnitName), true);");
code("dir = getUnitVector(start, pos);");
code("trSoundPlayFN(\"titanfall.wav\",\"1\",-1,\"\",\"\");");
code("if (trQuestVarGet(\"p\"+p+\"minigun\") == 1) {");
code("gainFavor(p, 0.0 - xGetFloat(dPlayerData, xPlayerUltimateCost));");
code("if (trPlayerResourceCount(p, \"favor\") == 0) {");
code("minigunOff(p);");
code("}");
code("addGenericProj(pelletsIncoming,start,dir);");
code("xSetInt(pelletsIncoming, xPelletIncomingType, 1);");
code("xSetInt(pelletsIncoming, xPelletIncomingStartTime, trTimeMS());");
code("xSetVector(pelletsIncoming, xPelletIncomingStartPos, start);");
code("} else {");
code("trSoundPlayFN(\"implode start.wav\",\"1\",-1,\"\",\"\");");
code("shootShotgun(p, start, dir, 3 + xGetInt(dPlayerData, xPlayerProjectiles));");
code("}");
code("}");
code("}");
code("}");
code("}");


code("if (xGetDatabaseCount(shrapnelShots) > 0) {");
code("hit = 0;");
code("xDatabaseNext(shrapnelShots);");
code("prev = xGetVector(shrapnelShots, xShrapnelShotPrev);");
code("dir = xGetVector(shrapnelShots, xShrapnelShotDir);");

code("pos = kbGetBlockPosition(\"\"+xGetInt(shrapnelShots, xUnitName));");
code("if (terrainIsType(vectorToGrid(pos), TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("hit = 1;");
code("dir = getBounceDir(pos, vectorToGrid(pos), dir);");
code("} else {");
code("xSetVector(shrapnelShots, xShrapnelShotPrev, pos);");
code("}");


code("if (hit == 1) {");
code("xUnitSelect(shrapnelShots, xUnitName);");
code("trDamageUnitPercent(100);");
code("trUnitChangeProtoUnit(\"Meteorite\");");
code("xFreeDatabaseBlock(shrapnelShots);");
code("shootShotgun(p, prev, dir, 6 + 2 * xGetInt(dPlayerData, xPlayerProjectiles));");
code("trSoundPlayFN(\"shockwave.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");

code("if (xGetBool(dPlayerData, xPlayerWellActivated)) {");
code("xSetBool(dPlayerData, xPlayerWellActivated, false);");
code("trSoundPlayFN(\"catapultattack.wav\",\"1\",-1,\"\",\"\");");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("if (trUnitAlive() == false) {");
code("removeCommando(p);");
code("} else {");
code("start = kbGetBlockPosition(\"\"+xGetInt(db, xUnitName), true);");
code("dir = getUnitVector(start, xGetVector(dPlayerData, xPlayerWellPos));");
code("end = vectorSetAsTargetVector(start, xGetVector(dPlayerData, xPlayerWellPos), 300.0);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,xsVectorGetX(start),0,xsVectorGetZ(start),0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Ball of Fire\"));");
code("trUnitOverrideAnimation(18,0,true,false,-1);");
code("trSetSelectedScale(0.5,0.5,0.5);");
code("trUnitMoveToPoint(xsVectorGetX(end),0,xsVectorGetZ(end),-1, false);");
code("xAddDatabaseBlock(shrapnelShots, true);");
code("xSetInt(shrapnelShots, xUnitName, 1*trQuestVarGet(\"next\"));");
code("xSetVector(shrapnelShots, xShrapnelShotDir, dir);");
code("xSetVector(shrapnelShots, xShrapnelShotPrev, start);");
code("xSetInt(shrapnelShots, xShrapnelShotTimeout, trTimeMS() + 3000);");
code("}");
code("}");
code("}");

code("if (xGetDatabaseCount(harpies) > 0) {");
code("for (x=xGetDatabaseCount(harpies); >0) {");
code("xDatabaseNext(harpies);");
code("xUnitSelect(harpies, xUnitName);");
code("trMutateSelected(kbGetProtoUnitID(\"Harpy\"));");
code("trUnitOverrideAnimation(1,0,false,false,-1);");
code("}");
code("xClearDatabase(harpies);");
code("}");

code("if (xGetDatabaseCount(echoBombs) > 0) {");
code("xDatabaseNext(echoBombs);");
code("hit = 0;");
code("if (xGetInt(echoBombs, xUnitName) > 0) {");
code("target = xGetInt(echoBombs, xEchoBombUnit);");
code("xUnitSelect(echoBombs, xEchoBombUnit);");
code("if (trUnitAlive() == false) {");
code("hit = 1;");
code("amt = xGetFloat(echoBombs, xEchoBombStartingHealth);");
code("} else {");
code("pos = kbGetBlockPosition(\"\"+target);");
code("xSetVector(echoBombs, xEchoBombPos, pos);");
code("if (PvP) {");
code("xsSetContextPlayer(xGetInt(dPlayerUnits, xPlayerOwner,");
code("xGetInt(dEnemies, xDoppelganger, xGetInt(echoBombs, xEchoBombIndex))));");
code("} else {");
code("xsSetContextPlayer(ENEMY_PLAYER);");
code("}");
code("amt = kbUnitGetCurrentHitpoints(kbGetBlockID(\"\"+target));");
code("xsSetContextPlayer(0);");
code("if (trTimeMS() > xGetInt(echoBombs, xEchoBombTimeout)) {");
code("amt = xGetFloat(echoBombs, xEchoBombStartingHealth) - amt;");
code("hit = 1;");
code("if (xSetPointer(dEnemies, xGetInt(echoBombs, xEchoBombIndex))) {");
code("xSetBool(dEnemies, xEchoBomb, false);");
code("}");
code("} else if (amt < xGetFloat(echoBombs, xEchoBombCurrentHealth)) {");
code("xSetFloat(echoBombs, xEchoBombSize,");
code("xGetFloat(echoBombs, xEchoBombSize) + 0.002 * (xGetFloat(echoBombs, xEchoBombCurrentHealth) - amt));");
code("xSetFloat(echoBombs, xEchoBombCurrentHealth, amt);");
code("amt = xsSqrt(xGetFloat(echoBombs, xEchoBombSize));");
code("xUnitSelect(echoBombs, xUnitName);");
code("trSetSelectedScale(amt, amt, amt);");
code("trUnitHighlight(0.2, false);");
code("}");
code("}");
code("if (hit == 1) {");
code("pos = xGetVector(echoBombs, xEchoBombPos);");
code("amt = amt * xGetFloat(dPlayerData, xPlayerSpellDamage);");
code("dist = xsPow(echoBombRadius * xGetFloat(dPlayerData, xPlayerSpellRange), 2);");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (unitDistanceToVector(xGetInt(dEnemies, xUnitName), pos) < dist) {");
code("damageEnemy(p, amt);");
code("}");
code("}");

code("if (amt < 1000) {");
code("trSoundPlayFN(\"meteorbighit.wav\",\"1\",-1,\"\",\"\");");
code("} else {");
code("trSoundPlayFN(\"cinematics\35_out\strike.mp3\",\"1\",-1,\"\",\"\");");
code("trCameraShake(0.5, 0.3);");
code("}");
code("xUnitSelect(echoBombs, xUnitName);");
code("trUnitDestroy();");

code("zSetProtoUnitStat(\"Kronny Flying\", p, 1, 0.01);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("xAddDatabaseBlock(harpies, true);");
code("xSetInt(harpies, xUnitName, 1*trQuestVarGet(\"next\"));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\");");
code("trUnitChangeProtoUnit(\"Kronny Flying\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\");");
code("trMutateSelected(kbGetProtoUnitID(\"Kronny Flying\"));");
code("trSetSelectedScale(0,-5.0,0);");
code("trDamageUnitPercent(100);");

code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"\"+p+\",0\");");
code("trUnitChangeProtoUnit(\"Meteor Impact Ground\");");
code("xFreeDatabaseBlock(echoBombs);");
code("}");
code("}");
code("}");


code("if (xGetBool(dPlayerData, xPlayerLureActivated)) {");
code("xSetBool(dPlayerData, xPlayerLureActivated, false);");
code("pos = xGetVector(dPlayerData, xPlayerLurePos);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"lureObject\", true);");
code("trUnitDestroy();");
code("dist = xsPow(12, 2);");
code("target = 0;");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("id = xGetInt(dEnemies, xUnitID);");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("if (trUnitAlive() == false) {");
code("removeEnemy();");
code("} else {");
code("current = unitDistanceToVector(xGetInt(dEnemies, xUnitName), pos);");
code("if (current < dist) {");
code("hit = id;");
code("target = xGetPointer(dEnemies);");
code("dist = current;");
code("}");
code("}");
code("}");
code("if (target > 0 && xSetPointer(dEnemies, target) && (xGetBool(dEnemies, xEchoBomb) == false)) {");
code("xSetBool(dEnemies, xEchoBomb, true);");
code("xAddDatabaseBlock(echoBombs, true);");
code("xSetInt(echoBombs, xEchoBombUnit, xGetInt(dEnemies, xUnitName));");
code("spyEffect(xGetInt(dEnemies, xUnitName), kbGetProtoUnitID(\"Phoenix Egg\"),");
code("xsVectorSet(echoBombs, xUnitName, xGetPointer(echoBombs)));");
code("if (PvP) {");
code("xsSetContextPlayer(xGetInt(dPlayerUnits, xPlayerOwner, xGetInt(dEnemies, xDoppelganger)));");
code("} else {");
code("xsSetContextPlayer(ENEMY_PLAYER);");
code("}");
code("amt = kbUnitGetCurrentHitpoints(hit);");
code("xsSetContextPlayer(0);");
code("xSetFloat(echoBombs, xEchoBombStartingHealth, amt);");
code("xSetFloat(echoBombs, xEchoBombCurrentHealth, amt);");
code("xSetFloat(echoBombs, xEchoBombSize, 1.0);");
code("xSetVector(echoBombs, xEchoBombPos, xGetVector(dEnemies, xUnitPos));");
code("xSetInt(echoBombs, xEchoBombIndex, target);");
code("xSetInt(echoBombs, xEchoBombTimeout,");
code("trTimeMS() + 1000 * echoBombDuration * xGetFloat(dPlayerData, xPlayerSpellDuration));");
code("trSoundPlayFN(\"siegeselect.wav\", \"1\", -1, \"\",\"\");");
code("trSoundPlayFN(\"gatherpoint.wav\",\"1\",-1,\"\",\"\");");
code("} else {");
code("if (trCurrentPlayer() == p) {");
code("trSoundPlayFN(\"cantdothat.wav\",\"1\",-1,\"\",\"\");");
code("if (target > 0) {");
code("trChatSend(0, \"An enemy can only have one Echo Bomb on it at a time!\");");
code("} else {");
code("trChatSend(0, \"You must target an enemy with this ability!\");");
code("}");
code("}");
code("xSetInt(dPlayerData, xPlayerLureCooldownStatus, ABILITY_COST);");
code("}");
code("}");

code("if (xGetBool(dPlayerData, xPlayerRainActivated)) {");
code("xSetBool(dPlayerData, xPlayerRainActivated, false);");
code("trQuestVarSet(\"p\"+p+\"minigun\", 1 - trQuestVarGet(\"p\"+p+\"minigun\"));");
code("if (trQuestVarGet(\"p\"+p+\"minigun\") == 1) {");
code("if (trPlayerResourceCount(p, \"favor\") == 0) {");
code("trQuestVarSet(\"p\"+p+\"minigun\", 0);");
code("if (trCurrentPlayer() == p) {");
code("trSoundPlayFN(\"cantdothat.wav\",\"1\",-1,\"\",\"\");");
code("trChatSend(0, \"Not enough favor to activate minigun!\");");
code("}");
code("} else {");
code("trSoundPlayFN(\"storehouse.wav\",\"1\",-1,\"\",\"\");");
code("xSetInt(dPlayerData, xPlayerFirstDelay, 1000 / (2.0 + xGetInt(dPlayerData, xPlayerProjectiles)));");
code("xSetInt(dPlayerData, xPlayerNextDelay, xGetInt(dPlayerData, xPlayerFirstDelay));");
code("zSetProtoUnitStat(\"Javelin Cavalry Hero\", p, 11, xGetFloat(dPlayerData, xPlayerRange) * 1.5);");
code("if (trCurrentPlayer() == p) {");
code("trSetCounterDisplay(\"Minigun: ON\");");
code("}");
code("}");
code("} else {");
code("minigunOff(p);");
code("}");
code("}");

code("xSetPointer(dEnemies, index);");
code("poisonKillerBonus(p);");
code("}");

code("void chooseCommando(int eventID = -1) {");
code("xsSetContextPlayer(0);");
code("int p = eventID - 1000 - 12 * COMMANDO;");
code("int db = getCharactersDB(p);");
code("resetCharacterCustomVars(p);");
code("xSetPointer(dPlayerData, p);");
code("if (trCurrentPlayer() == p) {");
code("map(\"q\", \"game\", \"uiSetSpecialPower(133) uiSpecialPowerAtPointer\");");
code("wellName = \"(Q) Shrapnel Shot\";");
code("wellIsUltimate = false;");
code("map(\"e\", \"game\", \"uiSetSpecialPower(156) uiSpecialPowerAtPointer\");");
code("rainName = \"(E) Minigun\";");
code("rainIsUltimate = false;");
code("map(\"w\", \"game\", \"uiSetSpecialPower(227) uiSpecialPowerAtPointer\");");
code("lureName = \"(W) Echo Bomb\";");
code("lureIsUltimate = false;");
code("trSetCounterDisplay(\"Minigun: OFF\");");
code("}");

code("xSetInt(dPlayerData,xPlayerWellCooldown, shrapnelCooldown);");
code("xSetFloat(dPlayerData,xPlayerWellCost,0);");
code("xSetInt(dPlayerData,xPlayerLureCooldown, echoBombCooldown);");
code("xSetFloat(dPlayerData,xPlayerLureCost, 0);");
code("xSetInt(dPlayerData,xPlayerRainCooldown,1);");
code("xSetFloat(dPlayerData,xPlayerRainCost, 0);");

code("if (trQuestVarGet(\"p\"+p+\"shotgunHitboxes\") == 0) {");
code("db = xInitDatabase(\"p\"+p+\"shotgunHitboxes\");");
code("trQuestVarSet(\"p\"+p+\"shotgunHitboxes\", db);");

code("xShotgunHitboxStartPos = xInitAddVector(db, \"startPos\");");
code("xShotgunHitboxStartTime = xInitAddInt(db, \"startTime\");");
code("xShotgunHitboxDamage = xInitAddFloat(db, \"damage\");");
code("xShotgunHitboxAngle1 = xInitAddFloat(db, \"angle1\");");
code("xShotgunHitboxAngle2 = xInitAddFloat(db, \"angle2\");");
code("xShotgunHitboxDist = xInitAddFloat(db, \"dist\");");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"pelletsIncoming\") == 0) {");
code("db = initGenericProj(\"p\"+p+\"pelletsIncoming\", kbGetProtoUnitID(\"Thor Hammer\"),2,30.0,4.5,0.3, p);");
code("trQuestVarSet(\"p\"+p+\"pelletsIncoming\", db);");
code("xPelletIncomingStartPos = xInitAddVector(db, \"startPos\");");
code("xPelletIncomingStartTime = xInitAddInt(db, \"startTime\");");
code("xPelletIncomingType = xInitAddInt(db, \"type\");");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"pellets\") == 0) {");
code("db = xInitDatabase(\"p\"+p+\"pellets\");");
code("trQuestVarSet(\"p\"+p+\"pellets\", db);");
code("xInitAddInt(db, \"name\");");
code("xShotgunPelletStartTime = xInitAddInt(db, \"startTime\");");
code("xShotgunPelletStartPos = xInitAddVector(db, \"startPos\");");
code("xShotgunPelletPrev = xInitAddVector(db, \"prev\");");
code("xShotgunPelletDir = xInitAddVector(db, \"dir\");");
code("xShotgunPelletType = xInitAddInt(db, \"type\");");
code("xShotgunPelletDist = xInitAddFloat(db, \"dist\");");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"shrapnelShots\") == 0) {");
code("db = xInitDatabase(\"p\"+p+\"shrapnelShots\");");
code("trQuestVarSet(\"p\"+p+\"shrapnelShots\", db);");
code("xInitAddInt(db, \"name\");");
code("xShrapnelShotDir = xInitAddVector(db, \"dir\");");
code("xShrapnelShotPrev = xInitAddVector(db, \"prev\");");
code("xShrapnelShotTimeout = xInitAddInt(db, \"timeout\");");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"fireharpies\") == 0) {");
code("db = xInitDatabase(\"p\"+p+\"fireharpies\");");
code("trQuestVarSet(\"p\"+p+\"fireharpies\", db);");
code("xInitAddInt(db, \"name\");");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"echoBombs\") == 0) {");
code("db = xInitDatabase(\"p\"+p+\"echoBombs\");");
code("trQuestVarSet(\"p\"+p+\"echoBombs\", db);");
code("xInitAddInt(db, \"name\");");
code("xEchoBombUnit = xInitAddInt(db, \"unit\");");
code("xEchoBombStartingHealth = xInitAddFloat(db, \"startingHealth\");");
code("xEchoBombCurrentHealth = xInitAddFloat(db, \"currentHealth\");");
code("xEchoBombSize = xInitAddFloat(db, \"size\");");
code("xEchoBombPos = xInitAddVector(db, \"pos\");");
code("xEchoBombIndex = xInitAddInt(db, \"index\");");
code("xEchoBombTimeout = xInitAddInt(db, \"timeout\");");
code("}");
code("}");

code("void modifyCommando(int eventID = -1) {");
code("xsSetContextPlayer(0);");
code("int p = eventID - 5000 - 12 * COMMANDO;");
code("zSetProtoUnitStat(\"Javelin Cavalry Hero\", p, 13, 1);");
code("if (trQuestVarGet(\"p\"+p+\"minigun\") == 1) {");
code("zSetProtoUnitStat(\"Javelin Cavalry Hero\", p, 11, xGetFloat(dPlayerData, xPlayerRange, p) * 1.5);");
code("}");
code("}");

code("rule commando_init");
code("active");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("for(p=1; < ENEMY_PLAYER) {");
code("trEventSetHandler(12 * COMMANDO + p, \"commandoAlways\");");
code("trEventSetHandler(1000 + 12 * COMMANDO + p, \"chooseCommando\");");
code("trEventSetHandler(5000 + 12 * COMMANDO + p, \"modifyCommando\");");
code("}");
code("}");
code("int guardianAngelCooldown = 8;");
code("float guardianAngelHeal = 50;");
code("float guardianAngelRange = 10;");

code("int unityCooldown = 20;");
code("float unityRadius = 10;");
code("float unityDuration = 8;");
code("float unityBonus = 0.5;");
code("float unityHeal = 0.5;");

code("float interventionCost = 100;");
code("int interventionCooldown = 10;");

code("int xJumping = 0;");

code("void removeSavior(int p = 0) {");
code("removePlayerSpecific(p);");

code("}");

code("void saviorAlways(int eventID = -1) {");
code("xsSetContextPlayer(0);");
code("int p = eventID - 12 * SAVIOR;");
code("int id = 0;");
code("int hit = 0;");
code("int target = 0;");
code("int index = xGetPointer(dEnemies);");
code("int db = getCharactersDB(p);");
code("float amt = 0;");
code("float dist = 0;");
code("float current = 0;");
code("xSetPointer(dPlayerData, p);");

code("vector start = vector(0,0,0);");
code("vector pos = vector(0,0,0);");
code("vector dir = vector(0,0,0);");

code("if (xGetBool(dPlayerData, xPlayerWellActivated)) {");
code("xSetBool(dPlayerData, xPlayerWellActivated, false);");

code("dist = xsPow(2 * guardianAngelRange * xGetFloat(dPlayerData, xPlayerSpellRange), 2);");
code("hit = -1;");
code("for(x=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("xUnitSelectByID(dPlayerUnits, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else {");
code("amt = unitDistanceToVector(xGetInt(dPlayerUnits, xUnitName), xGetVector(dPlayerData, xPlayerWellPos));");
code("if (amt < dist) {");
code("dist = amt;");
code("hit = xGetPointer(dPlayerUnits);");
code("}");
code("}");
code("}");

code("if (hit > 0) {");
code("gainFavor(p, 5);");
code("xSetPointer(dPlayerUnits, hit);");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dPlayerUnits, xUnitName), true);");
code("dir = getUnitVector(pos, xGetVector(dPlayerData, xPlayerWellPos), 2.0);");
code("dist = xsMin(guardianAngelRange * xGetFloat(dPlayerData, xPlayerSpellRange),");
code("distanceBetweenVectors(xGetVector(dPlayerData, xPlayerWellPos), pos, false)) / 2;");
code("for(x=dist; >0) {");
code("start = pos + dir;");
code("if (terrainIsType(vectorToGrid(start), TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("break;");
code("} else {");
code("pos = start;");
code("}");
code("}");
code("amt = 0;");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),180,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Transport Ship Greek\"));");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeSavior(p);");
code("} else {");
code("start = kbGetBlockPosition(\"\"+xGetInt(db, xUnitName), true);");
code("dir = getUnitVector(start, pos);");
code("amt = amt + distanceBetweenVectors(start, pos, false);");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"next\"));");
code("trUnitChangeProtoUnit(\"Hero Greek Bellerophon\");");
code("xUnitSelectByID(db, xUnitID);");
code("trSetUnitOrientation(dir,vector(0,1,0),true);");
code("}");
code("}");
code("equipRelicsAgain(p);");

code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitChangeProtoUnit(\"Arkantos God Out\");");
code("trSoundPlayFN(\"arkantosarrive.wav\",\"1\",-1,\"\",\"\");");

code("amt = guardianAngelHeal * (1.0 + 0.1 * amt);");
code("dist = xsPow(guardianAngelRange * xGetFloat(dPlayerData, xPlayerSpellRange), 2);");

code("for(x=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("if (unitDistanceToVector(xGetInt(dPlayerUnits, xUnitName), pos) < dist) {");
code("xUnitSelectByID(dPlayerUnits, xUnitID);");
code("healUnit(p, amt * xGetFloat(dPlayerData, xPlayerSpellDamage));");
code("}");
code("}");
code("} else {");
code("xSetInt(dPlayerData, xPlayerWellCooldownStatus, ABILITY_COST);");
code("if (trCurrentPlayer() == p) {");
code("trCounterAbort(\"well\");");
code("trChatSend(0, \"You must choose a unit to teleport to!\");");
code("trSoundPlayFN(\"cantdothat.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("}");

code("if (xGetBool(dPlayerData, xPlayerLureActivated)) {");
code("xSetBool(dPlayerData, xPlayerLureActivated, false);");
code("if (trQuestVarGet(\"p\"+p+\"unity\") == 1) {");
code("for(x=trQuestVarGet(\"p\"+p+\"unityNext\"); < trQuestVarGet(\"p\"+p+\"unityend\")) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+x, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Rocket\"));");
code("trUnitDestroy();");
code("}");
code("}");
code("pos = vectorSnapToGrid(xGetVector(dPlayerData, xPlayerLurePos));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"lureObject\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Rocket\"));");
code("trUnitDestroy();");

code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",8,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("for(x=trQuestVarGet(\"next\"); < trGetNextUnitScenarioNameNumber()) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+x, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Valkyrie\"));");
code("trSetSelectedScale(0,0,0);");
code("trUnitSetAnimationPath(\"1,0,0,0,0,0,0\");");
code("trUnitOverrideAnimation(15,0,true,false,-1);");
code("}");
code("trSoundPlayFN(\"gaiasparkle3.wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSet(\"p\"+p+\"unity\", 1);");
code("trQuestVarSet(\"p\"+p+\"unityNext\", trQuestVarGet(\"next\"));");
code("trQuestVarSet(\"p\"+p+\"unityEnd\", trGetNextUnitScenarioNameNumber());");
code("trQuestVarSet(\"p\"+p+\"unityTimeout\",");
code("trTimeMS() + 1000 * unityDuration * xGetFloat(dPlayerData, xPlayerSpellDuration));");
code("trQuestVarSet(\"p\"+p+\"unityLast\", trTimeMS());");
code("trQuestVarSet(\"p\"+p+\"unityradius\", unityRadius * xGetFloat(dPlayerData, xPlayerSpellRange));");
code("trQuestVarSet(\"p\"+p+\"unityangle\", 0);");
code("trVectorQuestVarSet(\"p\"+p+\"unityPos\", pos);");
code("trQuestVarSet(\"p\"+p+\"unityLast\", trTimeMS());");
code("trQuestVarSet(\"p\"+p+\"unitySearch\", p);");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"unity\") == 1) {");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"unitytimeout\")) {");
code("for(x=trQuestVarGet(\"p\"+p+\"unityNext\"); < trQuestVarGet(\"p\"+p+\"unityend\")) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+x, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Rocket\"));");
code("trUnitDestroy();");
code("}");
code("zSetProtoUnitStat(\"Hero Greek Bellerophon\", p, 27, xGetFloat(dPlayerData, xPlayerBaseAttack));");
code("xSetFloat(dPlayerData, xPlayerAttack, xGetFloat(dPlayerData, xPlayerBaseAttack));");
code("trQuestVarSet(\"p\"+p+\"unity\", 0);");
code("for (x=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("if (getBit(p, xGetInt(dPlayerUnits, xUnity)) == true) {");
code("xSetInt(dPlayerUnits, xUnity, xGetInt(dPlayerUnits, xUnity) - xsPow(2, p));");
code("xSetFloat(dPlayerUnits, xMagicResist, calculateArmor(xGetFloat(dPlayerUnits, xMagicResist), -1.0));");
code("}");
code("}");
code("} else {");
code("dist = trTimeMS() - trQuestVarGet(\"p\"+p+\"unitylast\");");
code("amt = trQuestVarGet(\"p\"+p+\"unityangle\");");
code("amt = fModulo(6.283185, amt + dist * 0.001);");
code("trQuestVarSet(\"p\"+p+\"unitylast\", trTimeMS());");
code("trQuestVarSet(\"p\"+p+\"unityangle\", amt);");
code("dir = xsVectorSet(xsSin(amt),0,xsCos(amt));");

code("amt = trQuestVarGet(\"p\"+p+\"unityradius\");");
code("dist = amt * amt;");
code("amt = 0.5 * amt;");
code("for(x=0; <8) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+(x+trQuestVarGet(\"p\"+p+\"unityNext\")), true);");
code("trSetSelectedUpVector(amt * xsVectorGetX(dir),0,amt * xsVectorGetZ(dir));");
code("dir = rotationMatrix(dir, 0.707107, 0.707107);");
code("}");
code("if (trTime() > trQuestVarGet(\"p\"+p+\"unityTime\")) {");
code("pos = trVectorQuestVarGet(\"p\"+p+\"unitypos\");");
code("trQuestVarSet(\"p\"+p+\"unityTime\", trTime());");
code("hit = 0;");
code("for (x=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("if (unitDistanceToVector(xGetInt(dPlayerUnits, xUnitName), pos) < dist) {");
code("hit = hit + 1;");
code("if (getBit(p, xGetInt(dPlayerUnits, xUnity)) == false) {");
code("xSetInt(dPlayerUnits, xUnity, xGetInt(dPlayerUnits, xUnity) + xsPow(2, p));");
code("xSetFloat(dPlayerUnits, xMagicResist, calculateArmor(xGetFloat(dPlayerUnits, xMagicResist), 0.5));");
code("}");
code("} else if (getBit(p, xGetInt(dPlayerUnits, xUnity)) == true) {");
code("xSetInt(dPlayerUnits, xUnity, xGetInt(dPlayerUnits, xUnity) - xsPow(2, p));");
code("xSetFloat(dPlayerUnits, xMagicResist, calculateArmor(xGetFloat(dPlayerUnits, xMagicResist), -1.0));");
code("}");
code("}");

code("trQuestVarSet(\"p\"+p+\"unityBuff\", unityBonus * hit);");
code("xSetFloat(dPlayerData, xPlayerAttack,");
code("xGetFloat(dPlayerData, xPlayerBaseAttack) * (1.0 + trQuestVarGet(\"p\"+p+\"unityBuff\")));");
code("zSetProtoUnitStat(\"Hero Greek Bellerophon\", p, 27, xGetFloat(dPlayerData, xPlayerAttack));");
code("}");
code("}");
code("}");

code("if (xGetBool(dPlayerData, xPlayerRainActivated)) {");
code("xSetBool(dPlayerData, xPlayerRainActivated, false);");
code("trQuestVarSet(\"p\"+p+\"intervention\", 1);");
code("}");


code("if (xGetDatabaseCount(db) > 0) {");
code("xDatabaseNext(db);");
code("id = xGetInt(db, xUnitID);");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("if (trUnitAlive() == false) {");
code("removeSavior(p);");
code("} else {");
code("hit = CheckOnHit(p);");
code("if (hit == ON_HIT_JUMP) {");
code("if (xGetBool(db, xJumping) == false) {");
code("xSetBool(db, xJumping, true);");
code("xsSetContextPlayer(p);");
code("target = kbUnitGetTargetUnitID(id);");
code("xsSetContextPlayer(0);");
code("xSetInt(db, xCharAttackTarget, target);");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("if (xGetInt(dEnemies, xUnitID) == target) {");
code("xSetInt(db, xCharAttackTargetIndex, xGetPointer(dEnemies));");
code("xSetInt(dPlayerData, xPlayerPoisonKillerActive, xGetInt(dEnemies, xPoisonStatus));");
code("break;");
code("}");
code("}");
code("}");
code("} else if (xGetBool(db, xJumping)) {");
code("xSetBool(db, xJumping, false);");
code("if (xSetPointer(dEnemies, xGetInt(db, xCharAttackTargetIndex))) {");
code("stunUnit(dEnemies, 1.5, p);");
code("}");
code("} else if (hit >= ON_HIT_NORMAL) {");
code("target = 1;");
code("if (hit == ON_HIT_SPECIAL) {");
code("if (xSetPointer(dEnemies, xGetInt(db, xCharAttackTargetIndex))) {");
code("start = kbGetBlockPosition(\"\"+xGetInt(db, xUnitName), true);");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dEnemies, xUnitName), true);");
code("dir = getUnitVector(start, pos);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,xsVectorGetX(start),0,xsVectorGetZ(start),0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Petosuchus Projectile\"));");
code("trUnitHighlight(1.0, false);");
code("trSetUnitOrientation(xsVectorSet(0.0 - xsVectorGetX(dir),0, 0.0 - xsVectorGetZ(dir)), vector(0,1,0), true);");
code("dist = 10.0 + xGetFloat(dPlayerData, xPlayerRange);");
code("xAddDatabaseBlock(dPlayerLasers, true);");
code("xSetInt(dPlayerLasers, xUnitName, 1*trQuestVarGet(\"next\"));");
code("xSetInt(dPlayerLasers, xPlayerLaserTimeout, trTimeMS() + 500);");
code("xSetFloat(dPlayerLasers, xPlayerLaserRange, dist * 1.3);");
code("amt = xGetFloat(dPlayerData, xPlayerAttack);");
code("for(x=xGetDatabaseCount(dEnemies); >1) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (rayCollision(dEnemies,start,dir,current, 9.0)) {");
code("damageEnemy(p, amt, false);");
code("target = 1 + target;");
code("OnHit(p, xGetPointer(dEnemies), false);");
code("}");
code("}");
code("}");
code("}");
code("if (trQuestVarGet(\"p\"+p+\"unity\") == 1) {");
code("pos = trVectorQuestVarGet(\"p\"+p+\"unityPos\");");
code("amt = xGetFloat(dPlayerData, xPlayerAttack) * unityHeal * target;");
code("dist = xsPow(unityRadius * xGetFloat(dPlayerData, xPlayerSpellRange), 2);");
code("gainFavor(p, 2.0);");
code("for(x=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("xUnitSelectByID(dPlayerUnits, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (unitDistanceToVector(dPlayerUnits, pos) < dist) {");
code("healUnit(p, amt);");
code("if (xGetBool(dPlayerUnits, xIsHero)) {");
code("gainFavor(xGetInt(dPlayerUnits, xPlayerOwner), 2.0);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"dead\") > 0 &&");
code("trPlayerResourceCount(p, \"favor\") >= interventionCost * xGetFloat(dPlayerData, xPlayerUltimateCost)) {");
code("trQuestVarSet(\"p\"+p+\"intervention\", 1);");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"intervention\") == 1) {");
code("for(x=xGetDatabaseCount(dPlayerCharacters); >0) {");
code("xDatabaseNext(dPlayerCharacters);");
code("xUnitSelectByID(dPlayerCharacters, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerCharacter();");
code("}");
code("}");
code("for(x=1; < ENEMY_PLAYER) {");
code("if (xGetInt(dPlayerData, xPlayerDead, x) > 0) {");
code("revivePlayer(x);");
code("xSetInt(dPlayerData, xPlayerDead, x, 0);");
code("}");
code("}");
code("gainFavor(p, 0.0 - interventionCost * xGetFloat(dPlayerData, xPlayerUltimateCost));");
code("xSetInt(dPlayerData, xPlayerRainCooldownStatus, ABILITY_COOLDOWN);");
code("trChatSend(0, \"<color=1,1,1>Intervention!</color>\");");
code("trSoundPlayFN(\"restorationbirth.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"herobirth3.wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSet(\"p\"+p+\"intervention\", 0);");
code("}");

code("xSetPointer(dEnemies, index);");
code("poisonKillerBonus(p);");
code("}");

code("void chooseSavior(int eventID = -1) {");
code("xsSetContextPlayer(0);");
code("int p = eventID - 1000 - 12 * SAVIOR;");
code("int db = getCharactersDB(p);");
code("resetCharacterCustomVars(p);");
code("xSetPointer(dPlayerData, p);");
code("if (trCurrentPlayer() == p) {");
code("map(\"q\", \"game\", \"uiSetSpecialPower(133) uiSpecialPowerAtPointer\");");
code("wellName = \"(Q) Guardian Angel\";");
code("wellIsUltimate = false;");
code("map(\"e\", \"game\", \"uiSetSpecialPower(156) uiSpecialPowerAtPointer\");");
code("rainName = \"(E) Intervention\";");
code("rainIsUltimate = true;");
code("map(\"w\", \"game\", \"uiSetSpecialPower(227) uiSpecialPowerAtPointer\");");
code("lureName = \"(W) Unity\";");
code("lureIsUltimate = false;");
code("}");

code("xJumping = xInitAddBool(db, \"jumping\");");

code("xSetInt(dPlayerData,xPlayerWellCooldown, guardianAngelCooldown);");
code("xSetFloat(dPlayerData,xPlayerWellCost,0);");
code("xSetInt(dPlayerData,xPlayerLureCooldown, unityCooldown);");
code("xSetFloat(dPlayerData,xPlayerLureCost, 0);");
code("xSetInt(dPlayerData,xPlayerRainCooldown,interventionCooldown);");
code("xSetFloat(dPlayerData,xPlayerRainCost, interventionCost);");
code("}");


code("rule savior_init");
code("active");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("for(p=1; < ENEMY_PLAYER) {");
code("trEventSetHandler(12 * SAVIOR + p, \"saviorAlways\");");
code("trEventSetHandler(1000 + 12 * SAVIOR + p, \"chooseSavior\");");
code("}");
code("}");
code("float seedHeal = 30;");
code("float seedDuration = 15;");

code("int bloodbloomCooldown = 15;");

code("int stranglethornsCooldown = 12;");
code("float stranglethornsRange = 6;");
code("float stranglethornsRadius = 3;");
code("float stranglethornsDuration = 3;");
code("float stranglethornsDamage = 20;");

code("float natureBountyCost = 60;");
code("float natureBountyDuration = 12;");

code("int xSeedReadyTime = 0;");
code("int xSeedTimeout = 0;");
code("int xSeedType = 0;");

code("int xLifeArrowPos = 0;");

code("int xBloodbloomAttacking = 0;");
code("int xBloodbloomAttackNext = 0;");

code("int xStranglethornTimeout = 0;");
code("int xStranglethornPos = 0;");

code("void removeGardener(int p = 0) {");
code("removePlayerSpecific(p);");
code("}");

code("void plantSeed(int next = 0, int p = 0) {");
code("int seeds = trQuestVarGet(\"p\"+p+\"seeds\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+next, true);");
code("trUnitChangeProtoUnit(\"Rock Granite Small\");");
code("xAddDatabaseBlock(seeds, true);");
code("xSetInt(seeds, xUnitName, next);");
code("xSetInt(seeds, xSeedReadyTime, trTimeMS() + 2000);");
code("xSetInt(seeds, xSeedTimeout, trTimeMS() + 1000 * seedDuration * xGetFloat(dPlayerData, xPlayerSpellDuration));");
code("xSetInt(seeds, xSeedType, 1*trQuestVarGet(\"p\"+p+\"natureBounty\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+next, true);");
code("if (trQuestVarGet(\"p\"+p+\"natureBounty\") == 0) {");
code("trUnitSetAnimationPath(\"1,0,0,0,0\");");
code("} else {");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+next, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Berry Bush\"));");
code("}");
code("if (trCurrentPlayer() == p) {");
code("trUnitHighlight(seedDuration * xGetFloat(dPlayerData, xPlayerSpellDuration), true);");
code("}");
code("}");

code("void gardenerAlways(int eventID = -1) {");
code("xsSetContextPlayer(0);");
code("int p = eventID - 12 * GARDENER;");
code("int id = 0;");
code("int hit = 0;");
code("int target = 0;");
code("int index = xGetPointer(dEnemies);");
code("int db = getCharactersDB(p);");
code("int seeds = trQuestVarGet(\"p\"+p+\"seeds\");");
code("int lifeArrows = trQuestVarGet(\"p\"+p+\"lifeArrows\");");
code("int bloodblooms = trQuestVarGet(\"p\"+p+\"bloodblooms\");");
code("int stranglethorns = trQuestVarGet(\"p\"+p+\"stranglethorns\");");
code("float amt = 0;");
code("float dist = 0;");
code("float current = 0;");

code("vector pos = vector(0,0,0);");
code("vector start = vector(0,0,0);");
code("vector dir = vector(0,0,0);");

code("xSetPointer(dPlayerData, p);");
code("if (xGetDatabaseCount(db) > 0) {");
code("id = xDatabaseNext(db, true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeGardener(p);");
code("} else {");
code("hit = CheckOnHit(p);");
code("}");
code("}");

code("current = seedDuration * xGetFloat(dPlayerData, xPlayerSpellDuration);");
code("amt = seedHeal;");
code("target = trQuestVarGet(\"p\"+p+\"seedHealPlayer\") + 1;");
code("if (target >= ENEMY_PLAYER) {");
code("target = 1;");
code("}");
code("if (xGetInt(dPlayerData, xPlayerDead, target) == 0) {");
code("for (y=xGetDatabaseCount(seeds); >0) {");
code("xDatabaseNext(seeds);");
code("hit = 0;");
code("dist = xGetInt(seeds, xSeedTimeout) - trTimeMS();");
code("if (dist > 0) {");
code("dist = 0.001 * dist / current;");
code("pos = kbGetBlockPosition(\"\"+xGetInt(seeds, xUnitName));");
code("if (unitDistanceToVector(xGetInt(dPlayerData, xPlayerUnit, target), pos) < 1) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xPlayerUnit, target), true);");
code("if (trUnitPercentDamaged() > 0) {");
code("if (xGetInt(seeds, xSeedType) == 1) {");
code("healUnit(p, 4.0 * amt, xGetInt(dPlayerData, xPlayerIndex, target));");
code("} else {");
code("healUnit(p, amt, xGetInt(dPlayerData, xPlayerIndex, target));");
code("}");
code("hit = 1;");
code("}");
code("}");
code("xUnitSelect(seeds, xUnitName);");
code("if (hit == 1) {");
code("trQuestVarSet(\"eatSound\", 1);");
code("trUnitChangeProtoUnit(\"Regeneration SFX\");");
code("} else {");
code("dist = 0.5 + 0.5 * dist;");
code("trSetSelectedScale(dist, dist, dist);");
code("}");
code("} else {");
code("xUnitSelect(seeds, xUnitName);");
code("trUnitChangeProtoUnit(\"Dust Small\");");
code("xFreeDatabaseBlock(seeds);");
code("}");
code("}");
code("}");

code("trQuestVarSet(\"p\"+p+\"seedHealPlayer\", target);");

code("if (trQuestVarGet(\"eatSound\") == 1) {");
code("trQuestVarSet(\"eatSound\", 0);");
code("trSoundPlayFN(\"colossuseat.wav\",\"1\",-1,\"\",\"\");");
code("}");

code("if (xGetDatabaseCount(lifeArrows) > 0) {");
code("xDatabaseNext(lifeArrows);");
code("xUnitSelect(lifeArrows, xUnitName);");
code("if (trUnitAlive() == false) {");
code("pos = xGetVector(lifeArrows, xLifeArrowPos);");

code("xFreeDatabaseBlock(lifeArrows);");
code("target = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("plantSeed(target, p);");
code("} else {");
code("pos = kbGetBlockPosition(\"\"+xGetInt(lifeArrows, xUnitName), true);");
code("if (xsVectorGetY(pos) < worldHeight + 0.3) {");
code("trMutateSelected(kbGetProtoUnitID(\"Transport Ship Greek\"));");
code("target = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,1,0,1,0,true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+target, true);");
code("trImmediateUnitGarrison(\"\"+xGetInt(lifeArrows, xUnitName));");
code("trUnitChangeProtoUnit(\"Rock Granite Small\");");

code("xUnitSelect(lifeArrows, xUnitName);");
code("trMutateSelected(kbGetProtoUnitID(\"Arrow Flaming\"));");
code("xFreeDatabaseBlock(lifeArrows);");

code("plantSeed(target, p);");
code("}");
code("}");
code("}");

code("for(y=xGetInt(dPlayerData, xPlayerProjectiles); >0) {");
code("if (yFindLatest(\"p\"+p+\"latestProj\", \"Arrow Flaming\", p) > 0) {");
code("start = kbGetBlockPosition(\"\"+1*trQuestVarGet(\"p\"+p+\"latestProj\"));");
code("target = 0;");
code("dist = 25;");
code("for (x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("id = xGetInt(db, xUnitID);");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("if (trUnitAlive() == false) {");
code("removeGardener(p);");
code("} else if (kbUnitGetAnimationActionType(id) == 12) {");
code("current = unitDistanceToVector(xGetInt(db, xUnitName), start);");
code("if (current < dist) {");
code("dist = current;");
code("target = xGetPointer(db);");
code("}");
code("}");
code("}");
code("if (target > 0) {");
code("xSetPointer(db, target);");
code("target = trGetUnitScenarioNameNumber(xGetInt(db, xCharAttackTarget));");
code("xAddDatabaseBlock(lifeArrows, true);");
code("xSetInt(lifeArrows, xUnitName, 1*trQuestVarGet(\"p\"+p+\"latestProj\"));");
code("xSetVector(lifeArrows, xLifeArrowPos, kbGetBlockPosition(\"\"+target));");
code("} else {");
code("break;");
code("}");
code("} else {");
code("break;");
code("}");
code("}");

code("if (xGetDatabaseCount(bloodblooms) > 0) {");
code("xDatabaseNext(bloodblooms);");
code("id = xGetInt(bloodblooms, xUnitID);");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("if (trUnitAlive() == false) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+(1+xGetInt(bloodblooms, xUnitName)), true);");
code("trDamageUnitPercent(100);");
code("xFreeDatabaseBlock(bloodblooms);");
code("} else if (kbUnitGetAnimationActionType(id) == 6) {");
code("if (xGetBool(bloodblooms, xBloodbloomAttacking) == false) {");
code("xSetBool(bloodblooms, xBloodbloomAttacking, true);");
code("xSetInt(bloodblooms, xBloodbloomAttackNext, trTimeMS() + 600);");
code("} else if (trTimeMS() > xGetInt(bloodblooms, xBloodbloomAttackNext)) {");
code("xSetInt(bloodblooms, xBloodbloomAttackNext, xGetInt(bloodblooms, xBloodbloomAttackNext) + 1300);");
code("xsSetContextPlayer(p);");
code("target = kbUnitGetTargetUnitID(id);");
code("xsSetContextPlayer(0);");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("if (xGetInt(dEnemies, xUnitID) == target) {");
code("gainFavor(p, 1);");
code("poisonUnit(dEnemies, 12.0, 12.0, p);");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dEnemies, xUnitName), true);");
code("target = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("plantSeed(target, p);");
code("trSoundPlayFN(\"farming1.wav\",\"1\",-1,\"\",\"\");");
code("break;");
code("}");
code("}");
code("}");
code("} else if (xGetBool(bloodblooms, xBloodbloomAttacking)) {");
code("xSetBool(bloodblooms, xBloodbloomAttacking, false);");
code("}");
code("}");

code("hit = xGetDatabaseCount(stranglethorns);");
code("if (hit > 0) {");
code("current = 1000.0 / hit;");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"stranglethornsNext\") + current) {");
code("trQuestVarSet(\"p\"+p+\"stranglethornsNext\", trQuestVarGet(\"p\"+p+\"stranglethornsNext\") + current);");
code("xDatabaseNext(stranglethorns);");
code("xUnitSelect(stranglethorns, xUnitName);");
code("if (trTimeMS() > xGetInt(stranglethorns, xStranglethornTimeout)) {");
code("trDamageUnitPercent(100);");
code("xFreeDatabaseBlock(stranglethorns);");
code("} else {");
code("pos = xGetVector(stranglethorns, xStranglethornPos);");
code("dist = xsPow(stranglethornsRadius * xGetFloat(dPlayerData, xPlayerSpellRange), 2);");
code("amt = stranglethornsDamage * xGetFloat(dPlayerData, xPlayerSpellDuration);");
code("for (x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (unitDistanceToVector(xGetInt(dEnemies, xUnitName), pos) < dist) {");
code("stunUnit(dEnemies, 1.0, p, false);");
code("damageEnemy(p, amt);");
code("}");
code("}");
code("}");
code("}");
code("} else {");
code("trQuestVarSet(\"p\"+p+\"stranglethornsNext\", trTimeMS());");
code("}");


code("if (xGetBool(dPlayerData, xPlayerWellActivated)) {");
code("xSetBool(dPlayerData, xPlayerWellActivated, false);");
code("pos = xGetVector(dPlayerData, xPlayerWellPos);");
code("target = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"\"+p+\",0\");");
code("trUnitChangeProtoUnit(\"Heavenlight\");");
code("dist = xsPow(stranglethornsRange * xGetFloat(dPlayerData, xPlayerSpellRange), 2);");
code("for(x=xGetDatabaseCount(seeds); >0) {");
code("xDatabaseNext(seeds);");
code("if (unitDistanceToVector(xGetInt(seeds, xUnitName), pos) < dist) {");
code("gainFavor(p, 1);");
code("xUnitSelect(seeds, xUnitName);");
code("trUnitHighlight(0.01,false);");
code("if (xGetInt(seeds, xSeedType) == 1) {");
code("trUnitChangeProtoUnit(\"Walking Berry Bush\");");
code("xUnitSelect(seeds, xUnitName);");
code("trUnitConvert(p);");
code("trUnitChangeProtoUnit(\"Walking Berry Bush\");");
code("activatePlayerUnit(xGetInt(seeds, xUnitName), p, kbGetProtoUnitID(\"Walking Berry Bush\"), calculateDecay(p, 5.0));");
code("xSetInt(dPlayerUnits, xDecayNext, trTimeMS() + 5000);");
code("} else {");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Uproot 2x2\");");
code("trQuestVarSetFromRand(\"angle\", 0, 3.14, false);");
code("dir = xsVectorSet(xsCos(trQuestVarGet(\"angle\")),0,xsSin(trQuestVarGet(\"angle\")));");
code("xUnitSelect(seeds, xUnitName);");
code("trSetUnitOrientation(dir,vector(0,1,0),true);");
code("trSetSelectedScale(xGetFloat(dPlayerData, xPlayerSpellRange),1,xGetFloat(dPlayerData, xPlayerSpellRange));");
code("xAddDatabaseBlock(stranglethorns, true);");
code("xSetInt(stranglethorns, xUnitName, xGetInt(seeds, xUnitName));");
code("xSetVector(stranglethorns, xStranglethornPos, kbGetBlockPosition(\"\"+xGetInt(seeds, xUnitName),true));");
code("xSetInt(stranglethorns, xStranglethornTimeout, trTimeMS() + 1000 * stranglethornsDuration);");
code("}");
code("xFreeDatabaseBlock(seeds);");
code("}");
code("}");
code("}");

code("if (xGetBool(dPlayerData, xPlayerLureActivated)) {");
code("xSetBool(dPlayerData, xPlayerLureActivated, false);");
code("pos = xGetVector(dPlayerData, xPlayerLurePos);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"lureObject\", true);");
code("trUnitDestroy();");
code("target = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",2,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+(1+target), true);");
code("trUnitChangeProtoUnit(\"Audrey Base\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+target, true);");
code("trUnitChangeProtoUnit(\"Audrey\");");
code("xAddDatabaseBlock(bloodblooms, true);");
code("xSetInt(bloodblooms, xUnitName, target);");
code("xSetInt(bloodblooms, xUnitID, kbGetBlockID(\"\"+target, true));");

code("activatePlayerUnit(target, p, kbGetProtoUnitID(\"Audrey\"), calculateDecay(p, 8.0));");
code("xSetInt(dPlayerUnits, xDecayNext, trTimeMS() + 2000);");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"natureBounty\") == 1) {");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"natureBountyTimeout\")) {");
code("trQuestVarSet(\"p\"+p+\"natureBounty\", 0);");
code("}");
code("}");

code("if (xGetBool(dPlayerData, xPlayerRainActivated)) {");
code("xSetBool(dPlayerData, xPlayerRainActivated, false);");
code("trSoundPlayFN(\"walkingwoods1.wav\", \"1\", -1, \"\", \"\");");
code("trSoundPlayFN(\"gaiaforest.wav\", \"1\", -1, \"\", \"\");");
code("gainFavor(p, 0.0 - natureBountyCost * xGetFloat(dPlayerData, xPlayerUltimateCost));");
code("trQuestVarSet(\"p\"+p+\"natureBounty\", 1);");
code("trQuestVarSet(\"p\"+p+\"natureBountyTimeout\",");
code("trTimeMS() + 1000 * natureBountyDuration * xGetFloat(dPlayerData, xPlayerSpellDuration));");
code("}");

code("xSetPointer(dEnemies, index);");
code("poisonKillerBonus(p);");
code("}");

code("void chooseGardener(int eventID = -1) {");
code("xsSetContextPlayer(0);");
code("int p = eventID - 1000 - 12 * GARDENER;");
code("int db = getCharactersDB(p);");
code("resetCharacterCustomVars(p);");
code("xSetPointer(dPlayerData, p);");
code("trQuestVarSet(\"p\"+p+\"latestProj\", trGetNextUnitScenarioNameNumber() - 1);");
code("if (trCurrentPlayer() == p) {");
code("map(\"w\", \"game\", \"uiSetSpecialPower(133) uiSpecialPowerAtPointer\");");
code("wellName = \"(W) Stranglethorns\";");
code("wellIsUltimate = false;");
code("map(\"e\", \"game\", \"uiSetSpecialPower(156) uiSpecialPowerAtPointer\");");
code("rainName = \"(E) Nature's Bounty\";");
code("rainIsUltimate = true;");
code("map(\"q\", \"game\", \"uiSetSpecialPower(227) uiSpecialPowerAtPointer\");");
code("lureName = \"(Q) Bloodbloom\";");
code("lureIsUltimate = false;");
code("}");

code("xSetInt(dPlayerData,xPlayerWellCooldown, stranglethornsCooldown);");
code("xSetFloat(dPlayerData,xPlayerWellCost,0);");
code("xSetInt(dPlayerData,xPlayerLureCooldown, bloodbloomCooldown);");
code("xSetFloat(dPlayerData,xPlayerLureCost, 0);");
code("xSetInt(dPlayerData,xPlayerRainCooldown,1);");
code("xSetFloat(dPlayerData,xPlayerRainCost, natureBountyCost);");

code("if (trQuestVarGet(\"p\"+p+\"seeds\") == 0) {");
code("db = xInitDatabase(\"p\"+p+\"seeds\");");
code("trQuestVarSet(\"p\"+p+\"seeds\", db);");
code("xInitAddInt(db, \"name\");");
code("xSeedReadyTime = xInitAddInt(db, \"ready\");");
code("xSeedTimeout = xInitAddInt(db, \"timeout\");");
code("xSeedType = xInitAddInt(db, \"type\");");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"lifeArrows\") == 0) {");
code("db = xInitDatabase(\"p\"+p+\"lifeArrows\");");
code("trQuestVarSet(\"p\"+p+\"lifeArrows\", db);");
code("xInitAddInt(db, \"name\");");
code("xLifeArrowPos = xInitAddVector(db, \"pos\");");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"bloodblooms\") == 0) {");
code("db = xInitDatabase(\"p\"+p+\"bloodblooms\");");
code("trQuestVarSet(\"p\"+p+\"bloodblooms\", db);");
code("xInitAddInt(db, \"name\");");
code("xBloodbloomAttacking = xInitAddBool(db, \"attacking\");");
code("xInitAddInt(db, \"id\");");
code("xBloodbloomAttackNext = xInitAddInt(db, \"attackNext\");");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"stranglethorns\") == 0) {");
code("db = xInitDatabase(\"p\"+p+\"stranglethorns\");");
code("trQuestVarSet(\"p\"+p+\"stranglethorns\", db);");
code("xInitAddInt(db, \"name\");");
code("xStranglethornTimeout = xInitAddInt(db, \"timeout\");");
code("xStranglethornPos = xInitAddVector(db, \"pos\");");
code("}");
code("}");

code("void modifyGardener(int eventID = -1) {");
code("xsSetContextPlayer(0);");
code("int p = eventID - 5000 - 12 * GARDENER;");
code("zSetProtoUnitStat(\"Walking Berry Bush\", p, 0, 0.5 * xGetFloat(dPlayerData, xPlayerHealth, p));");
code("zSetProtoUnitStat(\"Walking Berry Bush\", p, 27, 0.5 * xGetFloat(dPlayerData, xPlayerAttack, p));");
code("zSetProtoUnitStat(\"Audrey\", p, 0, xGetFloat(dPlayerData, xPlayerHealth, p));");
code("zSetProtoUnitStat(\"Audrey\", p, 27, xGetFloat(dPlayerData, xPlayerAttack, p));");
code("}");


code("rule gardener_init");
code("active");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("for(p=1; < ENEMY_PLAYER) {");
code("trEventSetHandler(12 * GARDENER + p, \"gardenerAlways\");");
code("trEventSetHandler(1000 + 12 * GARDENER + p, \"chooseGardener\");");
code("trEventSetHandler(5000 + 12 * GARDENER + p, \"modifyGardener\");");
code("}");
code("}");
code("float abductRange = 12;");
code("int abductCooldown = 15;");

code("float deathSentenceDamage = 6;");
code("float deathSentenceDuration = 6;");
code("float deathSentenceRadius = 8;");

code("int ariseCooldown = 16;");

code("float nightfallCost = 75;");
code("float nightfallRadius = 15;");

code("int xDeathSentenceIndex = 0;");
code("int xDeathSentencePos = 0;");
code("int xDeathSentenceTimeout = 0;");
code("int xDeathSentenceHealth = 0;");
code("int xDeathSentenceSFX = 0;");

code("int xAbductDest = 0;");
code("int xAbductTimeout = 0;");
code("int xAbductCurse = 0;");

code("void removeNightrider(int p = 0) {");
code("removePlayerSpecific(p);");
code("}");

code("void spawnMinion(int p = 0, vector pos = vector(0,0,0), float heading = 0) {");
code("int next = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"\"+p+\",0\",\"Minion\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),heading,true);");
code("activatePlayerUnit(next, p, kbGetProtoUnitID(\"Minion\"), calculateDecay(p, 5.0));");
code("}");

code("void castDeathSentence(int p = 0) {");
code("int sentences = trQuestVarGet(\"p\"+p+\"sentences\");");
code("trSoundPlayFN(\"shadeofhadesbirth.wav\",\"1\",-1,\"\",\"\");");

code("xSetBool(dEnemies, xDeathSentence, true);");

code("poisonUnit(dEnemies, deathSentenceDuration, deathSentenceDamage, p);");
code("silenceUnit(dEnemies,deathSentenceDuration, p);");
code("trQuestVarSet(\"poisonSound\", 0);");
code("xAddDatabaseBlock(sentences, true);");
code("xSetInt(sentences, xUnitName, xGetInt(dEnemies, xUnitName));");
code("xSetInt(sentences, xDeathSentenceIndex, xGetPointer(dEnemies));");
code("xSetInt(sentences, xUnitID, xGetInt(dEnemies, xUnitID));");
code("xSetVector(sentences, xDeathSentencePos, xGetVector(dEnemies, xUnitPos));");
code("xSetInt(sentences, xDeathSentenceTimeout,");
code("trTimeMS() + 1000 * deathSentenceDuration * xGetFloat(dPlayerData, xPlayerSpellDuration));");

code("int id = xGetInt(dEnemies, xUnitID);");
code("if (PvP) {");
code("xsSetContextPlayer(xGetInt(dPlayerUnits, xPlayerOwner, xGetInt(dEnemies, xDoppelganger)));");
code("} else {");
code("xsSetContextPlayer(ENEMY_PLAYER);");
code("}");
code("float health = kbUnitGetCurrentHitpoints(id);");
code("xsSetContextPlayer(0);");
code("xSetFloat(sentences, xDeathSentenceHealth, health);");

code("spyEffect(xGetInt(dEnemies, xUnitName),kbGetProtoUnitID(\"Shade\"),");
code("xsVectorSet(sentences, xDeathSentenceSFX, xGetNewestPointer(sentences)));");
code("}");

code("void nightriderAlways(int eventID = -1) {");
code("xsSetContextPlayer(0);");
code("int p = eventID - 12 * NIGHTRIDER;");
code("int id = 0;");
code("int hit = 0;");
code("int target = 0;");
code("int index = xGetPointer(dEnemies);");
code("int db = getCharactersDB(p);");
code("int sentences = trQuestVarGet(\"p\"+p+\"sentences\");");
code("int abducts = trQuestVarGet(\"p\"+p+\"abducts\");");
code("int clouds = trQuestVarGet(\"p\"+p+\"nightfallClouds\");");
code("float amt = 0;");
code("float dist = 0;");
code("float current = 0;");
code("xSetPointer(dPlayerData, p);");

code("vector pos = vector(0,0,0);");
code("vector dir = vector(0,0,0);");
code("vector prev = vector(0,0,0);");
code("vector dest = vector(0,0,0);");

code("if (xGetDatabaseCount(db) > 0) {");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeNightrider(p);");
code("} else {");
code("hit = CheckOnHit(p);");
code("if (hit >= ON_HIT_NORMAL) {");
code("if (xGetBool(dEnemies, xDeathSentence, xGetInt(db, xCharAttackTargetIndex))) {");
code("if (xGetInt(dPlayerData, xPlayerRainCooldownStatus) == ABILITY_COOLDOWN) {");
code("xSetInt(dPlayerData, xPlayerRainReadyTime, xGetInt(dPlayerData, xPlayerRainReadyTime) - 1000);");
code("amt = xGetInt(dPlayerData, xPlayerRainReadyTime) - trTimeMS();");
code("if (amt > 0) {");
code("if (trCurrentPlayer() == p) {");
code("trCounterAbort(\"rain\");");
code("trCounterAddTime(\"rain\", amt * 0.001, 0, rainName);");
code("}");
code("}");
code("}");
code("}");
code("if (hit == ON_HIT_SPECIAL) {");
code("if (xSetPointer(dEnemies, xGetInt(db, xCharAttackTargetIndex))) {");
code("if (xGetBool(dEnemies, xDeathSentence) == false) {");
code("castDeathSentence(p);");
code("} else {");
code("xSetInt(db, xCharSpecialAttack, 0);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");

code("if (xGetDatabaseCount(sentences) > 0) {");
code("xDatabaseNext(sentences);");
code("xUnitSelectByID(sentences, xUnitID);");
code("if (trUnitAlive() == false) {");
code("pos = xGetVector(sentences, xDeathSentencePos);");
code("hit = 0;");
code("dist = 100;");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (xGetBool(dEnemies, xDeathSentence) == false) {");
code("current = unitDistanceToVector(xGetInt(dEnemies, xUnitName), pos);");
code("if (current < dist) {");
code("dist = current;");
code("hit = xGetPointer(dEnemies);");
code("}");
code("}");
code("}");
code("xUnitSelect(sentences, xDeathSentenceSFX);");
code("trUnitDestroy();");
code("xFreeDatabaseBlock(sentences);");
code("trQuestVarSetFromRand(\"heading\",1,360,false);");
code("spawnMinion(p, pos, trQuestVarGet(\"heading\"));");
code("if (hit > 0) {");
code("xSetPointer(dEnemies, hit);");
code("castDeathSentence(p);");
code("}");
code("} else {");
code("hit = xGetPointer(dEnemies);");
code("if (xSetPointer(dEnemies, xGetInt(sentences, xDeathSentenceIndex))) {");
code("if (trTimeMS() > xGetInt(sentences, xDeathSentenceTimeout)) {");
code("xUnitSelect(sentences, xDeathSentenceSFX);");
code("trUnitDestroy();");
code("xSetBool(dEnemies, xDeathSentence, false);");
code("xFreeDatabaseBlock(sentences);");
code("} else {");
code("xSetVector(sentences, xDeathSentencePos, xGetVector(dEnemies, xUnitPos));");
code("id = xGetInt(dEnemies, xUnitID);");
code("if (PvP) {");
code("xsSetContextPlayer(xGetInt(dPlayerUnits, xPlayerOwner, xGetInt(dEnemies, xDoppelganger)));");
code("} else {");
code("xsSetContextPlayer(ENEMY_PLAYER);");
code("}");
code("amt = kbUnitGetCurrentHitpoints(id);");
code("xsSetContextPlayer(0);");
code("dist = xGetFloat(sentences, xDeathSentenceHealth) - amt;");
code("if (dist > 0) {");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("trDamageUnit(dist);");
code("xSetFloat(sentences, xDeathSentenceHealth, amt - dist);");
code("} else {");
code("xSetFloat(sentences, xDeathSentenceHealth, amt);");
code("}");
code("}");
code("xSetPointer(dEnemies, hit);");
code("}");
code("}");
code("}");

code("for (x=xGetDatabaseCount(abducts); > 0) {");
code("if (processGenericProj(abducts) == PROJ_FALLING) {");
code("prev = xGetVector(abducts, xProjPrev);");
code("dir = xGetVector(abducts, xProjDir);");
code("pos = kbGetBlockPosition(\"\"+xGetInt(abducts, xUnitName), true);");
code("dist = distanceBetweenVectors(pos, prev, false) + 3.0;");
code("if (trTimeMS() > xGetInt(abducts, xAbductTimeout)) {");
code("xUnitSelectByID(abducts, xUnitID);");
code("trUnitChangeProtoUnit(\"Kronny Birth SFX\");");
code("xFreeDatabaseBlock(abducts);");
code("} else {");
code("xSetVector(abducts, xProjPrev, pos);");
code("for(y=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (xGetBool(dEnemies, xLaunched) == false) {");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dEnemies, xUnitName), true);");
code("current = distanceBetweenVectors(prev, pos, false);");
code("if (current < dist) {");
code("dest = xsVectorSet(xsVectorGetX(prev) + current * xsVectorGetX(dir), 0,");
code("xsVectorGetZ(prev) + current * xsVectorGetZ(dir));");

code("if (distanceBetweenVectors(pos, dest) < 9.0) {");
code("gainFavor(p, 1);");
code("dest = xsVectorSet(xsVectorGetX(pos) - xsVectorGetX(dest) + xsVectorGetX(xGetVector(abducts,xAbductDest)),0,");
code("xsVectorGetZ(pos) - xsVectorGetZ(dest) + xsVectorGetZ(xGetVector(abducts,xAbductDest)));");
code("if (xGetBool(abducts, xAbductCurse) &&");
code("xGetBool(dEnemies, xDeathSentence) == false) {");
code("castDeathSentence(p);");
code("xSetBool(abducts, xAbductCurse, false);");
code("}");
code("launchUnit(dEnemies, dest);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");

code("dist = abductRange * xGetFloat(dPlayerData, xPlayerSpellRange);");
code("if (xGetBool(dPlayerData, xPlayerWellActivated)) {");
code("xSetBool(dPlayerData, xPlayerWellActivated, false);");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeNightrider(p);");
code("} else {");
code("pos = kbGetBlockPosition(\"\"+xGetInt(db, xUnitName), true);");
code("dir = getUnitVector(xGetVector(dPlayerData, xPlayerWellPos), pos);");
code("prev = xsVectorSet(xsVectorGetX(pos) - dist * xsVectorGetX(dir), 0,");
code("xsVectorGetZ(pos) - dist * xsVectorGetZ(dir));");
code("addGenericProj(abducts,prev,dir);");
code("xSetVector(abducts, xProjPrev, prev);");
code("xSetVector(abducts, xAbductDest, pos);");
code("xSetInt(abducts, xAbductTimeout, trTimeMS() + dist / 0.015);");
code("}");
code("}");
code("trSoundPlayFN(\"changeunit.wav\",\"1\",-1,\"\",\"\");");
code("}");

code("if (xGetBool(dPlayerData, xPlayerRainActivated)) {");
code("xSetBool(dPlayerData, xPlayerRainActivated, false);");
code("trQuestVarSet(\"p\"+p+\"ariseCount\", trQuestVarGet(\"p\"+p+\"ariseCount\") + 3 + xGetDatabaseCount(sentences));");
code("trQuestVarSetFromRand(\"p\"+p+\"ariseAngle\", 0, 3.14, false);");
code("trQuestVarSet(\"p\"+p+\"ariseDist\", 2);");
code("trQuestVarSet(\"p\"+p+\"ariseNext\", trTimeMS());");
code("trSoundPlayFN(\"ancestorsbirth.wav\", \"1\", -1, \"\",\"\");");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"ariseCount\") > 0) {");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"ariseNext\")) {");
code("amt = trQuestVarGet(\"p\"+p+\"ariseAngle\");");
code("dir = xsVectorSet(xsSin(amt), 0, xsCos(amt));");
code("amt = trQuestVarGet(\"p\"+p+\"ariseAngle\") * 57.295;");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeNightrider(p);");
code("} else {");
code("pos = kbGetBlockPosition(\"\"+xGetInt(db, xUnitName), true);");
code("pos = xsVectorSet(xsVectorGetX(pos) + trQuestVarGet(\"p\"+p+\"ariseDist\") * xsVectorGetX(dir), 0,");
code("xsVectorGetZ(pos) + trQuestVarGet(\"p\"+p+\"ariseDist\") * xsVectorGetZ(dir));");
code("spawnMinion(p, pos, amt);");
code("}");
code("}");
code("trQuestVarSet(\"p\"+p+\"ariseDist\", 0.5 + trQuestVarGet(\"p\"+p+\"ariseDist\"));");
code("trQuestVarSet(\"p\"+p+\"ariseAngle\", 2.43 + trQuestVarGet(\"p\"+p+\"ariseAngle\"));");
code("trQuestVarSet(\"p\"+p+\"ariseCount\", trQuestVarGet(\"p\"+p+\"ariseCount\") - 1);");
code("trQuestVarSet(\"p\"+p+\"ariseNext\", trQuestVarGet(\"p\"+p+\"ariseNext\") + 200);");
code("}");
code("}");

code("switch(1*trQuestVarGet(\"p\"+p+\"nightfall\"))");
code("{");
code("case 1:");
code("{");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"nightfallCloud\");");
code("trMutateSelected(kbGetProtoUnitID(\"Kronny Birth SFX\"));");
code("trUnitOverrideAnimation(2,0,true,false,-1);");
code("trQuestVarSet(\"p\"+p+\"nightfall\", 2);");
code("trQuestVarSet(\"p\"+p+\"nightfallNext\", trTimeMS() + 1000);");
code("}");
code("case 3:");
code("{");
code("for(x=xGetDatabaseCount(clouds); >0) {");
code("hit = processGenericProj(clouds);");
code("}");
code("if (hit == PROJ_BOUNCE) {");
code("trQuestVarSet(\"p\"+p+\"nightfall\", 4);");
code("trQuestVarSet(\"p\"+p+\"nightfallDist\", 0);");
code("trQuestVarSet(\"p\"+p+\"nightfallNext\", trTimeMS());");
code("}");
code("}");
code("case 2:");
code("{");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"nightfallNext\")) {");
code("xSetBool(dPlayerData, xPlayerLaunched, false);");
code("trQuestVarSet(\"p\"+p+\"nightfall\", 3);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("pos = trVectorQuestVarGet(\"p\"+p+\"nightfallCenter\");");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"\"+p+\",0\");");
code("trMutateSelected(kbGetProtoUnitID(\"Transport Ship Greek\"));");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeNightrider(p);");
code("} else {");
code("trMutateSelected(kbGetProtoUnitID(\"Dwarf\"));");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"next\"));");
code("trUnitChangeProtoUnit(\"Hero Greek Achilles\");");
code("xSetInt(db, xCharIndex, activatePlayerUnit(xGetInt(db, xUnitName), p, kbGetProtoUnitID(\"Hero Greek Achilles\")));");
code("xSetBool(dPlayerUnits,xIsHero,true);");
code("xSetFloat(dPlayerUnits,xPhysicalResist,xGetFloat(dPlayerData,xPlayerPhysicalResist));");
code("xSetFloat(dPlayerUnits,xMagicResist,xGetFloat(dPlayerData,xPlayerMagicResist));");
code("if (xGetInt(dPlayerData, xPlayerUnit) == xGetInt(db, xUnitName)) {");
code("xSetInt(dPlayerData, xPlayerIndex, xGetNewestPointer(dPlayerUnits));");
code("}");
code("}");
code("}");
code("equipRelicsAgain(p);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\");");
code("if (trUnitVisToPlayer()) {");
code("trCameraShake(0.5, 0.5);");
code("}");
code("trUnitChangeProtoUnit(\"Kronny Birth SFX\");");

code("dir = vector(1,0,0);");
code("for(x=16; >0) {");
code("addGenericProj(clouds,pos,dir);");
code("dir = rotationMatrix(dir, 0.923879, 0.382683);");
code("}");
code("trSoundPlayFN(\"tartariangateselect.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"changeunit.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("case 4:");
code("{");
code("dist = trTimeMS() - trQuestVarGet(\"p\"+p+\"nightfallNext\");");
code("dist = dist * 0.015;");
code("if (dist > nightfallRadius * xGetFloat(dPlayerData, xPlayerSpellRange)) {");
code("trQuestVarSet(\"p\"+p+\"nightfall\", 0);");
code("for(x=xGetDatabaseCount(clouds); >0) {");
code("xDatabaseNext(clouds);");
code("xUnitSelectByID(clouds, xUnitID);");
code("trUnitDestroy();");
code("}");
code("xClearDatabase(clouds);");
code("}");
code("pos = trVectorQuestVarGet(\"p\"+p+\"nightfallCenter\");");
code("dist = xsPow(dist, 2);");
code("amt = 0;");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (xGetBool(dEnemies, xDeathSentence) == false) {");
code("current = unitDistanceToVector(xGetInt(dEnemies, xUnitName), pos);");
code("if (current < dist && current > trQuestVarGet(\"p\"+p+\"nightfallDist\")) {");
code("if (current > amt) {");
code("amt = current;");
code("}");
code("castDeathSentence(p);");
code("stunUnit(dEnemies, deathSentenceDuration, p);");
code("}");
code("}");
code("}");
code("trQuestVarSet(\"p\"+p+\"nightfallDist\", amt);");
code("}");
code("case 0:");
code("{");
code("if (xGetBool(dPlayerData, xPlayerLureActivated)) {");
code("xSetBool(dPlayerData, xPlayerLureActivated, false);");
code("gainFavor(p, 0.0 - nightfallCost * xGetFloat(dPlayerData, xPlayerUltimateCost));");
code("trVectorQuestVarSet(\"p\"+p+\"nightfallCenter\", vectorSnapToGrid(xGetVector(dPlayerData, xPlayerLurePos)));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"lureObject\");");
code("trUnitDestroy();");
code("zSetProtoUnitStat(\"Kronny Flying\", p, 1, 0.01);");
code("trQuestVarSet(\"p\"+p+\"nightfall\", 1);");
code("xSetBool(dPlayerData, xPlayerLaunched, true);");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeNightrider(p);");
code("} else {");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");
code("xSetPointer(dPlayerUnits, xGetInt(db, xCharIndex));");
code("xUnitSelect(dPlayerUnits, xStunSFX);");
code("trUnitDestroy();");
code("xUnitSelect(dPlayerUnits, xPoisonSFX);");
code("trUnitDestroy();");
code("xUnitSelect(dPlayerUnits, xSilenceSFX);");
code("trUnitDestroy();");
code("removePlayerUnit();");
code("}");
code("}");

code("pos = trVectorQuestVarGet(\"p\"+p+\"nightfallCenter\");");
code("trUnitSelectClear();");
code("trQuestVarSet(\"p\"+p+\"nightfallCloud\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\",\"Kronny Flying\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"\"+p+\",0\");");
code("trMutateSelected(kbGetProtoUnitID(\"Kronny Flying\"));");
code("trDamageUnitPercent(100);");
code("trSetSelectedScale(0,3,0);");

code("trSoundPlayFN(\"cinematics\32_out\kronosbehinddorrshort.mp3\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("}");

code("xSetPointer(dEnemies, index);");
code("poisonKillerBonus(p);");
code("}");

code("void chooseNightrider(int eventID = -1) {");
code("xsSetContextPlayer(0);");
code("int p = eventID - 1000 - 12 * NIGHTRIDER;");
code("int db = getCharactersDB(p);");
code("resetCharacterCustomVars(p);");
code("xSetPointer(dPlayerData, p);");
code("if (trCurrentPlayer() == p) {");
code("map(\"q\", \"game\", \"uiSetSpecialPower(133) uiSpecialPowerAtPointer\");");
code("wellName = \"(Q) Abduct\";");
code("wellIsUltimate = false;");
code("map(\"w\", \"game\", \"uiSetSpecialPower(156) uiSpecialPowerAtPointer\");");
code("rainName = \"(W) Arise\";");
code("rainIsUltimate = false;");
code("map(\"e\", \"game\", \"uiSetSpecialPower(227) uiSpecialPowerAtPointer\");");
code("lureName = \"(E) Nightfall\";");
code("lureIsUltimate = true;");
code("}");

code("xSetInt(dPlayerData,xPlayerWellCooldown, abductCooldown);");
code("xSetFloat(dPlayerData,xPlayerWellCost,0);");
code("xSetInt(dPlayerData,xPlayerLureCooldown, 1);");
code("xSetFloat(dPlayerData,xPlayerLureCost, nightfallCost);");
code("xSetInt(dPlayerData,xPlayerRainCooldown,ariseCooldown);");
code("xSetFloat(dPlayerData,xPlayerRainCost, 0);");

code("if (trQuestVarGet(\"p\"+p+\"sentences\") == 0) {");
code("db = xInitDatabase(\"p\"+p+\"sentences\");");
code("trQuestVarSet(\"p\"+p+\"sentences\", db);");
code("xInitAddInt(db, \"name\");");
code("xDeathSentenceIndex = xInitAddInt(db, \"index\");");
code("xInitAddInt(db, \"id\");");
code("xDeathSentencePos = xInitAddVector(db, \"pos\");");
code("xDeathSentenceTimeout = xInitAddInt(db, \"timeout\");");
code("xDeathSentenceHealth = xInitAddFloat(db, \"health\");");
code("xDeathSentenceSFX = xInitAddInt(db, \"sfx\");");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"abducts\") == 0) {");
code("db = initGenericProj(\"p\"+p+\"abducts\",kbGetProtoUnitID(\"Kronny Birth SFX\"),2,15.0,4.5,0,p,true);");
code("trQuestVarSet(\"p\"+p+\"abducts\", db);");
code("xAbductDest = xInitAddVector(db, \"dest\");");
code("xAbductTimeout = xInitAddInt(db, \"timeout\");");
code("xAbductCurse = xInitAddBool(db, \"curse\", true);");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"nightfallClouds\") == 0) {");
code("db = initGenericProj(\"p\"+p+\"nightfallClouds\", kbGetProtoUnitID(\"Kronny Birth SFX\"),2,15.0,4.5,0,p);");
code("trQuestVarSet(\"p\"+p+\"nightfallClouds\", db);");
code("}");
code("}");

code("void nightriderModify(int eventID = -1) {");
code("xsSetContextPlayer(0);");
code("int p = eventID - 5000 - 12 * NIGHTRIDER;");
code("zSetProtoUnitStat(\"Minion\", p, 0, 0.2 * xGetFloat(dPlayerData, xPlayerHealth, p));");
code("zSetProtoUnitStat(\"Minion\", p, 27, 0.2 * xGetFloat(dPlayerData, xPlayerAttack, p));");
code("zSetProtoUnitStat(\"Hero Greek Achilles\", p, 27, xGetFloat(dPlayerData, xPlayerAttack, p));");
code("}");

code("rule nightrider_init");
code("active");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("for(p=1; < ENEMY_PLAYER) {");
code("trEventSetHandler(12 * NIGHTRIDER + p, \"nightriderAlways\");");
code("trEventSetHandler(1000 + 12 * NIGHTRIDER + p, \"chooseNightrider\");");
code("trEventSetHandler(5000 + 12 * NIGHTRIDER + p, \"nightriderModify\");");
code("}");
code("}");
code("int thunderstrikeCooldown = 12;");
code("float thunderstrikeRadius = 6;");
code("float thunderstrikeDamage = 60;");

code("int hexboltCooldown = 18;");
code("float hexboltDuration = 6;");
code("float hexboltRadius = 3;");
code("float hexboltDamage = 30;");

code("float vortexCost = 80;");
code("float vortexRadius = 12;");
code("float vortexMoveTime = 800;");

code("int xHex = 0;");
code("int xBounces = 0;");

code("int xZapStart = 0;");
code("int xZapEnd = 0;");
code("int xZapStartTime = 0;");
code("int xZapNext = 0;");
code("int xZapHex = 0;");
code("int xZapBounces = 0;");
code("int xZapIndex = 0;");

code("int xWitchPigIndex = 0;");
code("int xWitchPigProto = 0;");
code("int xWitchPigTimeout = 0;");

code("int xHexOrbPos = 0;");
code("int xHexOrbNext = 0;");
code("int xHexOrbTimeout = 0;");

code("int xVortexLast = 0;");
code("int xVortexRadius = 0;");
code("int xVortexCenter = 0;");
code("int xVortexDir = 0;");
code("int xVortexStep = 0;");
code("int xVortexTimeout = 0;");

code("void removeSparkWitch(int p = 0) {");
code("removePlayerSpecific(p);");
code("}");

code("void sparkWitchAlways(int eventID = -1) {");
code("xsSetContextPlayer(0);");
code("int p = eventID - 12 * SPARKWITCH;");
code("int id = 0;");
code("int hit = 0;");
code("int target = 0;");
code("int next = 0;");
code("int index = xGetPointer(dEnemies);");
code("int db = getCharactersDB(p);");
code("int zaps = trQuestVarGet(\"p\"+p+\"zaps\");");
code("int pigs = trQuestVarGet(\"p\"+p+\"witchPigs\");");
code("int orbs = trQuestVarGet(\"p\"+p+\"hexOrbs\");");
code("int vortexObjects = trQuestVarGet(\"p\"+p+\"vortexObjects\");");
code("float amt = 0;");
code("float dist = 0;");
code("float current = 0;");
code("xSetPointer(dPlayerData, p);");

code("vector pos = vector(0,0,0);");
code("vector end = vector(0,0,0);");
code("vector dir = vector(0,0,0);");

code("for (y=xGetDatabaseCount(db); > 0) {");
code("xDatabaseNext(db);");
code("id = xGetInt(db, xUnitID);");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("if (trUnitAlive() == false) {");
code("removeSparkWitch(p);");
code("} else {");
code("if (kbUnitGetAnimationActionType(id) == 59) {");
code("xsSetContextPlayer(p);");
code("target = kbUnitGetTargetUnitID(id);");
code("xsSetContextPlayer(0);");
code("xSetBool(db, xCharAttacking, true);");
code("xSetInt(db, xCharSpecialAttack, 1);");
code("xSetInt(db, xCharAttackTarget, trGetUnitScenarioNameNumber(target));");
code("xSetInt(db, xCharAttackNext, trTimeMS() + xGetInt(dPlayerData, xPlayerFirstDelay));");
code("trUnitOverrideAnimation(19,0,false,false,-1);");
code("}");
code("switch(xGetInt(db, xCharSpecialAttack))");
code("{");
code("case 1:");
code("{");
code("if (trTimeMS() > xGetInt(db, xCharAttackNext)) {");
code("xSetInt(db, xCharSpecialAttack, 2);");
code("xSetInt(db, xCharAttackNext, xGetInt(db, xCharAttackNext) + xGetInt(dPlayerData, xPlayerFirstDelay));");

code("pos = kbGetBlockPosition(\"\"+xGetInt(db, xUnitName), true);");
code("next = xGetInt(db, xCharAttackTarget);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+next, true);");
code("if (trUnitAlive()) {");
code("end = kbGetBlockPosition(\"\"+next, true);");
code("xAddDatabaseBlock(zaps, true);");
code("xSetInt(zaps, xUnitName, next);");
code("xSetVector(zaps, xZapStart, pos);");
code("xSetVector(zaps, xZapEnd, end);");
code("xSetInt(zaps, xZapStartTime, trTimeMS());");
code("xSetInt(zaps, xZapHex, xGetInt(db, xHex));");
code("xSetInt(zaps, xZapBounces, xGetInt(dPlayerData, xPlayerProjectiles) + xGetInt(db, xBounces));");
code("if (xGetInt(db, xHex) == 2) {");
code("trSoundPlayFN(\"pigpower.wav\",\"1\",-1,\"\",\"\");");
code("} else if (xGetInt(db, xHex) == 1) {");
code("trSoundPlayFN(\"lightningbirth.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("xSetInt(db, xBounces, 0);");
code("xSetInt(db, xHex, 0);");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("if (xGetInt(dEnemies, xUnitName) == next) {");
code("xSetInt(zaps, xZapIndex, xGetPointer(dEnemies));");
code("break;");
code("}");
code("}");
code("if (xGetInt(db, xUnitName) == xGetInt(dPlayerData, xPlayerUnit)) {");
code("if (trCurrentPlayer() == p) {");
code("trClearCounterDisplay();");
code("}");
code("}");
code("}");
code("} else if (kbUnitGetAnimationActionType(id) != 16) {");
code("xSetBool(db, xCharAttacking, false);");
code("xSetInt(db, xCharSpecialAttack, 0);");
code("}");
code("}");
code("case 2:");
code("{");
code("if (trTimeMS() > xGetInt(db, xCharAttackNext)) {");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("xSetBool(db, xCharAttacking, false);");
code("xSetInt(db, xCharSpecialAttack, 0);");
code("}");
code("}");
code("}");
code("}");
code("}");

code("if (xGetDatabaseCount(pigs) > 0) {");
code("xDatabaseNext(pigs);");
code("xUnitSelect(pigs, xUnitName);");
code("if ((xGetInt(pigs, xWitchPigProto) == kbGetProtoUnitID(\"Hero Boar\")) ||");
code("(xGetInt(pigs, xWitchPigProto) == kbGetProtoUnitID(\"Hero Boar 2\"))) {");
code("xFreeDatabaseBlock(pigs);");
code("} else if (trUnitAlive() == false) {");
code("trUnitChangeProtoUnit(kbGetProtoUnitName(xGetInt(pigs, xWitchPigProto)));");
code("xFreeDatabaseBlock(pigs);");
code("} else if (trTimeMS() > xGetInt(pigs, xWitchPigTimeout)) {");
code("trMutateSelected(xGetInt(pigs, xWitchPigProto));");
code("if (xSetPointer(dEnemies, xGetInt(pigs, xWitchPigTimeout))) {");
code("xSetFloat(dEnemies, xPhysicalResist, xGetFloat(pigs, xPhysicalResist));");
code("xSetFloat(dEnemies, xMagicResist, xGetFloat(pigs, xMagicResist));");
code("}");
code("xFreeDatabaseBlock(pigs);");
code("}");
code("}");

code("if(xGetDatabaseCount(orbs) >0) {");
code("xDatabaseNext(orbs);");
code("amt = trTimeMS() - xGetInt(orbs, xHexOrbNext);");
code("if (amt > 500) {");
code("amt = 0.001 * amt * hexboltDamage * xGetFloat(dPlayerData, xPlayerSpellDamage);");
code("pos = xGetVector(orbs, xHexOrbPos);");
code("dist = xsPow(hexboltRadius * xGetFloat(dPlayerData, xPlayerSpellRange), 2);");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (unitDistanceToVector(xGetInt(dEnemies, xUnitName), pos) < dist) {");
code("damageEnemy(p, amt);");
code("}");
code("}");

code("if (trTimeMS() > xGetInt(orbs, xHexOrbTimeout)) {");
code("xUnitSelect(orbs, xUnitName);");
code("trUnitDestroy();");
code("xFreeDatabaseBlock(orbs);");
code("} else {");
code("xSetInt(orbs, xHexOrbNext, trTimeMS());");
code("}");
code("}");
code("}");

code("if (xGetDatabaseCount(zaps) > 0) {");
code("xDatabaseNext(zaps);");
code("current = trTimeMS() - xGetInt(zaps, xZapStartTime);");
code("if (current > xGetInt(zaps, xZapNext)) {");
code("xUnitSelect(zaps, xUnitName);");
code("if (trUnitAlive()) {");
code("end = kbGetBlockPosition(\"\"+xGetInt(zaps, xUnitName), true);");
code("xSetVector(zaps, xZapEnd, end);");
code("} else {");
code("end = xGetVector(zaps, xZapEnd);");
code("}");
code("pos = xGetVector(zaps, xZapStart);");
code("dir = end - pos;");
code("for(y=5; >0) {");
code("if (current > xGetInt(zaps, xZapNext)) {");
code("xSetInt(zaps, xZapNext, 100 + xGetInt(zaps, xZapNext));");
code("amt = 0.002 * xGetInt(zaps, xZapNext);");
code("pos = pos + (dir * amt);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"1,0\");");
code("if (xGetInt(zaps, xZapHex) == 0) {");
code("trUnitChangeProtoUnit(\"Lightning Sparks Ground\");");
code("} else {");
code("trUnitChangeProtoUnit(\"Lightning Sparks\");");
code("}");
code("} else {");
code("break;");
code("}");
code("}");
code("if (xGetInt(zaps, xZapNext) >= 500) {");
code("gainFavor(p, 1.0);");
code("trQuestVarSetFromRand(\"sound\", 1, 5, true);");
code("trSoundPlayFN(\"ui\lightning\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("xUnitSelect(zaps, xUnitName);");
code("if (trUnitAlive()) {");
code("trUnitHighlight(0.2, false);");
code("if (xGetInt(zaps, xZapIndex) > 0) {");
code("if (xSetPointer(dEnemies, xGetInt(zaps, xZapIndex))) {");
code("damageEnemy(p, 100.0 * xGetFloat(dPlayerData, xPlayerSpellDamage));");
code("if (xGetInt(zaps, xZapHex) > 0) {");
code("pos = vectorSnapToGrid(end);");
code("next = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("if (xGetInt(zaps, xZapHex) == 2) {");
code("xAddDatabaseBlock(pigs, true);");
code("xSetInt(pigs, xUnitName, xGetInt(zaps, xUnitName));");
code("xSetInt(pigs, xWitchPigProto, kbGetUnitBaseTypeID(xGetInt(dEnemies, xUnitID)));");
code("xSetFloat(pigs, xPhysicalResist, xGetFloat(dEnemies, xPhysicalResist));");
code("xSetFloat(pigs, xMagicResist, xGetFloat(dEnemies, xMagicResist));");
code("xSetInt(pigs, xWitchPigIndex, xGetPointer(dEnemies));");
code("xSetInt(pigs, xWitchPigTimeout, trTimeMS() + 1000 * hexboltDuration * xGetFloat(dPlayerData, xPlayerSpellDuration));");
code("xSetFloat(dEnemies, xPhysicalResist, 0);");
code("xSetFloat(dEnemies, xMagicResist, 0);");
code("if (xGetInt(zaps, xUnitName) == bossUnit) {");
code("trMutateSelected(kbGetProtoUnitID(\"Hero Boar 2\"));");
code("} else {");
code("trMutateSelected(kbGetProtoUnitID(\"Hero Boar\"));");
code("}");
code("xSetInt(dEnemies, xSilenceStatus, 1);");
code("silenceUnit(dEnemies,hexboltDuration,p);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+next, true);");
code("trUnitChangeProtoUnit(\"Curse SFX\");");
code("} else if (xGetInt(zaps, xZapHex) == 1) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+next, true);");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+next, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Arkantos God\"));");
code("trSetSelectedScale(0,0,0);");
code("trUnitOverrideAnimation(26,0,true,false,-1);");
code("xAddDatabaseBlock(orbs, true);");
code("xSetInt(orbs, xUnitName, next);");
code("xSetInt(orbs, xHexOrbTimeout,");
code("trTimeMS() + 1000 * hexboltDuration * xGetFloat(dPlayerData, xPlayerSpellDuration));");
code("xSetInt(orbs, xHexOrbNext, trTimeMS());");
code("xSetVector(orbs, xHexOrbPos, pos);");
code("}");
code("}");
code("OnHit(p, xGetInt(zaps, xZapIndex), true);");
code("}");
code("}");
code("}");
code("xSetInt(zaps, xZapBounces, xGetInt(zaps, xZapBounces) - 1);");
code("if (xGetInt(zaps, xZapBounces) > 0) {");
code("dist = xsPow(xGetFloat(dPlayerData, xPlayerRange) - 5, 2);");
code("hit = 0;");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (xGetInt(zaps, xUnitName) == xGetInt(dEnemies, xUnitName)) {");
code("continue;");
code("} else if (unitDistanceToVector(xGetInt(dEnemies, xUnitName), end) < dist) {");
code("hit = 1;");
code("break;");
code("}");
code("}");
code("if (hit == 1) {");
code("xSetInt(zaps, xUnitName, xGetInt(dEnemies, xUnitName));");
code("xSetInt(zaps, xZapIndex, xGetPointer(dEnemies));");
code("xSetInt(zaps, xZapStartTime, trTimeMS());");
code("xSetInt(zaps, xZapNext, 0);");
code("xSetVector(zaps, xZapStart, end);");
code("xSetVector(zaps, xZapEnd, xGetVector(dEnemies, xUnitPos));");
code("} else if (unitDistanceToVector(xGetInt(dPlayerData, xPlayerUnit), end) < dist) {");
code("xSetInt(zaps, xUnitName, xGetInt(dPlayerData, xPlayerUnit));");
code("xSetInt(zaps, xZapIndex, -1);");
code("xSetInt(zaps, xZapNext, 0);");
code("xSetInt(zaps, xZapStartTime, trTimeMS());");
code("xSetVector(zaps, xZapStart, end);");
code("xSetVector(zaps, xZapEnd, kbGetBlockPosition(\"\"+xGetInt(dPlayerData, xPlayerUnit)));");
code("} else {");
code("xFreeDatabaseBlock(zaps);");
code("}");
code("} else {");
code("xFreeDatabaseBlock(zaps);");
code("}");
code("}");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"thunderstrikeActive\") == 1) {");
code("trQuestVarSet(\"p\"+p+\"thunderstrikeActive\", 0);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"thunderstrike\");");
code("trUnitChangeProtoUnit(\"Tremor\");");
code("}");

code("if (xGetBool(dPlayerData, xPlayerWellActivated)) {");
code("xSetBool(dPlayerData, xPlayerWellActivated, false);");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xSetInt(db, xBounces, 1 + xGetInt(db, xBounces));");
code("}");
code("pos = xGetVector(dPlayerData, xPlayerWellPos);");
code("trQuestVarSetFromRand(\"sound\", 1, 5, true);");
code("trSoundPlayFN(\"lightningstrike\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("trChatSetStatus(false);");
code("trDelayedRuleActivation(\"enable_chat\");");
code("next = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+next, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Militia\"));");
code("trSetSelectedScale(0,0,0);");
code("trTechInvokeGodPower(0, \"bolt\", vector(0,0,0), vector(0,0,0));");
code("trQuestVarSet(\"p\"+p+\"thunderstrikeActive\", 1);");
code("trQuestVarSet(\"p\"+p+\"thunderstrike\", next);");
code("dist = xsPow(thunderstrikeRadius * xGetFloat(dPlayerData, xPlayerSpellRange), 2);");
code("amt = thunderstrikeDamage * xGetFloat(dPlayerData, xPlayerSpellDamage);");
code("hit = 0;");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (unitDistanceToVector(xGetInt(dEnemies, xUnitName), pos) < dist) {");
code("hit = hit + 1;");
code("damageEnemy(p, amt);");
code("}");
code("}");
code("gainFavor(p, hit);");
code("if (hit > 0) {");
code("xSetInt(dPlayerData, xPlayerWellReadyTime, xGetInt(dPlayerData, xPlayerWellReadyTime) - 1000 * hit);");
code("if (xGetInt(dPlayerData, xPlayerWellReadyTime) < trTimeMS() + 500) {");
code("xSetInt(dPlayerData, xPlayerWellReadyTime, trTimeMS() + 500);");
code("}");
code("if (trCurrentPlayer() == p) {");
code("trCounterAbort(\"well\");");
code("trCounterAddTime(\"well\",");
code("xsMax(xGetInt(dPlayerData, xPlayerWellCooldown) * xGetFloat(dPlayerData, xPlayerCooldownReduction) - hit, 1),");
code("0, wellName);");
code("}");
code("}");
code("}");

code("if (xGetBool(dPlayerData, xPlayerLureActivated)) {");
code("xSetBool(dPlayerData, xPlayerLureActivated, false);");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xSetInt(db, xBounces, 1 + xGetInt(db, xBounces));");
code("}");
code("gainFavor(p, 0.0 - vortexCost * xGetFloat(dPlayerData, xPlayerUltimateCost));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"lureObject\", true);");
code("trUnitDestroy();");
code("pos = xGetVector(dPlayerData, xPlayerLurePos);");
code("dist = vortexRadius * xGetFloat(dPlayerData, xPlayerSpellRange);");
code("next = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",8,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"\"+p+\",0\");");
code("trMutateSelected(kbGetProtoUnitID(\"Vortex Finish Linked\"));");
code("trSetSelectedScale(0,0,0);");
code("trUnitSetAnimationPath(\"0,0,1,0,0,0,0\");");
code("xAddDatabaseBlock(vortexObjects, true);");
code("xSetInt(vortexObjects, xVortexLast, trTimeMS());");
code("xSetInt(vortexObjects, xVortexRadius, vortexRadius * xGetFloat(dPlayerData, xPlayerSpellRange));");
code("xSetVector(vortexObjects, xVortexCenter, pos);");
code("xSetInt(vortexObjects, xVortexTimeout, trTimeMS() + 1000);");
code("trSoundPlayFN(\"cinematics\32_out\doorseal.mp3\",\"1\",-1,\"\",\"\");");
code("}");

code("if (xGetDatabaseCount(vortexObjects) > 0) {");
code("xDatabaseNext(vortexObjects);");
code("if (xGetInt(vortexObjects, xVortexStep) == 1) {");
code("dist = 0.015 * (xGetInt(vortexObjects, xVortexTimeout) - trTimeMS());");
code("} else {");
code("dist = xGetFloat(vortexObjects, xVortexRadius);");
code("}");
code("amt = trTimeMS() - xGetInt(vortexObjects, xVortexLast);");
code("amt = amt * 0.002;");
code("xSetInt(vortexObjects, xVortexLast, trTimeMS());");

code("dir = rotationMatrix(xGetVector(vortexObjects, xVortexDir), xsCos(amt), xsSin(amt));");
code("xSetVector(vortexObjects, xVortexDir, dir);");
code("dir = dir * dist;");
code("for(x=0; < 8) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+(x + xGetInt(vortexObjects, xUnitName)), true);");
code("trSetSelectedUpVector(xsVectorGetX(dir),0,xsVectorGetZ(dir));");
code("dir = rotationMatrix(dir, 0.707107, 0.707107);");
code("}");
code("if (trTimeMS() > xGetInt(vortexObjects, xVortexTimeout)) {");
code("if (xGetInt(vortexObjects, xVortexStep) == 0) {");
code("xSetInt(vortexObjects, xVortexStep, 1);");
code("xSetInt(vortexObjects, xVortexTimeout,");
code("trTimeMS() + vortexMoveTime * xGetFloat(dPlayerData, xPlayerSpellRange));");
code("trSoundPlayFN(\"suckup1.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"vortexstart.wav\",\"1\",-1,\"\",\"\");");
code("dist = xsPow(vortexRadius * xGetFloat(dPlayerData, xPlayerSpellRange), 2);");
code("pos = xGetVector(vortexObjects, xVortexCenter);");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (unitDistanceToVector(xGetInt(dEnemies, xUnitName), pos) < dist) {");
code("launchUnit(dEnemies, pos);");
code("xSetBool(dLaunchedUnits, xLaunchedStun, true);");
code("}");
code("}");
code("} else {");
code("for(x=0; < 8) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+(x + xGetInt(vortexObjects, xUnitName)), true);");
code("trUnitChangeProtoUnit(\"Arkantos Boost SFX\");");
code("}");
code("xFreeDatabaseBlock(vortexObjects);");
code("}");
code("}");
code("}");


code("if (xGetBool(dPlayerData, xPlayerRainActivated)) {");
code("xSetBool(dPlayerData, xPlayerRainActivated, false);");
code("trQuestVarSet(\"p\"+p+\"hex\", 1 - trQuestVarGet(\"p\"+p+\"hex\"));");
code("if (trCurrentPlayer() == p) {");
code("trSoundPlayFN(\"skypassageout.wav\",\"1\",-1,\"\",\"\");");
code("switch(1*trQuestVarGet(\"p\"+p+\"hex\"))");
code("{");
code("case 0:");
code("{");
code("trSetCounterDisplay(\"Next Attack: ELECTRIFY\");");
code("trSoundPlayFN(\"lapadesconvert.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("case 1:");
code("{");
code("trSetCounterDisplay(\"Next Attack: POLYMORPH\");");
code("trSoundPlayFN(\"pigambient.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("}");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xSetInt(db, xBounces, 1 + xGetInt(db, xBounces));");
code("xSetInt(db, xHex, 1 + trQuestVarGet(\"p\"+p+\"hex\"));");
code("}");
code("}");

code("xSetPointer(dEnemies, index);");
code("}");

code("void chooseSparkWitch(int eventID = -1) {");
code("xsSetContextPlayer(0);");
code("int p = eventID - 1000 - 12 * SPARKWITCH;");
code("int db = getCharactersDB(p);");
code("resetCharacterCustomVars(p);");
code("xSetPointer(dPlayerData, p);");
code("if (trCurrentPlayer() == p) {");
code("map(\"q\", \"game\", \"uiSetSpecialPower(133) uiSpecialPowerAtPointer\");");
code("wellName = \"(Q) Thunderstrike\";");
code("wellIsUltimate = false;");
code("map(\"w\", \"game\", \"uiSetSpecialPower(156) uiSpecialPowerAtPointer\");");
code("rainName = \"(W) Hexbolt\";");
code("rainIsUltimate = false;");
code("map(\"e\", \"game\", \"uiSetSpecialPower(227) uiSpecialPowerAtPointer\");");
code("lureName = \"(E) Vortex\";");
code("lureIsUltimate = true;");
code("}");
code("xHex = xInitAddInt(db, \"hex\");");
code("xBounces = xInitAddInt(db, \"bounces\");");

code("xSetInt(dPlayerData,xPlayerWellCooldown, thunderstrikeCooldown);");
code("xSetFloat(dPlayerData,xPlayerWellCost,0);");
code("xSetInt(dPlayerData,xPlayerLureCooldown, 1);");
code("xSetFloat(dPlayerData,xPlayerLureCost, vortexCost);");
code("xSetInt(dPlayerData,xPlayerRainCooldown,hexboltCooldown);");
code("xSetFloat(dPlayerData,xPlayerRainCost, 0);");

code("if (trQuestVarGet(\"p\"+p+\"zaps\") == 0) {");
code("db = xInitDatabase(\"p\"+p+\"zaps\");");
code("trQuestVarSet(\"p\"+p+\"zaps\", db);");
code("xInitAddInt(db, \"name\");");
code("xZapIndex = xInitAddInt(db, \"index\");");
code("xZapStart = xInitAddVector(db, \"start\");");
code("xZapEnd = xInitAddVector(db, \"end\");");
code("xZapStartTime = xInitAddInt(db, \"startTime\");");
code("xZapNext = xInitAddInt(db, \"next\");");
code("xZapHex = xInitAddInt(db, \"hex\");");
code("xZapBounces = xInitAddInt(db, \"bounces\");");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"witchPigs\") == 0) {");
code("db = xInitDatabase(\"p\"+p+\"witchPigs\");");
code("trQuestVarSet(\"p\"+p+\"witchPigs\", db);");
code("xInitAddInt(db, \"name\");");
code("xWitchPigIndex = xInitAddInt(db, \"index\");");
code("xWitchPigProto = xInitAddInt(db, \"proto\");");
code("xInitAddFloat(db, \"physicalResist\");");
code("xInitAddFloat(db, \"magicResist\");");
code("xWitchPigTimeout = xInitAddInt(db, \"timeout\");");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"hexOrbs\") == 0) {");
code("db = xInitDatabase(\"p\"+p+\"hexOrbs\");");
code("trQuestVarSet(\"p\"+p+\"hexOrbs\", db);");
code("xInitAddInt(db, \"name\");");
code("xHexOrbPos = xInitAddVector(db, \"pos\");");
code("xHexOrbNext = xInitAddInt(db, \"next\");");
code("xHexOrbTimeout = xInitAddInt(db, \"timeout\");");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"vortexObjects\") == 0) {");
code("db = xInitDatabase(\"p\"+p+\"vortexObjects\");");
code("trQuestVarSet(\"p\"+p+\"vortexObjects\", db);");
code("xInitAddInt(db, \"name\");");
code("xVortexLast = xInitAddInt(db, \"last\");");
code("xVortexRadius = xInitAddFloat(db, \"radius\");");
code("xVortexCenter = xInitAddVector(db, \"center\");");
code("xVortexDir = xInitAddVector(db, \"dir\", vector(1,0,0));");
code("xVortexStep = xInitAddInt(db, \"step\");");
code("xVortexTimeout = xInitAddInt(db, \"timeout\");");
code("}");
code("}");

code("void sparkwitchModify(int eventID = -1) {");
code("xsSetContextPlayer(0);");
code("int p = eventID - 5000 - 12 * SPARKWITCH;");
code("xSetPointer(dPlayerData, p);");
code("xSetFloat(dPlayerData, xPlayerBaseAttack, 100.0 * xGetFloat(dPlayerData, xPlayerSpellDamage));");
code("xSetFloat(dPlayerData, xPlayerAttack, xGetFloat(dPlayerData, xPlayerBaseAttack));");
code("}");

code("rule sparkWitch_init");
code("active");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("for(p=1; < ENEMY_PLAYER) {");
code("trEventSetHandler(12 * SPARKWITCH + p, \"sparkWitchAlways\");");
code("trEventSetHandler(1000 + 12 * SPARKWITCH + p, \"chooseSparkWitch\");");
code("trEventSetHandler(5000 + 12 * SPARKWITCH + p, \"sparkwitchModify\");");
code("}");
code("}");
code("float starBaseDamage = 60;");

code("int realignCooldown = 5;");
code("float realignRadius = 15;");

code("int RepelCooldown = 15;");
code("float RepelRange = 15;");

code("float eventHorizonCost = 60;");
code("float eventHorizonDuration = 10;");

code("float starAngularVelocity = 1.570796;");

code("int xStarseerStar = 0;");
code("int xStarseerMeteorite = 0;");
code("int xStarseerTargetRadius = 0;");
code("int xStarseerCurrentRadius = 0;");
code("int xStarseerAngle = 0;");
code("int xStarseerHitbox = 0;");
code("int xStarseerLast = 0;");
code("int xStarseerDir = 0;");

code("void removeStarseer(int p = 0) {");
code("int db = getCharactersDB(p);");
code("for(x=0; <3) {");
code("xUnitSelect(db, xStarseerStar + x);");
code("trUnitChangeProtoUnit(\"Rocket\");");
code("xUnitSelect(db, xStarseerMeteorite + x);");
code("trUnitChangeProtoUnit(\"Rocket\");");
code("}");
code("removePlayerSpecific(p);");
code("}");

code("void starseerAlways(int eventID = -1) {");
code("xsSetContextPlayer(0);");
code("int p = eventID - 12 * STARSEER;");
code("int id = 0;");
code("int hit = 0;");
code("int target = 0;");
code("int index = xGetPointer(dEnemies);");
code("int db = getCharactersDB(p);");
code("float amt = 0;");
code("float dist = 0;");
code("float current = 0;");
code("float angleDiff = 0;");
code("float outer = 0;");
code("float inner = 0;");
code("xSetPointer(dPlayerData, p);");

code("vector pos = vector(0,0,0);");
code("vector cur = vector(0,0,0);");
code("vector prev = vector(0,0,0);");
code("vector dir = vector(0,0,0);");
code("vector center = vector(0,0,0);");

code("for (y=xGetDatabaseCount(db); > 0) {");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeStarseer(p);");
code("} else {");

code("current = trTimeMS() - xGetInt(db, xStarseerLast);");
code("xSetInt(db, xStarseerLast, trTimeMS());");

code("amt = trQuestVarGet(\"p\"+p+\"starAngularVelocity\") * 0.001 * current;");
code("xSetFloat(db, xStarseerAngle, fModulo(6.283185, xGetFloat(db, xStarseerAngle) - amt));");

code("dist = xGetFloat(db, xStarseerTargetRadius) - xGetFloat(db, xStarseerCurrentRadius);");
code("if (xsAbs(dist) > 0.1) {");
code("dist = 2.0 * dist * 0.001 * current;");
code("xSetFloat(db, xStarseerCurrentRadius, xGetFloat(db, xStarseerCurrentRadius) + dist);");
code("} else if (xsAbs(dist) > 0) {");
code("xSetFloat(db, xStarseerCurrentRadius, xGetFloat(db, xStarseerTargetRadius));");
code("}");

code("if (xGetInt(db, xUnitName) == xGetInt(dPlayerData, xPlayerUnit)) {");
code("amt = realignRadius * xGetFloat(dPlayerData, xPlayerSpellRange) - 2.0;");
code("amt = (amt - xGetFloat(db, xStarseerCurrentRadius) + 2.0) / amt;");
code("zSetProtoUnitStat(\"Oracle Hero\", p, 1, xGetFloat(dPlayerData, xPlayerSpeed) * (0.5 + amt));");
code("}");

code("hit = 1 + xGetInt(db, xStarseerHitbox);");
code("if (hit >= 3) {");
code("hit = 0;");
code("}");
code("xSetInt(db, xStarseerHitbox, hit);");

code("current = xGetFloat(db, xStarseerAngle);");
code("dir = xsVectorSet(xsSin(current), 0, xsCos(current));");
code("for(x=0; < 3) {");
code("if (trQuestVarGet(\"spyfound\") == trQuestVarGet(\"spyfind\")) {");
code("if (xGetInt(db, xStarseerMeteorite + x) <= 0) {");
code("spyEffect(xGetInt(db, xUnitName),");
code("kbGetProtoUnitID(\"Cinematic Block\"),xsVectorSet(db, xStarseerMeteorite + x, xGetPointer(db)));");
code("}");
code("if (xGetInt(db, xStarseerStar + x) <= 0) {");
code("spyEffect(xGetInt(db, xUnitName),kbGetProtoUnitID(\"Outpost\"),");
code("xsVectorSet(db, xStarseerStar + x, xGetPointer(db)),vector(0,0,0));");
code("}");
code("}");
code("if (x == hit) {");
code("cur = dir;");
code("prev = xGetVector(db, xStarseerDir + x);");
code("angleDiff = dotProduct(cur, prev);");
code("}");
code("pos = dir * xGetFloat(db, xStarseerCurrentRadius);");
code("xUnitSelect(db, xStarseerStar + x);");
code("trSetSelectedUpVector(3.33 * xsVectorGetX(pos),0.2,3.33 * xsVectorGetZ(pos));");
code("if (trQuestVarGet(\"p\"+p+\"eventHorizon\") == 1) {");
code("xUnitSelect(db, xStarseerMeteorite + x);");
code("trSetSelectedUpVector(1.0 * xsVectorGetX(pos),0,1.0 * xsVectorGetZ(pos));");
code("}");

code("dir = rotationMatrix(dir, -0.5, -0.866025);");
code("}");

code("if (hit > 0) {");
code("outer = xsPow(xGetFloat(db, xStarseerCurrentRadius) + 1.5, 2);");
code("inner = xsPow(xGetFloat(db, xStarseerCurrentRadius) - 1.5, 2);");
code("center = kbGetBlockPosition(\"\"+xGetInt(db, xUnitName), true);");

code("amt = starBaseDamage * xGetFloat(dPlayerData, xPlayerSpellDamage);");
code("target = 0;");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeEnemy();");
code("} else {");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dEnemies, xUnitName), true);");
code("dist = distanceBetweenVectors(pos, center);");
code("if (dist < outer && dist > inner) {");
code("dir = getUnitVector(center, pos);");
code("if (dotProduct(dir, cur) > angleDiff) {");
code("if (dotProduct(dir, prev) > angleDiff) {");
code("if (trQuestVarGet(\"p\"+p+\"eventHorizon\") == 1) {");
code("stunUnit(dEnemies, 1.5, p);");
code("} else {");
code("gainFavor(p, 1);");
code("}");
code("trUnitHighlight(0.2, false);");
code("damageEnemy(p, amt, true);");
code("target = 1;");
code("}");
code("}");
code("}");
code("}");
code("}");

code("if (target == 1) {");
code("trQuestVarSetFromRand(\"sound\", 1, 3, true);");
code("trSoundPlayFN(\"fleshcrush\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("xSetVector(db, xStarseerDir + hit, cur);");
code("} else if (angleDiff < trQuestVarGet(\"p\"+p+\"starCosine\")) {");
code("xSetVector(db, xStarseerDir + hit, cur);");
code("}");
code("}");
code("}");
code("}");


code("if (xGetBool(dPlayerData, xPlayerWellActivated)) {");
code("xSetBool(dPlayerData, xPlayerWellActivated, false);");
code("pos = xGetVector(dPlayerData, xPlayerWellPos);");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db, true);");
code("trUnitSetStance(\"Passive\");");
code("amt = xsMin(realignRadius * xGetFloat(dPlayerData, xPlayerSpellRange),");
code("unitDistanceToVector(xGetInt(db, xUnitName), pos, false));");
code("amt = xsMax(2, amt);");
code("xSetFloat(db, xStarseerTargetRadius, amt);");
code("}");
code("trSoundPlayFN(\"suckup3.wav\",\"1\",-1,\"\",\"\");");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"Repel\") == 1) {");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"RepelTimeout\")) {");
code("trQuestVarSet(\"p\"+p+\"RepelTimeout\", trQuestVarGet(\"p\"+p+\"RepelTimeout\") + 1000);");
code("trQuestVarSet(\"p\"+p+\"Repel\", 2);");
code("hit = 0;");
code("dist = xsPow(RepelRange * xGetFloat(dPlayerData, xPlayerSpellRange), 2);");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeStarseer(p);");
code("} else {");
code("pos = kbGetBlockPosition(\"\"+xGetInt(db, xUnitName), true);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Tremor\");");
code("for(y=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (unitDistanceToVector(xGetInt(dEnemies, xUnitName), pos) < dist) {");
code("dir = getUnitVector(pos, kbGetBlockPosition(\"\"+xGetInt(dEnemies, xUnitName), true),");
code("RepelRange * xGetFloat(dPlayerData, xPlayerSpellRange));");
code("launchUnit(dEnemies, pos + dir);");
code("hit = hit + 1;");
code("}");
code("}");
code("}");
code("}");
code("gainFavor(p, hit);");
code("}");
code("} else if (trQuestVarGet(\"p\"+p+\"Repel\") == 2) {");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"RepelTimeout\")) {");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeStarseer(p);");
code("} else {");
code("trUnitOverrideAnimation(-1, 0, false, true, -1);");
code("}");
code("}");
code("trQuestVarSet(\"p\"+p+\"Repel\", 0);");
code("}");
code("}");

code("if (xGetBool(dPlayerData, xPlayerRainActivated)) {");
code("xSetBool(dPlayerData, xPlayerRainActivated, false);");
code("trQuestVarSet(\"p\"+p+\"Repel\", 1);");
code("trQuestVarSet(\"p\"+p+\"RepelTimeout\", trTimeMS() + 1200);");
code("trSoundPlayFN(\"oracledone.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"implode reverse.wav\",\"1\",-1,\"\",\"\");");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeStarseer(p);");
code("} else {");
code("trMutateSelected(kbGetProtoUnitID(\"Oracle Hero\"));");
code("trUnitSetStance(\"Passive\");");
code("trUnitOverrideAnimation(52, 0, false, false, -1);");
code("}");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"eventHorizon\") == 1) {");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"eventHorizonTimeout\")) {");
code("trQuestVarSet(\"p\"+p+\"eventHorizon\", 0);");
code("for(y=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("for(x=0; < 3) {");
code("xUnitSelect(db, xStarseerMeteorite + x);");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");
code("}");
code("}");
code("trQuestVarSet(\"p\"+p+\"starAngularVelocity\",");
code("starAngularVelocity * (2.0 + xGetInt(dPlayerData, xPlayerProjectiles)) / 3.0);");
code("trQuestVarSet(\"p\"+p+\"starCosine\", xsCos(trQuestVarGet(\"p\"+p+\"starAngularVelocity\") * 0.3));");
code("}");
code("}");

code("if (xGetBool(dPlayerData, xPlayerLureActivated)) {");
code("xSetBool(dPlayerData, xPlayerLureActivated, false);");
code("gainFavor(p, 0.0 - eventHorizonCost * xGetFloat(dPlayerData, xPlayerUltimateCost));");
code("trQuestVarSet(\"p\"+p+\"eventHorizon\", 1);");
code("trQuestVarSet(\"p\"+p+\"eventHorizonTimeout\",");
code("trTimeMS() + 1000 * eventHorizonDuration * xGetFloat(dPlayerData, xPlayerSpellDuration));");
code("trQuestVarSet(\"p\"+p+\"starAngularVelocity\",");
code("2.0 * starAngularVelocity * (2.0 + xGetInt(dPlayerData, xPlayerProjectiles)) / 3.0);");
code("trQuestVarSet(\"p\"+p+\"starCosine\", xsCos(trQuestVarGet(\"p\"+p+\"starAngularVelocity\") * 0.3));");
code("for(y=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("for(x=0; < 3) {");
code("xUnitSelect(db, xStarseerMeteorite + x);");
code("trMutateSelected(kbGetProtoUnitID(\"Vortex Finish Linked\"));");
code("trSetSelectedScale(0,0,0);");
code("trUnitSetAnimationPath(\"0,0,1,0,0,0,0\");");
code("}");
code("}");
code("trSoundPlayFN(\"cinematics\24_in\magic.mp3\", \"5\", -1, \"\",\"\");");
code("}");

code("xSetPointer(dEnemies, index);");
code("}");

code("void chooseStarseer(int eventID = -1) {");
code("xsSetContextPlayer(0);");
code("int p = eventID - 1000 - 12 * STARSEER;");
code("int db = getCharactersDB(p);");
code("resetCharacterCustomVars(p);");
code("xSetPointer(dPlayerData, p);");
code("if (trCurrentPlayer() == p) {");
code("map(\"w\", \"game\", \"uiSetSpecialPower(133) uiSpecialPowerAtPointer\");");
code("wellName = \"(W) Realignment\";");
code("wellIsUltimate = false;");
code("map(\"q\", \"game\", \"uiSetSpecialPower(156) uiSpecialPowerAtPointer\");");
code("rainName = \"(Q) Repel\";");
code("rainIsUltimate = false;");
code("map(\"e\", \"game\", \"uiSetSpecialPower(227) uiSpecialPowerAtPointer\");");
code("lureName = \"(E) Event Horizon\";");
code("lureIsUltimate = true;");
code("}");
code("xStarseerStar = xInitAddInt(db, \"star0\");");
code("xInitAddInt(db, \"star1\");");
code("xInitAddInt(db, \"star2\");");
code("xStarseerMeteorite = xInitAddInt(db, \"meteorite0\");");
code("xInitAddInt(db, \"meteorite1\");");
code("xInitAddInt(db, \"meteorite2\");");
code("xStarseerTargetRadius = xInitAddFloat(db, \"targetRadius\", 2.0);");
code("xStarseerCurrentRadius = xInitAddFloat(db, \"currentRadius\", 2.0);");
code("xStarseerAngle = xInitAddFloat(db, \"angle\");");
code("xStarseerHitbox = xInitAddInt(db, \"hitbox\");");
code("xStarseerLast = xInitAddInt(db, \"last\");");
code("xStarseerDir = xInitAddVector(db, \"dir0\");");
code("xInitAddVector(db, \"dir1\");");
code("xInitAddVector(db, \"dir2\");");

code("xSetInt(dPlayerData,xPlayerWellCooldown, realignCooldown);");
code("xSetFloat(dPlayerData,xPlayerWellCost,0);");
code("xSetInt(dPlayerData,xPlayerLureCooldown, 1);");
code("xSetFloat(dPlayerData,xPlayerLureCost, eventHorizonCost);");
code("xSetInt(dPlayerData,xPlayerRainCooldown,RepelCooldown);");
code("xSetFloat(dPlayerData,xPlayerRainCost, 0);");
code("}");

code("void starseerModify(int eventID = -1) {");
code("xsSetContextPlayer(0);");
code("int p = eventID - 5000 - 12 * STARSEER;");
code("xSetPointer(dPlayerData, p);");
code("zSetProtoUnitStat(\"Oracle Hero\", p, 27, 0);");
code("trQuestVarSet(\"p\"+p+\"starAngularVelocity\",");
code("starAngularVelocity * (2.0 + xGetInt(dPlayerData, xPlayerProjectiles)) / 3.0);");
code("if (trQuestVarGet(\"p\"+p+\"eventHorizon\") == 1) {");
code("trQuestVarSet(\"p\"+p+\"starAngularVelocity\", 2.0 * trQuestVarGet(\"p\"+p+\"starAngularVelocity\"));");
code("}");
code("trQuestVarSet(\"p\"+p+\"starCosine\", xsCos(trQuestVarGet(\"p\"+p+\"starAngularVelocity\") * 0.3));");
code("}");

code("rule starseer_init");
code("active");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("for(p=1; < ENEMY_PLAYER) {");
code("trEventSetHandler(12 * STARSEER + p, \"starseerAlways\");");
code("trEventSetHandler(1000 + 12 * STARSEER + p, \"chooseStarseer\");");
code("trEventSetHandler(5000 + 12 * STARSEER + p, \"starseerModify\");");
code("trQuestVarSet(\"p\"+p+\"starAngularVelocity\", starAngularVelocity);");
code("trQuestVarSet(\"p\"+p+\"starCosine\", xsCos(trQuestVarGet(\"p\"+p+\"starAngularVelocity\") * 0.3));");
code("}");
code("}");

code("int vowCooldown = 10;");

code("int justiceCooldown = 10;");
code("float justiceRadius = 8;");

code("float shieldOfLightCost = 60;");
code("int shieldOfLightCooldown = 20;");
code("float shieldOfLightDuration = 6;");
code("float shieldOfLightWidth = 3;");

code("int xThroneShieldSFX = 0;");
code("int xThroneShieldAbsorbed = 0;");
code("int xThroneShieldLaser = 0;");

code("void removeThroneShield(int p = 0) {");
code("int db = getCharactersDB(p);");
code("if (xGetInt(db, xUnitName) == xGetInt(dPlayerData, xPlayerUnit, p)) {");
code("int queen = xGetInt(dPlayerData, xPlayerQueen);");
code("if (queen > 0) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xPlayerTether, queen), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");
code("}");
code("xSetInt(dPlayerData, xPlayerTether, 0, p);");
code("xSetInt(dPlayerData, xPlayerSimp, 0, queen);");
code("xSetInt(dPlayerData, xPlayerQueen, 0, p);");
code("}");
code("removePlayerSpecific(p);");
code("}");

code("void throneShieldAlways(int eventID = -1) {");
code("xsSetContextPlayer(0);");
code("int p = eventID - 12 * THRONESHIELD;");
code("int id = 0;");
code("int hit = 0;");
code("int target = 0;");
code("int index = xGetPointer(dEnemies);");
code("int db = getCharactersDB(p);");
code("float amt = 0;");
code("float dist = 0;");
code("float current = 0;");
code("xSetPointer(dPlayerData, p);");

code("vector start = vector(0,0,0);");
code("vector end = vector(0,0,0);");
code("vector dir = vector(0,0,0);");

code("if (xGetBool(dPlayerData, xPlayerWellActivated)) {");
code("xSetBool(dPlayerData, xPlayerWellActivated, false);");
code("target = 0;");
code("dist = 100;");
code("for(x=1; < ENEMY_PLAYER) {");
code("if (x == p) {");
code("continue;");
code("} else if (xGetInt(dPlayerData, xPlayerDead, x) == 0) {");
code("current = unitDistanceToVector(xGetInt(dPlayerData, xPlayerUnit, x), xGetVector(dPlayerData, xPlayerWellPos));");
code("if (current < dist) {");
code("target = x;");
code("dist = current;");
code("}");
code("}");
code("}");
code("if (target > 0) {");
code("if (xGetInt(dPlayerData, xPlayerSimp, target) > 0) {");
code("target = 0;");
code("if (trCurrentPlayer() == p) {");
code("trChatSend(0, \"That player already has a partner!\");");
code("}");
code("} else if (xGetInt(dPlayerData, xPlayerClass, target) == THRONESHIELD) {");
code("target = 0;");
code("if (trCurrentPlayer() == p) {");
code("trChatSend(0, \"Cannot target another Throne Shield!\");");
code("}");
code("} else {");
code("if (xGetInt(dPlayerData, xPlayerQueen) > 0) {");
code("hit = xGetInt(dPlayerData, xPlayerQueen);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xPlayerTether, hit), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");
code("xSetInt(dPlayerData, xPlayerSimp, 0, hit);");
code("}");
code("xSetInt(dPlayerData, xPlayerSimp, p, target);");
code("xSetInt(dPlayerData, xPlayerQueen, target, p);");
code("if (trCurrentPlayer() == p) {");
code("trChatSend(0, \"<color=1,1,1>You have given your Knight's Vow to \" + trStringQuestVarGet(\"p\"+target+\"name\") + \"!\");");
code("}");
code("if (trCurrentPlayer() == target) {");
code("trChatSend(0, \"<color=1,1,1>\" + trStringQuestVarGet(\"p\"+p+\"name\") + \" has given you a Knight's Vow!\");");
code("}");
code("id = xGetInt(dPlayerUnits, xUnitID, xGetInt(dPlayerData, xPlayerIndex, target));");
code("xsSetContextPlayer(target);");
code("amt = kbUnitGetCurrentHitpoints(id);");
code("xsSetContextPlayer(0);");
code("trSoundPlayFN(\"militarycreate.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"herocreation.wav\",\"1\",-1,\"\",\"\");");
code("if (xGetInt(dPlayerData, xPlayerTether) <= 0) {");
code("spyEffect(xGetInt(dPlayerData, xPlayerUnit, p),");
code("kbGetProtoUnitID(\"Vortex Finish Linked\"),xsVectorSet(dPlayerData,xPlayerTether,p));");
code("trQuestVarSet(\"p\"+p+\"tetherReady\", 0);");
code("} else {");
code("xUnitSelect(dPlayerData, xPlayerTether);");
code("trMutateSelected(kbGetProtoUnitID(\"Vortex Finish Linked\"));");
code("trUnitSetAnimationPath(\"0,1,0,0,0,0,0\");");
code("trQuestVarSet(\"p\"+p+\"tetherReady\", 1);");
code("}");
code("if (xGetInt(dPlayerData, xPlayerTether, target) == -1) {");
code("spyEffect(xGetInt(dPlayerData, xPlayerUnit, target),");
code("kbGetProtoUnitID(\"Vortex Finish Linked\"),xsVectorSet(dPlayerData, xPlayerTether, target));");
code("trQuestVarSet(\"p\"+target+\"tetherReady\", 0);");
code("} else {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xPlayerTether, target), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Vortex Finish Linked\"));");
code("trUnitSetAnimationPath(\"0,1,0,0,0,0,0\");");
code("trQuestVarSet(\"p\"+target+\"tetherReady\", 1);");
code("}");
code("}");
code("} else if (trCurrentPlayer() == p) {");
code("trChatSend(0, \"You must target an ally!\");");
code("}");
code("if (target == 0) {");
code("if (trCurrentPlayer() == p) {");
code("trCounterAbort(\"well\");");
code("trSoundPlayFN(\"cantdothat.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("xSetInt(dPlayerData, xPlayerWellCooldownStatus, ABILITY_COST);");
code("}");
code("}");

code("if (xGetInt(dPlayerData, xPlayerQueen) > 0) {");
code("target = xGetInt(dPlayerData, xPlayerQueen);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xPlayerUnit, target), true);");
code("if (trUnitAlive()) {");
code("start = kbGetBlockPosition(\"\"+xGetInt(dPlayerData, xPlayerUnit, target), true);");
code("end = kbGetBlockPosition(\"\"+xGetInt(dPlayerData, xPlayerUnit, p), true);");
code("dir = getUnitVector(start, end);");
code("if (trQuestVarGet(\"spyfind\") == trQuestVarGet(\"spyfound\")) {");
code("if (xGetInt(dPlayerData, xPlayerTether) <= 0) {");
code("spyEffect(xGetInt(dPlayerData, xPlayerUnit),");
code("kbGetProtoUnitID(\"Vortex Finish Linked\"),xsVectorSet(dPlayerData, xPlayerTether, p));");
code("trQuestVarSet(\"p\"+p+\"tetherReady\", 0);");
code("} else if (trQuestVarGet(\"p\"+p+\"tetherReady\") == 0) {");
code("xUnitSelect(dPlayerData, xPlayerTether);");
code("trUnitSetAnimationPath(\"0,1,0,0,0,0,0\");");
code("trQuestVarSet(\"p\"+p+\"tetherReady\", 1);");
code("}");
code("if (xGetInt(dPlayerData, xPlayerTether, target) <= 0) {");
code("spyEffect(xGetInt(dPlayerData, xPlayerUnit, target),");
code("kbGetProtoUnitID(\"Vortex Finish Linked\"),xsVectorSet(dPlayerData, xPlayerTether, target));");
code("trQuestVarSet(\"p\"+target+\"tetherReady\", 0);");
code("} else if (trQuestVarGet(\"p\"+target+\"tetherReady\") == 0) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xPlayerTether, target), true);");
code("trUnitSetAnimationPath(\"0,1,0,0,0,0,0\");");
code("trQuestVarSet(\"p\"+target+\"tetherReady\", 1);");
code("}");
code("}");
code("xUnitSelect(dPlayerData, xPlayerTether);");
code("trSetSelectedUpVector(0.0 - xsVectorGetX(dir),-1,0.0 - xsVectorGetZ(dir));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xPlayerTether, target), true);");
code("trSetSelectedUpVector(xsVectorGetX(dir),-1,xsVectorGetZ(dir));");
code("id = xGetInt(dPlayerUnits, xUnitID, xGetInt(dPlayerData, xPlayerIndex, target));");
code("xsSetContextPlayer(target);");
code("amt = kbUnitGetCurrentHitpoints(id);");
code("xsSetContextPlayer(0);");
code("current = xGetFloat(dPlayerUnits, xCurrentHealth, xGetInt(dPlayerData, xPlayerIndex, target));");
code("dist = 0.5 * (current - amt);");
code("if (dist > 0 && current > 1.0) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xPlayerUnit, target), true);");
code("trDamageUnit(0.0 - dist);");
code("xUnitSelect(dPlayerData, xPlayerUnit);");
code("trDamageUnit(dist);");
code("amt = amt + dist;");
code("}");
code("xSetFloat(dPlayerUnits, xCurrentHealth, amt, xGetInt(dPlayerData, xPlayerIndex, target));");
code("}");
code("}");


code("if (xGetBool(dPlayerData, xPlayerLureActivated)) {");
code("xSetBool(dPlayerData, xPlayerLureActivated, false);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"lureObject\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Rocket\"));");
code("trUnitDestroy();");
code("trQuestVarSet(\"p\"+p+\"shieldOfLight\", 1);");
code("trSoundPlayFN(\"ui\thunder2.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"gaiasparkle2.wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSet(\"p\"+p+\"shieldOfLightTimeout\",");
code("trTimeMS() + 1000 * shieldOfLightDuration * xGetFloat(dPlayerData, xPlayerSpellDuration) - 3000);");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("if (xGetInt(db, xThroneShieldSFX) == 0) {");
code("spyEffect(xGetInt(db, xUnitName),");
code("kbGetProtoUnitID(\"Increase Prosperity Small\"),xsVectorSet(db, xThroneShieldSFX, xGetPointer(db)));");
code("} else {");
code("xUnitSelect(db, xThroneShieldSFX);");
code("trUnitChangeProtoUnit(\"Increase Prosperity Small\");");
code("}");
code("}");
code("gainFavor(p, 0.0 - shieldOfLightCost * xGetFloat(dPlayerData, xPlayerUltimateCost));");
code("trQuestVarSet(\"p\"+p+\"shieldOfLight\", 4);");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"shieldOfLight\") >= 1) {");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"shieldOfLightTimeout\")) {");
code("hit = trQuestVarGet(\"p\"+p+\"shieldOfLight\") - 1;");
code("if (hit >=1) {");
code("trQuestVarSet(\"p\"+p+\"shieldOfLightTimeout\", 1000 + trQuestVarGet(\"p\"+p+\"shieldOfLightTimeout\"));");
code("if (trCurrentPlayer() == p) {");
code("trChatSend(0, \"<color=1,1,1>Shield of Light ends in \" + hit + \"...\");");
code("trSoundPlayFN(\"hitpointsmax.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("} else {");
code("trQuestVarSet(\"p\"+p+\"shieldOfLight\", 0);");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("if (xGetInt(db, xUnitName) == xGetInt(dPlayerData, xPlayerUnit)) {");
code("if (trCurrentPlayer() == p) {");
code("trChatSend(0,\"<color=1,1,1>Shield of Light finished. Total damage: \" + 1*xGetFloat(dPlayerData, xThroneShieldAbsorbed));");
code("}");
code("}");
code("xSetBool(db, xThroneShieldLaser, true);");
code("xUnitSelect(db, xThroneShieldSFX);");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");
code("}");
code("}");
code("trQuestVarSet(\"p\"+p+\"shieldOfLight\", hit);");
code("}");
code("}");


code("if (xGetBool(dPlayerData, xPlayerRainActivated)) {");
code("xSetBool(dPlayerData, xPlayerRainActivated, false);");
code("dist = justiceRadius * xGetFloat(dPlayerData, xPlayerSpellRange);");
code("dist = dist * dist;");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("target = xGetInt(db, xUnitID);");
code("start = kbGetBlockPosition(\"\"+xGetInt(db, xUnitName), true);");
code("for(y=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("id = xGetInt(dEnemies, xUnitID);");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("if (trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (unitDistanceToVector(xGetInt(dEnemies, xUnitName), start) < dist) {");
code("if (PvP) {");
code("xsSetContextPlayer(xGetInt(dPlayerUnits, xPlayerOwner, xGetInt(dEnemies, xDoppelganger)));");
code("} else {");
code("xsSetContextPlayer(ENEMY_PLAYER);");
code("}");
code("hit = kbUnitGetTargetUnitID(id);");
code("xsSetContextPlayer(0);");
code("if (hit == target) {");
code("silenceUnit(dEnemies,6.0, p);");
code("} else {");
code("stunUnit(dEnemies, 2.0, p);");
code("}");
code("gainFavor(p, 1);");
code("}");
code("}");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(start),0,xsVectorGetZ(start),0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Olympus Temple SFX\");");
code("}");
code("}");

code("for (y=xGetDatabaseCount(db); > 0) {");
code("xDatabaseNext(db);");
code("id = xGetInt(db, xUnitID);");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("if (trUnitAlive() == false) {");
code("removeThroneShield(p);");
code("} else {");
code("xsSetContextPlayer(p);");
code("amt = kbUnitGetCurrentHitpoints(id);");
code("xsSetContextPlayer(0);");
code("dist = xGetFloat(dPlayerUnits, xCurrentHealth, xGetInt(db, xCharIndex)) - amt;");
code("if (dist > 0) {");
code("if (trQuestVarGet(\"p\"+p+\"shieldOfLight\") >= 1) {");
code("xSetFloat(db, xThroneShieldAbsorbed, xGetFloat(db, xThroneShieldAbsorbed) + dist);");
code("current = 1.0 + xsSqrt(xGetFloat(db, xThroneShieldAbsorbed)) * 0.02;");
code("trSetSelectedScale(current,current,current);");
code("trUnitHighlight(0.2, false);");
code("} else if (xGetFloat(dPlayerUnits, xCurrentHealth, xGetInt(db, xCharIndex)) <= 1) {");
code("dist = 0;");
code("} else {");
code("dist = dist * trQuestVarGet(\"p\"+p+\"damageReduction\");");
code("}");
code("trDamageUnit(0.0 - dist);");
code("amt = amt + dist;");
code("}");
code("xSetFloat(dPlayerUnits, xCurrentHealth, amt, xGetInt(db, xCharIndex));");

code("hit = CheckOnHit(p);");
code("if (hit >= ON_HIT_NORMAL) {");
code("if (xSetPointer(dEnemies, xGetInt(db, xCharAttackTargetIndex))) {");
code("if (xGetBool(db, xThroneShieldLaser)) {");
code("start = kbGetBlockPosition(\"\"+xGetInt(db,xUnitName), true);");
code("end = kbGetBlockPosition(\"\"+xGetInt(dEnemies, xUnitName), true);");
code("dir = getUnitVector(start, end);");
code("trSoundPlayFN(\"cinematics\35_out\strike.mp3\",\"1\",-1,\"\",\"\");");
code("if (trUnitVisToPlayer()) {");
code("trCameraShake(1.0, 1.5);");
code("}");
code("target = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,xsVectorGetX(start),0,xsVectorGetZ(start),0,true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+target, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Petosuchus Projectile\"));");
code("trUnitHighlight(5.0, false);");
code("trSetUnitOrientation(xsVectorSet(0.0 - xsVectorGetX(dir),0, 0.0 - xsVectorGetZ(dir)), vector(0,1,0), true);");
code("xAddDatabaseBlock(dPlayerLasers, true);");
code("xSetInt(dPlayerLasers, xUnitName, target);");
code("xSetInt(dPlayerLasers, xPlayerLaserTimeout, trTimeMS() + 2500);");
code("xSetFloat(dPlayerLasers, xPlayerLaserRange, 50.0);");
code("dist = xsPow(shieldOfLightWidth * xGetFloat(dPlayerData, xPlayerSpellRange), 2);");
code("amt = xGetFloat(db, xThroneShieldAbsorbed) * xGetFloat(dPlayerData, xPlayerSpellDamage);");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (rayCollision(dEnemies,start,dir,999.0,dist)) {");
code("damageEnemy(p, amt, true);");
code("}");
code("}");
code("end = vectorSetAsTargetVector(start, start + dir, 300.0);");
code("target = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,xsVectorGetX(start),0,xsVectorGetZ(start),0,true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+target, true);");
code("trUnitChangeProtoUnit(\"Lampades Bolt\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+target, true);");
code("zSetProtoUnitStat(\"Meteorite\",p,1,100.0);");
code("trMutateSelected(kbGetProtoUnitID(\"Meteorite\"));");
code("trUnitOverrideAnimation(6,0,true,false,-1);");
code("trUnitMoveToPoint(xsVectorGetX(end),0,xsVectorGetZ(end));");
code("xSetFloat(db, xThroneShieldAbsorbed, 0);");
code("xSetBool(db, xThroneShieldLaser, false);");
code("xUnitSelectByID(db, xUnitID);");
code("trSetSelectedScale(1,1,1);");
code("} else if (hit == ON_HIT_SPECIAL) {");
code("gainFavor(p, 3);");
code("stunUnit(dEnemies, 2.0, p);");
code("amt = 0.05 * xGetFloat(dPlayerData, xPlayerHealth);");
code("for(x=xGetDatabaseCount(dPlayerCharacters); >0) {");
code("xDatabaseNext(dPlayerCharacters);");
code("xUnitSelectByID(dPlayerCharacters, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerCharacter();");
code("} else {");
code("healUnit(p, amt);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");

code("xSetPointer(dEnemies, index);");
code("poisonKillerBonus(p);");
code("}");

code("void chooseThroneShield(int eventID = -1) {");
code("xsSetContextPlayer(0);");
code("int p = eventID - 1000 - 12 * THRONESHIELD;");
code("int db = getCharactersDB(p);");
code("resetCharacterCustomVars(p);");
code("xSetPointer(dPlayerData, p);");
code("if (trCurrentPlayer() == p) {");
code("map(\"q\", \"game\", \"uiSetSpecialPower(133) uiSpecialPowerAtPointer\");");
code("wellName = \"(Q) Knight's Vow\";");
code("wellIsUltimate = false;");
code("map(\"w\", \"game\", \"uiSetSpecialPower(156) uiSpecialPowerAtPointer\");");
code("rainName = \"(W) Justice\";");
code("rainIsUltimate = false;");
code("map(\"e\", \"game\", \"uiSetSpecialPower(227) uiSpecialPowerAtPointer\");");
code("lureName = \"(E) Shield of Light\";");
code("lureIsUltimate = true;");
code("}");
code("xThroneShieldSFX = xInitAddInt(db, \"shieldSfx\");");
code("xThroneShieldAbsorbed = xInitAddFloat(db, \"absorbed\");");
code("xThroneShieldLaser = xInitAddBool(db, \"laser\");");
code("trQuestVarSet(\"p\"+p+\"damageReduction\", 0.02 * xGetFloat(dPlayerData, xPlayerHealth) / 100);");
code("xSetInt(dPlayerData,xPlayerWellCooldown, vowCooldown);");
code("xSetFloat(dPlayerData,xPlayerWellCost,0);");
code("xSetInt(dPlayerData,xPlayerLureCooldown, shieldOfLightCooldown);");
code("xSetFloat(dPlayerData,xPlayerLureCost, shieldOfLightCost);");
code("xSetInt(dPlayerData,xPlayerRainCooldown,justiceCooldown);");
code("xSetFloat(dPlayerData,xPlayerRainCost, 0);");
code("}");

code("void modifyThroneShield(int eventID = -1) {");
code("xsSetContextPlayer(0);");
code("int p = eventID - 5000 - 12 * THRONESHIELD;");
code("trQuestVarSet(\"p\"+p+\"damageReduction\", 0.02 * xGetFloat(dPlayerData, xPlayerHealth, p) / 100);");
code("}");

code("rule throneShield_init");
code("active");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("for(p=1; < ENEMY_PLAYER) {");
code("trEventSetHandler(12 * THRONESHIELD + p, \"throneShieldAlways\");");
code("trEventSetHandler(1000 + 12 * THRONESHIELD + p, \"chooseThroneShield\");");
code("trEventSetHandler(5000 + 12 * THRONESHIELD + p, \"modifyThroneShield\");");
code("}");
code("}");
code("int blitzCooldown = 8;");
code("float blitzRange = 12;");
code("float blitzDamage = 50;");

code("int rechargeCooldown = 22;");

code("float rideLightningDamage = 100;");
code("float rideLightningRange = 5;");
code("float rideLightningDelay = 125;");

code("int xThunderRiderPrev = 0;");
code("int xThunderRiderIndex = 0;");

code("int xLightningBallDir = 0;");
code("int xLightningBallPrev = 0;");
code("int xLightningBallLast = 0;");
code("int xLightningBallStart = 0;");
code("int xLightningBallDamage = 0;");
code("int xLightningBallYeehaw = 0;");

code("int xShockDamage = 0;");
code("int xShockPos = 0;");
code("int xShockNext = 0;");

code("void removeThunderRider(int p = 0) {");
code("int balls = trQuestVarGet(\"p\"+p+\"lightningBalls\");");
code("int db = getCharactersDB(p);");
code("if (xSetPointer(balls, xGetInt(db, xThunderRiderIndex))) {");
code("xFreeDatabaseBlock(balls);");
code("}");
code("removePlayerSpecific(p);");
code("}");

code("void rideLightningOff(int p = 0) {");
code("zSetProtoUnitStat(\"Attack Revealer\", p, 2, 4.0);");
code("int index = 0;");
code("int next = 0;");
code("int relics = getRelicsDB(p);");
code("int db = getCharactersDB(p);");
code("int balls = trQuestVarGet(\"p\"+p+\"lightningBalls\");");
code("float dist = 0;");
code("vector pos = vector(0,0,0);");
code("vector dir = vector(0,0,0);");
code("for(x=xGetDatabaseCount(relics); >0) {");
code("xDatabaseNext(relics);");
code("xUnitSelect(relics, xUnitName);");
code("trUnitChangeProtoUnit(\"Relic\");");
code("}");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("index = xGetInt(db, xThunderRiderIndex);");
code("xSetPointer(balls, index);");
code("dir = xGetVector(balls,xLightningBallDir);");
code("dist = distanceTraveled(xGetInt(balls, xLightningBallLast), 2.0 * xGetFloat(dPlayerData, xPlayerSpeed));");
code("pos = vectorSetAsCurrentPosition(xGetVector(balls, xLightningBallPrev),dir,dist);");
code("pos = vectorSnapToGrid(pos);");
code("xSetVector(db, xThunderRiderPrev, pos);");

code("next = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+next, true);");
code("trSetUnitOrientation(dir,vector(0,1,0),true);");
code("trUnitChangeProtoUnit(\"Transport Ship Greek\");");

code("xUnitSelectByID(db, xUnitID);");
code("trMutateSelected(kbGetProtoUnitID(\"Dwarf\"));");
code("trImmediateUnitGarrison(\"\"+next);");

code("trUnitChangeProtoUnit(\"Hero Greek Atalanta\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+next, true);");
code("trUnitChangeProtoUnit(\"Arkantos God Out\");");

code("xUnitSelect(balls, xUnitName);");
code("trUnitDestroy();");
code("xUnitSelectByID(db, xUnitID);");
code("xSetInt(db, xCharIndex, activatePlayerUnit(xGetInt(db, xUnitName), p, kbGetProtoUnitID(\"Hero Greek Atalanta\")));");
code("xSetBool(dPlayerUnits, xIsHero, true);");
code("xSetFloat(dPlayerUnits, xPhysicalResist, xGetFloat(dPlayerData, xPlayerPhysicalResist));");
code("xSetFloat(dPlayerUnits, xMagicResist, xGetFloat(dPlayerData, xPlayerMagicResist));");
code("if (xGetInt(db, xUnitName) == xGetInt(dPlayerData, xPlayerUnit)) {");
code("xSetInt(dPlayerData, xPlayerIndex, xGetNewestPointer(dPlayerUnits));");
code("}");
code("healUnit(p, trQuestVarGet(\"p\"+p+\"rideLightningHeal\"));");
code("}");

code("trQuestVarSet(\"p\"+p+\"rideLightningHeal\", 0);");

code("equipRelicsAgain(p);");
code("xClearDatabase(balls);");
code("xClearDatabase(1*trQuestVarGet(\"p\"+p+\"rideLightningTargets\"));");

code("if (trCurrentPlayer() == p) {");
code("reselectMyself();");
code("}");
code("trUnitSelectClear();");
code("xSetBool(dPlayerData, xPlayerLaunched, false);");
code("}");

code("void refreshRideLightningTargets(int p = 0) {");
code("int targets = trQuestVarGet(\"p\"+p+\"rideLightningTargets\");");
code("xClearDatabase(targets);");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xAddDatabaseBlock(targets, true);");
code("xSetInt(targets, xUnitName, xGetInt(dEnemies, xUnitName));");
code("xSetInt(targets, xDatabaseIndex, xGetPointer(dEnemies));");
code("}");
code("}");


code("void lightningBallBounce(int p = 0, vector pos = vector(0,0,0)) {");
code("int balls = trQuestVarGet(\"p\"+p+\"lightningBalls\");");
code("zSetProtoUnitStat(\"Kronny Flying\", p, 1, 2.0 * xGetFloat(dPlayerData, xPlayerSpeed));");
code("xUnitSelect(balls, xUnitName);");
code("trUnitDestroy();");

code("vectorSnapToGrid(pos);");
code("int next = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"\"+p+\",0\",\"Kronny Flying\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+next, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Kronny Flying\"));");
code("trQuestVarSetFromRand(\"sound\", 1, 3, true);");
code("if (trUnitVisToPlayer()) {");
code("trSoundPlayFN(\"suckup\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("}");
code("trSetUnitOrientation(xGetVector(balls, xLightningBallDir), vector(0,1,0), true);");
code("trSetSelectedScale(0,-4.7,0);");
code("trDamageUnitPercent(100);");

code("xSetInt(balls, xUnitName, next);");
code("xSetVector(balls, xLightningBallPrev, pos);");
code("xSetInt(balls, xLightningBallStart, trTimeMS());");

code("xSetInt(balls, xLightningBallYeehaw, 1);");
code("}");

code("void thunderRiderAlways(int eventID = -1) {");
code("xsSetContextPlayer(0);");
code("int p = eventID - 12 * THUNDERRIDER;");
code("int id = 0;");
code("int hit = 0;");
code("int target = 0;");
code("int index = xGetPointer(dEnemies);");
code("int db = getCharactersDB(p);");
code("int relics = getRelicsDB(p);");
code("int balls = trQuestVarGet(\"p\"+p+\"lightningBalls\");");
code("int targets = trQuestVarGet(\"p\"+p+\"rideLightningTargets\");");
code("int shocks = trQuestVarGet(\"p\"+p+\"thunderShocks\");");
code("int shockTargets = trQuestVarGet(\"p\"+p+\"thunderShockTargets\");");
code("int next = 0;");
code("float amt = 0;");
code("float dist = 0;");

code("vector prev = vector(0,0,0);");
code("vector dir = vector(0,0,0);");
code("vector pos = vector(0,0,0);");
code("vector loc = vector(0,0,0);");

code("xSetPointer(dPlayerData, p);");

code("if (trQuestVarGet(\"p\"+p+\"blitz\") == 1) {");
code("trQuestVarSet(\"p\"+p+\"blitz\", 0);");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (trCountUnitsInArea(\"\"+xGetInt(dEnemies, xUnitName), p, \"Victory Marker\", 3) > 0) {");
code("gainFavor(p, 3);");
code("damageEnemy(p, blitzDamage * xGetFloat(dPlayerData, xPlayerSpellDamage), true);");
code("if (trUnitAlive()) {");
code("stunUnit(dEnemies, 1.5, p);");
code("}");
code("}");
code("}");
code("for(x=trQuestVarGet(\"p\"+p+\"blitzStart\"); < trQuestVarGet(\"p\"+p+\"blitzEnd\")) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+x, true);");
code("trUnitChangeProtoUnit(\"Lightning Sparks\");");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"rideLightning\") == 1) {");
code("for (i=xGetDatabaseCount(balls); > 0) {");
code("xDatabaseNext(balls);");
code("xUnitSelect(balls, xUnitName);");
code("if (xGetInt(balls, xLightningBallYeehaw) == 1) {");
code("trMutateSelected(kbGetProtoUnitID(\"Implode Sphere Effect\"));");
code("trUnitSetAnimationPath(\"0,1,1,0,0,0,0\");");
code("trUnitOverrideAnimation(2,0,true,false,-1);");
code("trSetSelectedScale(0,0,0);");
code("trSetSelectedUpVector(0,50.0,0);");
code("xSetInt(balls, xLightningBallYeehaw, 0);");
code("} else {");
code("hit = 0;");
code("if (trUnitVisToPlayer()) {");
code("hit = 1;");
code("}");
code("prev = xGetVector(balls, xLightningBallPrev);");
code("dir = xGetVector(balls, xLightningBallDir);");

code("dist = distanceTraveled(xGetInt(balls, xLightningBallLast), 2.0 * xGetFloat(dPlayerData, xPlayerSpeed));");
code("pos = vectorSetAsCurrentPosition(prev,dir,dist);");
code("trQuestVarSet(\"p\"+p+\"thunderRiderBonus\",");
code("trQuestVarGet(\"p\"+p+\"thunderRiderBonus\") + dist * 0.1 * xGetFloat(dPlayerData, xPlayerBaseAttack));");

code("xSetInt(balls, xLightningBallLast, trTimeMS());");

code("amt = rideLightningRange * xGetFloat(dPlayerData, xPlayerSpellRange);");
code("dist = dist + amt;");
code("amt = amt * amt;");
code("for(x=xGetDatabaseCount(targets); >0) {");
code("xDatabaseNext(targets);");
code("xUnitSelect(targets, xUnitName);");
code("if (trUnitAlive() == false) {");
code("xFreeDatabaseBlock(targets);");
code("} else if (rayCollision(targets,prev,dir,dist,amt)) {");
code("hit = hit * 2;");
code("if (xSetPointer(dEnemies, xGetInt(targets, xDatabaseIndex))) {");
code("trUnitHighlight(0.5, false);");
code("damageEnemy(p, xGetFloat(balls, xLightningBallDamage), true);");
code("}");
code("xFreeDatabaseBlock(targets);");
code("}");
code("}");

code("trQuestVarSetFromRand(\"sound\", 1, 5, true);");
code("if (hit > 1) {");
code("trSoundPlayFN(\"lightningstrike\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("}");

code("prev = pos;");
code("pos = pos + (dir * 2.0);");
code("loc = vectorToGrid(pos);");
code("if (terrainIsType(loc, TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("trQuestVarSetFromRand(\"sound\", 1, 2, true);");
code("trSoundPlayFN(\"implodehit\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("xSetVector(balls, xLightningBallDir, getBounceDir(pos, loc, dir));");

code("amt = 0.5 * rideLightningDamage * xGetFloat(dPlayerData, xPlayerSpellDamage);");
code("xSetFloat(balls, xLightningBallDamage, amt + xGetFloat(balls, xLightningBallDamage));");
code("lightningBallBounce(p, prev);");
code("refreshRideLightningTargets(p);");
code("} else if (trTimeMS() - xGetInt(balls, xLightningBallStart) > 1000) {");
code("lightningBallBounce(p, prev);");
code("} else {");
code("xSetVector(balls, xLightningBallPrev, prev);");
code("}");
code("}");
code("}");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"rideLightningNext\")) {");
code("trQuestVarSet(\"p\"+p+\"rideLightningNext\",");
code("trQuestVarGet(\"p\"+p+\"rideLightningNext\") + rideLightningDelay / xGetFloat(dPlayerData, xPlayerUltimateCost));");
code("gainFavor(p, -1);");
code("if (trPlayerResourceCount(p, \"favor\") < 1) {");
code("trQuestVarSet(\"p\"+p+\"rideLightning\", 0);");
code("xSetBool(dPlayerData, xPlayerLaunched, false);");
code("trSoundPlayFN(\"godpowerfailed.wav\",\"1\",-1,\"\",\"\");");
code("rideLightningOff(p);");
code("}");
code("}");
code("}");


code("if (xGetBool(dPlayerData, xPlayerWellActivated)) {");
code("xSetBool(dPlayerData, xPlayerWellActivated, false);");
code("pos = vectorSnapToGrid(xGetVector(dPlayerData, xPlayerWellPos));");
code("trSoundPlayFN(\"lightningstrike3.wav\", \"1\", -1, \"\",\"\");");
code("if (trQuestVarGet(\"p\"+p+\"rideLightning\") == 0) {");
code("trQuestVarSet(\"p\"+p+\"blitz\", 1);");
code("trQuestVarSet(\"p\"+p+\"blitzStart\", trGetNextUnitScenarioNameNumber());");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeThunderRider(p);");
code("} else {");
code("prev = kbGetBlockPosition(\"\"+xGetInt(db, xUnitName), true);");

code("target = 1 + xsMin(blitzRange * xGetFloat(dPlayerData, xPlayerSpellRange),");
code("distanceBetweenVectors(prev, pos, false)) / 2;");
code("dir = getUnitVector(prev, pos);");
code("for(i=target; >0) {");
code("trArmyDispatch(\"\"+p+\",0\", \"Dwarf\", 1, xsVectorGetX(prev), 0, xsVectorGetZ(prev), 0, true);");
code("trArmySelect(\"\"+p+\",0\");");
code("trUnitChangeProtoUnit(\"Victory Marker\");");
code("prev = prev + (dir * 2.0);");
code("if (terrainIsType(vectorToGrid(prev), TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("break;");
code("}");
code("}");
code("next = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"\"+p+\",0\", \"Transport Ship Greek\", 1, xsVectorGetX(prev),0,xsVectorGetZ(prev),0,true);");
code("xUnitSelectByID(db, xUnitID);");
code("trImmediateUnitGarrison(\"\"+next);");
code("trMutateSelected(kbGetProtoUnitID(\"Siege Tower\"));");
code("trUnitChangeProtoUnit(\"Hero Greek Atalanta\");");
code("xUnitSelectByID(db, xUnitID);");
code("trSetUnitOrientation(dir, vector(0,1,0), true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+next, true);");
code("trUnitChangeProtoUnit(\"Victory Marker\");");
code("}");
code("}");
code("trQuestVarSet(\"p\"+p+\"blitzEnd\", trGetNextUnitScenarioNameNumber());");
code("equipRelicsAgain(p);");
code("} else {");
code("for(x=xGetDatabaseCount(balls); >0) {");
code("xDatabaseNext(balls);");
code("dist = distanceTraveled(xGetInt(balls, xLightningBallLast), 2.0 * xGetFloat(dPlayerData, xPlayerSpeed));");
code("prev = vectorSetAsCurrentPosition(xGetVector(balls, xLightningBallPrev),xGetVector(balls, xLightningBallDir),dist);");
code("dir = getUnitVector(prev, pos);");
code("xSetVector(balls, xLightningBallDir, dir);");
code("lightningBallBounce(p, prev);");
code("}");
code("refreshRideLightningTargets(p);");
code("}");
code("}");

code("if (xGetBool(dPlayerData, xPlayerRainActivated)) {");
code("xSetBool(dPlayerData, xPlayerRainActivated, false);");
code("trSoundPlayFN(\"suckup1.wav\",\"1\",-1,\"\",\"\");");
code("if (trQuestVarGet(\"p\"+p+\"rideLightning\") == 1) {");
code("trQuestVarSet(\"p\"+p+\"rideLightningHeal\",");
code("trQuestVarGet(\"p\"+p+\"rideLightningHeal\") + xGetFloat(dPlayerData, xPlayerAttack));");
code("} else {");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db, xUnitID);");
code("trUnitHighlight(0.5, false);");
code("healUnit(p, xGetFloat(dPlayerData, xPlayerAttack), xGetInt(db, xCharIndex));");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dPlayerData, xPlayerUnit), true);");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"\"+p+\",0\");");
code("trUnitChangeProtoUnit(\"Regeneration SFX\");");
code("}");
code("}");
code("gainFavor(p, 0.1 * xGetFloat(dPlayerData, xPlayerAttack));");
code("trQuestVarSet(\"p\"+p+\"thunderRiderBonus\", 0);");
code("}");

code("if (xGetBool(dPlayerData, xPlayerLureActivated)) {");
code("xSetBool(dPlayerData, xPlayerLureActivated, false);");
code("pos = xGetVector(dPlayerData, xPlayerLurePos);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"lureObject\", true);");
code("trUnitDestroy();");
code("trQuestVarSet(\"p\"+p+\"rideLightning\", 1 - trQuestVarGet(\"p\"+p+\"rideLightning\"));");
code("if (trQuestVarGet(\"p\"+p+\"rideLightning\") == 1) {");
code("if (trPlayerResourceCount(p, \"favor\") < 1) {");
code("if (trCurrentPlayer() == p) {");
code("trSoundPlayFN(\"cantdothat.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("trQuestVarSet(\"p\"+p+\"rideLightning\", 0);");
code("} else {");
code("xSetBool(dPlayerData, xPlayerLaunched, true);");
code("refreshRideLightningTargets(p);");
code("trQuestVarSet(\"p\"+p+\"rideLightningNext\",");
code("trTimeMS() + rideLightningDelay / xGetFloat(dPlayerData, xPlayerUltimateCost));");
code("trSoundPlayFN(\"lightningbirth.wav\",\"1\",-1,\"\",\"\");");
code("zSetProtoUnitStat(\"Attack Revealer\", p, 2, xGetFloat(dPlayerData, xPlayerLos));");
code("zSetProtoUnitStat(\"Kronny Flying\", p, 1, 2.0 * xGetFloat(dPlayerData, xPlayerSpeed));");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeThunderRider(p);");
code("} else {");
code("prev = kbGetBlockPosition(\"\"+xGetInt(db, xUnitName), true);");
code("dir = getUnitVector(prev, pos);");

code("trQuestVarSet(\"heading\", 180.0 / 3.141592 * angleBetweenVectors(prev, pos));");
code("next = trGetNextUnitScenarioNameNumber();");
code("xSetInt(db, xThunderRiderIndex, xAddDatabaseBlock(balls, true));");
code("xSetInt(balls, xUnitName, next);");
code("xSetVector(balls, xLightningBallDir, dir);");
code("xSetVector(balls, xLightningBallPrev, prev);");
code("xSetInt(balls, xLightningBallLast, trTimeMS());");
code("xSetInt(balls, xLightningBallStart, trTimeMS());");
code("xSetFloat(balls, xLightningBallDamage, rideLightningDamage * xGetFloat(dPlayerData, xPlayerSpellDamage));");


code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,xsVectorGetX(prev),0,xsVectorGetZ(prev),0,true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+next, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Kronny Flying\"));");
code("trSetUnitOrientation(dir, vector(0,1,0), true);");
code("trSetSelectedScale(0, -4.7, 0);");
code("trDamageUnitPercent(100);");

code("xUnitSelectByID(db, xUnitID);");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");

code("if (xSetPointer(dPlayerUnits, xGetInt(db, xCharIndex))) {");
code("xUnitSelect(dPlayerUnits, xStunSFX);");
code("trUnitDestroy();");
code("xUnitSelect(dPlayerUnits, xPoisonSFX);");
code("trUnitDestroy();");
code("if (xGetInt(dPlayerUnits, xStunStatus) > 0) {");
code("if (xSetPointer(dStunnedUnits, xGetInt(dPlayerUnits, xStunStatus))) {");
code("xFreeDatabaseBlock(dStunnedUnits);");
code("}");
code("}");
code("if (xGetBool(dPlayerUnits, xLaunched)) {");
code("for(y=xGetDatabaseCount(dLaunchedUnits); >0) {");
code("xDatabaseNext(dLaunchedUnits);");
code("if (xGetInt(dLaunchedUnits, xUnitName) == xGetInt(dPlayerUnits, xUnitName)) {");
code("xFreeDatabaseBlock(dLaunchedUnits);");
code("}");
code("}");
code("}");
code("removePlayerUnit();");
code("xSetInt(dPlayerData, xPlayerIndex, 0);");
code("}");
code("}");
code("}");
code("}");
code("} else {");
code("if (trCurrentPlayer() == p) {");
code("trSoundPlayFN(\"godpowerfailed.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("rideLightningOff(p);");
code("}");
code("}");

code("if (xGetDatabaseCount(db) > 0) {");
code("amt = 0.001 * (trTimeMS() - trQuestVarGet(\"p\"+p+\"thunderRiderBonusLast\"));");
code("amt = xsMax(amt, trQuestVarGet(\"p\"+p+\"thunderRiderBonus\") * amt * 0.1);");
code("trQuestVarSet(\"p\"+p+\"thunderRiderBonusLast\", trTimeMS());");
code("trQuestVarSet(\"p\"+p+\"thunderRiderBonus\", trQuestVarGet(\"p\"+p+\"thunderRiderBonus\") - amt);");
code("if (trQuestVarGet(\"p\"+p+\"rideLightning\") == 0) {");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeThunderRider(p);");
code("} else {");
code("hit = CheckOnHit(p);");
code("if (hit == ON_HIT_SPECIAL) {");
code("xClearDatabase(shocks);");
code("target = trGetUnitScenarioNameNumber(xGetInt(db, xCharAttackTarget));");
code("pos = kbGetBlockPosition(\"\"+target, true);");
code("xAddDatabaseBlock(shocks, true);");
code("xSetFloat(shocks, xShockDamage, xGetFloat(dPlayerData, xPlayerAttack));");
code("xSetInt(shocks, xShockNext, trTimeMS() + 100);");
code("xSetVector(shocks, xShockPos, pos);");

code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"\"+p+\",0\");");
code("trUnitChangeProtoUnit(\"Lightning Sparks\");");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (xGetInt(dEnemies, xUnitName) != target){");
code("xAddDatabaseBlock(shockTargets, true);");
code("xSetInt(shockTargets, xUnitName, xGetInt(dEnemies, xUnitName));");
code("xSetInt(shockTargets, xDatabaseIndex, xGetPointer(dEnemies));");
code("}");
code("}");
code("trQuestVarSetFromRand(\"sound\", 1, 4, true);");
code("trSoundPlayFN(\"lightningstrike\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("}");
code("prev = xGetVector(db, xThunderRiderPrev);");
code("pos = kbGetBlockPosition(\"\"+xGetInt(db, xUnitName), true);");
code("dist = distanceBetweenVectors(prev, pos, false);");
code("if (dist == 0) {");
code("trQuestVarSet(\"p\"+p+\"thunderRiderBonus\", trQuestVarGet(\"p\"+p+\"thunderRiderBonus\") - amt);");
code("} else {");
code("trQuestVarSet(\"p\"+p+\"thunderRiderBonus\",");
code("trQuestVarGet(\"p\"+p+\"thunderRiderBonus\") + dist * 0.1 * xGetFloat(dPlayerData, xPlayerBaseAttack));");
code("xSetVector(db, xThunderRiderPrev, pos);");
code("}");
code("}");
code("}");
code("trQuestVarSet(\"p\"+p+\"thunderRiderBonus\", xsMax(0, trQuestVarGet(\"p\"+p+\"thunderRiderBonus\")));");
code("xSetFloat(dPlayerData, xPlayerAttack,");
code("xGetFloat(dPlayerData, xPlayerBaseAttack) + trQuestVarGet(\"p\"+p+\"thunderRiderBonus\"));");
code("zSetProtoUnitStat(\"Hero Greek Atalanta\", p, 27, xGetFloat(dPlayerData, xPlayerAttack));");
code("}");

code("if (xGetDatabaseCount(shocks) > 0) {");
code("xDatabaseNext(shocks);");
code("if (trTimeMS() > xGetInt(shocks, xShockNext)) {");
code("xSetInt(shocks, xShockNext, 100 + xGetInt(shocks, xShockNext));");
code("pos = xGetVector(shocks, xShockPos);");
code("dist = 25;");
code("target = -1;");
code("for(x=xGetDatabaseCount(shockTargets); >0) {");
code("xDatabaseNext(shockTargets);");
code("xUnitSelect(shockTargets, xUnitName);");
code("if (trUnitAlive() == false) {");
code("xFreeDatabaseBlock(shockTargets);");
code("} else {");
code("amt = unitDistanceToVector(xGetInt(shockTargets, xUnitName), pos);");
code("if (amt < dist) {");
code("target = xGetPointer(shockTargets);");
code("}");
code("}");
code("}");
code("if (target == -1) {");
code("xFreeDatabaseBlock(shocks);");
code("} else {");
code("xSetPointer(shockTargets, target);");

code("if (xSetPointer(dEnemies, xGetInt(shockTargets, xDatabaseIndex))) {");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("trUnitHighlight(0.2, false);");
code("damageEnemy(p, xGetFloat(shocks, xShockDamage), false);");
code("OnHit(p, xGetPointer(dEnemies));");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dEnemies, xUnitName), true);");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"\"+p+\",0\");");
code("trUnitChangeProtoUnit(\"Lightning Sparks Ground\");");
code("xSetVector(shocks, xShockPos, pos);");
code("}");
code("xFreeDatabaseBlock(shockTargets);");
code("}");
code("}");
code("}");

code("xSetPointer(dEnemies, index);");
code("poisonKillerBonus(p);");
code("}");

code("void chooseThunderRider(int eventID = -1) {");
code("xsSetContextPlayer(0);");
code("int p = eventID - 1000 - 12 * THUNDERRIDER;");
code("int db = getCharactersDB(p);");
code("resetCharacterCustomVars(p);");
code("xSetPointer(dPlayerData, p);");
code("if (trCurrentPlayer() == p) {");
code("map(\"q\", \"game\", \"uiSetSpecialPower(133) uiSpecialPowerAtPointer\");");
code("wellName = \"(Q) Blitz\";");
code("wellIsUltimate = false;");
code("map(\"w\", \"game\", \"uiSetSpecialPower(156) uiSpecialPowerAtPointer\");");
code("rainName = \"(W) Recharge\";");
code("rainIsUltimate = false;");
code("map(\"e\", \"game\", \"uiSetSpecialPower(227) uiSpecialPowerAtPointer\");");
code("lureName = \"(E) Ride The Lightning\";");
code("lureIsUltimate = false;");
code("}");
code("xThunderRiderPrev = xInitAddVector(db, \"prev\");");
code("xThunderRiderIndex = xInitAddInt(db, \"index\");");

code("xSetInt(dPlayerData,xPlayerWellCooldown, blitzCooldown);");
code("xSetFloat(dPlayerData,xPlayerWellCost,0);");
code("xSetInt(dPlayerData,xPlayerLureCooldown, 1);");
code("xSetFloat(dPlayerData,xPlayerLureCost, 0);");
code("xSetInt(dPlayerData,xPlayerRainCooldown,rechargeCooldown);");
code("xSetFloat(dPlayerData,xPlayerRainCost, 0);");

code("if (trQuestVarGet(\"p\"+p+\"lightningBalls\") == 0) {");
code("db = xInitDatabase(\"p\"+p+\"lightningBalls\");");
code("trQuestVarSet(\"p\"+p+\"lightningBalls\", db);");
code("xInitAddInt(db, \"name\");");
code("xLightningBallDir = xInitAddVector(db, \"dir\");");
code("xLightningBallPrev = xInitAddVector(db, \"prev\");");
code("xLightningBallLast = xInitAddInt(db, \"last\");");
code("xLightningBallStart = xInitAddInt(db, \"start\");");
code("xLightningBallDamage = xInitAddFloat(db, \"damage\");");
code("xLightningBallYeehaw = xInitAddInt(db, \"yeehaw\", 1);");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"rideLightningTargets\") == 0) {");
code("db = xInitDatabase(\"p\"+p+\"rideLightningTargets\");");
code("trQuestVarSet(\"p\"+p+\"rideLightningTargets\", db);");
code("xInitAddInt(db, \"name\");");
code("xInitAddInt(db, \"index\");");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"thunderShockTargets\") == 0) {");
code("db = xInitDatabase(\"p\"+p+\"thunderShockTargets\");");
code("trQuestVarSet(\"p\"+p+\"thunderShockTargets\", db);");
code("xInitAddInt(db, \"name\");");
code("xInitAddInt(db, \"index\");");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"thunderShocks\") == 0) {");
code("db = xInitDatabase(\"p\"+p+\"thunderShocks\");");
code("trQuestVarSet(\"p\"+p+\"thunderShocks\", db);");
code("xShockDamage = xInitAddFloat(db, \"damage\");");
code("xShockPos = xInitAddVector(db, \"pos\");");
code("xShockNext = xInitAddInt(db, \"next\");");
code("}");
code("}");

code("rule thunderRider_init");
code("active");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("for(p=1; < ENEMY_PLAYER) {");
code("trEventSetHandler(12 * THUNDERRIDER + p, \"thunderRiderAlways\");");
code("trEventSetHandler(1000 + 12 * THUNDERRIDER + p, \"chooseThunderRider\");");
code("}");
code("}");

code("int flamingImpactCooldown = 12;");
code("float flamingImpactDamage = 90;");
code("float flamingImpactRange = 4;");

code("int overheatCooldown = 18;");
code("float overheatDuration = 6;");
code("float overheatDamage = 40;");
code("float overheatRadius = 4;");

code("float infernoDuration = 8;");
code("float infernoRange = 12;");
code("float infernoDamage = 120;");
code("float infernoHeal = 60;");
code("float infernoCost = 70;");

code("int xFireKnightPhoenix = 0;");
code("int xFireKnightCharging = 0;");
code("int xFireKnightOverheatNext = 0;");

code("int xFireChargeTimeout = 0;");
code("int xFireChargeSFX = 0;");
code("int xFireChargeDest = 0;");

code("int xInfernoPos = 0;");
code("int xInfernoDamage = 0;");
code("int xInfernoRadius = 0;");
code("int xInfernoMaxRadius = 0;");
code("int xInfernoNext = 0;");
code("int xInfernoTimeout = 0;");

code("void removeFireKnight(int p = 0) {");
code("removePlayerSpecific(p);");
code("}");

code("void fireknightAlways(int eventID = -1) {");
code("xsSetContextPlayer(0);");
code("int p = eventID - 12 * FIREKNIGHT;");
code("int id = 0;");
code("int hit = 0;");
code("int target = 0;");
code("int index = xGetPointer(dEnemies);");
code("int db = getCharactersDB(p);");
code("int infernos = trQuestVarGet(\"p\"+p+\"inferno\");");
code("int charges = trQuestVarGet(\"p\"+p+\"fireCharges\");");
code("int harpies = trQuestVarGet(\"p\"+p+\"fireHarpies\");");
code("int next = 0;");
code("float amt = 0;");
code("float dist = 0;");
code("float current = 0;");
code("float mCos = 0;");
code("float mSin = 0;");
code("xSetPointer(dPlayerData, p);");

code("vector pos = vector(0,0,0);");
code("vector dest = vector(0,0,0);");
code("vector dir = vector(0,0,0);");

code("xUnitSelect(dPlayerData, xPlayerUnit);");
code("if (trUnitAlive()) {");
code("amt = 0.01 * trUnitPercentDamaged();");
code("}");

code("xSetFloat(dPlayerData, xPlayerLifesteal,");
code("xGetFloat(dPlayerData, xPlayerLifesteal) + amt - trQuestVarGet(\"p\"+p+\"fireknightBonus\"));");
code("trQuestVarSet(\"p\"+p+\"fireknightBonus\", amt);");

code("if (xGetDatabaseCount(harpies) > 0) {");
code("for (x=xGetDatabaseCount(harpies); >0) {");
code("xDatabaseNext(harpies);");
code("xUnitSelect(harpies, xUnitName);");
code("trMutateSelected(kbGetProtoUnitID(\"Harpy\"));");
code("trUnitOverrideAnimation(1,0,false,false,-1);");
code("}");
code("xClearDatabase(harpies);");
code("}");

code("if (xGetDatabaseCount(charges) > 0) {");
code("xDatabaseNext(charges);");
code("pos = kbGetBlockPosition(\"\"+xGetInt(charges, xUnitName), true);");
code("dest = xGetVector(charges, xFireChargeDest);");
code("if (distanceBetweenVectors(pos, dest) < 4 || trTimeMS() > xGetInt(charges, xFireChargeTimeout)) {");
code("if (xSetPointer(db, xGetInt(charges, xDatabaseIndex))) {");
code("xSetBool(db, xFireKnightCharging, false);");
code("xSetBool(dPlayerUnits, xLaunched, false, xGetInt(db, xCharIndex));");
code("xUnitSelectByID(db, xUnitID);");
code("trUnitChangeProtoUnit(\"Lancer Hero\");");
code("xUnitSelectByID(db, xUnitID);");
code("trMutateSelected(kbGetProtoUnitID(\"Lancer Hero\"));");

code("if (xGetInt(db, xUnitName) == xGetInt(dPlayerData, xPlayerUnit)) {");
code("equipRelicsAgain(p);");
code("}");

code("zSetProtoUnitStat(\"Kronny Flying\", p, 1, 0.01);");
code("xUnitSelect(charges, xFireChargeSFX);");
code("trUnitChangeProtoUnit(\"Kronny Flying\");");
code("xUnitSelect(charges, xFireChargeSFX);");
code("trMutateSelected(kbGetProtoUnitID(\"Kronny Flying\"));");
code("trSetSelectedScale(0,-5.0,0);");
code("trDamageUnitPercent(100);");
code("next = xGetInt(charges, xFireChargeSFX);");
code("xAddDatabaseBlock(harpies, true);");
code("xSetInt(harpies, xUnitName, next);");

code("xUnitSelect(charges, xUnitName);");
code("trDamageUnitPercent(100);");
code("trUnitChangeProtoUnit(\"Meteorite\");");
code("xFreeDatabaseBlock(charges);");
code("amt = flamingImpactDamage * xGetFloat(dPlayerData, xPlayerSpellDamage);");
code("dist = xsPow(flamingImpactRange * xGetFloat(dPlayerData, xPlayerSpellRange) * 2, 2);");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (unitDistanceToVector(xGetInt(dEnemies, xUnitName), pos) < dist) {");
code("damageEnemy(p, amt, true);");
code("gainFavor(p, 2);");
code("}");
code("}");
code("trSoundPlayFN(\"meteordustcloud.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("} else {");
code("dist = xsPow(flamingImpactRange * xGetFloat(dPlayerData, xPlayerSpellRange), 2);");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (unitDistanceToVector(xGetInt(dEnemies, xUnitName), pos) < dist &&");
code("xGetBool(dEnemies, xLaunched) == false) {");
code("dir = kbGetBlockPosition(\"\"+xGetInt(dEnemies, xUnitName), true) - pos + dest;");
code("launchUnit(dEnemies, dir);");
code("}");
code("}");
code("}");
code("}");

code("if (xGetBool(dPlayerData, xPlayerWellActivated)) {");
code("xSetBool(dPlayerData, xPlayerWellActivated, false);");
code("trSoundPlayFN(\"nidhoggflame1.wav\",\"1\",-1,\"\",\"\");");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeFireKnight();");
code("} else if (xGetBool(db, xFireKnightCharging) == false) {");
code("xSetBool(db, xFireKnightCharging, true);");
code("pos = kbGetBlockPosition(\"\"+xGetInt(db, xUnitName), true);");
code("dir = getUnitVector(pos, xGetVector(dPlayerData, xPlayerWellPos));");
code("trMutateSelected(kbGetProtoUnitID(\"Transport Ship Greek\"));");

code("next = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,1,0,1,0,true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+next, true);");
code("trImmediateUnitGarrison(\"\"+xGetInt(db, xUnitName));");
code("trUnitChangeProtoUnit(\"Dwarf\");");

code("trModifyProtounit(\"Hero Greek Achilles\",p,5,2);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+next, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Hero Greek Achilles\"));");
code("trSetUnitOrientation(dir, vector(0,1,0), true);");

code("xUnitSelectByID(db, xUnitID);");
code("trMutateSelected(kbGetProtoUnitID(\"Lancer Hero\"));");
code("trUnitOverrideAnimation(15,0,true,false,-1);");
code("trMutateSelected(kbGetProtoUnitID(\"Relic\"));");
code("trImmediateUnitGarrison(\"\"+next);");
code("trMutateSelected(kbGetProtoUnitID(\"Lancer Hero\"));");

code("target = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,1,0,1,0,true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+target, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Meteorite\"));");
code("trUnitOverrideAnimation(6,0,true,false,-1);");
code("trMutateSelected(kbGetProtoUnitID(\"Relic\"));");
code("trImmediateUnitGarrison(\"\"+next);");
code("trMutateSelected(kbGetProtoUnitID(\"Meteorite\"));");

code("xSetBool(dPlayerUnits, xLaunched, true, xGetInt(db, xCharIndex));");

code("dist = distanceBetweenVectors(pos, xGetVector(dPlayerData, xPlayerWellPos), false);");
code("for(y=0; < dist / 2) {");
code("dest = pos + (dir * 2.0);");
code("if (terrainIsType(vectorToGrid(dest), TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("break;");
code("} else {");
code("pos = dest;");
code("}");
code("}");

code("trUnitSelectClear();");
code("trUnitSelect(\"\"+next, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Wadjet Spit\"));");
code("trUnitMoveToPoint(xsVectorGetX(pos),0,xsVectorGetZ(pos),-1,false);");
code("trModifyProtounit(\"Hero Greek Achilles\",p,5,-2);");

code("xAddDatabaseBlock(charges, true);");
code("xSetInt(charges, xUnitName, next);");
code("xSetInt(charges, xDatabaseIndex, xGetPointer(db));");
code("xSetInt(charges, xFireChargeTimeout, trTimeMS() + 2000 * xGetFloat(dPlayerData, xPlayerSpellDuration));");
code("xSetInt(charges, xFireChargeSFX, target);");
code("xSetVector(charges, xFireChargeDest, pos);");
code("}");
code("}");
code("}");

code("if (xGetBool(dPlayerData, xPlayerRainActivated)) {");
code("xSetBool(dPlayerData, xPlayerRainActivated, false);");
code("trSoundPlayFN(\"firegiantdie.wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSet(\"p\"+p+\"overheat\", 1);");
code("trQuestVarSet(\"p\"+p+\"overheatTimeout\",");
code("trTimeMS() + 1000 * overheatDuration * xGetFloat(dPlayerData, xPlayerSpellDuration));");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeFireKnight();");
code("} else {");
code("if (xGetInt(db, xFireKnightPhoenix) <= 0) {");
code("spyEffect(xGetInt(db, xUnitName),");
code("kbGetProtoUnitID(\"Phoenix\"), xsVectorSet(db, xFireKnightPhoenix, xGetPointer(db)));");
code("} else {");
code("xUnitSelect(db, xFireKnightPhoenix);");
code("trMutateSelected(kbGetProtoUnitID(\"Phoenix\"));");
code("}");
code("xSetInt(db, xFireKnightOverheatNext, trTimeMS());");
code("}");
code("}");
code("}");

code("if (xGetBool(dPlayerData, xPlayerLureActivated)) {");
code("xSetBool(dPlayerData, xPlayerLureActivated, false);");
code("gainFavor(p, 0.0 - infernoCost * xGetFloat(dPlayerData, xPlayerUltimateCost));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"lureObject\", true);");
code("trUnitDestroy();");
code("trSoundPlayFN(\"forestfirebirth.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"flamingweapons.wav\",\"1\",-1,\"\",\"\");");
code("zSetProtoUnitStat(\"Ball of Fire Impact\", p, 8, xGetFloat(dPlayerData, xPlayerSpellDuration) * infernoDuration);");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db, xUnitID);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeFireKnight();");
code("} else {");
code("xAddDatabaseBlock(infernos, true);");
code("xSetVector(infernos, xInfernoPos, kbGetBlockPosition(\"\"+xGetInt(db, xUnitName), true));");
code("xSetFloat(infernos, xInfernoDamage, infernoDamage * xGetFloat(dPlayerData, xPlayerSpellDamage));");
code("xSetFloat(infernos, xInfernoMaxRadius, infernoRange * xGetFloat(dPlayerData, xPlayerSpellRange));");
code("xSetInt(infernos, xInfernoNext, trTimeMS());");
code("xSetInt(infernos, xInfernoTimeout,");
code("trTimeMS() + 1000 * infernoDuration * xGetFloat(dPlayerData, xPlayerSpellDuration));");
code("}");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"overheat\") == 1) {");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"overheatTimeout\")) {");
code("trQuestVarSet(\"p\"+p+\"overheat\", 0);");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeFireKnight();");
code("} else {");
code("xUnitSelect(db, xFireKnightPhoenix);");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");
code("}");
code("}");
code("}");
code("}");

code("if (xGetDatabaseCount(db) > 0) {");
code("xDatabaseNext(db);");
code("id = xGetInt(db, xUnitID);");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("if (trUnitAlive() == false) {");
code("removeFireKnight(p);");
code("} else {");
code("amt = 0;");
code("pos = kbGetBlockPosition(\"\"+xGetInt(db, xUnitName), true);");
code("hit = CheckOnHit(p);");
code("if (hit == ON_HIT_SPECIAL) {");
code("damagePlayerUnit(50.0 * xGetFloat(dPlayerData, xPlayerSpellDamage), xGetInt(db, xCharIndex));");

code("next = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+next, true);");
code("trDamageUnitPercent(100);");
code("trUnitChangeProtoUnit(\"Meteorite\");");
code("amt = 50.0 * xGetFloat(dPlayerData, xPlayerSpellDamage);");
code("trSoundPlayFN(\"fireball fall 2.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("xsSetContextPlayer(p);");
code("current = kbUnitGetCurrentHitpoints(id);");
code("xsSetContextPlayer(0);");
code("if (trQuestVarGet(\"p\"+p+\"overheat\") == 1) {");
code("if (trTimeMS() > xGetInt(db, xFireKnightOverheatNext)) {");
code("xSetInt(db, xFireKnightOverheatNext, xGetInt(db, xFireKnightOverheatNext) + 500);");
code("xUnitSelectByID(db, xUnitID);");
code("damagePlayerUnit(overheatDamage * xGetFloat(dPlayerData, xPlayerSpellDamage) * 0.5,");
code("xGetInt(db, xCharIndex));");
code("xsSetContextPlayer(p);");
code("current = kbUnitGetCurrentHitpoints(id);");
code("xsSetContextPlayer(0);");
code("}");
code("amt = amt + xsMax(0, xGetFloat(dPlayerUnits, xCurrentHealth, xGetInt(db, xCharIndex)) - current);");
code("}");
code("xSetFloat(dPlayerUnits, xCurrentHealth, current, xGetInt(db, xCharIndex));");
code("dist = xsPow(overheatRadius * xGetFloat(dPlayerData, xPlayerSpellRange), 2);");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (unitDistanceToVector(xGetInt(dEnemies, xUnitName), pos) < dist) {");
code("damageEnemy(p, amt * xGetFloat(dPlayerData, xPlayerSpellDamage), true);");
code("}");
code("}");
code("}");
code("}");

code("if (xGetDatabaseCount(infernos) >0) {");
code("xDatabaseNext(infernos);");
code("if (trTimeMS() > xGetInt(infernos, xInfernoNext)) {");
code("xSetInt(infernos, xInfernoNext, xGetInt(infernos, xInfernoNext) + 300);");
code("pos = xGetVector(infernos, xInfernoPos);");
code("if (xGetFloat(infernos, xInfernoRadius) < xGetFloat(infernos, xInfernoMaxRadius)) {");
code("xSetFloat(infernos, xInfernoRadius, 2.0 + xGetFloat(infernos, xInfernoRadius));");
code("hit = 1.5 * xGetFloat(infernos, xInfernoRadius);");
code("amt = 6.283185 / hit;");
code("mCos = xsCos(amt);");
code("mSin = xsSin(amt);");

code("trQuestVarSetFromRand(\"angle\", 0, 3.141592, false);");
code("current = trQuestVarGet(\"angle\");");
code("dir = xsVectorSet(xsCos(current),0,xsSin(current)) * xGetFloat(infernos, xInfernoRadius);");
code("for(x=hit; >0) {");
code("dest = pos + dir;");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,xsVectorGetX(dest),0,xsVectorGetZ(dest),0,true);");
code("trArmySelect(\"\"+p+\",0\");");
code("trUnitChangeProtoUnit(\"Ball of Fire Impact\");");
code("}");
code("}");
code("amt = xGetFloat(infernos, xInfernoDamage) * 0.3;");
code("dist = xsPow(xGetFloat(infernos, xInfernoRadius), 2);");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (unitDistanceToVector(xGetInt(dEnemies, xUnitName), pos) < dist) {");
code("damageEnemy(p, amt);");
code("}");
code("}");
code("for(x=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("xUnitSelectByID(dPlayerUnits, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (unitDistanceToVector(xGetInt(dPlayerUnits, xUnitName), pos) < dist) {");
code("healUnit(p, amt * 0.5);");
code("}");
code("}");
code("}");
code("if (trTimeMS() > xGetInt(infernos, xInfernoTimeout)) {");
code("xFreeDatabaseBlock(infernos);");
code("}");
code("}");

code("xSetPointer(dEnemies, index);");
code("poisonKillerBonus(p);");
code("}");

code("void chooseFireKnight(int eventID = -1) {");
code("xsSetContextPlayer(0);");
code("int p = eventID - 1000 - 12 * FIREKNIGHT;");
code("int db = getCharactersDB(p);");
code("resetCharacterCustomVars(p);");
code("xSetPointer(dPlayerData, p);");
code("if (trCurrentPlayer() == p) {");
code("map(\"q\", \"game\", \"uiSetSpecialPower(133) uiSpecialPowerAtPointer\");");
code("wellName = \"(Q) Flaming Impact\";");
code("wellIsUltimate = false;");
code("map(\"w\", \"game\", \"uiSetSpecialPower(156) uiSpecialPowerAtPointer\");");
code("rainName = \"(W) Overheat\";");
code("rainIsUltimate = false;");
code("map(\"e\", \"game\", \"uiSetSpecialPower(227) uiSpecialPowerAtPointer\");");
code("lureName = \"(E) Inferno\";");
code("lureIsUltimate = true;");
code("}");
code("xFireKnightPhoenix = xInitAddInt(db, \"phoenix\");");
code("xFireKnightCharging = xInitAddBool(db, \"charging\");");
code("xFireKnightOverheatNext = xInitAddInt(db, \"overheatNext\");");

code("xSetInt(dPlayerData,xPlayerWellCooldown, flamingImpactCooldown);");
code("xSetFloat(dPlayerData,xPlayerWellCost,0);");
code("xSetInt(dPlayerData,xPlayerLureCooldown, 1);");
code("xSetFloat(dPlayerData,xPlayerLureCost, infernoCost);");
code("xSetInt(dPlayerData,xPlayerRainCooldown,overheatCooldown);");
code("xSetFloat(dPlayerData,xPlayerRainCost, 0);");

code("if (trQuestVarGet(\"p\"+p+\"fireharpies\") == 0) {");
code("db = xInitDatabase(\"p\"+p+\"fireharpies\");");
code("trQuestVarSet(\"p\"+p+\"fireharpies\", db);");
code("xInitAddInt(db, \"name\");");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"fireCharges\") == 0) {");
code("db = xInitDatabase(\"p\"+p+\"fireCharges\");");
code("trQuestVarSet(\"p\"+p+\"fireCharges\", db);");
code("xInitAddInt(db, \"name\");");
code("xInitAddInt(db, \"index\");");
code("xFireChargeTimeout = xInitAddInt(db, \"timeout\");");
code("xFireChargeSFX = xInitAddInt(db, \"sfx\");");
code("xFireChargeDest = xInitAddVector(db, \"dest\");");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"inferno\") == 0) {");
code("db = xInitDatabase(\"p\"+p+\"inferno\");");
code("trQuestVarSet(\"p\"+p+\"inferno\", db);");
code("xInfernoPos = xInitAddVector(db, \"pos\");");
code("xInfernoDamage = xInitAddFloat(db, \"damage\");");
code("xInfernoRadius = xInitAddFloat(db, \"radius\");");
code("xInfernoMaxRadius = xInitAddFloat(db, \"maxRadius\");");
code("xInfernoNext = xInitAddInt(db, \"next\");");
code("xInfernoTimeout = xInitAddInt(db, \"timeout\");");
code("}");
code("}");

code("rule fireknight_init");
code("active");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("for(p=1; < ENEMY_PLAYER) {");
code("trEventSetHandler(12 * FIREKNIGHT + p, \"fireknightAlways\");");
code("trEventSetHandler(1000 + 12 * FIREKNIGHT + p, \"chooseFireKnight\");");
code("}");
code("}");

code("float empoweredDamage = 60;");
code("float empoweredRadius = 4;");

code("float starDuration = 10;");
code("float starRadius = 4;");
code("float starDamage = 10;");

code("int starfallCooldown = 8;");
code("float starfallRadius = 5;");
code("float starfallDamage = 120;");

code("float solarFlareDamage = 90;");
code("float solarFlareRange = 40;");
code("float solarFlareCost = 40;");

code("float warpRange = 8;");
code("int warpCooldown = 6;");

code("int xStarfire = 0;");


code("int xStarPos = 0;");
code("int xStarTimeout = 0;");
code("int xStarLast = 0;");

code("int xStarProjPos = 0;");
code("int xStarProjTimeout = 0;");

code("int xStarfallTimeout = 0;");
code("int xStarfallYeehaw = 0;");
code("int xStarfallPos = 0;");

code("int xSolarFlarePos = 0;");

code("void removeBlastmage(int p = 0) {");
code("removePlayerSpecific(p);");
code("}");

code("void blastmageSpell(int p = 0) {");
code("int db = getCharactersDB(p);");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xSetInt(db, xStarfire, 1 + xGetInt(db, xStarfire));");
code("if (xGetInt(db, xStarfire) > 3) {");
code("xSetInt(db, xStarfire, 3);");
code("}");
code("}");
code("}");

code("void spawnStar(int p = 0, vector pos = vector(0,0,0)) {");
code("int next = trGetNextUnitScenarioNameNumber();");
code("int stars = trQuestVarGet(\"p\"+p+\"stars\");");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",2,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"\"+p+\",0\");");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+next, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Outpost\"));");
code("trSetSelectedScale(0,0,0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+(next+1), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Lighthouse\"));");
code("trSetSelectedScale(0,0,0);");
code("xAddDatabaseBlock(stars, true);");
code("xSetInt(stars, xUnitName, next);");
code("xSetVector(stars, xStarPos, pos);");
code("xSetInt(stars, xStarTimeout, trTimeMS() + 1000 * starDuration * xGetFloat(dPlayerData, xPlayerSpellDuration));");
code("xSetInt(stars, xStarLast, trTimeMS());");
code("}");

code("void blastmageAlways(int eventID = -1) {");
code("xsSetContextPlayer(0);");
code("int p = eventID - 12 * BLASTMAGE;");
code("int id = 0;");
code("int hit = 0;");
code("int target = 0;");
code("int next = 0;");
code("int index = xGetPointer(dEnemies);");
code("int db = getCharactersDB(p);");
code("int stars = trQuestVarGet(\"p\"+p+\"stars\");");
code("int starfalls = trQuestVarGet(\"p\"+p+\"starfalls\");");
code("int starproj = trQuestVarGet(\"p\"+p+\"starproj\");");
code("int solarflare = trQuestVarGet(\"p\"+p+\"solarFlare\");");
code("float amt = 0;");
code("float dist = 0;");
code("float current = 0;");
code("xSetPointer(dPlayerData, p);");

code("vector pos = vector(0,0,0);");
code("vector dest = vector(0,0,0);");
code("vector dir = vector(0,0,0);");

code("if (xGetDatabaseCount(db) > 0) {");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeBlastmage(p);");
code("} else {");
code("hit = CheckOnHit(p);");
code("}");
code("}");

code("if (xGetDatabaseCount(stars) > 0) {");
code("xDatabaseNext(stars);");
code("amt = 0.001 * (trTimeMS() - xGetInt(stars, xStarLast));");

code("if (amt >= 1) {");
code("amt = amt * starDamage * xGetFloat(dPlayerData, xPlayerSpellDamage);");
code("xSetInt(stars, xStarLast, trTimeMS());");
code("pos = xGetVector(stars, xStarPos);");

code("dist = starRadius * xGetFloat(dPlayerData, xPlayerSpellRange);");
code("dist = xsPow(dist, 2);");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("if (unitDistanceToVector(xGetInt(dEnemies, xUnitName), pos) < dist) {");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("damageEnemy(p, amt);");
code("}");
code("}");
code("}");

code("if (trTimeMS() > xGetInt(stars, xStarTimeout)) {");
code("xUnitSelect(stars, xUnitName);");
code("trUnitChangeProtoUnit(\"Arkantos Boost SFX\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+(1+xGetInt(stars, xUnitName)));");
code("trUnitChangeProtoUnit(\"Arkantos Boost SFX\");");
code("xFreeDatabaseBlock(stars);");
code("}");
code("}");

code("if (xGetDatabaseCount(starproj) >0) {");
code("xDatabaseNext(starproj);");
code("if (trTimeMS() > xGetInt(starproj, xStarProjTimeout)) {");
code("pos = vectorSnapToGrid(xGetVector(starproj, xStarProjPos));");
code("next = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+next, true);");
code("trDamageUnitPercent(100);");
code("trUnitChangeProtoUnit(\"Meteorite\");");
code("dist = empoweredRadius * (2.0 + xGetInt(dPlayerData, xPlayerProjectiles)) / 3.0;");
code("dist = xsPow(dist, 2);");
code("amt = empoweredDamage * xGetFloat(dPlayerData, xPlayerSpellDamage);");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (unitDistanceToVector(xGetInt(dEnemies, xUnitName), pos) < dist) {");
code("damageEnemy(p, amt);");
code("}");
code("}");

code("gainFavor(p, 3);");
code("spawnStar(p, pos);");
code("xFreeDatabaseBlock(starproj);");
code("trQuestVarSetFromRand(\"sound\", 1, 5, true);");
code("trSoundPlayFN(\"ui\lightning\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");

code("if (yFindLatest(\"p\"+p+\"latestProj\", \"Priest Projectile\", p) > 0) {");
code("pos = kbGetBlockPosition(\"\"+1*trQuestVarGet(\"p\"+p+\"latestProj\"));");
code("dist = 25;");
code("target = 0;");
code("for (x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("id = xGetInt(db, xUnitID);");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("if (trUnitAlive() == false) {");
code("removeBlastmage(p);");
code("} else if (kbUnitGetAnimationActionType(id) == 12) {");
code("current = unitDistanceToVector(xGetInt(db, xUnitName), pos);");
code("if (current < dist) {");
code("dist = current;");
code("target = xGetPointer(db);");
code("}");
code("}");
code("}");
code("if (target > 0) {");
code("xSetPointer(db, target);");
code("if (xGetInt(db, xStarfire) >= 1) {");
code("id = xGetInt(db, xUnitID);");
code("xsSetContextPlayer(p);");
code("target = trGetUnitScenarioNameNumber(kbUnitGetTargetUnitID(id));");
code("xsSetContextPlayer(0);");

code("xSetInt(db, xStarfire, xGetInt(db, xStarfire) - 1);");
code("pos = vectorSnapToGrid(kbGetBlockPosition(\"\"+target, true));");
code("next = trTimeMS() + distanceBetweenVectors(kbGetBlockPosition(\"\"+xGetInt(db, xUnitName), true), pos, false) * 33.3;");
code("xAddDatabaseBlock(starproj, true);");
code("xSetVector(starproj, xStarProjPos, pos);");
code("xSetInt(starproj, xStarProjTimeout, next);");

code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"latestProj\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Pharaoh of Osiris XP\"));");
code("trSetSelectedScale(0,0,0);");
code("trUnitOverrideAnimation(50,0,true,false,-1);");
code("}");
code("}");
code("}");

code("if (xGetDatabaseCount(starfalls) > 0) {");
code("xDatabaseNext(starfalls);");
code("if (xGetBool(starfalls, xStarfallYeehaw)) {");
code("xUnitSelect(starfalls, xUnitName);");
code("trMutateSelected(kbGetProtoUnitID(\"Lampades\"));");
code("trSetSelectedScale(0,0,0);");
code("trUnitOverrideAnimation(18,0,true,false,-1);");
code("xSetBool(starfalls, xStarfallYeehaw, false);");
code("} else if (trTimeMS() > xGetInt(starfalls, xStarfallTimeout)) {");
code("pos = xGetVector(starfalls, xStarfallPos);");
code("dir = vector(1,0,0);");
code("dist = xsPow(starfallRadius * xGetFloat(dPlayerData, xPlayerSpellRange), 2);");
code("amt = starfallDamage * xGetFloat(dPlayerData, xPlayerSpellDamage);");
code("hit = 0;");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (unitDistanceToVector(xGetInt(dEnemies, xUnitName), pos) < dist) {");
code("damageEnemy(p, amt, true);");
code("xSetFloat(dEnemies, xMagicResist, xGetFloat(dEnemies, xMagicResist) - 0.1);");
code("hit = hit + 1;");
code("}");
code("}");
code("gainFavor(p, hit);");
code("trSoundPlayFN(\"meteordustcloud.wav\",\"1\",-1,\"\",\"\");");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"1,0\");");
code("trDamageUnitPercent(100);");
code("trUnitChangeProtoUnit(\"Implode Sphere Effect\");");
code("spawnStar(p, pos);");
code("xFreeDatabaseBlock(starfalls);");
code("}");
code("}");

code("if (xGetBool(dPlayerData, xPlayerWellActivated)) {");
code("xSetBool(dPlayerData, xPlayerWellActivated, false);");
code("trSoundPlayFN(\"lapadesconvert.wav\",\"1\",-1,\"\",\"\");");
code("pos = vectorSnapToGrid(xGetVector(dPlayerData, xPlayerWellPos));");
code("blastmageSpell(p);");
code("zSetProtoUnitStat(\"Kronny Flying\", p, 1, 0.1);");
code("next = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"\"+p+\",0\",\"Kronny Flying\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+next, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Kronny Flying\"));");
code("trSetSelectedScale(0,3,0);");
code("trDamageUnitPercent(100);");
code("xAddDatabaseBlock(starfalls, true);");
code("xSetInt(starfalls, xUnitName, next);");
code("xSetInt(starfalls, xStarfallTimeout, trTimeMS() + 1000);");
code("xSetBool(starfalls, xStarfallYeehaw, true);");
code("xSetVector(starfalls, xStarfallPos, pos);");
code("}");

code("if (xGetBool(dPlayerData, xPlayerLureActivated)) {");
code("xSetBool(dPlayerData, xPlayerLureActivated, false);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"lureObject\", true);");
code("trUnitDestroy();");
code("blastmageSpell(p);");
code("trQuestVarSetFromRand(\"sound\", 1, 3, true);");
code("trSoundPlayFN(\"suckup\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"sphinxteleportout.wav\",\"1\",-1,\"\",\"\");");
code("dest = xGetVector(dPlayerData, xPlayerLurePos);");
code("for(x=xGetDatabaseCount(db); >0) {");
code("id = xDatabaseNext(db, true);");
code("if (id == -1 || trUnitAlive() == false) {");
code("removeBlastmage(p);");
code("} else {");
code("pos = kbGetBlockPosition(\"\"+xGetInt(db, xUnitName), true);");
code("spawnStar(p, pos);");
code("target = 1 + xsMin(warpRange * xGetFloat(dPlayerData, xPlayerSpellRange),");
code("distanceBetweenVectors(pos, dest, false)) / 2;");
code("dir = getUnitVector(pos, dest);");
code("for(i=target; >0) {");
code("pos = pos + (dir * 2.0);");
code("if (terrainIsType(vectorToGrid(pos), TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("break;");
code("}");
code("}");
code("next = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"\"+p+\",0\", \"Transport Ship Greek\", 1, xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("xUnitSelectByID(db, xUnitID);");
code("trImmediateUnitGarrison(\"\"+next);");
code("trMutateSelected(kbGetProtoUnitID(\"Siege Tower\"));");
code("trUnitChangeProtoUnit(\"Priest\");");
code("xUnitSelectByID(db, xUnitID);");
code("trSetUnitOrientation(dir, vector(0,1,0), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Priest\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+next, true);");
code("trUnitChangeProtoUnit(\"Lightning Sparks\");");
code("}");
code("}");
code("equipRelicsAgain(p);");
code("}");

code("if (xGetDatabaseCount(solarflare) > 0) {");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"solarFlareNext\")) {");
code("trQuestVarSet(\"p\"+p+\"solarFlareNext\", trQuestVarGet(\"p\"+p+\"solarFlareNext\") + 200);");
code("xDatabaseNext(solarflare);");
code("dest = xGetVector(solarflare, xSolarFlarePos);");
code("amt = solarFlareDamage * xGetFloat(dPlayerData, xPlayerSpellDamage);");
code("dist = solarFlareRange * xGetFloat(dPlayerData, xPlayerSpellRange);");
code("for(y=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("pos = vectorSnapToGrid(kbGetBlockPosition(\"\"+xGetInt(db, xUnitName), true));");
code("dir = getUnitVector(pos, dest);");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (rayCollision(dEnemies, pos, dir, dist + 2.0, 4.0)) {");
code("damageEnemy(p, amt);");
code("}");
code("}");
code("next = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitSetStance(\"Passive\");");
code("trMutateSelected(kbGetProtoUnitID(\"Petosuchus Projectile\"));");
code("trSetUnitOrientation(vector(0,0,0) - dir,vector(0,1,0),true);");
code("trUnitHighlight(10.0, false);");
code("xAddDatabaseBlock(dPlayerLasers, true);");
code("xSetInt(dPlayerLasers, xUnitName, next);");
code("xSetInt(dPlayerLasers, xPlayerLaserTimeout, trTimeMS() + 1000);");
code("xSetFloat(dPlayerLasers, xPlayerLaserRange, dist * 1.4);");
code("}");
code("trQuestVarSetFromRand(\"sound\", 1, 5, true);");
code("trSoundPlayFN(\"ui\lightning\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("xFreeDatabaseBlock(solarflare);");
code("}");
code("}");


code("if (xGetBool(dPlayerData, xPlayerRainActivated)) {");
code("xSetBool(dPlayerData, xPlayerRainActivated, false);");
code("gainFavor(p, 0.0 - solarFlareCost * xGetFloat(dPlayerData, xPlayerUltimateCost));");
code("blastmageSpell(p);");
code("trQuestVarSet(\"p\"+p+\"solarFlareNext\", trTimeMS());");
code("trSoundPlayFN(\"petsuchosattack.wav\",\"1\",-1,\"\",\"\");");
code("for(x=xGetDatabaseCount(stars); >0) {");
code("xDatabaseNext(stars);");
code("xAddDatabaseBlock(solarflare, true);");
code("xSetVector(solarflare, xSolarFlarePos, xGetVector(stars, xStarPos));");
code("}");
code("}");

code("xSetPointer(dEnemies, index);");
code("poisonKillerBonus(p);");
code("}");

code("void chooseBlastmage(int eventID = -1) {");
code("xsSetContextPlayer(0);");
code("int p = eventID - 1000 - 12 * BLASTMAGE;");
code("int db = getCharactersDB(p);");
code("resetCharacterCustomVars(p);");
code("xSetPointer(dPlayerData, p);");
code("trQuestVarSet(\"p\"+p+\"latestProj\", trGetNextUnitScenarioNameNumber() - 1);");
code("if (trCurrentPlayer() == p) {");
code("map(\"q\", \"game\", \"uiSetSpecialPower(133) uiSpecialPowerAtPointer\");");
code("wellName = \"(Q) Starfall\";");
code("wellIsUltimate = false;");
code("map(\"e\", \"game\", \"uiSetSpecialPower(156) uiSpecialPowerAtPointer\");");
code("rainName = \"(E) Solar Flare\";");
code("rainIsUltimate = true;");
code("map(\"w\", \"game\", \"uiSetSpecialPower(227) uiSpecialPowerAtPointer\");");
code("lureName = \"(W) Warp\";");
code("lureIsUltimate = false;");
code("}");
code("xStarfire = xInitAddInt(db, \"starfire\");");
code("zSetProtoUnitStat(\"Priest Projectile\", p, 8, 0.0001);");

code("xSetInt(dPlayerData,xPlayerWellCooldown, starfallCooldown);");
code("xSetFloat(dPlayerData,xPlayerWellCost,0);");
code("xSetInt(dPlayerData,xPlayerLureCooldown, warpCooldown);");
code("xSetFloat(dPlayerData,xPlayerLureCost, 0);");
code("xSetInt(dPlayerData,xPlayerRainCooldown,1);");
code("xSetFloat(dPlayerData,xPlayerRainCost, solarFlareCost);");

code("if (trQuestVarGet(\"p\"+p+\"stars\") == 0) {");
code("db = xInitDatabase(\"p\"+p+\"stars\");");
code("trQuestVarSet(\"p\"+p+\"stars\", db);");
code("xInitAddInt(db, \"name\");");
code("xStarPos = xInitAddVector(db, \"pos\");");
code("xStarTimeout = xInitAddInt(db, \"timeout\");");
code("xStarLast = xInitAddInt(db, \"last\");");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"starproj\") == 0) {");
code("db = xInitDatabase(\"p\"+p+\"starproj\");");
code("trQuestVarSet(\"p\"+p+\"starproj\", db);");
code("xStarProjPos = xInitAddVector(db, \"pos\");");
code("xStarProjTimeout = xInitAddInt(db, \"timeout\");");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"starfalls\") == 0) {");
code("db = xInitDatabase(\"p\"+p+\"starfalls\");");
code("trQuestVarSet(\"p\"+p+\"starfalls\", db);");
code("xInitAddInt(db, \"name\");");
code("xStarfallTimeout = xInitAddInt(db, \"timeout\");");
code("xStarfallYeehaw = xInitAddBool(db, \"yeehaw\");");
code("xStarfallPos = xInitAddVector(db, \"pos\");");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"solarFlare\") == 0) {");
code("db = xInitDatabase(\"p\"+p+\"solarFlare\");");
code("trQuestVarSet(\"p\"+p+\"solarFlare\", db);");
code("xSolarFlarePos = xInitAddVector(db, \"pos\");");
code("}");
code("}");

code("void modifyBlastmage(int eventID = -1) {");
code("int p = eventID - 5000 - 12 * BLASTMAGE;");
code("zSetProtoUnitStat(\"Priest\", p, 13, 1);");
code("}");

code("rule blastmage_init");
code("active");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("for(p=1; < ENEMY_PLAYER) {");
code("trEventSetHandler(12 * BLASTMAGE + p, \"blastmageAlways\");");
code("trEventSetHandler(1000 + 12 * BLASTMAGE + p, \"chooseBlastmage\");");
code("trEventSetHandler(5000 + 12 * BLASTMAGE + p, \"modifyBlastmage\");");
code("}");
code("}");
code("const int DICE_COPY = 1;");
code("const int DICE_EXPLODE = 2;");
code("const int DICE_HEAL = 3;");

code("const int DECK_BURN = 1;");
code("const int DECK_STUN = 2;");
code("const int DECK_RELICS = 3;");

code("int diceCooldown = 6;");
code("float diceRadius = 6;");
code("float diceDamage = 100;");

code("int deckCooldown = 12;");
code("float deckRadius = 6;");
code("float deckDuration = 6;");
code("float deckDamage = 20;");

code("float gambleCost = 30;");

code("int xGamblerAnimating = 0;");
code("int xGamblerTimeout = 0;");
code("int xGamblerSpy = 0;");

code("int GamblerNumberFlags = 0;");
code("int GamblerGambleSFX = 0;");

code("int xDicePrev = 0;");
code("int xDiceUnit = 0;");
code("int xDiceSFX = 0;");
code("int xDiceDir = 0;");
code("int xDiceType = 0;");
code("int xDiceCount = 0;");

code("int xDeckBurnEnd = 0;");
code("int xDeckBurnRadius = 0;");
code("int xDeckBurnPos = 0;");
code("int xDeckBurnDamage = 0;");
code("int xDeckBurnNext = 0;");
code("int xDeckBurnTimeout = 0;");

code("int xTempRelicPlayer = 0;");
code("int xTempRelicTimeout = 0;");

code("int xCardTimeout = 0;");
code("int xCardType = 0;");
code("int xCardDest = 0;");
code("int xCardCount = 0;");

code("void removeGambler(int p = 0) {");
code("removePlayerSpecific(p);");
code("}");

code("void gamblerAlways(int eventID = -1) {");
code("xsSetContextPlayer(0);");
code("int p = eventID - 12 * GAMBLER;");
code("int id = 0;");
code("int action = 0;");
code("int hit = 0;");
code("int target = 0;");
code("int next = 0;");
code("int index = xGetPointer(dEnemies);");
code("int db = getCharactersDB(p);");
code("int dice = trQuestVarGet(\"p\"+p+\"dice\");");
code("int deckburns = trQuestVarGet(\"p\"+p+\"deckBurns\");");
code("int relics = trQuestVarGet(\"p\"+p+\"tempRelics\");");
code("int cards = trQuestVarGet(\"p\"+p+\"cards\");");
code("float amt = 0;");
code("float dist = 0;");
code("float current = 0;");
code("xSetPointer(dPlayerData, p);");

code("vector pos = vector(0,0,0);");
code("vector prev = vector(0,0,0);");
code("vector dir = vector(0,0,0);");

code("if (xGetDatabaseCount(db) > 0) {");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeGambler(p);");
code("} else if (xGetBool(db, xGamblerAnimating)) {");
code("if (trTimeMS() > xGetInt(db, xGamblerTimeout)) {");
code("trUnitOverrideAnimation(-1, 0, false, true, -1);");
code("xSetBool(db, xGamblerAnimating, false);");
code("}");
code("} else {");
code("switch(xGetInt(db, xGamblerSpy))");
code("{");
code("case 0:");
code("{");
code("if (xGetInt(dPlayerUnits, xStunSFX, xGetInt(db, xCharIndex)) == 0) {");
code("xSetPointer(dPlayerUnits, xGetInt(db, xCharIndex));");
code("xUnitSelectByID(db, xUnitID);");
code("trMutateSelected(kbGetProtoUnitID(\"Hypaspist\"));");
code("spyEffect(xGetInt(db, xUnitName),");
code("kbGetProtoUnitID(\"Cinematic Block\"),xsVectorSet(dPlayerUnits,xStunSFX,xGetPointer(dPlayerUnits)));");
code("spyEffect(xGetInt(db, xUnitName),");
code("kbGetProtoUnitID(\"Cinematic Block\"),xsVectorSet(dPlayerUnits,xPoisonSFX,xGetPointer(dPlayerUnits)));");
code("spyEffect(xGetInt(db, xUnitName),");
code("kbGetProtoUnitID(\"Cinematic Block\"),xsVectorSet(dPlayerUnits,xSilenceSFX,xGetPointer(dPlayerUnits)));");
code("xSetInt(db, xGamblerSpy, 1);");
code("}");
code("}");
code("case 1:");
code("{");
code("if (trQuestVarGet(\"spyfind\") == trQuestVarGet(\"spyfound\")) {");
code("xUnitSelectByID(db, xUnitID);");
code("trMutateSelected(kbGetProtoUnitID(\"Regent\"));");
code("xSetInt(db, xGamblerSpy, 2);");
code("}");
code("}");
code("}");
code("}");
code("}");

code("switch(1*trQuestVarGet(\"p\"+p+\"gambleSpy\"))");
code("{");
code("case 0:");
code("{");
code("xUnitSelect(dPlayerData, xPlayerUnit);");
code("if (trUnitAlive()) {");
code("target = aiPlanGetUserVariableInt(ARRAYS, GamblerNumberFlags, p);");
code("if ((target <= 0) || (kbGetBlockID(\"\"+target) == -1)) {");
code("xUnitSelect(dPlayerData, xPlayerUnit);");
code("trMutateSelected(kbGetProtoUnitID(\"Hypaspist\"));");
code("spyEffect(xGetInt(dPlayerData, xPlayerUnit),");
code("kbGetProtoUnitID(\"Cinematic Block\"),xsVectorSet(ARRAYS, GamblerNumberFlags, p));");
code("spyEffect(xGetInt(dPlayerData, xPlayerUnit),");
code("kbGetProtoUnitID(\"Cinematic Block\"),xsVectorSet(ARRAYS, GamblerGambleSFX, p));");
code("trQuestVarSet(\"p\"+p+\"gambleSpy\", 1);");
code("}");
code("}");
code("}");
code("case 1:");
code("{");
code("if (trQuestVarGet(\"spyfind\") == trQuestVarGet(\"spyfound\")) {");
code("xUnitSelect(dPlayerData, xPlayerUnit);");
code("trMutateSelected(kbGetProtoUnitID(\"Regent\"));");
code("trQuestVarSet(\"p\"+p+\"gambleSpy\", 2);");
code("}");
code("}");
code("case 2:");
code("{");
code("target = aiPlanGetUserVariableInt(ARRAYS, GamblerNumberFlags, p);");
code("if ((target <= 0) || (kbGetBlockID(\"\"+target) == -1)) {");
code("trQuestVarSet(\"p\"+p+\"gambleSpy\", 0);");
code("}");
code("}");
code("}");

code("if (xGetDatabaseCount(dice) > 0) {");
code("xDatabaseNext(dice);");
code("prev = xGetVector(dice, xDicePrev);");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dice, xUnitName), true);");
code("dist = distanceBetweenVectors(prev, pos, false);");
code("if (dist > 2.0) {");
code("dir = xGetVector(dice, xDiceDir);");
code("if (xGetInt(dice, xDiceType) == DICE_HEAL) {");
code("for(x=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("xUnitSelectByID(dPlayerUnits, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (rayCollision(dPlayerUnits,prev,dir,dist + 2.0,4.0)) {");
code("healUnit(p, dist * diceDamage * 0.25 * xGetFloat(dPlayerData, xPlayerSpellDamage));");
code("gainFavor(p, dist);");
code("}");
code("}");
code("} else {");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (rayCollision(dEnemies,prev,dir,dist + 2.0, 4.0)) {");
code("hit = 1;");
code("break;");
code("}");
code("}");
code("}");

code("if (hit == 1) {");
code("gainFavor(p, 3.0);");
code("switch(xGetInt(dice, xDiceType))");
code("{");
code("case DICE_COPY:");
code("{");
code("if (bossUnit != xGetInt(dEnemies, xUnitName)) {");
code("id = kbGetUnitBaseTypeID(xGetInt(dEnemies, xUnitID));");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"changeunit.wav\",\"1\",-1,\"\",\"\");");
code("for(x=xGetInt(dice, xDiceCount); >0) {");
code("trQuestVarSetFromRand(\"heading\",1,360,true);");
code("next = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),trQuestVarGet(\"heading\"),true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+next, true);");
code("trMutateSelected(id);");
code("activatePlayerUnit(next, p, id, calculateDecay(p, 4.0));");
code("}");
code("xUnitSelect(dice, xDiceUnit);");
code("trUnitChangeProtoUnit(\"Osiris Box Glow\");");
code("xUnitSelect(dice, xDiceSFX);");
code("trUnitChangeProtoUnit(\"Tremor\");");
code("xUnitSelect(dice, xUnitName);");
code("trUnitChangeProtoUnit(\"Dust Large\");");
code("}");
code("}");
code("case DICE_EXPLODE:");
code("{");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"cinematics\32_out\explosion.mp3\",\"1\",-1,\"\",\"\");");
code("xUnitSelect(dice, xDiceUnit);");
code("trUnitChangeProtoUnit(\"Meteor Impact Ground\");");
code("xUnitSelect(dice, xDiceSFX);");
code("trUnitChangeProtoUnit(\"Qilin Heal\");");
code("xUnitSelect(dice, xUnitName);");
code("trDamageUnitPercent(100);");
code("trUnitChangeProtoUnit(\"Meteorite\");");

code("dist = xsPow(diceRadius * xGetFloat(dPlayerData, xPlayerSpellRange), 2);");
code("amt = diceDamage * xGetFloat(dPlayerData, xPlayerSpellDamage);");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (unitDistanceToVector(xGetInt(dEnemies, xUnitName), pos) < dist) {");
code("damageEnemy(p, amt);");
code("}");
code("}");
code("}");
code("}");
code("xFreeDatabaseBlock(dice);");
code("} else if (terrainIsType(vectorToGrid(pos), TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("xUnitSelect(dice, xDiceUnit);");
code("trUnitChangeProtoUnit(\"Dust Small\");");
code("xUnitSelect(dice, xDiceSFX);");
code("trUnitChangeProtoUnit(\"Dust Small\");");
code("xUnitSelect(dice, xUnitName);");
code("trUnitChangeProtoUnit(\"Dust Small\");");
code("xFreeDatabaseBlock(dice);");
code("} else {");
code("xSetVector(dice, xDicePrev, pos);");
code("trQuestVarSetFromRand(\"sound\", 1, 5, true);");
code("if (trQuestVarGet(\"sound\") <= 3) {");
code("xUnitSelect(dice, xUnitName);");
code("if (trUnitVisToPlayer()) {");
code("trSoundPlayFN(\"mine\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("}");
code("}");
code("}");

code("if (xGetBool(dPlayerData, xPlayerWellActivated)) {");
code("xSetBool(dPlayerData, xPlayerWellActivated, false);");
code("trQuestVarSetFromRand(\"sound\", 1, 3, true);");
code("trSoundPlayFN(\"swing\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("amt = xsSqrt(trQuestVarGet(\"p\"+p+\"gamble\")) * 0.5;");
code("trModifyProtounit(\"Hero Greek Achilles\", p, 5, 2);");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeGambler(p);");
code("} else {");
code("prev = kbGetBlockPosition(\"\"+xGetInt(db, xUnitName), true);");
code("dir = getUnitVector(prev, xGetVector(dPlayerData, xPlayerWellPos));");
code("trMutateSelected(kbGetProtoUnitID(\"Regent\"));");
code("trSetUnitOrientation(dir,vector(0,1,0),true);");
code("trUnitOverrideAnimation(1,0,false,false,-1);");
code("xSetBool(db, xGamblerAnimating, true);");
code("xSetInt(db, xGamblerTimeout, trTimeMS() + 1100);");

code("pos = vectorSetAsTargetVector(prev, xGetVector(dPlayerData, xPlayerWellPos), 300.0);");
code("next = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,xsVectorGetX(prev),0,xsVectorGetZ(prev),0,true);");
code("trArmySelect(\"\"+p+\",0\");");
code("trMutateSelected(kbGetProtoUnitID(\"Hero Greek Achilles\"));");
code("trSetUnitOrientation(dir,vector(0,1,0),true);");

code("target = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,1,0,1,0,true);");
code("hit = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,1,0,1,0,true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+target, true);");
code("trUnitChangeProtoUnit(\"Revealer\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+target, true);");
code("trUnitSetAnimationPath(\"1,0,0,0,0,0,0\");");
code("trMutateSelected(kbGetProtoUnitID(\"Relic\"));");
code("trImmediateUnitGarrison(\"\"+next);");
code("trMutateSelected(kbGetProtoUnitID(\"Revealer\"));");
code("trSetSelectedScale(amt,amt,amt);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+hit, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Relic\"));");
code("trImmediateUnitGarrison(\"\"+next);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+hit, true);");
code("switch(1*trQuestVarGet(\"p\"+p+\"diceType\"))");
code("{");
code("case DICE_COPY:");
code("{");
code("trMutateSelected(kbGetProtoUnitID(\"Kronny Birth SFX\"));");
code("}");
code("case DICE_EXPLODE:");
code("{");
code("trMutateSelected(kbGetProtoUnitID(\"Ball of Fire\"));");
code("}");
code("case DICE_HEAL:");
code("{");
code("trMutateSelected(kbGetProtoUnitID(\"Curse SFX\"));");
code("}");
code("}");

code("trUnitSelectClear();");
code("trUnitSelect(\"\"+next, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Axe\"));");
code("trUnitMoveToPoint(xsVectorGetX(pos),0,xsVectorGetZ(pos),-1,false);");
code("trSetSelectedScale(0.5,0.01,0.5);");

code("xAddDatabaseBlock(dice, true);");
code("xSetInt(dice, xUnitName, next);");
code("xSetVector(dice, xDicePrev, prev);");
code("xSetInt(dice, xDiceUnit, target);");
code("xSetInt(dice, xDiceSFX, hit);");
code("xSetVector(dice, xDiceDir, dir);");
code("xSetInt(dice, xDiceType, 1*trQuestVarGet(\"p\"+p+\"diceType\"));");
code("xSetInt(dice, xDiceCount, 1*trQuestVarGet(\"p\"+p+\"gamble\"));");
code("}");
code("}");
code("trModifyProtounit(\"Hero Greek Achilles\", p, 5, -2);");
code("trQuestVarSet(\"p\"+p+\"gamble\", 1);");
code("if (trQuestVarGet(\"p\"+p+\"gambleStep\") == 0) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+aiPlanGetUserVariableInt(ARRAYS,GamblerNumberFlags,p));");
code("trUnitSetAnimationPath(\"0,0,0,0,0,0,0\");");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");
code("}");
code("trQuestVarSetFromRand(\"rand\",1,2,true);");
code("trQuestVarSet(\"p\"+p+\"diceType\", trQuestVarGet(\"p\"+p+\"diceType\") + trQuestVarGet(\"rand\"));");
code("if (trQuestVarGet(\"p\"+p+\"diceType\") >= 4) {");
code("trQuestVarSet(\"p\"+p+\"diceType\", trQuestVarGet(\"p\"+p+\"diceType\") - 3);");
code("}");
code("if (trCurrentPlayer() == p) {");
code("switch(1*trQuestVarGet(\"p\"+p+\"diceType\"))");
code("{");
code("case DICE_COPY:");
code("{");
code("wellName = \"(Q) Loaded Dice: COPY\";");
code("}");
code("case DICE_EXPLODE:");
code("{");
code("wellName = \"(Q) Loaded Dice: EXPLODE\";");
code("}");
code("case DICE_HEAL:");
code("{");
code("wellName = \"(Q) Loaded Dice: HEAL\";");
code("}");
code("}");
code("trCounterAbort(\"well\");");
code("trCounterAddTime(\"well\",");
code("xGetInt(dPlayerData, xPlayerWellCooldown) * xGetFloat(dPlayerData, xPlayerCooldownReduction), 0, wellName);");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"gambleStep\") == 1) {");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"gambleNext\")) {");
code("trQuestVarSet(\"p\"+p+\"gambleNext\", trQuestVarGet(\"p\"+p+\"gambleNext\") + 100);");
code("trQuestVarSetFromRand(\"rand\", 0, 5, true);");
code("if (kbGetBlockID(\"\"+aiPlanGetUserVariableInt(ARRAYS,GamblerNumberFlags,p)) != -1) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+aiPlanGetUserVariableInt(ARRAYS,GamblerNumberFlags,p), true);");
code("trUnitSetAnimationPath(\"\"+1*trQuestVarGet(\"rand\")+\",0,0,0,0,0,0\");");
code("}");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"gambleTimeout\")) {");
code("trQuestVarSet(\"p\"+p+\"gambleStep\", 0);");
code("trQuestVarSet(\"p\"+p+\"gamble\", trQuestVarGet(\"rand\") + 1);");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"\",\"\");");
code("trUnitHighlight(0.3,false);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+aiPlanGetUserVariableInt(ARRAYS,GamblerGambleSFX,p), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");
code("}");
code("}");
code("}");

code("if (xGetBool(dPlayerData, xPlayerRainActivated)) {");
code("xSetBool(dPlayerData, xPlayerRainActivated, false);");
code("gainFavor(p, 0.0 - gambleCost * xGetFloat(dPlayerData, xPlayerUltimateCost));");
code("trSoundPlayFN(\"plentybirth.wav\",\"1\",-1,\"\",\"\");");
code("xUnitSelect(dPlayerData, xPlayerUnit);");
code("if (trUnitAlive()) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+aiPlanGetUserVariableInt(ARRAYS,GamblerNumberFlags,p), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Flag Numbered\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+aiPlanGetUserVariableInt(ARRAYS,GamblerGambleSFX,p), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Curse SFX\"));");
code("}");
code("trQuestVarSet(\"p\"+p+\"gambleNext\", trTimeMS());");
code("trQuestVarSet(\"p\"+p+\"gambleTimeout\", trTimeMS() + 1500);");
code("trQuestVarSet(\"p\"+p+\"gambleStep\", 1);");
code("}");

code("if (xGetDatabaseCount(deckburns) > 0) {");
code("xDatabaseNext(deckburns);");
code("if (trTimeMS() > xGetInt(deckburns, xDeckBurnNext)) {");
code("dist = xGetFloat(deckburns, xDeckBurnRadius);");
code("xSetInt(deckburns, xDeckBurnNext, xGetInt(deckburns, xDeckBurnNext) + 500);");
code("pos = xGetVector(deckburns, xDeckBurnPos);");
code("amt = 2;");
code("for(x=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("xUnitSelectByID(dPlayerUnits, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (unitDistanceToVector(xGetInt(dPlayerUnits, xUnitName), pos) < dist) {");
code("amt = 1 + amt;");
code("}");
code("}");
code("amt = amt * 0.5 * xGetFloat(deckburns, xDeckBurnDamage);");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (unitDistanceToVector(xGetInt(dEnemies, xUnitName), pos) < dist) {");
code("damageEnemy(p, amt);");
code("}");
code("}");
code("if (trTimeMS() > xGetInt(deckburns, xDeckBurnTimeout)) {");
code("for(x=xGetInt(deckburns, xUnitName); < xGetInt(deckburns, xDeckBurnEnd)) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+x, true);");
code("trUnitDestroy();");
code("}");
code("xFreeDatabaseBlock(deckburns);");
code("}");
code("}");
code("}");

code("if (xGetDatabaseCount(relics) > 0) {");
code("xDatabaseNext(relics);");
code("target = xGetInt(relics, xTempRelicPlayer);");
code("if (trTimeMS() > xGetInt(relics, xTempRelicTimeout)) {");
code("relicEffect(xGetInt(relics, xRelicType),target,false);");
code("xFreeDatabaseBlock(relics);");
code("}");
code("}");

code("for (y=xsMin(3, xGetDatabaseCount(cards)); > 0) {");
code("action = processGenericProj(cards);");
code("if (action == PROJ_BOUNCE) {");
code("trSetSelectedScale(0.5,0.1,0.8);");
code("}");
code("if (trTimeMS() > xGetInt(cards, xCardTimeout)) {");
code("xUnitSelect(cards, xUnitName);");
code("trUnitChangeProtoUnit(\"Fimbulwinter SFX\");");
code("xUnitSelect(cards, xUnitName);");
code("trDamageUnitPercent(-100);");
code("switch(xGetInt(cards, xCardType))");
code("{");
code("case DECK_BURN:");
code("{");
code("trSoundPlayFN(\"flamingweapons.wav\",\"1\",-1,\"\",\"\");");
code("pos = xGetVector(cards, xCardDest);");
code("dist = deckRadius * xGetFloat(dPlayerData, xPlayerSpellRange);");
code("dir = xsVectorSet(dist, 0, 0);");
code("next = trGetNextUnitScenarioNameNumber();");
code("for(x=16; >0) {");
code("prev = pos + dir;");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(prev),0,xsVectorGetZ(prev),0,true);");
code("trArmySelect(\"1,0\");");
code("trMutateSelected(kbGetProtoUnitID(\"Hades Fire\"));");
code("trUnitSetAnimationPath(\"1,1,0,0,0,0,0\");");
code("dir = rotationMatrix(dir, 0.923879, 0.382683);");
code("}");
code("xAddDatabaseBlock(deckburns, true);");
code("xSetInt(deckburns, xUnitName, next);");
code("xSetInt(deckburns, xDeckBurnEnd, trGetNextUnitScenarioNameNumber());");
code("xSetFloat(deckburns, xDeckBurnRadius, xsPow(dist, 2));");
code("xSetVector(deckburns, xDeckBurnPos, pos);");
code("xSetFloat(deckburns, xDeckBurnDamage,");
code("deckDamage * xGetFloat(dPlayerData, xPlayerSpellDamage) * xGetInt(cards,xCardCount));");
code("xSetInt(deckburns, xDeckBurnNext, trTimeMS());");
code("xSetInt(deckburns, xDeckBurnTimeout,");
code("trTimeMS() + 1000 * deckDuration * xGetFloat(dPlayerData, xPlayerSpellDuration));");
code("}");
code("case DECK_STUN:");
code("{");
code("trSoundPlayFN(\"frostgiantattack.wav\",\"1\",-1,\"\",\"\");");
code("pos = xGetVector(cards, xCardDest);");
code("dist = deckRadius * xGetFloat(dPlayerData, xPlayerSpellRange);");
code("next = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+next, true);");
code("trUnitChangeProtoUnit(\"Rocket\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+next, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Frost Drift\"));");
code("trSetSelectedScale(0.3 * dist,1,0.4*dist);");
code("dist = xsPow(dist, 2);");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (unitDistanceToVector(xGetInt(dEnemies, xUnitName),pos) < dist) {");
code("stunUnit(dEnemies,2.5,p,false);");
code("}");
code("}");
code("}");
code("case DECK_RELICS:");
code("{");
code("trSoundPlayFN(\"researchcomplete.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"ageadvance.wav\",\"1\",-1,\"\",\"\");");
code("target = xGetInt(cards, xCardCount);");
code("hit = trTimeMS() + deckDuration * xGetFloat(dPlayerData, xPlayerSpellDuration);");
code("next = getRelicsDB(p);");
code("for(x=xGetDatabaseCount(next); >0) {");
code("xDatabaseNext(next);");
code("if (xGetInt(next, xRelicType) <= NORMAL_RELICS) {");
code("xAddDatabaseBlock(relics, true);");
code("xSetInt(relics, xTempRelicPlayer, target);");
code("xSetInt(relics, xTempRelicTimeout, hit);");
code("xSetInt(relics, xRelicType, xGetInt(next, xRelicType));");
code("relicEffect(xGetInt(next, xRelicType),target,true);");
code("}");
code("}");
code("if (trCurrentPlayer() == target) {");
code("trChatSend(0, \"<color={Playercolor(\"+p+\")}>{Playername(\"+p+\")}</color> has given you all their relics!\");");
code("}");
code("}");
code("}");
code("xFreeDatabaseBlock(cards);");
code("}");
code("}");

code("if (xGetBool(dPlayerData, xPlayerLureActivated)) {");
code("xSetBool(dPlayerData, xPlayerLureActivated, false);");
code("pos = xGetVector(dPlayerData, xPlayerLurePos);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"lureObject\");");
code("trUnitDestroy();");
code("hit = 0;");
code("if (trQuestVarGet(\"p\"+p+\"deckType\") == DECK_RELICS) {");
code("dist = 100;");
code("for(x=xGetDatabaseCount(dPlayerCharacters); >0) {");
code("xDatabaseNext(dPlayerCharacters);");
code("xUnitSelectByID(dPlayerCharacters, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerCharacter();");
code("} else if (xGetInt(dPlayerCharacters, xPlayerOwner) != p) {");
code("current = unitDistanceToVector(xGetInt(dPlayerCharacters, xUnitName), pos);");
code("if (current < dist) {");
code("hit = xGetInt(dPlayerCharacters, xUnitName);");
code("target = xGetInt(dPlayerCharacters, xPlayerOwner);");
code("dist = current;");
code("}");
code("}");
code("}");
code("if (hit > 0) {");
code("pos = kbGetBlockPosition(\"\"+hit, true);");
code("}");
code("} else {");
code("hit = 1;");
code("pos = vectorSnapToGrid(pos);");
code("}");
code("xSetVector(dPlayerData, xPlayerLurePos, pos);");

code("if (hit > 0) {");
code("gainFavor(p, 5.0);");
code("trSoundPlayFN(\"ui\scroll.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"skypassagein.wav\",\"1\",-1,\"\",\"\");");

code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeGambler(p);");
code("} else {");
code("prev = kbGetBlockPosition(\"\"+xGetInt(db, xUnitName), true);");
code("dir = getUnitVector(prev, pos);");
code("trMutateSelected(kbGetProtoUnitID(\"Regent\"));");
code("trSetUnitOrientation(dir,vector(0,1,0),true);");
code("trUnitOverrideAnimation(1,0,false,false,-1);");
code("xSetBool(db, xGamblerAnimating, true);");
code("xSetInt(db, xGamblerTimeout, trTimeMS() + 1100);");
code("}");
code("}");

code("trQuestVarSet(\"p\"+p+\"deckNext\", trTimeMS());");
code("trQuestVarSet(\"p\"+p+\"cardsLoaded\", trQuestVarGet(\"p\"+p+\"gamble\"));");
code("trQuestVarSet(\"p\"+p+\"cardsType\", trQuestVarGet(\"p\"+p+\"deckType\"));");
code("trQuestVarSet(\"p\"+p+\"firstCard\", 1);");

code("trQuestVarSet(\"p\"+p+\"gamble\", 1);");
code("if (trQuestVarGet(\"p\"+p+\"gambleStep\") == 0) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+aiPlanGetUserVariableInt(ARRAYS,GamblerNumberFlags,p), true);");
code("trUnitSetAnimationPath(\"0,0,0,0,0,0,0\");");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");
code("}");

code("if ((ENEMY_PLAYER == 2) || (Multiplayer == false) || PvP) {");
code("trQuestVarSet(\"p\"+p+\"deckType\", 1 + trQuestVarGet(\"p\"+p+\"deckType\"));");
code("if (trQuestVarGet(\"p\"+p+\"deckType\") >= 3) {");
code("trQuestVarSet(\"p\"+p+\"deckType\", 1);");
code("}");
code("} else {");
code("trQuestVarSetFromRand(\"rand\", 1, 2, true);");
code("trQuestVarSet(\"p\"+p+\"deckType\", trQuestVarGet(\"p\"+p+\"deckType\") + trQuestVarGet(\"rand\"));");
code("if (trQuestVarGet(\"p\"+p+\"deckType\") > 3) {");
code("trQuestVarSet(\"p\"+p+\"deckType\", trQuestVarGet(\"p\"+p+\"deckType\") - 3);");
code("}");
code("}");
code("if (trCurrentPlayer() == p) {");
code("switch(1*trQuestVarGet(\"p\"+p+\"deckType\"))");
code("{");
code("case DECK_BURN:");
code("{");
code("lureName = \"(W) Gimmick Deck: BURN\";");
code("}");
code("case DECK_STUN:");
code("{");
code("lureName = \"(W) Gimmick Deck: FREEZE\";");
code("}");
code("case DECK_RELICS:");
code("{");
code("lureName = \"(W) Gimmick Deck: RELICS\";");
code("}");
code("}");
code("trCounterAbort(\"lure\");");
code("trCounterAddTime(\"lure\",");
code("xGetInt(dPlayerData, xPlayerLureCooldown) * xGetFloat(dPlayerData, xPlayerCooldownReduction), 0, lureName);");
code("}");
code("} else {");
code("xSetInt(dPlayerData, xPlayerLureCooldownStatus, ABILITY_COST);");
code("trQuestVarSet(\"p\"+p+\"lureCooldownStatus\", ABILITY_COST);");
code("if (trCurrentPlayer() == p) {");
code("trCounterAbort(\"lure\");");
code("trSoundPlayFN(\"cantdothat.wav\",\"1\",-1,\"\",\"\");");
code("trChatSend(0, \"You must target an allied player!\");");
code("}");
code("}");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"cardsLoaded\") > 0) {");
code("if (trTimeMS() > trQuestVarGet(\"p\"+p+\"deckNext\")) {");
code("pos = xGetVector(dPlayerData, xPlayerLurePos);");
code("trQuestVarSet(\"p\"+p+\"deckNext\", 200 + trQuestVarGet(\"p\"+p+\"deckNext\"));");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xUnitSelectByID(db, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeGambler(p);");
code("} else {");
code("prev = kbGetBlockPosition(\"\"+xGetInt(db, xUnitName), true);");
code("dir = getUnitVector(prev, pos);");
code("addGenericProj(cards,prev, dir);");
code("dist = xsMin(1000, distanceBetweenVectors(prev,pos, false) / 0.03);");
code("xSetInt(cards, xCardTimeout, trTimeMS() + dist);");
code("xSetInt(cards, xCardType, 1*trQuestVarGet(\"p\"+p+\"cardsType\"));");
code("xSetVector(cards, xCardDest, pos);");
code("if (trQuestVarGet(\"p\"+p+\"cardsType\") == DECK_RELICS) {");
code("xSetInt(cards, xCardCount, target);");
code("} else if (trQuestVarGet(\"p\"+p+\"cardsType\") == DECK_BURN) {");
code("if (trQuestVarGet(\"p\"+p+\"firstCard\") == 0) {");
code("xSetInt(cards, xCardType, 0);");
code("} else {");
code("xSetInt(cards, xCardCount,trQuestVarGet(\"p\"+p+\"deckCount\"));");
code("trQuestVarSet(\"p\"+p+\"firstCard\",0);");
code("}");
code("}");
code("}");
code("}");
code("trQuestVarSet(\"p\"+p+\"cardsLoaded\", trQuestVarGet(\"p\"+p+\"cardsLoaded\") - 1);");
code("}");
code("}");

code("xSetPointer(dEnemies, index);");
code("}");

code("void chooseGambler(int eventID = -1) {");
code("xsSetContextPlayer(0);");
code("int p = eventID - 1000 - 12 * GAMBLER;");
code("int db = getCharactersDB(p);");
code("resetCharacterCustomVars(p);");
code("xSetPointer(dPlayerData, p);");
code("if (trCurrentPlayer() == p) {");
code("map(\"q\", \"game\", \"uiSetSpecialPower(133) uiSpecialPowerAtPointer\");");
code("wellName = \"(Q) Loaded Dice: COPY\";");
code("wellIsUltimate = false;");
code("map(\"e\", \"game\", \"uiSetSpecialPower(156) uiSpecialPowerAtPointer\");");
code("rainName = \"(E) Gamble\";");
code("rainIsUltimate = true;");
code("map(\"w\", \"game\", \"uiSetSpecialPower(227) uiSpecialPowerAtPointer\");");
code("lureName = \"(W) Gimmick Deck: BURN\";");
code("lureIsUltimate = false;");
code("}");
code("xGamblerAnimating = xInitAddBool(db, \"animating\");");
code("xGamblerTimeout = xInitAddInt(db, \"timeout\");");
code("xGamblerSpy = xInitAddInt(db, \"spy\");");
code("trQuestVarSet(\"p\"+p+\"diceType\", 1);");
code("trQuestVarSet(\"p\"+p+\"deckType\", 1);");
code("trQuestVarSet(\"p\"+p+\"gamble\", 1);");

code("xSetInt(dPlayerData,xPlayerWellCooldown, diceCooldown);");
code("xSetFloat(dPlayerData,xPlayerWellCost,0);");
code("xSetInt(dPlayerData,xPlayerLureCooldown, deckCooldown);");
code("xSetFloat(dPlayerData,xPlayerLureCost, 0);");
code("xSetInt(dPlayerData,xPlayerRainCooldown,1);");
code("xSetFloat(dPlayerData,xPlayerRainCost, gambleCost);");

code("if (trQuestVarGet(\"p\"+p+\"dice\") == 0) {");
code("db = xInitDatabase(\"p\"+p+\"dice\");");
code("trQuestVarSet(\"p\"+p+\"dice\", db);");
code("xInitAddInt(db, \"name\");");
code("xDicePrev = xInitAddVector(db, \"prev\");");
code("xDiceUnit = xInitAddInt(db, \"diceUnit\");");
code("xDiceSFX = xInitAddInt(db, \"sfx\");");
code("xDiceDir = xInitAddVector(db, \"dir\");");
code("xDiceType = xInitAddInt(db, \"type\");");
code("xDiceCount = xInitAddInt(db, \"count\");");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"deckBurns\") == 0) {");
code("db = xInitDatabase(\"p\"+p+\"deckBurns\");");
code("trQuestVarSet(\"p\"+p+\"deckBurns\", db);");
code("xInitAddInt(db, \"name\");");
code("xDeckBurnEnd = xInitAddInt(db,\"end\");");
code("xDeckBurnRadius = xInitAddFloat(db,\"radius\");");
code("xDeckBurnPos = xInitAddVector(db,\"pos\");");
code("xDeckBurnDamage = xInitAddFloat(db, \"damage\");");
code("xDeckBurnNext = xInitAddInt(db, \"next\");");
code("xDeckBurnTimeout = xInitAddInt(db, \"timeout\");");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"tempRelics\") == 0) {");
code("db = xInitDatabase(\"p\"+p+\"tempRelics\");");
code("trQuestVarSet(\"p\"+p+\"tempRelics\", db);");
code("xTempRelicPlayer = xInitAddInt(db, \"player\");");
code("xInitAddInt(db, \"type\");");
code("xTempRelicTimeout = xInitAddInt(db, \"type\");");
code("}");

code("if (trQuestVarGet(\"p\"+p+\"cards\") == 0) {");
code("db = initGenericProj(\"p\"+p+\"cards\",kbGetProtoUnitID(\"Statue of Automaton Base\"),2,30.0,4,0,p);");
code("xCardTimeout = xInitAddInt(db, \"timeout\");");
code("xCardType = xInitAddInt(db, \"type\");");
code("xCardDest = xInitAddVector(db, \"dest\");");
code("xCardCount = xInitAddInt(db, \"count\");");
code("trQuestVarSet(\"p\"+p+\"cards\", db);");
code("}");
code("}");


code("rule gambler_init");
code("active");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("for(p=1; < ENEMY_PLAYER) {");
code("trEventSetHandler(12 * GAMBLER + p, \"gamblerAlways\");");
code("trEventSetHandler(1000 + 12 * GAMBLER + p, \"chooseGambler\");");
code("}");

code("GamblerNumberFlags = zNewArray(mInt, ENEMY_PLAYER, \"GamblerNumberFlags\");");
code("GamblerGambleSFX = zNewArray(mInt, ENEMY_PLAYER, \"GamblerGambleSFX\");");
code("}");
code("const int BOSS_SPELL_COOLDOWN = -1;");

code("void bossCooldown(int minVal = 0, int maxVal = 0) {");
code("trQuestVarSet(\"bossSpell\", BOSS_SPELL_COOLDOWN);");
code("trQuestVarSetFromRand(\"bossCooldownTime\", minVal, maxVal, true);");
code("trQuestVarSet(\"bossCooldownTime\", trTimeMS() + 1000 * trQuestVarGet(\"bossCooldownTime\"));");
code("trQuestVarSet(\"bossOriginalCooldownTime\", trQuestVarGet(\"bossCooldownTime\"));");
code("}");

code("void processBossCooldown(int ultimate = 31) {");
code("float diff = trTimeMS() - trQuestVarGet(\"bossCooldownLastCheck\");");
code("trQuestVarSet(\"bossCooldownLastCheck\", trTimeMS());");
code("if (trQuestVarGet(\"bossUltimate\") > 0) {");
code("trQuestVarSet(\"bossUsedUltimate\", 1);");
code("}");
code("if (trTimeMS() > trQuestVarGet(\"bossCooldownTime\")) {");
code("trQuestVarSet(\"bossSpell\", 0);");
code("if (trQuestVarGet(\"bossUltimate\") > 0) {");
code("trQuestVarSet(\"bossUltimate\", trQuestVarGet(\"bossUltimate\") - 1);");
code("}");
code("} else if (trUnitPercentDamaged() > 70 && trQuestVarGet(\"bossUsedUltimate\") == 0) {");
code("trQuestVarSet(\"bossSpell\", ultimate);");
code("} else if (trUnitPercentDamaged() > trQuestVarGet(\"bossDamaged\")) {");
code("trQuestVarSet(\"bossDamaged\", trQuestVarGet(\"bossDamaged\") + 3);");
code("trQuestVarSet(\"bossCooldownTime\", trQuestVarGet(\"bossCooldownTime\") - 1000);");
code("} else if (trTimeMS() > trQuestVarGet(\"bossOriginalCooldownTime\")) {");
code("diff = 0.0001 * diff * (trQuestVarGet(\"bossCooldownTime\") - trQuestVarGet(\"bossOriginalCooldownTime\"));");
code("trQuestVarSet(\"bossCooldownTime\", trQuestVarGet(\"bossCooldownTime\") - diff);");
code("}");
code("}");

code("int bossInts = 0;");
code("int bossFloats = 0;");

code("rule initialize_boss_db");
code("active");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("bossInts = zNewArray(mInt, 5, \"bossInts\");");
code("bossFloats = zNewArray(mFloat, 5, \"bossFloats\");");
code("}");

code("int yeebShieldSFX = 0;");
code("int dYeebObelisks = 0;");

code("rule yeeb_boss_message");
code("inactive");
code("highFrequency");
code("{");
code("bool found = false;");
code("if (trTime() > trQuestVarGet(\"yeebNext\")) {");
code("trQuestVarSet(\"yeebStep\", 1 + trQuestVarGet(\"yeebStep\"));");
code("switch(1*trQuestVarGet(\"yeebStep\"))");
code("{");
code("case 1:");
code("{");
code("trSetLighting(\"anatolia\", 1.0);");
code("if (trQuestVarGet(\"p\"+trCurrentPlayer()+\"yeebHit\") == 1) {");
code("trSoundPlayFN(\"\",\"1\",-1,\"Yeebaagooon: Oh, \" + trStringQuestVarGet(\"p\"+trCurrentPlayer()+\"name\")+\" you utter fool.\",");
code("\"icons\special e son of osiris icon 64\");");
code("} else {");
code("trSoundPlayFN(\"\",\"1\",-1,");
code("\"Yeebaagooon: Oh, \" + trStringQuestVarGet(\"p\"+1*trQuestVarGet(\"yeebBossFight\")+\"name\")+\" you utter fool.\",");
code("\"icons\special e son of osiris icon 64\");");
code("}");
code("trQuestVarSet(\"yeebNext\", trTime() + 6);");
code("}");
code("case 2:");
code("{");
code("trSoundPlayFN(\"\",\"1\",-1,\"Yeebaagooon: Did you really think you could escape me by resigning before the bossfight?\",");
code("\"icons\special e son of osiris icon 64\");");
code("trQuestVarSet(\"yeebNext\", trTime() + 6);");
code("}");
code("case 3:");
code("{");
code("trSoundPlayFN(\"\",\"1\",-1,\"Yeebaagooon: Foolish. I'll be taking back what's mine, no matter what.\",");
code("\"icons\special e son of osiris icon 64\");");
code("trQuestVarSet(\"yeebNext\", trTime() + 6);");
code("}");
code("case 4:");
code("{");
code("dYeebObelisks = xInitDatabase(\"yeebObelisks\");");
code("xInitAddInt(dYeebObelisks, \"name\");");
code("trArmyDispatch(\"1,0\",\"Revealer\",1,41,0,41,0,true);");
code("zSetProtoUnitStat(\"Revealer\", 1, 2, 30);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(0);");

code("trQuestVarSet(\"yeebaagooon\", trGetNextUnitScenarioNameNumber());");
code("bossUnit = trQuestVarGet(\"yeebaagooon\");");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,55,0,55,225,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"yeebaagooon\", true);");
code("trUnitConvert(ENEMY_PLAYER);");
code("trUnitChangeProtoUnit(\"Pharaoh of Osiris XP\");");

code("spyEffect(1*trQuestVarGet(\"yeebaagooon\"),");
code("kbGetProtoUnitID(\"Cinematic Block\"), xsVectorSet(ARRAYS,bossInts,yeebShieldSFX));");

code("activateEnemy(bossUnit);");
code("xSetBool(dEnemies, xLaunched, true);");
code("bossPointer = xGetNewestPointer(dEnemies);");

code("trVectorQuestVarSet(\"bossRoomUpper\", xsVectorSet(60,0,60));");
code("if (trQuestVarGet(\"mapType\") == MAP_OPEN) {");
code("trVectorQuestVarSet(\"bossRoomLower\", xsVectorSet(10, 0, 20));");
code("} else {");
code("trVectorQuestVarSet(\"bossRoomLower\", xsVectorSet(20, 0, 10));");
code("}");

code("trQuestVarSet(\"yeebNextInvulnerabilityPhase\", 30);");

code("xsEnableRule(\"yeebaagooon_battle\");");
code("xsEnableRule(\"boss_stun_recovery\");");

code("trOverlayText(\"Yeebaagooon\",3.0,-1,-1,-1);");

code("trQuestVarSet(\"lightningBolts\", trGetNextUnitScenarioNameNumber());");

code("bossCooldown(10, 12);");

code("xsEnableRule(\"gameplay_start\");");
code("trUIFadeToColor(0,0,0,1000,0,false);");
code("trLetterBox(false);");
code("trQuestVarSet(\"yeebNext\", trTime() + 3);");
code("xsEnableRule(\"boss_music\");");
code("boss = 1;");
code("trVectorQuestVarSet(\"yeebPos\", trVectorQuestVarGet(\"startPosition\"));");
code("}");
code("case 5:");
code("{");
code("trMessageSetText(\"Yeebaagooon's spells will drain your favor if they hit you!\", -1);");
code("xsDisableSelf();");
code("trQuestVarSet(\"yeebRelics\", xInitDatabase(\"yeebRelics\"));");
code("xInitAddInt(1*trQuestVarGet(\"yeebRelics\"),\"name\");");
code("for(p=1; < ENEMY_PLAYER) {");
code("if (trQuestVarGet(\"p\"+p+\"yeebHit\") == 1) {");
code("found = false;");
code("int relics = getRelicsDB(p);");
code("for(x=xGetDatabaseCount(relics); >0) {");
code("xDatabaseNext(relics);");
code("if (xGetInt(relics, xRelicType) == RELIC_YEEBAAGOOON) {");
code("found = true;");
code("xAddDatabaseBlock(1*trQuestVarGet(\"yeebRelics\"), true);");
code("xSetInt(1*trQuestVarGet(\"yeebRelics\"), xUnitName, xGetInt(relics, xUnitName));");
code("break;");
code("}");
code("}");
code("if (found == false) {");
code("if (trCurrentPlayer() == p) {");
code("trQuestVarSet(\"ownedRelics\"+RELIC_YEEBAAGOOON, trQuestVarGet(\"ownedRelics\"+RELIC_YEEBAAGOOON) - 1);");
code("trQuestVarSet(\"yeebRelicRetrieved\", 1);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");

code("rule boss_entrance_always");
code("inactive");
code("minInterval 2");
code("{");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossEntranceStatue\");");
code("if (trUnitIsSelected()) {");
code("startNPCDialog(NPC_BOSS_ENTRANCE);");
code("reselectMyself();");
code("}");
code("vector pos = kbGetBlockPosition(\"\"+1*trQuestVarGet(\"bossKey\"), true);");
code("if (unitDistanceToVector(1*trQuestVarGet(\"bossEntranceStatue\"), pos) < 25) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossKey\");");
code("trUnitChangeProtoUnit(\"Osiris Box Glow\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossEntranceSymbol\");");
code("trUnitChangeProtoUnit(\"Rocket\");");
code("trSoundPlayFN(\"cinematics\15_in\gong.wav\",\"1\",-1,\"\",\"\");");
code("trMessageSetText(\"The boss room entrance has opened!\", -1);");
code("pos = kbGetBlockPosition(\"\"+1*trQuestVarGet(\"bossEntranceStatue\"));");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos)-8,0,xsVectorGetZ(pos)-8,0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Vortex Landing\");");
code("trVectorQuestVarSet(\"bossRoomEntrance\", pos - vector(8,0,8));");
code("xsDisableSelf();");
code("}");
code("}");

code("rule enter_boss_room");
code("inactive");
code("minInterval 2");
code("{");
code("for(p=1; < ENEMY_PLAYER) {");
code("trUnitSelectClear();");
code("vector pos = trVectorQuestVarGet(\"bossRoomEntrance\");");
code("if (unitDistanceToVector(xGetInt(dPlayerData, xPlayerUnit), pos) < trQuestVarGet(\"bossEntranceRadius\")) {");
code("if (trQuestVarGet(\"p\"+p+\"enteredBossRoom\") == 0) {");
code("trQuestVarSet(\"p\"+p+\"enteredBossRoom\", 1);");
code("trQuestVarSet(\"playersInBossRoom\", 1 + trQuestVarGet(\"playersInBossRoom\"));");
code("trChatSend(0, \"<color={Playercolor(\"+p+\")}>{Playername(\"+p+\")}</color> has entered the boss room!\");");
code("trChatSend(0, \"All players must be present to start the boss!\");");
code("}");
code("} else if (trQuestVarGet(\"p\"+p+\"enteredBossRoom\") == 1) {");
code("trQuestVarSet(\"p\"+p+\"enteredBossRoom\", 0);");
code("trQuestVarSet(\"playersInBossRoom\", trQuestVarGet(\"playersInBossRoom\") - 1);");
code("}");
code("}");

code("if (trQuestVarGet(\"playersInBossRoom\") == trQuestVarGet(\"activePlayerCount\") - trQuestVarGet(\"deadPlayerCount\") &&");
code("trQuestVarGet(\"playersInBossRoom\") > 0) {");
code("xsDisableSelf();");
code("xsEnableRule(\"boss_cin_00\");");

code("trUIFadeToColor(0,0,0,1000,0,true);");
code("trLetterBox(true);");

code("if (trQuestVarGet(\"stage\") == 7) {");
code("xsDisableRule(\"the_deep_damage\");");
code("}");
code("}");
code("}");


code("rule boss_music");
code("minInterval 3");
code("inactive");
code("{");
code("if (boss > 0 && trTime() > trQuestVarGet(\"musicTime\")) {");
code("if (boss == 11) {");
code("trMusicPlay(\"music\interface\if you can use a doorknob.mp3\", \"1\",0.2);");
code("trQuestVarSet(\"musicTime\", trTime() + 60);");
code("} else {");
code("trQuestVarSet(\"musicTime\", trTime() + 50);");
code("trQuestVarSetFromRand(\"music\", 1, 6, true);");
code("switch(1*trQuestVarGet(\"music\"))");
code("{");
code("case 1:");
code("{");
code("trMusicPlay(\"music\fight\i wish i could throw shapes.mp3\",\"1\",3.0);");
code("}");
code("case 2:");
code("{");
code("trMusicPlay(\"music\fight\li'l drips.mp3\",\"1\",3.0);");
code("}");
code("case 3:");
code("{");
code("trMusicPlay(\"music\fight\meatier shower.mp3\",\"1\",3.0);");
code("}");
code("case 4:");
code("{");
code("trMusicPlay(\"music\fight\oi, that pops!!!.mp3\",\"1\",3.0);");
code("}");
code("case 5:");
code("{");
code("trMusicPlay(\"music\fight\rot loaf.mp3\",\"1\",3.0);");
code("}");
code("case 6:");
code("{");
code("trMusicPlay(\"music\fight\the fire brigade.mp3\",\"1\",3.0);");
code("}");
code("}");
code("}");
code("}");
code("}");

code("rule boss_cin_00");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 1) {");
code("xsDisableSelf();");
code("int id = 0;");
code("for(x=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("id = xGetInt(dPlayerUnits, xUnitID);");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("if (trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (kbGetUnitBaseTypeID(id) == kbGetProtoUnitID(\"Villager Atlantean Hero\")) {");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");
code("removePlayerUnit();");
code("}");
code("}");
code("trQuestVarSet(\"deadPlayerCount\", 0);");
code("trQuestVarSet(\"bossRelicCount\", randomLow(2));");
code("trQuestVarSet(\"normalRelicCount\", 3 - trQuestVarGet(\"bossRelicCount\"));");
code("trQuestVarSet(\"gameOverStep\", 0);");
code("vector pos = xsVectorSet(trQuestVarGet(\"bossRoomSize\"),0,trQuestVarGet(\"bossRoomSize\"));");
code("pos = (trVectorQuestVarGet(\"bossRoomCenter\") * 0.5) - pos;");
code("trPaintTerrain(xsVectorGetX(pos), xsVectorGetZ(pos) - 3,");
code("xsVectorGetX(pos) + 35, xsVectorGetZ(pos),");
code("TERRAIN_WALL, TERRAIN_SUB_WALL);");
code("trChangeTerrainHeight(xsVectorGetX(pos), xsVectorGetZ(pos) - 3,");
code("xsVectorGetX(pos) + 35, xsVectorGetZ(pos),wallHeight,false);");
code("trPaintTerrain(xsVectorGetX(pos)-4, xsVectorGetZ(pos),");
code("xsVectorGetX(pos), xsVectorGetZ(pos) + 35,");
code("TERRAIN_WALL, TERRAIN_SUB_WALL);");
code("trChangeTerrainHeight(xsVectorGetX(pos) - 3, xsVectorGetZ(pos),");
code("xsVectorGetX(pos), xsVectorGetZ(pos) + 35,wallHeight,false);");

code("trVectorQuestVarSet(\"bossRoomEntrance\", pos);");
code("trPaintTerrain(0,0,5,5,0,70,true);");
code("trPaintTerrain(0,0,5,5,TERRAIN_WALL,TERRAIN_SUB_WALL,false);");

code("pos = trVectorQuestVarGet(\"bossRoomCenter\");");
code("bossUnit = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"0,0\",\"Dwarf\",1,");
code("xsVectorGetX(pos),0,xsVectorGetZ(pos),225,true);");
code("trArmySelect(\"0,0\");");
code("trUnitChangeProtoUnit(trStringQuestVarGet(\"bossProto\"));");

code("bossID = kbGetBlockID(\"\"+bossUnit);");

code("trQuestVarSet(\"cinTime\", trTime());");
code("trQuestVarSet(\"cinStep\", 0);");

code("xsEnableRule(\"boss\"+1*trQuestVarGet(\"stage\")+\"_init\");");

code("boss = trQuestVarGet(\"stage\");");

code("pos = pos - vector(12,0,12);");
code("int relics = 0;");

code("xClearDatabase(dPlayerCharacters);");
code("for(p=1; < ENEMY_PLAYER) {");
code("if (xGetBool(dPlayerData, xPlayerResigned, p) == false) {");
code("relics = getRelicsDB(p);");
code("for(x=xGetDatabaseCount(relics); >0) {");
code("xDatabaseNext(relics);");
code("xUnitSelect(relics, xUnitName);");
code("trUnitChangeProtoUnit(\"Relic\");");
code("}");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xPlayerUnit, p), true);");
code("trUnitDestroy();");
code("spawnPlayer(p, pos);");
code("equipRelicsAgain(p);");
code("trPlayerKillAllGodPowers(p);");
code("xSetInt(dPlayerData, xPlayerDead, 0);");
code("xSetBool(dPlayerData, xPlayerSilenced, true);");
code("}");
code("}");

code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("if (trUnitAlive()) {");
code("trUnitDestroy();");
code("}");
code("}");
code("xClearDatabase(dEnemies);");
code("xClearDatabase(dEnemiesIncoming);");

code("activateEnemy(bossUnit, 0, 0);");
code("bossPointer = xGetNewestPointer(dEnemies);");

code("pos = trVectorQuestVarGet(\"bossRoomCenter\");");
code("zSetProtoUnitStat(\"Revealer\", 1, 2, 32);");
code("trArmyDispatch(\"1,0\",\"Revealer\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),225,true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(0);");
code("uiLookAtUnitByName(\"\"+bossUnit);");

code("xClearDatabase(dFreeRelics);");

code("if (trQuestVarGet(\"stage\") > 3) {");
code("xsEnableRule(\"boss_stun_recovery\");");
code("}");
code("}");
code("}");

code("rule boss_stun_recovery");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > trQuestVarGet(\"bossStunRecoveryLast\")) {");
code("trQuestVarSet(\"bossStunRecoveryLast\", trTime());");
code("int pointer = xGetPointer(dEnemies);");
code("if (xSetPointer(dEnemies, bossPointer)) {");
code("if (xGetInt(dEnemies, xStunStatus) > 0) {");
code("xSetInt(dEnemies, xStunTimeout, xGetInt(dEnemies, xStunTimeout) - 500 * trQuestVarGet(\"stage\"));");
code("}");
code("xSetPointer(dEnemies, pointer);");
code("}");
code("}");
code("}");

code("int dLionMeteors = 0;");
code("int xLionMeteorYeehaw = 0;");

code("int dLionShockwaves = 0;");

code("int dLionShockwaveTargets = 0;");

code("rule boss1_init");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > trQuestVarGet(\"cinTime\")) {");
code("switch(1*trQuestVarGet(\"cinStep\"))");
code("{");
code("case 0:");
code("{");
code("trOverlayText(\"The King of Beasts\", 3.0, -1, -1, -1);");
code("trQuestVarSet(\"cinTime\", trTime() + 2);");

code("dLionMeteors = xInitDatabase(\"lionMeteors\");");
code("xInitAddInt(dLionMeteors, \"name\");");
code("xLionMeteorYeehaw = xInitAddInt(dLionMeteors, \"yeehaw\", 1);");

code("dLionShockwaves = initGenericProj(\"lionShockwaves\",kbGetProtoUnitID(\"Heka Shockwave SFX\"),2,15.0,4.0);");

code("dLionShockwaveTargets = xInitDatabase(\"lionShockwaveTargets\");");
code("xInitAddInt(dLionShockwaveTargets, \"name\");");
code("xInitAddInt(dLionShockwaveTargets, \"index\");");
code("}");
code("case 1:");
code("{");
code("trLetterBox(false);");
code("trUIFadeToColor(0,0,0,1000,0,false);");
code("xsDisableSelf();");
code("trModifyProtounit(\"Tornado\", ENEMY_PLAYER, 55, 1);");
code("trModifyProtounit(\"Tornado\", ENEMY_PLAYER, 8, -99);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trUnitConvert(ENEMY_PLAYER);");
code("trSetSelectedScale(bossScale, bossScale, bossScale);");
code("spyEffect(bossUnit, kbGetProtoUnitID(\"Cinematic Block\"), xsVectorSet(ARRAYS,bossInts,0));");
code("xsEnableRule(\"boss1_battle\");");
code("trQuestVarSet(\"bossSpell\", 11);");
code("trModifyProtounit(\"Nemean Lion\", ENEMY_PLAYER, 2, 60);");
code("trQuestVarSet(\"bossGem\", STARSTONE);");
code("trQuestVarSetFromRand(\"bossGemCount\", 2, 3, true);");
code("xsEnableRule(\"boss_music\");");
code("trMessageSetText(\"Use the rocks to take cover from the lion's roar!\", -1);");
code("}");
code("}");
code("trQuestVarSet(\"cinStep\", 1 + trQuestVarGet(\"cinStep\"));");
code("}");
code("}");


code("rule boss1_battle");
code("inactive");
code("highFrequency");
code("{");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("int p = 0;");
code("int x = 0;");
code("int action = 0;");
code("int id = 0;");
code("float angle = 0;");
code("bool hit = false;");
code("vector pos = vector(0,0,0);");
code("vector dir = vector(0,0,0);");
code("if (trUnitAlive() == true) {");
code("if (xGetDatabaseCount(dLionMeteors) > 0) {");
code("xDatabaseNext(dLionMeteors);");
code("if (xGetInt(dLionMeteors, xLionMeteorYeehaw) == 1) {");
code("xSetInt(dLionMeteors, xLionMeteorYeehaw, 0);");
code("xUnitSelect(dLionMeteors, xUnitName);");
code("trMutateSelected(kbGetProtoUnitID(\"Heka Shockwave SFX\"));");
code("trUnitOverrideAnimation(2,0,true,false,-1);");
code("} else if (xGetInt(dLionMeteors, xLionMeteorYeehaw) == 2) {");
code("xUnitSelect(dLionMeteors, xUnitName);");
code("trUnitChangeProtoUnit(\"Rock Granite Big\");");
code("xFreeDatabaseBlock(dLionMeteors);");
code("} else {");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dLionMeteors, xUnitName), true);");
code("if (xsVectorGetY(pos) <= worldHeight + 0.5) {");
code("xUnitSelect(dLionMeteors, xUnitName);");
code("trUnitChangeProtoUnit(\"Tartarian Gate Flame\");");
code("xUnitSelect(dLionMeteors, xUnitName);");
code("trSetSelectedScale(0,0,0);");
code("trDamageUnitPercent(-100);");
code("xSetInt(dLionMeteors, xLionMeteorYeehaw, 2);");
code("for(x=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("xUnitSelectByID(dPlayerUnits, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (unitDistanceToVector(xGetInt(dPlayerUnits, xUnitName), pos) < 9) {");
code("damagePlayerUnit(200);");
code("}");
code("}");

code("pos = vectorToGrid(pos);");
code("trPaintTerrain(xsVectorGetX(pos),xsVectorGetZ(pos),");
code("xsVectorGetX(pos),xsVectorGetZ(pos),");
code("TERRAIN_WALL, TERRAIN_SUB_WALL, false);");
code("}");
code("}");
code("}");
code("for(x=xsMin(4, xGetDatabaseCount(dLionShockwaves)); >0) {");
code("action = processGenericProj(dLionShockwaves);");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dLionShockwaves, xUnitName), true);");
code("hit = false;");
code("for(y=xGetDatabaseCount(dLionShockwaveTargets); >0) {");
code("xDatabaseNext(dLionShockwaveTargets);");
code("xUnitSelect(dLionShockwaveTargets, xUnitName);");
code("if (trUnitAlive() == false) {");
code("xFreeDatabaseBlock(dLionShockwaveTargets);");
code("} else if (unitDistanceToVector(xGetInt(dLionShockwaveTargets, xUnitName), pos) < 9) {");
code("hit = true;");
code("if (xSetPointer(dPlayerUnits, xGetInt(dLionShockwaveTargets, xDatabaseIndex))) {");
code("damagePlayerUnit(200);");
code("}");
code("if (trQuestVarGet(\"bossSpell\") < 30 || trQuestVarGet(\"bossSpell\") == BOSS_SPELL_COOLDOWN) {");
code("xFreeDatabaseBlock(dLionShockwaveTargets);");
code("}");
code("}");
code("}");
code("if (terrainIsType(vectorToGrid(pos), TERRAIN_WALL, TERRAIN_SUB_WALL) || hit) {");
code("xUnitSelect(dLionShockwaves, xUnitName);");
code("trUnitChangeProtoUnit(\"Dust Small\");");
code("xFreeDatabaseBlock(dLionShockwaves);");
code("}");
code("}");

code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("if (trQuestVarGet(\"bossSpell\") == BOSS_SPELL_COOLDOWN) {");
code("processBossCooldown();");
code("} else if (trQuestVarGet(\"bossSpell\") > 30) {");
code("if (trQuestVarGet(\"bossSpell\") == 31) {");
code("trSoundPlayFN(\"cinematics\15_in\gong.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"godpower.wav\",\"1\",-1,\"\",\"\");");
code("trSetLighting(\"night\", 1.0);");
code("trOverlayText(\"Roaring Gale\", 3.0, -1, -1, -1);");
code("id = kbGetBlockID(\"\"+aiPlanGetUserVariableInt(ARRAYS,bossInts,0));");
code("if (id == -1) {");
code("trQuestVarSet(\"noFake\", 1);");
code("spyEffect(bossUnit,kbGetProtoUnitID(\"Cinematic Block\"),xsVectorSet(ARRAYS,bossInts,0));");
code("} else {");
code("trQuestVarSet(\"noFake\", 0);");
code("trSetSelectedScale(0,0,0);");
code("trMutateSelected(kbGetProtoUnitID(\"Nemean Lion\"));");
code("trModifyProtounit(\"Nemean Lion\", ENEMY_PLAYER, 24, 1);");
code("trModifyProtounit(\"Nemean Lion\", ENEMY_PLAYER, 25, 1);");
code("trModifyProtounit(\"Nemean Lion\", ENEMY_PLAYER, 26, 1);");
code("trModifyProtounit(\"Nemean Lion\", ENEMY_PLAYER, 1, -6.0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+aiPlanGetUserVariableInt(ARRAYS,bossInts,0));");
code("trUnitChangeProtoUnit(\"Tornado\");");
code("trUnitConvert(ENEMY_PLAYER);");
code("}");
code("if (xSetPointer(dEnemies, bossPointer)) {");
code("removeEnemy();");
code("}");
code("trQuestVarSet(\"bossSpell\", 32);");
code("trQuestVarSet(\"bossSpellTimeout\", trTimeMS() + 12000);");
code("trQuestVarSet(\"bossSpellNext\", trTimeMS() + 2000);");
code("xClearDatabase(dLionShockwaveTargets);");
code("for(x=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("xUnitSelectByID(dPlayerUnits, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else {");
code("xAddDatabaseBlock(dLionShockwaveTargets, true);");
code("xSetInt(dLionShockwaveTargets, xUnitName, xGetInt(dPlayerUnits, xUnitName));");
code("xSetInt(dLionShockwaveTargets, xDatabaseIndex, xGetPointer(dPlayerUnits));");
code("}");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") == 32) {");
code("if (trTimeMS() > trQuestVarGet(\"bossSpellNext\")) {");
code("trQuestVarSet(\"bossSpellNext\", trQuestVarGet(\"bossSpellNext\") + 200);");
code("bossPos = kbGetBlockPosition(\"\"+bossUnit, true);");
code("bossAngle = fModulo(6.283185, bossAngle + 2.41);");
code("dir = xsVectorSet(xsCos(bossAngle),0,xsSin(bossAngle));");
code("addGenericProj(dLionShockwaves,bossPos,dir);");
code("if (trTimeMS() > trQuestVarGet(\"bossSpellTimeout\")) {");
code("bossCooldown(7, 20);");
code("trQuestVarSet(\"bossUltimate\", 3);");
code("if (trQuestVarGet(\"noFake\") == 0) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+aiPlanGetUserVariableInt(ARRAYS,bossInts,0), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");
code("trModifyProtounit(\"Nemean Lion\", ENEMY_PLAYER, 24, -1);");
code("trModifyProtounit(\"Nemean Lion\", ENEMY_PLAYER, 25, -1);");
code("trModifyProtounit(\"Nemean Lion\", ENEMY_PLAYER, 26, -1);");
code("trModifyProtounit(\"Nemean Lion\", ENEMY_PLAYER, 1, 6.0);");
code("}");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trUnitChangeProtoUnit(\"Nemean Lion\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trSetSelectedScale(bossScale,bossScale,bossScale);");
code("activateEnemy(bossUnit, 0, 0);");
code("trSetLighting(\"default\", 1);");
code("}");
code("}");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") > 20) {");
code("trQuestVarSetFromRand(\"rand\", 1, 5, true);");
code("switch(1*trQuestVarGet(\"rand\"))");
code("{");
code("case 1:");
code("{");
code("trChatSendSpoofed(ENEMY_PLAYER, \"King of Beasts: Royal Guards!\");");
code("}");
code("case 2:");
code("{");
code("trChatSendSpoofed(ENEMY_PLAYER, \"King of Beasts: Attack!\");");
code("}");
code("}");
code("trSoundPlayFN(\"wild.wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSet(\"anglemod\", 6.283185 / (1.0 + 2*ENEMY_PLAYER));");
code("trQuestVarSet(\"heading\", fModulo(360, 57.295779 * angle - 180.0));");
code("trQuestVarSet(\"headingmod\", 360.0 / (1.0 + 2*ENEMY_PLAYER));");
code("for(x=1+2*ENEMY_PLAYER; >0) {");
code("angle = fModulo(6.283185, angle + trQuestVarGet(\"anglemod\"));");
code("trQuestVarSet(\"heading\", fModulo(360.0, trQuestVarGet(\"heading\") + trQuestVarGet(\"headingMod\")));");
code("trVectorSetFromAngle(\"dir\", angle);");
code("dir = xsVectorSet(xsSin(angle),0,xsCos(angle));");
code("pos = (dir * 24.0) + trVectorQuestVarGet(\"bossRoomCenter\");");
code("action = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"\"+ENEMY_PLAYER+\",0\",\"Sphinx\",1,");
code("xsVectorGetX(pos),0,xsVectorGetZ(pos),trQuestVarGet(\"heading\"),true);");
code("activateEnemy(action, 0, 0);");
code("}");
code("bossCooldown(7, 20);");
code("} else if (trQuestVarGet(\"bossSpell\") > 10) {");
code("if (trQuestVarGet(\"bossSpell\") == 11) {");
code("trQuestVarSet(\"bossMeteorCount\", 1 + trQuestVarGet(\"bossMeteorCount\"));");
code("trQuestVarSetFromRand(\"rand\", 1, 5, true);");
code("switch(1*trQuestVarGet(\"rand\"))");
code("{");
code("case 1:");
code("{");
code("trChatSendSpoofed(ENEMY_PLAYER, \"King of Beasts: Be crushed!\");");
code("}");
code("case 2:");
code("{");
code("trChatSendSpoofed(ENEMY_PLAYER, \"King of Beasts: Quake!\");");
code("}");
code("}");
code("trSoundPlayFN(\"earthquakeexist.wav\",\"1\",-1,\"\",\"\");");
code("trCameraShake(6.0, 0.25);");
code("trQuestVarSet(\"rainCount\", 9);");
code("trQuestVarSet(\"rainNext\", trTimeMS());");
code("trQuestVarSet(\"bossSpell\", 12);");
code("} else if (trQuestVarGet(\"bossSpell\") == 12) {");
code("if (trTimeMS() > trQuestVarGet(\"rainNext\")) {");
code("trQuestVarSetFromRand(\"modX\", -30, 30, true);");
code("trQuestVarSetFromRand(\"modZ\", -30, 30, true);");
code("if (xsPow(trQuestVarGet(\"modX\"), 2) + xsPow(trQuestVarGet(\"modZ\"), 2) < 900) {");
code("action = trGetNextUnitScenarioNameNumber();");
code("pos = trVectorQuestVarGet(\"bossRoomCenter\");");
code("trQuestVarSet(\"modX\", trQuestVarGet(\"modX\") + xsVectorGetX(pos));");
code("trQuestVarSet(\"modZ\", trQuestVarGet(\"modZ\") + xsVectorGetZ(pos));");
code("trQuestVarSetFromRand(\"heading\", 1, 360, true);");
code("trArmyDispatch(\"1,0\",\"Kronny Flying\",1,trQuestVarGet(\"modX\"),0,trQuestVarGet(\"modZ\"),trQuestVarGet(\"heading\"),true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(ENEMY_PLAYER);");
code("zSetProtoUnitStat(\"Kronny Flying\", ENEMY_PLAYER, 1, 0.01);");
code("trDamageUnitPercent(100);");
code("trSetSelectedScale(0,5.0,0);");
code("xAddDatabaseBlock(dLionMeteors, true);");
code("xSetInt(dLionMeteors, xUnitName, action);");
code("trQuestVarSet(\"rainNext\", 500 + trQuestVarGet(\"rainNext\"));");
code("trQuestVarSet(\"rainCount\", trQuestVarGet(\"rainCount\") - 1);");
code("if (trQuestVarGet(\"rainCount\") <= 0) {");
code("trQuestVarSet(\"bossSpell\", 13);");
code("}");
code("}");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") == 13) {");
code("if (xGetDatabaseCount(dLionMeteors) == 0) {");
code("bossCooldown(7, 20);");
code("}");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") > 0) {");
code("if (trQuestVarGet(\"bossSpell\") == 1) {");
code("bossAnim = true;");
code("trQuestVarSetFromRand(\"rand\", 1, 4, true);");
code("switch(1*trQuestVarGet(\"rand\"))");
code("{");
code("case 1:");
code("{");
code("trChatSendSpoofed(ENEMY_PLAYER, \"King of Beasts: Kneel!\");");
code("}");
code("case 2:");
code("{");
code("trChatSendSpoofed(ENEMY_PLAYER, \"King of Beasts: Bow before me!\");");
code("}");
code("}");

code("trMutateSelected(kbGetProtoUnitID(\"Nemean Lion\"));");
code("trUnitOverrideAnimation(39,0,false,false,-1);");
code("trUnitSetStance(\"Passive\");");
code("bossNext = trTimeMS() + 1500;");
code("trQuestVarSet(\"bossSpell\", 2);");
code("bossPos = kbGetBlockPosition(\"\"+bossUnit, true);");
code("} else if (trQuestVarGet(\"bossSpell\") == 2) {");
code("if (trTimeMS() > bossNext) {");
code("bossNext = bossNext + 1500;");
code("trQuestVarSet(\"bossSpell\", 3);");
code("dir = vector(1,0,0);");
code("for(x=24; >0) {");
code("addGenericProj(dLionShockwaves,bossPos,dir);");
code("dir = rotationMatrix(dir, 0.965926, 0.258819);");
code("}");
code("xClearDatabase(dLionShockwaveTargets);");
code("for(x=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("xUnitSelectByID(dPlayerUnits, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else {");
code("xAddDatabaseBlock(dLionShockwaveTargets, true);");
code("xSetInt(dLionShockwaveTargets, xUnitName, xGetInt(dPlayerUnits, xUnitName));");
code("xSetInt(dLionShockwaveTargets, xDatabaseIndex, xGetPointer(dPlayerUnits));");
code("}");
code("}");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") == 3) {");
code("if (trTimeMS() > bossNext) {");
code("bossAnim = false;");
code("trUnitChangeProtoUnit(\"Nemean Lion\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Nemean Lion\"));");
code("trSetSelectedScale(bossScale,bossScale,bossScale);");
code("bossCooldown(7, 20);");
code("}");
code("}");
code("} else if (xGetInt(dEnemies, xStunStatus, bossPointer) == 0) {");
code("trQuestVarSetFromRand(\"bossSpell\", 0, xsMin(3, trUnitPercentDamaged() * 0.05), true);");
code("trQuestVarSet(\"bossSpell\", trQuestVarGet(\"bossSpell\") * 10 + 1);");
code("if (trQuestVarGet(\"bossSpell\") == 11 && trQuestVarGet(\"bossMeteorCount\") == 3) {");
code("trQuestVarSet(\"bossSpell\", 1);");
code("}");
code("if (trQuestVarGet(\"bossSpell\") == 31 && trQuestVarGet(\"bossUltimate\") > 0) {");
code("trQuestVarSetFromRand(\"bossSpell\", 0, 2, true);");
code("trQuestVarSet(\"bossSpell\", 1 + 10 * trQuestVarGet(\"bossSpell\"));");
code("}");
code("}");
code("} else {");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("xsDisableSelf();");
code("trMusicStop();");
code("boss = 0;");
code("trSetLighting(\"default\", 1.0);");
code("trSoundPlayFN(\"win.wav\",\"1\",-1,\"\",\"\");");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("trDamageUnitPercent(100);");
code("}");
code("uiLookAtUnitByName(\"\"+bossUnit);");
code("xsEnableRule(\"boss_ded\");");
code("xsDisableRule(\"gameplay_always\");");
code("}");
code("}");

code("int dTreeStabs = 0;");
code("int xTreeStabDir = 0;");
code("int xTreeStabStep = 0;");
code("int xTreeStabNext = 0;");
code("int xTreeStabSFX = 0;");

code("int dBossRainingTrees = 0;");

code("int dBossHeals = 0;");

code("int dBossRoots = 0;");
code("int xBossRootEnd = 0;");
code("int xBossRootPos = 0;");
code("int xBossRootTimeout = 0;");
code("int xBossRootNext = 0;");

code("rule boss2_init");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > trQuestVarGet(\"cinTime\")) {");
code("switch(1*trQuestVarGet(\"cinStep\"))");
code("{");
code("case 0:");
code("{");
code("trOverlayText(\"The Wraithwood\", 3.0, -1, -1, -1);");
code("trQuestVarSet(\"cinTime\", trTime() + 2);");
code("vector dir = vector(15,0,0);");
code("vector pos = vector(0,0,0);");
code("for(x=7; >0) {");
code("pos = trVectorQuestVarGet(\"bossRoomCenter\") + dir;");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Imperial Examination\");");
code("dir = rotationMatrix(dir, 0.62349, 0.781831);");
code("}");
code("dBossRainingTrees = initGenericProj(\"rainingTrees\",kbGetProtoUnitID(\"Einheriar\"),18,10.0,0,0,ENEMY_PLAYER);");

code("dTreeStabs = xInitDatabase(\"treeStabs\");");
code("xInitAddInt(dTreeStabs, \"name\");");
code("xTreeStabDir = xInitAddVector(dTreeStabs, \"dir\");");
code("xTreeStabStep = xInitAddInt(dTreeStabs, \"step\");");
code("xTreeStabNext = xInitAddInt(dTreeStabs, \"next\");");
code("xTreeStabSFX = xInitAddInt(dTreeStabs, \"sfx\");");

code("dBossHeals = initGenericProj(\"bossHeals\", kbGetProtoUnitID(\"Curse SFX\"),2,1.5,4.5,0.0,0,true);");

code("dBossRoots = xInitDatabase(\"bossRoots\");");
code("xInitAddInt(dBossRoots, \"name\");");
code("xBossRootEnd = xInitAddInt(dBossRoots, \"end\");");
code("xBossRootTimeout = xInitAddInt(dBossRoots, \"timeout\");");
code("xBossRootNext = xInitAddInt(dBossRoots, \"next\");");
code("xBossRootPos = xInitAddVector(dBossRoots, \"pos\");");
code("}");
code("case 1:");
code("{");
code("trLetterBox(false);");
code("trUIFadeToColor(0,0,0,1000,0,false);");
code("xsDisableSelf();");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trUnitConvert(ENEMY_PLAYER);");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Tamarisk Tree\"));");
code("trSetSelectedScale(bossScale, bossScale, bossScale);");
code("xSetPointer(dEnemies, bossPointer);");
code("xFreeDatabaseBlock(dEnemies);");
code("trQuestVarSet(\"bossHealth\", 100);");
code("trCounterAddTime(\"bosshealth\",-1,-9999,\"<color={Playercolor(2)}>Wraithwood: 100</color>\", -1);");

code("trModifyProtounit(\"Shade XP\", ENEMY_PLAYER, 0, 6391);");
code("trModifyProtounit(\"Shade XP\", ENEMY_PLAYER, 27, 656);");
code("trModifyProtounit(\"Shade XP\", ENEMY_PLAYER, 28, 566);");
code("trModifyProtounit(\"Shade XP\", ENEMY_PLAYER, 29, 656);");

code("xsEnableRule(\"boss2_battle\");");
code("trQuestVarSet(\"bossSpell\", 41);");
code("trQuestVarSet(\"bossGem\", SOULSTONE);");
code("trQuestVarSetFromRand(\"bossGemCount\", 2, 3, true);");
code("xsEnableRule(\"boss_music\");");
code("trMessageSetText(\"Defeat the spawned enemies to damage the Wraithwood!\", -1);");
code("trStringQuestVarSet(\"advice\",");
code("\"The Wraithwood only summons new enemies once the old ones are gone. Make sure to kill the spawns!\");");
code("}");
code("}");
code("trQuestVarSet(\"cinStep\", 1 + trQuestVarGet(\"cinStep\"));");
code("}");
code("}");

code("void treeStab(vector pos = vector(0,0,0)) {");
code("vector dir = getUnitVector(trVectorQuestVarGet(\"bossRoomCenter\"), pos);");
code("vector start = pos - (dir * 4.0);");
code("trUnitSelectClear();");
code("int next = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"1,0\",\"Dwarf\",2,xsVectorGetX(start),0,xsVectorGetZ(start),0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+(1+next), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Tartarian Gate Flame\"));");
code("trUnitSetAnimationPath(\"0,1,1,0,0,0,0\");");
code("trSetUnitOrientation(dir,vector(0,1,0),true);");
code("trSetSelectedScale(0.8,1.0,0.5);");
code("trQuestVarSet(\"treeStabSound\",1);");
code("xAddDatabaseBlock(dTreeStabs, true);");
code("xSetInt(dTreeStabs, xUnitName, next);");
code("xSetVector(dTreeStabs, xTreeStabDir, dir);");
code("xSetInt(dTreeStabs, xTreeStabNext, trTimeMS() + 2000);");
code("xSetInt(dTreeStabs, xTreeStabSFX, next + 1);");
code("}");


code("rule boss2_battle");
code("inactive");
code("highFrequency");
code("{");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("int p = 0;");
code("int x = 0;");
code("int action = 0;");
code("int id = 0;");
code("float angle = 0;");
code("float dist = 0;");
code("bool hit = false;");
code("vector pos = vector(0,0,0);");
code("vector dir = vector(0,0,0);");
code("if (trQuestVarGet(\"bossHealth\") > 0) {");
code("if (xGetDatabaseCount(dBossRainingTrees) > 0) {");
code("action = processGenericProj(dBossRainingTrees);");
code("if (action == PROJ_GROUND) {");
code("xUnitSelectByID(dBossRainingTrees, xUnitID);");
code("trUnitChangeProtoUnit(\"Walking Woods Marsh\");");
code("xUnitSelectByID(dBossRainingTrees, xUnitID);");
code("trDamageUnitPercent(-100);");
code("activateEnemy(xGetInt(dBossRainingTrees, xUnitName),-1,0);");
code("xFreeDatabaseBlock(dBossRainingTrees);");
code("}");
code("}");

code("if (xGetDatabaseCount(dBossHeals) > 0) {");
code("processGenericProj(dBossHeals);");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dBossHeals, xUnitName), true);");
code("if (distanceBetweenVectors(pos, trVectorQuestVarGet(\"bossRoomCenter\")) < 12) {");
code("xUnitSelectByID(dBossHeals, xUnitID);");
code("trUnitChangeProtoUnit(\"Regeneration SFX\");");
code("xFreeDatabaseBlock(dBossHeals);");
code("trSoundPlayFN(\"recreation.wav\",\"1\",-1,\"\",\"\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trQuestVarSet(\"bossHealth\", xsMin(100, trQuestVarGet(\"bossHealth\") + 5));");
code("trCounterAbort(\"bosshealth\");");
code("trCounterAddTime(\"bosshealth\",-1,-9999,");
code("\"<color={Playercolor(2)}>Wraithwood: \"+1*trQuestVarGet(\"bossHealth\")+\"</color>\", -1);");
code("trUnitHighlight(0.2,false);");
code("} else {");
code("for(x=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("xUnitSelectByID(dPlayerUnits, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (unitDistanceToVector(xGetInt(dPlayerUnits, xUnitName), pos) < 4) {");
code("healUnit(xGetInt(dPlayerUnits, xPlayerOwner), 100);");
code("xUnitSelectByID(dBossHeals, xUnitID);");
code("trUnitChangeProtoUnit(\"Hero Death\");");
code("trSoundPlayFN(\"heal.wav\",\"1\",-1,\"\",\"\");");
code("xFreeDatabaseBlock(dBossHeals);");
code("break;");
code("}");
code("}");
code("}");
code("}");

code("if (xGetDatabaseCount(dBossRoots) > 0) {");
code("xDatabaseNext(dBossRoots);");
code("if (trTimeMS() > xGetInt(dBossRoots, xBossRootTimeout)) {");
code("for(x=xGetInt(dBossRoots, xUnitName); < xGetInt(dBossRoots, xBossRootEnd)) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+x);");
code("trDamageUnitPercent(100);");
code("}");
code("xFreeDatabaseBlock(dBossRoots);");
code("} else if (trTimeMS() > xGetInt(dBossRoots, xBossRootNext)) {");
code("pos = xGetVector(dBossRoots, xBossRootPos);");
code("action = 0;");
code("for(x=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("xUnitSelectByID(dPlayerUnits, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else {");
code("dist = unitDistanceToVector(xGetInt(dPlayerUnits, xUnitName), pos);");
code("if (dist > 16 && dist < 36) {");
code("hit = (trQuestVarGet(\"stunSound\") == 1 || xGetInt(dPlayerUnits, xStunStatus) == 0);");
code("stunUnit(dPlayerUnits, 1.5);");
code("if (hit == false) {");
code("trQuestVarSet(\"stunSound\", 0);");
code("}");
code("if (trTimeMS() > xGetInt(dBossRoots, xBossRootNext)) {");
code("damagePlayerUnit(10);");
code("action = 1;");
code("}");
code("}");
code("}");
code("}");
code("if (action == 1) {");
code("xSetInt(dBossRoots, xBossRootNext, trTimeMS() + 500);");
code("trQuestVarSetFromRand(\"sound\", 1, 4, true);");
code("trSoundPlayFN(\"arrowonflesh\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("}");

code("for(y=xsMin(9, xGetDatabaseCount(dTreeStabs)); >0) {");
code("xDatabaseNext(dTreeStabs);");
code("dist = trTimeMS() - xGetInt(dTreeStabs, xTreeStabNext);");
code("if (dist > 0) {");
code("switch(xGetInt(dTreeStabs,xTreeStabStep))");
code("{");
code("case 0:");
code("{");
code("dir = xGetVector(dTreeStabs, xTreeStabDir);");
code("xUnitSelect(dTreeStabs, xUnitName);");
code("trMutateSelected(kbGetProtoUnitID(\"Pine Dead\"));");
code("trSetSelectedScale(0.9,dist/750,0.9);");
code("trSetSelectedUpVector(2.5*xsVectorGetX(dir),0,2.5*xsVectorGetZ(dir));");

code("xUnitSelect(dTreeStabs, xTreeStabSFX);");
code("trUnitChangeProtoUnit(\"Tartarian Gate flame\");");
code("xUnitSelect(dTreeStabs, xTreeStabSFX);");
code("trSetSelectedScale(0.8,1.0,0.5);");
code("trSetUnitOrientation(dir,vector(0,1,0),true);");
code("trUnitSetAnimationPath(\"0,1,1,0,0,0,0\");");
code("xSetInt(dTreeStabs, xTreeStabStep, 1);");
code("}");
code("case 1:");
code("{");
code("xUnitSelect(dTreeStabs, xUnitName);");
code("if (dist > 300) {");
code("trSetSelectedScale(1,0.4,1);");
code("xSetInt(dTreeStabs, xTreeStabStep, 2);");
code("xSetInt(dTreeStabs, xTreeStabNext, trTimeMS() + 2000);");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dTreeStabs, xUnitName), true);");
code("dir = xGetVector(dTreeStabs, xTreeStabDir);");
code("for(x=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("xUnitSelectByID(dPlayerUnits, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (rayCollision(dPlayerUnits,pos,dir,6,3)) {");
code("if (xGetInt(dPlayerUnits, xUnitName) == xGetInt(dPlayerData, xPlayerUnit, trCurrentPlayer())) {");
code("trCameraShake(0.3, 0.8);");
code("}");
code("damagePlayerUnit(300);");
code("trQuestVarSet(\"treeHitSound\", 1);");
code("}");
code("}");
code("} else {");
code("trSetSelectedScale(1,dist/750,1);");
code("}");
code("}");
code("case 2:");
code("{");
code("xUnitSelect(dTreeStabs, xUnitName);");
code("trSetSelectedScale(1, (1000.0 - dist) / 2500, 1);");
code("if (dist > 1000) {");
code("xUnitSelect(dTreeStabs, xUnitName);");
code("trUnitDestroy();");
code("xFreeDatabaseBlock(dTreeStabs);");
code("}");
code("}");
code("}");
code("}");
code("}");

code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("if (trQuestVarGet(\"bossSpell\") == BOSS_SPELL_COOLDOWN) {");
code("if (trTimeMS() > trQuestVarGet(\"bossCooldownTime\")) {");
code("trQuestVarSet(\"bossSpell\", 0);");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") > 40) {");
code("if (trQuestVarGet(\"bossSpell\") == 41) {");
code("trQuestVarSet(\"bossHealth\", trQuestVarGet(\"bossHealth\") - 10);");
code("if (trQuestVarGet(\"bossHealth\") > 0) {");
code("trSoundPlayFN(\"walkingwoodsbirth.wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSet(\"bossSpell\", 42);");
code("bossNext = trTimeMS();");
code("trQuestVarSetFromRand(\"bossCount\", ENEMY_PLAYER, 12, true);");
code("trQuestVarSetFromRand(\"bossCount\", ENEMY_PLAYER, bossCount, true);");
code("}");
code("trCounterAbort(\"bosshealth\");");
code("trCounterAddTime(\"bosshealth\",-1,-9999,");
code("\"<color={Playercolor(2)}>Wraithwood: \"+1*trQuestVarGet(\"bossHealth\")+\"</color>\", -1);");
code("} else if (trQuestVarGet(\"bossSpell\") == 42) {");
code("if (trTimeMS() > bossNext) {");
code("bossNext = trTimeMS() + 500;");
code("bossCount = bossCount - 1;");
code("trQuestVarSetFromRand(\"speed\", 5, 15, false);");
code("bossAngle = fModulo(6.283185, bossAngle + 2.43);");
code("dir = xsVectorSet(xsCos(bossAngle),0,xsSin(bossAngle));");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");
code("addGenericProj(dBossRainingTrees, trVectorQuestVarGet(\"bossRoomCenter\"), dir, ENEMY_PLAYER, trQuestVarGet(\"speed\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Tamarisk Tree\"));");
code("if (bossCount == 0) {");
code("bossCooldown(7, 12);");
code("}");
code("}");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") > 30) {");
code("if (trQuestVarGet(\"bossSpell\") == 31) {");
code("trSoundPlayFN(\"cinematics\15_in\gong.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"godpower.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"underworldpassage.wav\",\"1\",-1,\"\",\"\");");
code("trSetLighting(\"night\", 1.0);");
code("trOverlayText(\"Wraith Unleashed\", 3.0, -1, -1, -1);");
code("trQuestVarSet(\"bossSpell\", 32);");
code("bossNext = trTimeMS() + 1500;");
code("} else if (trQuestVarGet(\"bossSpell\") == 32) {");
code("if (trTimeMS() > trQuestVarGet(\"bossSpell\")) {");
code("trQuestVarSet(\"bossWraith\", trGetNextUnitScenarioNameNumber());");
code("pos = trVectorQuestVarGet(\"bossRoomCenter\");");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos)-5,0,xsVectorGetZ(pos)-5,225,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossWraith\", true);");
code("trUnitConvert(ENEMY_PLAYER);");
code("trUnitChangeProtoUnit(\"Shade XP\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossWraith\", true);");
code("trSetSelectedScale(2,2,2);");
code("activateEnemy(1*trQuestVarGet(\"bossWraith\"),0,0);");
code("trSetLighting(\"Fimbulwinter\", 3.0);");
code("trQuestVarSet(\"bossUltimate\", 1);");
code("bossCooldown(6, 15);");
code("}");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") > 20) {");
code("if (trQuestVarGet(\"bossSpell\") == 21) {");
code("trCameraShake(0.5,0.25);");
code("trSoundPlayFN(\"xpack\xcinematics\7_in\bigoltitan.wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSet(\"bossSpell\", 22);");
code("bossNext = trTimeMS();");
code("bossCount = ENEMY_PLAYER - 1;");
code("} else if (trQuestVarGet(\"bossSpell\") == 22) {");
code("if (trTimeMS() > bossNext) {");
code("bossNext = trTimeMS() + 1000;");
code("if (xGetInt(dPlayerData, xPlayerDead, 1*bossCount) == 0) {");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dPlayerData, xPlayerUnit, 1*bossCount));");
code("treeStab(pos);");
code("}");
code("bossCount = bossCount - 1;");
code("if (bossCount == 0) {");
code("trQuestVarSet(\"bossSpell\", 23);");
code("bossCount = 32;");
code("trQuestVarSet(\"bossRadius\", 6);");
code("trQuestVarSetFromRand(\"bossAngle\", 0, 3.14, false);");
code("bossNext = trTimeMS() + 2000;");
code("}");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") == 23) {");
code("if (trTimeMS() > bossNext) {");
code("bossNext = bossNext + 200;");
code("bossAngle = fModulo(6.283185, bossAngle + 2.45);");
code("trQuestVarSet(\"bossRadius\", trQuestVarGet(\"bossRadius\") + 0.5);");
code("trVectorSetFromAngle(\"dir\", bossAngle);");
code("dir = xsVectorSet(xsCos(bossAngle),0,xsSin(bossAngle));");
code("treeStab(trVectorQuestVarGet(\"bossRoomCenter\") + (dir * trQuestVarGet(\"bossRadius\")));");
code("bossCount = bossCount - 1;");
code("if (bossCount == 0) {");
code("bossCooldown(10, 15);");
code("}");
code("}");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") > 10) {");
code("if (trQuestVarGet(\"bossSpell\") == 11) {");
code("if (trQuestVarGet(\"bossExplain\") == 0) {");
code("trQuestVarSet(\"bossExplain\", 1);");
code("trMessageSetText(\"If the white lights reach the Wraithwood, it will heal! Touch them to destroy them!\",-1);");
code("}");
code("trSoundPlayFN(\"lapadesconvert.wav\",\"1\",-1,\"\",\"\");");
code("bossCount = 3 + ENEMY_PLAYER / 2;");
code("trQuestVarSet(\"bossSpell\", 12);");
code("bossNext = trTimeMS();");
code("trQuestVarSetFromRand(\"bossAngle\", 0, 3.141592, false);");
code("} else if (trQuestVarGet(\"bossSpell\") == 12) {");
code("if (trTimeMS() > bossNext) {");
code("trQuestVarSetFromRand(\"sound\",1,3, true);");
code("trSoundPlayFN(\"gaiasparkle\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("bossNext = bossNext + 1500;");
code("bossAngle = bossAngle + 2.4;");
code("pos = xsVectorSet(xsCos(bossAngle),0,xsSin(bossAngle));");
code("dir = vector(0,0,0) - pos;");
code("pos = vectorSnapToGrid((pos * 25.0) + trVectorQuestVarGet(\"bossRoomCenter\"));");
code("addGenericProj(dBossHeals,pos,dir);");

code("bossCount = bossCount - 1;");
code("if (bossCount == 0) {");
code("bossCooldown(10, 15);");
code("}");
code("}");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") > 0) {");
code("if (trQuestVarGet(\"bossSpell\") == 1) {");
code("if (xGetDatabaseCount(dBossRoots) < xGetDatabaseCount(dPlayerCharacters)) {");
code("xDatabaseNext(dPlayerCharacters);");
code("pos = vectorSnapToGrid(kbGetBlockPosition(\"\"+xGetInt(dPlayerCharacters, xUnitName), true));");
code("action = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"1,0\",\"Dwarf\",4,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("dir = vector(1,0,0);");
code("for(x=action; < trGetNextUnitScenarioNameNumber()) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+x, true);");
code("trSetUnitOrientation(dir,vector(0,1,0),true);");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Uproot 4x4\");");
code("dir = rotationMatrix(dir, 0.923879, 0.382683);");
code("}");
code("xAddDatabaseBlock(dBossRoots, true);");
code("xSetInt(dBossRoots, xUnitName, action);");
code("xSetInt(dBossRoots, xBossRootEnd, trGetNextUnitScenarioNameNumber());");
code("xSetInt(dBossRoots, xBossRootTimeout, trTimeMS() + 9000);");
code("xSetVector(dBossRoots, xBossRootPos, pos);");
code("trSoundPlayFN(\"hesperidesselect.wav\",\"1\",-1,\"\",\"\");");
code("bossCooldown(3, 12);");
code("} else {");
code("trQuestVarSetFromRand(\"bossSpell\", 1, 2, true);");
code("trQuestVarSet(\"bossSpell\", 10 * trQuestVarGet(\"bossSpell\") + 1);");
code("}");
code("}");
code("} else {");
code("if (trCountUnitsInArea(\"\"+bossUnit,ENEMY_PLAYER,\"Walking Woods Marsh\", 40) == 0) {");
code("trQuestVarSet(\"bossSpell\", 41);");
code("} else {");
code("action = 100.0 - trQuestVarGet(\"bossHealth\");");
code("trQuestVarSetFromRand(\"bossSpell\", 0, xsMin(3, action / 20), true);");
code("trQuestVarSet(\"bossSpell\", trQuestVarGet(\"bossSpell\") * 10 + 1);");
code("if (trQuestVarGet(\"bossSpell\") == 31 && trQuestVarGet(\"bossUltimate\") > 0) {");
code("trQuestVarSetFromRand(\"bossSpell\", 0, 2, true);");
code("trQuestVarSet(\"bossSpell\", 1 + 10 * trQuestVarGet(\"bossSpell\"));");
code("}");
code("}");
code("}");

code("if (trQuestVarGet(\"treeStabSound\") == 1) {");
code("trQuestVarSet(\"treeStabSound\", 0);");
code("trQuestVarSetFromRand(\"sound\", 2, 4, true);");
code("trSoundPlayFN(\"minionbirth\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("}");

code("if (trQuestVarGet(\"treeHitSound\") == 1) {");
code("trQuestVarSet(\"treeHitSound\", 0);");
code("trQuestVarSetFromRand(\"sound\", 1, 2, true);");
code("trSoundPlayFN(\"titanpunch\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("}");
code("} else {");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("xsDisableSelf();");
code("trMusicStop();");
code("boss = 0;");
code("trSetLighting(\"default\", 1.0);");
code("trSoundPlayFN(\"win.wav\",\"1\",-1,\"\",\"\");");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies, true);");
code("trDamageUnitPercent(100);");
code("}");
code("uiLookAtUnitByName(\"\"+bossUnit);");
code("xsEnableRule(\"boss_ded\");");
code("xsDisableRule(\"gameplay_always\");");
code("}");
code("}");

code("int dBossBreath = 0;");

code("rule boss3_init");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > trQuestVarGet(\"cinTime\")) {");
code("switch(1*trQuestVarGet(\"cinStep\"))");
code("{");
code("case 0:");
code("{");
code("trOverlayText(\"King of Ice\", 3.0, -1, -1, -1);");
code("trQuestVarSet(\"cinTime\", trTime() + 2);");
code("");

code("dFrostGiantsIncoming = xInitDatabase(\"frostGiantsIncoming\");");
code("xInitAddInt(dFrostGiantsIncoming, \"name\");");
code("xFrostTargetSize = xInitAddFloat(dFrostGiantsIncoming, \"targetSize\");");
code("xFrostCurrentSize = xInitAddFloat(dFrostGiantsIncoming, \"currentSize\");");
code("xFrostTargetTime = xInitAddInt(dFrostGiantsIncoming, \"targetTime\");");

code("dBossBreath = initGenericProj(\"bossBreath\",kbGetProtoUnitID(\"Curse SFX\"),2,10.0,4.5,ENEMY_PLAYER);");
code("}");
code("case 1:");
code("{");
code("trLetterBox(false);");
code("trUIFadeToColor(0,0,0,1000,0,false);");
code("xsDisableSelf();");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trUnitConvert(ENEMY_PLAYER);");
code("trSetSelectedScale(bossScale, bossScale, bossScale);");
code("spyEffect(bossUnit, kbGetProtoUnitID(\"Cinematic Block\"),xsVectorSet(ARRAYS,bossInts,0));");
code("spyEffect(bossUnit, kbGetProtoUnitID(\"Cinematic Block\"),xsVectorSet(ARRAYS,bossInts,1));");
code("spyEffect(bossUnit, kbGetProtoUnitID(\"Cinematic Block\"),xsVectorSet(ARRAYS,bossInts,2));");
code("xsEnableRule(\"boss3_battle\");");
code("trQuestVarSet(\"bossGem\", MANASTONE);");
code("trQuestVarSetFromRand(\"bossGemCount\", 2, 3, true);");
code("xsEnableRule(\"boss_music\");");

code("bossCooldown(10, 15);");

code("trModifyProtounit(\"King Folstag\", ENEMY_PLAYER, 27, 20);");

code("trStringQuestVarSet(\"advice\",");
code("\"If anything is stunned near an icicle, it will grow. Big icicles will turn into Frost Giants!\");");
code("}");
code("}");
code("trQuestVarSet(\"cinStep\", 1 + trQuestVarGet(\"cinStep\"));");
code("}");
code("}");


code("rule boss3_battle");
code("inactive");
code("highFrequency");
code("{");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("int p = 0;");
code("int x = 0;");
code("int action = 0;");
code("int target = 0;");
code("int id = 0;");
code("float amt = 0;");
code("float angle = 0;");
code("float current = 0;");
code("bool hit = false;");
code("vector pos = vector(0,0,0);");
code("vector dir = vector(0,0,0);");
code("if (trUnitAlive() == true) {");
code("for(x=xsMin(5, xGetDatabaseCount(dBossBreath)); >0) {");
code("processGenericProj(dBossBreath);");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dBossBreath, xUnitName), true);");
code("if (terrainIsType(vectorToGrid(pos), TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("trUnitChangeProtoUnit(\"Curse SFX\");");
code("xFreeDatabaseBlock(dBossBreath);");
code("} else {");
code("action = 0;");
code("for(y=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("xUnitSelectByID(dPlayerUnits, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (unitDistanceToVector(xGetInt(dPlayerUnits, xUnitName), pos) < 3) {");
code("stunUnit(dPlayerUnits, 3.0);");
code("damagePlayerUnit(75);");
code("action = 1;");
code("}");
code("}");
code("if (action == 1) {");
code("xUnitSelectByID(dBossBreath, xUnitID);");
code("trUnitChangeProtoUnit(\"Lightning Sparks ground\");");
code("xFreeDatabaseBlock(dBossBreath);");
code("}");
code("}");
code("}");

code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("if (trUnitPercentDamaged() > xGetDatabaseCount(dFrostGiantsIncoming)) {");
code("if (trTimeMS() > trQuestVarGet(\"bossSummonTime\")) {");
code("trQuestVarSet(\"bossSummonTime\", trTimeMS() + 1000 * xGetDatabaseCount(dFrostGiantsIncoming));");
code("trQuestVarSetFromRand(\"xMod\", 0 - 2*trQuestVarGet(\"bossRoomSize\"), 2*trQuestVarGet(\"bossRoomSize\"), true);");
code("trQuestVarSet(\"leftover\", xsSqrt(xsPow(2*trQuestVarGet(\"bossRoomSize\"),2) - xsPow(trQuestVarGet(\"xMod\"), 2)));");
code("trQuestVarSetFromRand(\"zMod\", 0 - trQuestVarGet(\"leftover\"), trQuestVarGet(\"leftover\"), true);");
code("pos = trVectorQuestVarGet(\"bossRoomCenter\") + xsVectorSet(trQuestVarGet(\"xMod\"),0,trQuestVarGet(\"zMod\"));");
code("action = trGetNextUnitScenarioNameNumber();");
code("trQuestVarSetFromRand(\"heading\", 1, 360, true);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),trQuestVarGet(\"heading\"),true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+action,true);");
code("trUnitConvert(0);");
code("trMutateSelected(kbGetProtoUnitID(\"Ice Block\"));");
code("xAddDatabaseBlock(dFrostGiantsIncoming, true);");
code("xSetInt(dFrostGiantsIncoming, xUnitName, action);");
code("xSetFloat(dFrostGiantsIncoming, xFrostTargetSize, 2);");
code("xSetInt(dFrostGiantsIncoming, xFrostTargetTime, trTimeMS() + 1000);");
code("}");
code("}");
code("for (x = xsMin(5,xGetDatabaseCount(dFrostGiantsIncoming)); > 0) {");
code("xDatabaseNext(dFrostGiantsIncoming);");
code("xUnitSelect(dFrostGiantsIncoming, xUnitName);");
code("amt = xGetInt(dFrostGiantsIncoming, xFrostTargetTime) - trTimeMS();");
code("if (amt > 0) {");
code("amt = xGetFloat(dFrostGiantsIncoming, xFrostTargetSize) - amt * 0.001;");
code("trSetSelectedScale(amt * 0.5, amt, amt * 0.5);");
code("} else if (xGetFloat(dFrostGiantsIncoming, xFrostTargetSize) >= 5) {");
code("trUnitChangeProtoUnit(\"Frost Giant\");");
code("xUnitSelect(dFrostGiantsIncoming, xUnitName);");
code("trUnitConvert(ENEMY_PLAYER);");
code("activateEnemy(xGetInt(dFrostGiantsIncoming, xUnitName),0,0);");
code("trSoundPlayFN(\"mythcreate.wav\",\"1\",-1,\"\",\"\");");
code("xFreeDatabaseBlock(dFrostGiantsIncoming);");
code("} else {");
code("amt = xGetFloat(dFrostGiantsIncoming, xFrostTargetSize);");
code("trSetSelectedScale(amt * 0.5, amt, amt * 0.5);");
code("}");
code("}");

code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");

code("if (trQuestVarGet(\"bossSpell\") == BOSS_SPELL_COOLDOWN) {");
code("processBossCooldown();");
code("} else if (trQuestVarGet(\"bossSpell\") > 30) {");
code("if (trQuestVarGet(\"bossSpell\") == 31) {");
code("trSoundPlayFN(\"cinematics\15_in\gong.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"godpower.wav\",\"1\",-1,\"\",\"\");");
code("trOverlayText(\"Ice Age\",3.0,-1,-1,-1);");
code("trSetLighting(\"night\", 1.0);");
code("trQuestVarSet(\"bossSpell\", 32);");
code("bossNext = trTimeMS() + 1500;");
code("bossTimeout = trTimeMS() + 15000;");
code("if (kbGetBlockID(\"\"+aiPlanGetUserVariableInt(ARRAYS,bossInts,2)) >= 0) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+aiPlanGetUserVariableInt(ARRAYS,bossInts,2), true);");
code("trUnitChangeProtoUnit(\"Ice Sheet\");");
code("} else {");
code("spyEffect(bossUnit,kbGetProtoUnitID(\"Ice Sheet\"),xsVectorSet(ARRAYS,bossInts,2));");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") == 32) {");
code("if (trTimeMS() > bossNext) {");
code("trSoundPlayFN(\"pegasusflap.wav\",\"1\",-1,\"\",\"\");");
code("bossNext = bossNext + 1500;");
code("pos = kbGetBlockPosition(\"\"+bossUnit, true);");
code("for(x=xGetDatabaseCount(dPlayerCharacters); >0) {");
code("xDatabaseNext(dPlayerCharacters);");
code("xUnitSelectByID(dPlayerCharacters, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerCharacter();");
code("} else {");
code("addGenericProj(dMedusaBalls,pos,");
code("getUnitVector(pos, kbGetBlockPosition(\"\"+xGetInt(dPlayerCharacters, xUnitName))),ENEMY_PLAYER);");
code("xSetInt(dMedusaBalls, xMedusaBallTarget, xGetInt(dPlayerCharacters, xUnitName));");
code("xSetInt(dMedusaBalls, xMedusaBallBounces, 10);");
code("}");
code("}");
code("if (trTimeMS() > bossTimeout) {");
code("bossCooldown(12, 18);");
code("trQuestVarSet(\"bossUltimate\", 3);");
code("trSetLighting(\"default\",1.0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+aiPlanGetUserVariableInt(ARRAYS,bossInts,2), true);");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("}");
code("}");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") > 20) {");
code("if (trQuestVarGet(\"bossSpell\") == 21) {");
code("trQuestVarSetFromRand(\"rand\", 1, 3, true);");
code("if (trQuestVarGet(\"rand\") == 1) {");
code("trChatSendSpoofed(ENEMY_PLAYER, \"King of Ice: Now I'm angry!\");");
code("} else if (trQuestVarGet(\"rand\") == 2) {");
code("trChatSendSpoofed(ENEMY_PLAYER, \"King of Ice: Meet my fist!\");");
code("}");
code("trSoundPlayFN(\"titangrunt2.wav\",\"1\",-1,\"\",\"\");");
code("bossScale = 2;");
code("trSetSelectedScale(2, 2, 2);");
code("trQuestVarSet(\"bossSpell\", 22);");
code("bossTimeout = trTimeMS() + 12000;");
code("trModifyProtounit(\"King Folstag\", ENEMY_PLAYER, 27, 100);");
code("} else if (trQuestVarGet(\"bossSpell\") == 22) {");
code("id = kbGetBlockID(\"\"+bossUnit);");
code("if (trQuestVarGet(\"bossAttacking\") == 0) {");
code("if (kbUnitGetAnimationActionType(id) == 6) {");
code("trQuestVarSet(\"bossAttacking\", 1);");
code("bossNext = trTimeMS() + 1000;");
code("}");
code("} else if (kbUnitGetAnimationActionType(id) == 6) {");
code("if (trTimeMS() > bossNext) {");
code("xsSetContextPlayer(ENEMY_PLAYER);");
code("target = kbUnitGetTargetUnitID(id);");
code("xsSetContextPlayer(0);");
code("bossPos = kbGetBlockPosition(\"\"+bossUnit, true);");
code("bossNext = bossNext + 2000;");
code("for(x=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("if (target == xGetInt(dPlayerUnits, xUnitID)) {");
code("if (trUnitAlive()) {");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dPlayerUnits, xUnitName),true);");
code("growFrostGiantsIncoming(pos);");
code("pos = vectorSetAsTargetVector(bossPos, pos,100.0);");
code("launchUnit(dPlayerUnits,pos);");
code("}");
code("break;");
code("}");
code("}");
code("}");
code("} else {");
code("trQuestVarSet(\"bossAttacking\", 0);");
code("}");
code("if (trTimeMS() > bossTimeout) {");
code("trModifyProtounit(\"King Folstag\", ENEMY_PLAYER, 27, -100);");
code("trSoundPlayFN(\"godpowerfailed.wav\",\"1\",-1,\"\",\"\");");
code("bossScale = 1.25;");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trSetSelectedScale(1.25,1.25,1.25);");
code("bossCooldown(6, 12);");
code("}");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") > 10) {");
code("if (trQuestVarGet(\"bossSpell\") == 11) {");
code("trQuestVarSetFromRand(\"rand\", 1, 3, true);");
code("if (trQuestVarGet(\"rand\") == 1) {");
code("trChatSendSpoofed(ENEMY_PLAYER, \"King of Ice: Feel the cold!\");");
code("} else if (trQuestVarGet(\"rand\") == 2) {");
code("trChatSendSpoofed(ENEMY_PLAYER, \"King of Ice: Chill!\");");
code("}");
code("trModifyProtounit(\"King Folstag\", ENEMY_PLAYER, 55, 2);");
code("trSoundPlayFN(\"attackwarning.wav\",\"1\",-1,\"\",\"\");");
code("for(x=xGetDatabaseCount(dPlayerCharacters); >0) {");
code("xDatabaseNext(dPlayerCharacters);");
code("xUnitSelectByID(dPlayerCharacters, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerCharacter();");
code("} else {");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dPlayerCharacters, xUnitName), true);");
code("break;");
code("}");
code("}");
code("bossPos = vectorSnapToGrid(kbGetBlockPosition(\"\"+bossUnit, true));");

code("bossAngle = angleBetweenVectors(bossPos, pos);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trMutateSelected(kbGetProtoUnitID(\"King Folstag\"));");
code("bossDir = getUnitVector(bossPos, pos);");
code("trSetUnitOrientation(bossDir, vector(0,1,0), true);");
code("trUnitOverrideAnimation(3,1,false,false,-1);");
code("trQuestVarSet(\"bossSpell\", 12);");
code("bossNext = trTimeMS() + 2000;");
code("trQuestVarSet(\"arm1\", trGetNextUnitScenarioNameNumber());");
code("trQuestVarSet(\"arm2\", trGetNextUnitScenarioNameNumber()+1);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",2,xsVectorGetX(bossPos),0,xsVectorGetZ(bossPos),0,true);");
code("trArmySelect(\"1,0\");");
code("trMutateSelected(kbGetProtoUnitID(\"Petosuchus Projectile\"));");
code("trSetUnitOrientation(vector(0,0,0) - bossDir,vector(0,1,0),true);");
code("trSetSelectedScale(2,0,30);");
code("trUnitHighlight(2.0, false);");
code("bossAnim = true;");
code("} else if (trQuestVarGet(\"bossSpell\") == 12) {");
code("amt = bossNext - trTimeMS();");
code("if (amt < 0) {");
code("trQuestVarSet(\"bossSpell\", 13);");
code("bossNext = trTimeMS()+1;");
code("trUnitOverrideAnimation(-1,1,false,true,-1);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"arm1\");");
code("trUnitSelectByQV(\"arm2\");");
code("trUnitDestroy();");
code("} else {");
code("angle = 0.00015 * (2000 - amt);");
code("amt = amt * 0.001;");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"arm1\", true);");
code("trSetSelectedScale(amt, 0, 30);");
code("current = fModulo(6.283185, bossAngle - angle - 3.141592);");
code("dir = xsVectorSet(xsSin(current),0,xsCos(current));");
code("trSetUnitOrientation(dir,vector(0,1,0),true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"arm2\", true);");
code("trSetSelectedScale(amt, 0, 30);");
code("current = fModulo(6.283185, bossAngle + angle - 3.141592);");
code("dir = xsVectorSet(xsSin(current),0,xsCos(current));");
code("trSetUnitOrientation(dir,vector(0,1,0),true);");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") == 13) {");
code("if (trTimeMS() > bossNext) {");
code("trUnitOverrideAnimation(40,0,false,false,-1);");
code("bossPos = kbGetBlockPosition(\"\"+bossUnit, true);");
code("trQuestVarSet(\"bossSpell\", 14);");
code("bossTimeout = trTimeMS() + 2100;");
code("bossNext = trTimeMS() + 500;");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") == 14) {");
code("if (trTimeMS() > bossNext) {");
code("bossNext = bossNext + 100;");
code("trQuestVarSetFromRand(\"rand\", -0.3, 0.3, false);");
code("current = fModulo(6.283185, bossAngle + trQuestVarGet(\"rand\"));");
code("dir = xsVectorSet(xsSin(current),0,xsCos(current));");
code("addGenericProj(dBossBreath,bossPos,dir);");
code("if (trTimeMS() > bossTimeout) {");
code("trModifyProtounit(\"King Folstag\", ENEMY_PLAYER, 55, 1);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trUnitOverrideAnimation(-1,1,false,true,-1);");
code("bossAnim = false;");
code("bossCooldown(10, 14);");
code("}");
code("}");
code("}");
code("if (trQuestVarGet(\"bossSpell\") > 11) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trSetUnitOrientation(bossDir, vector(0,1,0), true);");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") > 0) {");
code("trQuestVarSet(\"iceKingChange\", trQuestVarGet(\"iceKingChange\") - 1);");
code("if (trQuestVarGet(\"iceKingChange\") <= 0) {");
code("trQuestVarSet(\"iceKingChange\", 2);");
code("trQuestVarSet(\"iceKingArmor\", 1 - trQuestVarGet(\"iceKingArmor\"));");
code("if (trQuestVarGet(\"iceKingArmor\") == 0) {");
code("trSoundPlayFN(\"icemono.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"bronzebirth.wav\",\"1\",-1,\"\",\"\");");
code("trModifyProtounit(\"King Folstag\", ENEMY_PLAYER, 24, 1);");
code("trModifyProtounit(\"King Folstag\", ENEMY_PLAYER, 25, 1);");
code("trModifyProtounit(\"King Folstag\", ENEMY_PLAYER, 26, 1);");
code("xSetFloat(dEnemies, xPhysicalResist, 1, bossPointer);");
code("xSetFloat(dEnemies, xMagicResist, 0, bossPointer);");
code("trQuestVarSetFromRand(\"rand\", 1, 3, true);");
code("if (trQuestVarGet(\"rand\") == 1) {");
code("trChatSendSpoofed(ENEMY_PLAYER, \"King of Ice: Your blades won't reach me!\");");
code("} else if (trQuestVarGet(\"rand\") == 2) {");
code("trChatSendSpoofed(ENEMY_PLAYER, \"King of Ice: Ice Armor!\");");
code("}");
code("if (trQuestVarGet(\"bossExplain\") < 2) {");
code("trMessageSetText(\"The King of Ice is now resistant to attacks but vulnerable to spells.\",-1);");
code("trQuestVarSet(\"bossExplain\", 1 + trQuestVarGet(\"bossExplain\"));");
code("}");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+aiPlanGetUserVariableInt(ARRAYS,bossInts,0));");
code("trMutateSelected(kbGetProtoUnitID(\"Ice Block\"));");
code("trUnitSetAnimationPath(\"0,0,0,0,0,0,0\");");
code("trSetSelectedScale(5,7,5);");
code("} else {");
code("trSoundPlayFN(\"sphinxteleportin.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"godpower.wav\",\"1\",-1,\"\",\"\");");
code("trModifyProtounit(\"King Folstag\", ENEMY_PLAYER, 24, -1);");
code("trModifyProtounit(\"King Folstag\", ENEMY_PLAYER, 25, -1);");
code("trModifyProtounit(\"King Folstag\", ENEMY_PLAYER, 26, -1);");
code("xSetFloat(dEnemies, xPhysicalResist, 0, bossPointer);");
code("xSetFloat(dEnemies, xMagicResist, 1, bossPointer);");
code("trQuestVarSetFromRand(\"rand\", 1, 3, true);");
code("if (trQuestVarGet(\"rand\") == 1) {");
code("trChatSendSpoofed(ENEMY_PLAYER, \"King of Ice: Your magic is meaningless!\");");
code("} else if (trQuestVarGet(\"rand\") == 2) {");
code("trChatSendSpoofed(ENEMY_PLAYER, \"King of Ice: Aurora Armor!\");");
code("}");
code("if (trQuestVarGet(\"bossExplain\") < 2) {");
code("trMessageSetText(\"The King of Ice is now resistant to spells but vulnerable to attacks.\",-1);");
code("trQuestVarSet(\"bossExplain\", 1 + trQuestVarGet(\"bossExplain\"));");
code("}");
code("if (kbGetBlockID(\"\"+aiPlanGetUserVariableInt(ARRAYS,bossInts,0)) >= 0) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+aiPlanGetUserVariableInt(ARRAYS,bossInts,0));");
code("trMutateSelected(kbGetProtoUnitID(\"Vortex Finish Linked\"));");
code("} else {");
code("spyEffect(bossUnit, kbGetProtoUnitID(\"Vortex Finish Linked\"), xsVectorSet(ARRAYS,bossInts,0));");
code("}");
code("}");
code("bossCooldown(5, 10);");
code("} else {");
code("trQuestVarSet(\"bossSpell\", 11);");
code("}");
code("} else if (xGetInt(dEnemies, xStunStatus, bossPointer) == 0) {");
code("trQuestVarSetFromRand(\"bossSpell\", 0, xsMin(3, trUnitPercentDamaged() * 0.05), true);");
code("trQuestVarSet(\"bossSpell\", trQuestVarGet(\"bossSpell\") * 10 + 1);");
code("if (trQuestVarGet(\"bossSpell\") == 31 && trQuestVarGet(\"bossUltimate\") > 0) {");
code("trQuestVarSetFromRand(\"bossSpell\", 0, 2, true);");
code("trQuestVarSet(\"bossSpell\", 1 + 10 * trQuestVarGet(\"bossSpell\"));");
code("}");
code("}");

code("if (trQuestVarGet(\"frostGiantIncomingSound\") == 1) {");
code("trQuestVarSet(\"frostGiantIncomingSound\", 0);");
code("trSoundPlayFN(\"icemono.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("} else {");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("xsDisableSelf();");
code("trMusicStop();");
code("boss = 0;");
code("trSetLighting(\"default\", 1.0);");
code("trSoundPlayFN(\"win.wav\",\"1\",-1,\"\",\"\");");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("trDamageUnitPercent(100);");
code("}");
code("uiLookAtUnitByName(\"\"+bossUnit);");
code("xsEnableRule(\"boss_ded\");");
code("xsDisableRule(\"gameplay_always\");");
code("}");
code("}");

code("int dChimeraClouds = 0;");
code("int xChimeraCloudType = 0;");

code("rule boss4_init");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > trQuestVarGet(\"cinTime\")) {");
code("switch(1*trQuestVarGet(\"cinStep\"))");
code("{");
code("case 0:");
code("{");
code("trOverlayText(\"Escaped Amalgam\", 3.0, -1, -1, -1);");
code("trQuestVarSet(\"cinTime\", trTime() + 2);");

code("dChimeraClouds = initGenericProj(\"chimeraClouds\",kbGetProtoUnitID(\"Lampades Blood\"),2,10.0,4.5,1.0,ENEMY_PLAYER);");
code("xChimeraCloudType = xInitAddInt(dChimeraClouds, \"type\");");
code("xInitAddVector(dChimeraClouds, \"prev\");");
code("}");
code("case 1:");
code("{");
code("trLetterBox(false);");
code("trUIFadeToColor(0,0,0,1000,0,false);");
code("xsDisableSelf();");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trUnitConvert(ENEMY_PLAYER);");
code("trSetSelectedScale(bossScale, bossScale, bossScale);");
code("spyEffect(bossUnit,kbGetProtoUnitID(\"Cinematic Block\"),xsVectorSet(ARRAYS,bossInts,0));");
code("spyEffect(bossUnit,kbGetProtoUnitID(\"Cinematic Block\"),xsVectorSet(ARRAYS,bossInts,1));");
code("xsEnableRule(\"boss4_battle\");");
code("trQuestVarSet(\"bossGem\", STARSTONE);");
code("trQuestVarSetFromRand(\"bossGemCount\", 3, 4, true);");
code("xsEnableRule(\"boss_music\");");

code("bossCooldown(10, 15);");

code("trModifyProtounit(\"Chimera\", ENEMY_PLAYER, 27, 20);");

code("zSetProtoUnitStat(\"Meteorite\", ENEMY_PLAYER, 1, 6);");

code("trStringQuestVarSet(\"advice\", \"Try bringing poison and silence resistance!\");");
code("}");
code("}");
code("trQuestVarSet(\"cinStep\", 1 + trQuestVarGet(\"cinStep\"));");
code("}");
code("}");


code("rule boss4_battle");
code("inactive");
code("highFrequency");
code("{");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("int p = 0;");
code("int x = 0;");
code("int action = 0;");
code("int id = 0;");
code("float amt = 0;");
code("float dist = 0;");
code("float angle = 0;");
code("bool hit = false;");
code("vector pos = vector(0,0,0);");
code("vector prev = vector(0,0,0);");
code("vector dir = vector(0,0,0);");
code("if (trUnitAlive() == true) {");
code("for (i=xsMin(3,xGetDatabaseCount(dChimeraClouds)); > 0) {");
code("action = processGenericProj(dChimeraClouds);");
code("if ((action == PROJ_FALLING) && xGetInt(dChimeraClouds, xChimeraCloudType) < 99) {");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dChimeraClouds, xUnitName), true);");
code("prev = xGetVector(dChimeraClouds, xProjPrev);");
code("amt = distanceBetweenVectors(pos, prev, false);");
code("if (amt > 4.0) {");
code("dir = xGetVector(dChimeraClouds, xProjDir);");
code("for(x=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("xUnitSelectByID(dPlayerUnits, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (rayCollision(dPlayerUnits,prev,dir,amt + 2.0,4.0)) {");
code("poisonUnit(dPlayerUnits, 10, 30);");
code("}");
code("}");
code("xSetVector(dChimeraClouds, xProjPrev, pos);");
code("}");
code("if (terrainIsType(vectorToGrid(pos), TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("xFreeDatabaseBlock(dChimeraClouds);");
code("}");
code("} else if ((action == PROJ_GROUND) && xGetInt(dChimeraClouds, xChimeraCloudType) == 99) {");
code("trDamageUnitPercent(-100);");
code("trQuestVarSetFromRand(\"rand\", 1, 5, true);");
code("switch(1*trQuestVarGet(\"rand\"))");
code("{");
code("case 1:");
code("{");
code("trUnitChangeProtoUnit(\"Sphinx\");");
code("}");
code("case 2:");
code("{");
code("trUnitChangeProtoUnit(\"Cyclops\");");
code("}");
code("case 3:");
code("{");
code("trUnitChangeProtoUnit(\"Avenger\");");
code("}");
code("case 4:");
code("{");
code("trUnitChangeProtoUnit(\"Dryad\");");
code("}");
code("case 5:");
code("{");
code("trUnitChangeProtoUnit(\"Walking Woods Marsh\");");
code("}");
code("}");
code("xUnitSelectByID(dChimeraClouds, xUnitID);");
code("trDamageUnitPercent(-100);");
code("activateEnemy(xGetInt(dChimeraClouds, xUnitName),-1,0);");
code("xFreeDatabaseBlock(dChimeraClouds);");
code("}");
code("}");

code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("if (trQuestVarGet(\"bossSpell\") == BOSS_SPELL_COOLDOWN) {");
code("processBossCooldown();");
code("} else if (trQuestVarGet(\"bossSpell\") > 30) {");
code("if (trQuestVarGet(\"bossSpell\") == 31) {");
code("trOverlayText(\"Land of Ashes\", 3.0, -1, -1, -1);");
code("trSetLighting(\"night\", 1.0);");
code("trSoundPlayFN(\"cinematics\15_in\gong.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"godpower.wav\",\"1\",-1,\"\",\"\");");
code("bossNext = trTimeMS() + 2000;");
code("trQuestVarSet(\"bossSpell\", 32);");
code("} else if (trQuestVarGet(\"bossSpell\") == 32) {");
code("trQuestVarSet(\"bossSpell\", 33);");
code("if (kbGetBlockID(\"\"+1*trQuestVarGet(\"bossCrossFireSFX\")) == -1) {");
code("spyEffect(bossUnit,kbGetProtoUnitID(\"Meteorite\"),xsVectorSet(ARRAYS,bossInts,0));");
code("spyEffect(bossUnit,kbGetProtoUnitID(\"Meteorite\"),xsVectorSet(ARRAYS,bossInts,1));");
code("} else {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+aiPlanGetUserVariableInt(ARRAYS,bossInts,0));");
code("trUnitSelect(\"\"+aiPlanGetUserVariableInt(ARRAYS,bossInts,1));");
code("trMutateSelected(kbGetProtoUnitID(\"Meteorite\"));");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") == 33) {");
code("if ((trQuestVarGet(\"spyfind\") == trQuestVarGet(\"spyfound\")) &&");
code("trTimeMS() > bossNext) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+aiPlanGetUserVariableInt(ARRAYS,bossInts,0));");
code("trUnitSelect(\"\"+aiPlanGetUserVariableInt(ARRAYS,bossInts,1));");
code("trUnitOverrideAnimation(6,0,true,false,-1);");
code("trSoundPlayFN(\"flamingweapons.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"nidhoggflame1.wav\",\"1\",-1,\"\",\"\");");
code("bossAngle = 0;");
code("trQuestVarSet(\"bossAngleMod\", 0);");
code("bossTimeout = trTimeMS() + 12000;");
code("bossNext = trTimeMS();");
code("trQuestVarSet(\"bossSpell\", 34);");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") >= 34) {");
code("dist = trTimeMS() - trQuestVarGet(\"bossLast\");");
code("trQuestVarSet(\"bossLast\", trTimeMS());");
code("bossAngle = fModulo(6.283185, bossAngle + 0.0004 * dist);");
code("dir = xsVectorSet(xsCos(bossAngle),0,xsSin(bossAngle));");
code("trQuestVarSet(\"bossSpell\", 1 + trQuestVarGet(\"bossSpell\"));");
code("if (trQuestVarGet(\"bossSpell\") >= 36) {");
code("trQuestVarSet(\"bossSpell\", 34);");
code("dir = vector(0,0,0) - dir;");
code("}");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+aiPlanGetUserVariableInt(ARRAYS,bossInts,0),true);");
code("trSetSelectedUpVector(4.0 * xsVectorGetX(dir),-1,4.0 * xsVectorGetZ(dir));");
code("dir = rotationMatrix(dir, 0, 1.0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+aiPlanGetUserVariableInt(ARRAYS,bossInts,1),true);");
code("trSetSelectedUpVector(4.0 * xsVectorGetX(dir),-1,4.0 * xsVectorGetZ(dir));");
code("if (trTimeMS() > bossNext + 100) {");
code("trQuestVarSet(\"bossAngleMod\", fModulo(6.283185, trQuestVarGet(\"bossAngleMod\") + 1.570796));");
code("angle = fModulo(6.283185, bossAngle + trQuestVarGet(\"bossAngleMod\"));");
code("pos = xsVectorSet(xsCos(angle),0,xsSin(angle));");
code("bossNext = bossNext + 100;");
code("bossPos = kbGetBlockPosition(\"\"+bossUnit, true);");
code("for(x=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("xUnitSelectByID(dPlayerUnits, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (rayCollision(dPlayerUnits,bossPos,pos,16,16)) {");
code("damagePlayerUnit(150);");
code("}");
code("}");
code("}");
code("if (trTimeMS() > bossTimeout) {");
code("trQuestVarSet(\"bossUltimate\", 3);");
code("trSetLighting(\"default\", 1.0);");
code("trSoundPlayFN(\"godpowerfailed.wav\",\"1\",-1,\"\",\"\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+aiPlanGetUserVariableInt(ARRAYS,bossInts,0),true);");
code("trUnitSelect(\"\"+aiPlanGetUserVariableInt(ARRAYS,bossInts,1),true);");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");
code("bossCooldown(12, 16);");
code("}");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") > 20) {");
code("if (trQuestVarGet(\"bossSpell\") == 21) {");
code("trSoundPlayFN(\"attackwarning.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"flamingweapons.wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSetFromRand(\"rand\", 1, xGetDatabaseCount(dPlayerCharacters), true);");
code("for(x=trQuestVarGet(\"rand\"); >0) {");
code("xDatabaseNext(dPlayerCharacters);");
code("bossTargetPos = kbGetBlockPosition(\"\"+xGetInt(dPlayerCharacters, xUnitName), true);");
code("}");
code("bossNext = trTimeMS() + 1500;");
code("trQuestVarSet(\"bossSpell\", 22);");
code("bossPos = kbGetBlockPosition(\"\"+bossUnit, true);");
code("bossDir = getUnitVector(bossPos, bossTargetPos);");
code("trSetUnitOrientation(bossDir,vector(0,1,0),true);");
code("bossAngle = angleBetweenVectors(bossPos, bossTargetPos);");
code("} else if (trQuestVarGet(\"bossSpell\") == 22) {");
code("if (trTimeMS() > bossNext) {");
code("trSetUnitOrientation(bossDir,vector(0,1,0),true);");
code("trUnitOverrideAnimation(19,0,false,false,-1);");
code("trSoundPlayFN(\"flamingweapons.wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSet(\"bossSpell\", 23);");
code("bossNext =trTimeMS() + 600;");
code("bossTimeout = trTimeMS() + 2000;");
code("trQuestVarSet(\"bossBreath\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(bossPos),0,xsVectorGetZ(bossPos),0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(0);");
code("trMutateSelected(kbGetProtoUnitID(\"Meteorite\"));");
code("bossAnim = true;");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") == 23) {");
code("if (trTimeMS() > bossNext) {");
code("trCameraShake(1.5, 0.4);");
code("trSoundPlayFN(\"sonofosirisbolt.wav\",\"1\",-1,\"\",\"\");");
code("bossAngle = fModulo(6.283185, bossAngle + 0.5);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossBreath\");");
code("trUnitOverrideAnimation(6,0,true,false,-1);");
code("dir = xsVectorSet(xsSin(bossAngle),0,xsCos(bossAngle));");
code("trSetSelectedUpVector(10.0 * xsVectorGetX(dir),0,10.0 * xsVectorGetZ(dir));");
code("trQuestVarSet(\"bossSpell\", 24);");
code("trVectorQuestVarSet(\"bossLastDir\", dir);");
code("} else {");
code("trSetUnitOrientation(bossDir,vector(0,1,0),true);");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") == 24) {");
code("trSetUnitOrientation(bossDir,vector(0,1,0),true);");
code("amt = 1.0 * (trTimeMS() - bossNext) / 1400;");
code("amt = fModulo(6.283185, bossAngle - amt * 1.116);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossBreath\");");
code("dir = xsVectorSet(xsSin(amt),0,xsCos(amt));");
code("trSetSelectedUpVector(10.0 * xsVectorGetX(dir),0,10.0 * xsVectorGetZ(dir));");
code("amt = dotProduct(trVectorQuestVarGet(\"bossLastDir\"), dir);");
code("for(x=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("xUnitSelectByID(dPlayerUnits, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else {");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dPlayerUnits, xUnitName), true);");
code("prev = getUnitVector(bossPos, pos);");
code("if (dotProduct(prev, dir) > amt &&");
code("dotProduct(prev, trVectorQuestVarGet(\"bossLastDir\")) > amt) {");
code("damagePlayerUnit(800);");
code("}");
code("}");
code("}");
code("trVectorQuestVarSet(\"bossLastDir\", dir);");

code("if (trTimeMS() > bossTimeout) {");
code("bossAnim = false;");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossBreath\");");
code("trUnitChangeProtoUnit(\"Rocket\");");
code("trSetLighting(\"default\", 1.0);");
code("bossCooldown(10, 16);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Chimera\"));");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("}");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") > 10) {");
code("if (trQuestVarGet(\"bossSpell\") == 11) {");
code("trSoundPlayFN(\"argusfreezeattack.wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSetFromRand(\"rand\", 1, xGetDatabaseCount(dPlayerCharacters), true);");
code("for(x=trQuestVarGet(\"rand\"); >0) {");
code("xDatabaseNext(dPlayerCharacters);");
code("bossTargetPos = kbGetBlockPosition(\"\"+xGetInt(dPlayerCharacters, xUnitName), true);");
code("}");
code("bossAnim = true;");
code("bossPos = kbGetBlockPosition(\"\"+bossUnit, true);");
code("bossDir = getUnitVector(bossPos, bossTargetPos);");
code("trSetUnitOrientation(bossDir,vector(0,1,0),true);");
code("trUnitOverrideAnimation(19,0,false,false,-1);");
code("bossAngle = angleBetweenVectors(bossPos, bossTargetPos);");
code("bossAngle = fModulo(6.283185, bossAngle + 0.558);");
code("trQuestVarSet(\"bossSpell\", 12);");
code("bossNext =trTimeMS();");
code("bossCount = 8;");
code("} else if (trQuestVarGet(\"bossSpell\") == 12) {");
code("if (trTimeMS() > bossNext) {");
code("bossNext = trTimeMS() + 200;");
code("dir = xsVectorSet(xsSin(bossAngle),0,xsCos(bossAngle));");
code("addGenericProj(dChimeraClouds,bossPos,dir);");
code("xSetVector(dChimeraClouds, xProjPrev, bossPos);");
code("xSetInt(dChimeraClouds, xChimeraCloudType, STATUS_POISON);");
code("bossAngle = bossAngle - 0.139;");
code("bossCount = bossCount - 1;");
code("if (bossCount <= 0) {");
code("bossAnim = false;");
code("bossCooldown(10, 16);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Chimera\"));");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("}");
code("} else {");
code("trSetUnitOrientation(bossDir,vector(0,1,0),true);");
code("}");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") > 0) {");
code("if (trQuestVarGet(\"bossSpell\") == 1) {");
code("if (trQuestVarGet(\"bossSummons\") == 1) {");
code("trQuestVarSet(\"bossSummons\", 0);");
code("trQuestVarSet(\"bossSpell\", 11);");
code("} else {");
code("trSoundPlayFN(\"mummyconvert.wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSetFromRand(\"rand\", 1, xGetDatabaseCount(dPlayerCharacters), true);");
code("for(x=trQuestVarGet(\"rand\"); >0) {");
code("xDatabaseNext(dPlayerCharacters);");
code("bossTargetPos = kbGetBlockPosition(\"\"+xGetInt(dPlayerCharacters, xUnitName), true);");
code("}");
code("bossPos = kbGetBlockPosition(\"\"+bossUnit, true);");
code("bossDir = getUnitVector(bossPos, bossTargetPos);");
code("trSetUnitOrientation(bossDir,vector(0,1,0),true);");
code("trUnitOverrideAnimation(19,0,false,false,-1);");
code("bossAngle = fModulo(6.283185, angleBetweenVectors(bossPos, bossTargetPos) + 0.558);");
code("trQuestVarSet(\"bossSpell\", 2);");
code("bossNext = trTimeMS();");
code("bossCount = 8;");
code("bossAnim = true;");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") == 2) {");
code("if (trTimeMS() > bossNext) {");
code("bossNext = trTimeMS() + 100;");
code("dir = xsVectorSet(xsSin(bossAngle),0,xsCos(bossAngle));");
code("trQuestVarSetFromRand(\"speed\", 10.0, 20.0, false);");
code("addGenericProj(dChimeraClouds,bossPos,dir,ENEMY_PLAYER,trQuestVarGet(\"speed\"));");
code("xSetVector(dChimeraClouds, xProjPrev, bossPos);");
code("xSetInt(dChimeraClouds, xChimeraCloudType, 99);");
code("xSetInt(dChimeraClouds, xProjProto, kbGetProtoUnitID(\"Kronny Birth SFX\"));");
code("bossAngle = bossAngle - 0.139;");
code("bossCount = bossCount - 1;");
code("if (bossCount <= 0) {");
code("bossAnim = false;");
code("bossCooldown(15, 20);");
code("trQuestVarSet(\"bossSummons\", 1);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Chimera\"));");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("}");
code("} else {");
code("trSetUnitOrientation(bossDir,vector(0,1,0),true);");
code("}");
code("}");
code("} else if (xGetInt(dEnemies, xStunStatus, bossPointer) == 0) {");
code("trQuestVarSetFromRand(\"bossSpell\", 0, xsMin(3, trUnitPercentDamaged() * 0.05), true);");
code("trQuestVarSet(\"bossSpell\", trQuestVarGet(\"bossSpell\") * 10 + 1);");
code("if (trQuestVarGet(\"bossSpell\") == 31 && trQuestVarGet(\"bossUltimate\") > 0) {");
code("trQuestVarSetFromRand(\"bossSpell\", 0, 2, true);");
code("trQuestVarSet(\"bossSpell\", 1 + 10 * trQuestVarGet(\"bossSpell\"));");
code("}");
code("}");
code("} else {");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("xsDisableSelf();");
code("trMusicStop();");
code("boss = 0;");
code("trSetLighting(\"default\", 1.0);");
code("trSoundPlayFN(\"win.wav\",\"1\",-1,\"\",\"\");");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies, true);");
code("trDamageUnitPercent(100);");
code("}");
code("uiLookAtUnitByName(\"\"+bossUnit);");
code("xsEnableRule(\"boss_ded\");");
code("xsDisableRule(\"gameplay_always\");");
code("}");
code("}");

code("int dShadeBolts = 0;");
code("int dShadeCloud = 0;");
code("int dSplatterUnits = 0;");

code("rule boss5_init");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > trQuestVarGet(\"cinTime\")) {");
code("switch(1*trQuestVarGet(\"cinStep\"))");
code("{");
code("case 0:");
code("{");
code("trOverlayText(\"The Lonely Ghost\", 3.0, -1, -1, -1);");
code("trQuestVarSet(\"cinTime\", trTime() + 2);");

code("dShadeBolts = initGenericProj(\"shadeBolts\",kbGetProtoUnitID(\"Medusa\"),40,9.0,5.0,0,ENEMY_PLAYER,true);");

code("dShadeCloud = initGenericProj(\"shadeCloud\",kbGetProtoUnitID(\"Kronny Birth SFX\"),2,20.0,4.5,0,0,true);");

code("dSplatterUnits = xInitDatabase(\"splatterUnits\");");
code("xInitAddInt(dSplatterUnits, \"name\");");
code("xInitAddInt(dSplatterUnits, \"index\");");
code("}");
code("case 1:");
code("{");
code("trQuestVarSet(\"bossChoke\", 10);");
code("trLetterBox(false);");
code("trUIFadeToColor(0,0,0,1000,0,false);");
code("xsDisableSelf();");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trUnitConvert(ENEMY_PLAYER);");
code("trSetSelectedScale(bossScale, bossScale, bossScale);");
code("xsEnableRule(\"boss5_battle\");");
code("trQuestVarSet(\"bossGem\", SOULSTONE);");
code("trQuestVarSetFromRand(\"bossGemCount\", 3, 4, true);");
code("xsEnableRule(\"boss_music\");");

code("trQuestVarSet(\"bossWarn1\", trGetNextUnitScenarioNameNumber());");
code("trQuestVarSet(\"bossWarn2\", 1 + trQuestVarGet(\"bossWarn1\"));");
code("trArmyDispatch(\"1,0\",\"Dwarf\",2,1,0,1,0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(ENEMY_PLAYER);");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");

code("trQuestVarSet(\"bossScreamStart\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",7,1,0,1,0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(ENEMY_PLAYER);");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("trQuestVarSet(\"bossScreamEnd\", trGetNextUnitScenarioNameNumber());");

code("trQuestVarSet(\"bossEscape\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,1,0,1,0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(ENEMY_PLAYER);");
code("trMutateSelected(kbGetProtoUnitID(\"Transport Ship Greek\"));");

code("bossCooldown(10, 15);");

code("trModifyProtounit(\"Shade of Hades\", ENEMY_PLAYER, 27, 20);");
code("trModifyProtounit(\"Shade of Hades\", ENEMY_PLAYER, 55, 4);");

code("trStringQuestVarSet(\"advice\", \"Try bringing poison resistance!\");");
code("}");
code("}");
code("trQuestVarSet(\"cinStep\", 1 + trQuestVarGet(\"cinStep\"));");
code("}");
code("}");


code("rule boss5_battle");
code("inactive");
code("highFrequency");
code("{");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("int p = 0;");
code("int x = 0;");
code("int z = 0;");
code("int action = 0;");
code("int id = 0;");
code("float amt = 0;");
code("float dist = 0;");
code("float angle = 0;");
code("bool hit = false;");
code("vector pos = vector(0,0,0);");
code("vector prev = vector(0,0,0);");
code("vector dir = vector(0,0,0);");
code("if (trUnitAlive() == true) {");
code("switch(1*trQuestVarGet(\"bossChokeStep\"))");
code("{");
code("case 0:");
code("{");
code("if (trUnitPercentDamaged() > trQuestVarGet(\"bossChoke\")) {");
code("trQuestVarSet(\"bossChoke\", trQuestVarGet(\"bossChoke\") + 20);");
code("trQuestVarSet(\"bossChokeNext\", trTimeMS());");
code("trQuestVarSet(\"bossChokeStep\", 1);");
code("trQuestVarSet(\"bossChokeCount\", 3);");
code("trSoundPlayFN(\"attackwarning.wav\",\"1\",-1,\"\",\"\");");
code("trMessageSetText(\"The arena is getting smaller!\", -1);");
code("}");
code("}");
code("case 1:");
code("{");
code("if (trTimeMS() > trQuestVarGet(\"bossChokeNext\")) {");
code("action = trQuestVarGet(\"bossRoomSize\");");
code("pos = trVectorQuestVarGet(\"bossRoomLoc\");");
code("x = xsVectorGetX(pos);");
code("z = xsVectorGetZ(pos);");
code("if (trQuestVarGet(\"bossChokeCount\") <= 0) {");
code("trQuestVarSet(\"bossChokeStep\", 0);");
code("trPaintTerrain(x - action, z - action, x + action, z + action, TERRAIN_WALL, TERRAIN_SUB_WALL, false);");
code("trChangeTerrainHeight(x - action-1, z - action-1, x + action+1, z + action+1, wallHeight, false);");

code("trPaintTerrain(x - action+1, z - action+1, x + action-2, z + action-2, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(x - action+1, z - action+1, x + action-1, z + action-1, worldHeight, false);");

code("trPaintTerrain(0,0,5,5,0,70,true);");
code("trPaintTerrain(0,0,5,5,TERRAIN_WALL,TERRAIN_SUB_WALL,false);");
code("trSoundPlayFN(\"wall.wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSet(\"bossRoomSize\", action - 1);");

code("if (trQuestVarGet(\"bossSpell\") == BOSS_SPELL_COOLDOWN) {");
code("trQuestVarSet(\"bossSpell\", 1);");
code("}");
code("pos = xsVectorSet(2.0 * trQuestVarGet(\"bossRoomSize\"),0,2.0 * trQuestVarGet(\"bossRoomSize\"));");
code("vector bottom = trVectorQuestVarGet(\"bossRoomCenter\") - pos;");
code("vector top = trVectorQuestVarGet(\"bossRoomCenter\") + pos;");
code("for(x=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("xUnitSelectByID(dPlayerUnits, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else {");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dPlayerUnits, xUnitName), true);");
code("if (vectorInRectangle(pos, bottom, top) == false) {");
code("trUnitDelete(false);");
code("removePlayerUnit();");
code("}");
code("}");
code("}");
code("} else {");
code("trPaintTerrain(x - action, z - action, x + action, z + action, 2, 10, false);");
code("trPaintTerrain(x - action+1, z - action+1, x + action-1, z + action-1, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trQuestVarSet(\"bossChokeNext\", trQuestVarGet(\"bossChokeNext\") + 500);");
code("trQuestVarSet(\"bossChokeStep\", 2);");
code("}");
code("}");
code("}");
code("case 2:");
code("{");
code("if (trTimeMS() > trQuestVarGet(\"bossChokeNext\")) {");
code("action = trQuestVarGet(\"bossRoomSize\");");
code("pos = trVectorQuestVarGet(\"bossRoomLoc\");");
code("x = xsVectorGetX(pos);");
code("z = xsVectorGetZ(pos);");
code("trPaintTerrain(x - action, z - action, x + action, z + action, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trQuestVarSet(\"bossChokeNext\", trQuestVarGet(\"bossChokeNext\") + 500);");
code("trQuestVarSet(\"bossChokeStep\", 1);");
code("trQuestVarSet(\"bossChokeCount\", trQuestVarGet(\"bossChokeCount\") - 1);");
code("}");
code("}");
code("}");
code("for (i=xsMin(5, xGetDatabaseCount(dShadeBolts)); > 0) {");
code("action = processGenericProj(dShadeBolts);");
code("if (action == PROJ_FALLING) {");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dShadeBolts, xUnitName), true);");
code("hit = false;");
code("prev = xGetVector(dShadeBolts, xProjPrev);");
code("dir = xGetVector(dShadeBolts, xProjDir);");
code("amt = distanceBetweenVectors(pos, prev, false) + 1.0;");
code("for(x=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("xUnitSelectByID(dPlayerUnits,xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (rayCollision(dPlayerUnits,prev,dir,amt,2.0)) {");
code("damagePlayerUnit(100);");
code("poisonUnit(dPlayerUnits, 10, 5 * trQuestVarGet(\"stage\"));");
code("hit = true;");
code("}");
code("}");
code("if (hit || terrainIsType(vectorToGrid(pos), TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("xUnitSelectByID(dShadeBolts, xUnitID);");
code("trDamageUnitPercent(-100);");
code("trUnitChangeProtoUnit(\"Lightning sparks\");");
code("xUnitSelectByID(dShadeBolts, xUnitID);");
code("trDamageUnitPercent(-100);");
code("if (hit) {");
code("trQuestVarSet(\"boltsound\", 1);");
code("} else {");
code("trQuestVarSet(\"boltsound\", 2);");
code("}");
code("xFreeDatabaseBlock(dShadeBolts);");
code("} else {");
code("xSetVector(dShadeBolts, xProjPrev, pos);");
code("}");
code("}");
code("}");
code("if (trQuestVarGet(\"boltsound\") == 1) {");
code("trQuestVarSetFromRand(\"sound\", 1, 4, true);");
code("trSoundPlayFN(\"swordonflesh\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("} else if (trQuestVarGet(\"boltsound\") == 2) {");
code("trQuestVarSetFromRand(\"sound\", 1, 3, true);");
code("trSoundPlayFN(\"mine\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("}");
code("trQuestVarSet(\"boltsound\", 0);");

code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("if (trQuestVarGet(\"bossSpell\") == BOSS_SPELL_COOLDOWN) {");
code("processBossCooldown(21);");
code("} else if (trQuestVarGet(\"bossSpell\") > 20) {");
code("if (trQuestVarGet(\"bossSpell\") == 21) {");
code("trSoundPlayFN(\"cinematics\15_in\gong.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"godpower.wav\",\"1\",-1,\"\",\"\");");
code("trSetLighting(\"night\", 1.0);");
code("trOverlayText(\"Voiceless Scream\", 3.0, -1, -1, -1);");
code("xSetBool(dEnemies, xLaunched, true, bossPointer);");
code("trQuestVarSetFromRand(\"rand\", 1, xGetDatabaseCount(dPlayerCharacters), true);");
code("for(x=trQuestVarGet(\"rand\"); >0) {");
code("xDatabaseNext(dPlayerCharacters);");
code("}");
code("bossAnim = true;");
code("trQuestVarSet(\"bossMove\", 1.0);");
code("bossTarget = xGetInt(dPlayerCharacters, xUnitName);");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dPlayerCharacters, xUnitName), true);");
code("bossPos = kbGetBlockPosition(\"\"+bossUnit, true);");
code("bossAngle = angleBetweenVectors(bossPos, pos);");
code("bossDir = getUnitVector(bossPos, pos);");
code("dir = vector(0,0,0) - bossDir;");
code("trSetUnitOrientation(bossDir,vector(0,1,0),true);");
code("trMutateSelected(kbGetProtoUnitID(\"Transport Ship Greek\"));");
code("for(x=1; <3) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossWarn\"+x, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Dwarf\"));");
code("trImmediateUnitGarrison(\"\"+bossUnit);");
code("trUnitChangeProtoUnit(\"Dwarf\");");
code("}");
code("for(x=trQuestVarGet(\"bossScreamStart\"); < trQuestVarGet(\"bossScreamEnd\")) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+x, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Dwarf\"));");
code("trImmediateUnitGarrison(\"\"+bossUnit);");
code("trUnitChangeProtoUnit(\"Dwarf\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+x, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Rocket\"));");
code("trSetUnitOrientation(bossDir,vector(0,1,0),true);");
code("}");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Shade of Hades\"));");
code("for(x=1; <3) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossWarn\"+x, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Petosuchus Projectile\"));");
code("trSetUnitOrientation(dir,vector(0,1,0),true);");
code("trSetSelectedScale(3,0,60);");
code("}");
code("trQuestVarSet(\"bossSpell\", 22);");
code("bossNext = trTimeMS() + 2000;");
code("trModifyProtounit(\"Shade of Hades\", ENEMY_PLAYER, 55, 2);");
code("} else if (trQuestVarGet(\"bossSpell\") == 22) {");
code("amt = bossNext - trTimeMS();");
code("if (amt < 0) {");
code("bossAnim = true;");
code("trMutateSelected(kbGetProtoUnitID(\"Shade of Hades\"));");
code("trUnitOverrideAnimation(15,0,true,false,-1);");
code("for(x=1; <3) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossWarn\"+x);");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("}");
code("trSoundPlayFN(\"shadeofhadesacknowledge2.wav\",\"1\",-1,\"\",\"\");");
code("bossTimeout = trTimeMS() + 9000;");
code("trQuestVarSet(\"bossLast\", trTimeMS());");
code("trQuestVarSet(\"bossSpell\", 23);");
code("for(x=trQuestVarGet(\"bossScreamStart\"); < trQuestVarGet(\"bossScreamEnd\")) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+x, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Vortex Start Linked\"));");
code("trUnitSetAnimationPath(\"0,0,1,0,0,0,0\");");
code("}");
code("} else {");
code("angle = 0.00015 * (2000 - amt);");
code("amt = amt * 0.001;");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossWarn1\", true);");
code("dist = fModulo(6.283185, bossAngle - angle - 3.141592);");
code("trSetUnitOrientation(xsVectorSet(xsSin(dist),0,xsCos(dist)),vector(0,1,0),true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossWarn2\", true);");
code("dist = fModulo(6.283185, bossAngle + angle - 3.141592);");
code("trSetUnitOrientation(xsVectorSet(xsSin(dist),0,xsCos(dist)),vector(0,1,0),true);");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") == 23) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossTarget, true);");
code("if (trUnitAlive()) {");
code("pos = kbGetBlockPosition(\"\"+bossTarget, true);");
code("} else {");
code("xDatabaseNext(dPlayerCharacters);");
code("bossTarget = xGetInt(dPlayerCharacters, xUnitName);");
code("}");
code("amt = trTimeMS() - trQuestVarGet(\"bossLast\");");
code("trQuestVarSet(\"bossLast\", trTimeMS());");
code("angle = fModulo(6.283185, bossAngle + amt * trQuestVarGet(\"bossMove\") * 0.0003);");
code("bossAngle = angle;");
code("dir = xsVectorSet(xsSin(angle),0,xsCos(angle));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trSetUnitOrientation(dir,vector(0,1,0),true);");
code("bossTargetPos = getUnitVector(bossPos, pos);");
code("trVectorQuestVarSet(\"bossDestDir\", bossTargetPos);");
code("if (dotProduct(bossTargetPos, dir) < dotProduct(bossDir, bossTargetPos)) {");
code("trQuestVarSet(\"bossMove\", 0.0 - trQuestVarGet(\"bossMove\"));");
code("}");
code("bossDir = dir;");
code("vector first = xsVectorSet(xsSin(angle - 0.3),0,xsCos(angle - 0.3));");
code("vector second = xsVectorSet(xsSin(angle + 0.3),0,xsCos(angle + 0.3));");
code("angle = fModulo(6.283185, angle - 0.3);");
code("dir = xsVectorSet(xsSin(angle),0,xsCos(angle));");
code("for(x=trQuestVarGet(\"bossScreamStart\"); < trQuestVarGet(\"bossScreamEnd\")) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+x);");
code("trSetSelectedUpVector(5.0 * xsVectorGetX(dir),-1,5.0 * xsVectorGetZ(dir));");
code("dir = rotationMatrix(dir, 0.995004, -0.099833);");
code("}");
code("if (trTimeMS() > bossNext) {");
code("trCameraShake(0.5, 0.1);");
code("bossNext = 500 + bossNext;");
code("trQuestVarSetFromRand(\"sound\", 1, 3, true);");
code("trSoundPlayFN(\"suckup\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("amt = dotProduct(first, second);");
code("for(x=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("xUnitSelectByID(dPlayerUnits,xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else {");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dPlayerUnits, xUnitName), true);");
code("dir = getUnitVector(bossPos, pos);");
code("if ((dotProduct(dir, first) > amt &&");
code("dotProduct(dir, second) > amt) ||");
code("distanceBetweenVectors(bossPos, pos) < 9.0) {");
code("damagePlayerUnit(200);");
code("silenceUnit(dPlayerUnits, 1.0);");
code("p = xGetInt(dPlayerUnits, xPlayerOwner);");
code("if (xGetInt(dPlayerUnits,xUnitName) == xGetInt(dPlayerData, xPlayerUnit, p)) {");
code("if (trCurrentPlayer() == p) {");
code("trCameraShake(0.5, 0.3);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("if (trTimeMS() > bossTimeout) {");
code("bossAnim = false;");
code("trSetLighting(\"dawn\", 1.0);");
code("trQuestVarSet(\"bossUltimate\", 3);");
code("trSoundPlayFN(\"godpowerfailed.wav\",\"1\",-1,\"\",\"\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("for(x=trQuestVarGet(\"bossScreamStart\"); < trQuestVarGet(\"bossScreamEnd\")) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+x);");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("}");
code("xSetBool(dEnemies, xLaunched, false, bossPointer);");
code("bossAnim = false;");
code("trModifyProtounit(\"Shade of Hades\", ENEMY_PLAYER, 55, 4);");
code("bossCooldown(12, 20);");
code("}");
code("}");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") > 10) {");
code("if (trQuestVarGet(\"bossSpell\") == 11) {");
code("trQuestVarSet(\"bossSpell\", 12);");
code("bossCount = 3;");
code("bossAnim = true;");
code("} else if (trQuestVarGet(\"bossSpell\") == 12) {");
code("if (trTimeMS() > bossNext) {");
code("trSoundPlayFN(\"shadeofhadesacknowledge2.wav\",\"1\",-1,\"\",\"\");");
code("bossPos = kbGetBlockPosition(\"\"+bossUnit, true);");
code("trQuestVarSetFromRand(\"rand\", 1, xGetDatabaseCount(dPlayerCharacters), true);");
code("for(x=trQuestVarGet(\"rand\"); >0) {");
code("xDatabaseNext(dPlayerCharacters);");
code("}");
code("bossTargetPos = vectorSnapToGrid(kbGetBlockPosition(\"\"+xGetInt(dPlayerCharacters,xUnitName),true));");
code("dir = getUnitVector(bossPos, bossTargetPos);");
code("bossDir = vector(0,0,0) - dir;");
code("bossPos = bossTargetPos + (dir * 2.0);");
code("action = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(bossPos),0,xsVectorGetZ(bossPos),0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(ENEMY_PLAYER);");
code("trUnitChangeProtoUnit(\"Transport Ship Greek\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trImmediateUnitGarrison(\"\"+action);");
code("trUnitChangeProtoUnit(\"Shade of Hades\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Shade of Hades\"));");
code("trSetSelectedScale(bossScale,bossScale,bossScale);");
code("trUnitOverrideAnimation(1,0,false,false,-1);");
code("trSetUnitOrientation(bossDir,vector(0,1,0),true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+action, true);");
code("trUnitChangeProtoUnit(\"Kronny Birth SFX\");");
code("trVectorQuestVarSet(\"slashDir\", xsVectorSet(0.0 - xsVectorGetZ(dir),0,xsVectorGetX(dir)));");
code("trQuestVarSet(\"bossSlash\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\", \"Dwarf\",1,xsVectorGetX(bossTargetPos),0,xsVectorGetZ(bossTargetPos),0,true);");
code("trArmySelect(\"1,0\");");
code("trSetUnitOrientation(trVectorQuestVarGet(\"slashDir\"),vector(0,1,0),true);");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("trQuestVarSet(\"bossSpell\", 13);");
code("bossNext = trTimeMS() + 1000;");
code("} else {");
code("trSetUnitOrientation(bossDir,vector(0,1,0),true);");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") == 13) {");
code("trSetUnitOrientation(bossDir,vector(0,1,0),true);");
code("if (trTimeMS() > bossNext) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossSlash\");");
code("trUnitChangeProtoUnit(\"Tartarian Gate Flame\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossSlash\");");
code("trSetSelectedScale(1,1,2);");
code("dir = trVectorQuestVarGet(\"slashDir\");");
code("bossTargetPos = bossTargetPos - (dir * 4.0);");
code("for(x=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("xUnitSelectByID(dPlayerUnits, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (rayCollision(dPlayerUnits, bossTargetPos, dir, 8.0, 2)) {");
code("damagePlayerUnit(500);");
code("}");
code("}");
code("bossNext = bossNext + 1000;");
code("bossCount = bossCount - 1;");
code("if (bossCount <= 0) {");
code("trQuestVarSet(\"bossSpell\", 14);");
code("} else {");
code("trQuestVarSet(\"bossSpell\", 12);");
code("}");
code("} else {");
code("trSetUnitOrientation(bossDir,vector(0,1,0),true);");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") == 14) {");
code("if (trTimeMS() > bossNext) {");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("bossCooldown(10, 16);");
code("bossAnim = false;");
code("}");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") > 0) {");
code("if (trQuestVarGet(\"bossSpell\") == 1) {");
code("trSoundPlayFN(\"shadeofhadesselect2.wav\",\"1\",-1,\"\",\"\");");
code("xSetBool(dEnemies, xLaunched, true, bossPointer);");
code("trQuestVarSetFromRand(\"rand\", 1, xGetDatabaseCount(dPlayerCharacters), true);");
code("for(x=trQuestVarGet(\"rand\"); >0) {");
code("xDatabaseNext(dPlayerCharacters);");
code("}");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dPlayerCharacters, xUnitName), true);");
code("bossPos = kbGetBlockPosition(\"\"+bossUnit, true);");
code("bossDir = getUnitVector(bossPos, pos);");
code("dir = vector(0,0,0) - bossDir;");
code("bossAnim = true;");
code("trSetUnitOrientation(bossDir,vector(0,1,0),true);");
code("trMutateSelected(kbGetProtoUnitID(\"Transport Ship Greek\"));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossWarn1\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Dwarf\"));");
code("trImmediateUnitGarrison(\"\"+1*bossUnit);");
code("trUnitChangeProtoUnit(\"Dwarf\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Shade of Hades\"));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossWarn1\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Petosuchus Projectile\"));");
code("trSetUnitOrientation(dir,vector(0,1,0),true);");
code("trSetSelectedScale(3,0,60);");
code("trQuestVarSet(\"bossSpell\", 2);");
code("bossNext = trTimeMS() + 1000;");
code("} else if (trQuestVarGet(\"bossSpell\") == 2) {");
code("if (trTimeMS() > bossNext) {");
code("trSoundPlayFN(\"shadeofhadesacknowledge1.wav\",\"1\",-1,\"\",\"\");");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"bossEscape\"));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossWarn1\", true);");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("addGenericProj(dShadeCloud,bossPos,bossDir);");
code("xSetVector(dShadeCloud, xProjPrev, bossPos);");
code("trQuestVarSet(\"bossSpell\", 3);");
code("bossNext = trTimeMS() + 7000;");
code("xClearDatabase(dSplatterUnits);");
code("for(x=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("xAddDatabaseBlock(dSplatterUnits, true);");
code("xSetInt(dSplatterUnits, xUnitName, xGetInt(dPlayerUnits, xUnitName));");
code("xSetInt(dSplatterUnits, xDatabaseIndex, xGetPointer(dPlayerUnits));");
code("}");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") == 3) {");
code("action = processGenericProj(dShadeCloud);");
code("if (action == PROJ_FALLING) {");
code("bossPos = kbGetBlockPosition(\"\"+xGetInt(dShadeCloud, xUnitName));");
code("prev = xGetVector(dShadeCloud, xProjPrev);");
code("dir = xGetVector(dShadeCloud, xProjDir);");
code("pos = bossPos + (dir * 2.0);");
code("if (terrainIsType(vectorToGrid(pos), TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("dir = getBounceDir(pos, vectorToGrid(pos), dir);");
code("xSetVector(dShadeCloud, xProjDir, dir);");
code("xSetInt(dShadeCloud, xProjYeehaw, 99);");
code("dir = rotationMatrix(wallNormalVector(vectorToGrid(pos)),0, -1.0);");
code("for(x=7; >0) {");
code("addGenericProj(dShadeBolts,prev,dir);");
code("xSetVector(dShadeBolts, xProjPrev, prev);");
code("dir = rotationMatrix(dir, 0.866025, 0.5);");
code("}");

code("xClearDatabase(dSplatterUnits);");
code("for(x=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("xAddDatabaseBlock(dSplatterUnits, true);");
code("xSetInt(dSplatterUnits, xUnitName, xGetInt(dPlayerUnits, xUnitName));");
code("xSetInt(dSplatterUnits, xDatabaseIndex, xGetPointer(dPlayerUnits));");
code("}");

code("trSoundPlayFN(\"buildingdeath.wav\",\"1\",-1,\"\",\"\");");
code("trCameraShake(0.5, 0.3);");

code("if (terrainIsType(vectorToGrid(bossPos), TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("bossNext = trTimeMS();");
code("debugLog(\"Whoops! We entered the ZONE\");");
code("}");
code("} else {");
code("dist = distanceBetweenVectors(pos, prev, false);");
code("for(x=xGetDatabaseCount(dSplatterUnits); >0) {");
code("xDatabaseNext(dSplatterUnits);");
code("xUnitSelect(dSplatterUnits, xUnitName);");
code("if (trUnitAlive() == false) {");
code("xFreeDatabaseBlock(dSplatterUnits);");
code("} else if (rayCollision(dSplatterUnits, prev, dir, dist + 1.0, 4.0)) {");
code("damagePlayerUnit(500, xGetInt(dSplatterUnits, xDatabaseIndex));");
code("trQuestVarSetFromRand(\"splatterSound\", 1, 2, true);");
code("xFreeDatabaseBlock(dSplatterUnits);");
code("}");
code("}");
code("if (trQuestVarGet(\"splatterSound\") > 0) {");
code("trSoundPlayFN(\"titanpunch\"+1*trQuestVarGet(\"splatterSound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSet(\"splatterSound\", 0);");
code("}");
code("xSetVector(dShadeCloud, xProjPrev, bossPos);");
code("}");
code("}");
code("if (action == PROJ_REMOVE || trTimeMS() > bossNext) {");
code("if (action != PROJ_REMOVE) {");
code("bossPos = xGetVector(dShadeCloud, xProjPrev);");
code("xUnitSelectByID(dShadeCloud, xUnitID);");
code("trUnitChangeProtoUnit(\"Kronny Birth SFX\");");
code("xFreeDatabaseBlock(dShadeCloud);");
code("}");
code("action = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(bossPos),0,xsVectorGetZ(bossPos),0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(ENEMY_PLAYER);");
code("trSetUnitOrientation(dir,vector(0,1,0),true);");
code("trUnitChangeProtoUnit(\"Transport Ship Greek\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trUnitChangeProtoUnit(\"Shade of Hades\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trImmediateUnitGarrison(\"\"+action);");
code("trUnitChangeProtoUnit(\"Shade of Hades\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Shade of Hades\"));");
code("trSetSelectedScale(bossScale, bossScale, bossScale);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+action, true);");
code("trUnitChangeProtoUnit(\"Kronny Birth SFX\");");
code("bossCooldown(10, 15);");
code("xSetBool(dEnemies, xLaunched, false, bossPointer);");
code("}");
code("}");
code("} else if (xGetInt(dEnemies, xStunStatus, bossPointer) == 0) {");
code("trQuestVarSetFromRand(\"bossSpell\", 0, xsMin(2, trUnitPercentDamaged() * 0.05), true);");
code("trQuestVarSet(\"bossSpell\", trQuestVarGet(\"bossSpell\") * 10 + 1);");
code("if (trQuestVarGet(\"bossSpell\") == 21 && trQuestVarGet(\"bossUltimate\") > 0) {");
code("trQuestVarSetFromRand(\"bossSpell\", 0, 1, true);");
code("trQuestVarSet(\"bossSpell\", 1 + 10 * trQuestVarGet(\"bossSpell\"));");
code("}");
code("}");
code("} else {");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("xsDisableSelf();");
code("trMusicStop();");
code("boss = 0;");
code("trSetLighting(\"default\", 1.0);");
code("trSoundPlayFN(\"win.wav\",\"1\",-1,\"\",\"\");");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("trDamageUnitPercent(100);");
code("}");
code("uiLookAtUnitByName(\"\"+bossUnit);");
code("xsEnableRule(\"boss_ded\");");
code("xsDisableRule(\"gameplay_always\");");
code("}");
code("}");

code("int dBossLasers = 0;");
code("int xBossLaserNext = 0;");
code("int xBossLaserStep = 0;");
code("int xBossLaserPos = 0;");

code("int dDeployRobots = 0;");

code("rule boss6_init");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > trQuestVarGet(\"cinTime\")) {");
code("vector pos = vector(0,0,0);");
code("switch(1*trQuestVarGet(\"cinStep\"))");
code("{");
code("case 0:");
code("{");
code("if (trQuestVarGet(\"yeebBossFight\") == 1) {");
code("dYeebObelisks = xInitDatabase(\"yeebObelisks\");");
code("xInitAddInt(dYeebObelisks, \"name\");");
code("xAddDatabaseBlock(1*trQuestVarGet(\"yeebRelics\"), true);");
code("xSetInt(1*trQuestVarGet(\"yeebRelics\"), xUnitName, 1*trQuestVarGet(\"yeebRelic\"));");
code("trQuestVarSet(\"cinTime\", trTime() + 6);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"yeebRelic\", true);");
code("for(p=1; < ENEMY_PLAYER) {");
code("if (trUnitIsOwnedBy(p)) {");
code("trSoundPlayFN(\"\",\"1\",-1,");
code("\"Yeebaagooon:\" + trStringQuestVarGet(\"p\"+p+\"name\") + \". Did you really think I wouldn't notice you stealing my relic?\",");
code("\"icons\special e son of osiris icon 64\");");
code("break;");
code("}");
code("}");
code("trQuestVarSet(\"cinStep\", 1);");
code("} else {");
code("dBossLasers = xInitDatabase(\"bossLasers\");");
code("xInitAddInt(dBossLasers, \"name\");");
code("xBossLaserNext = xInitAddInt(dBossLasers, \"next\");");
code("xBossLaserStep = xInitAddInt(dBossLasers, \"step\",1);");
code("xBossLaserPos = xInitAddVector(dBossLasers, \"pos\");");

code("dDeployRobots = initGenericProj(\"deployRobots\",kbGetProtoUnitID(\"Statue of Automaton Base\"),2,10.0,3.0,1,ENEMY_PLAYER);");

code("dSplatterUnits = xInitDatabase(\"splatterUnits\");");
code("xInitAddInt(dSplatterUnits, \"name\");");
code("xInitAddInt(dSplatterUnits, \"index\");");

code("trOverlayText(\"The Exterminator\", 3.0, -1, -1, -1);");
code("trQuestVarSet(\"cinTime\", trTime() + 2);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trUnitConvert(ENEMY_PLAYER);");
code("trSetSelectedScale(bossScale,bossScale,bossScale);");
code("spyEffect(bossUnit, kbGetProtoUnitID(\"Helepolis\"), xsVectorSet(ARRAYS,bossInts,0));");
code("spyEffect(bossUnit, kbGetProtoUnitID(\"Barracks Atlantean\"), xsVectorSet(ARRAYS,bossInts,1));");
code("xSetBool(dEnemies, xLaunched, true, bossPointer);");

code("trQuestVarSet(\"bossTurretObject\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,1,0,1,0,true);");
code("trQuestVarSet(\"bossTurret\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,1,0,1,0,true);");

code("trQuestVarSet(\"bossBarrelObject\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,1,0,1,0,true);");
code("trQuestVarSet(\"bossBarrel\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,1,0,1,0,true);");

code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossBarrel\", true);");
code("trUnitConvert(ENEMY_PLAYER);");
code("trMutateSelected(kbGetProtoUnitID(\"Hero Greek Achilles\"));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossTurret\", true);");
code("trUnitConvert(ENEMY_PLAYER);");
code("trMutateSelected(kbGetProtoUnitID(\"Hero Greek Achilles\"));");

code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossTurretObject\", true);");
code("trUnitConvert(ENEMY_PLAYER);");
code("trMutateSelected(kbGetProtoUnitID(\"Relic\"));");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"bossTurret\"));");
code("trMutateSelected(kbGetProtoUnitID(\"Fire Siphon\"));");

code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossBarrelObject\", true);");
code("trUnitConvert(ENEMY_PLAYER);");
code("trMutateSelected(kbGetProtoUnitID(\"Relic\"));");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"bossBarrel\"));");
code("trMutateSelected(kbGetProtoUnitID(\"Torch\"));");
code("trUnitSetAnimationPath(\"1,0,0,0,0,0,0\");");
code("trSetSelectedScale(1.5, 1.0, 1.5);");


code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossBarrel\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Wadjet Spit\"));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossTurret\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Wadjet Spit\"));");

code("trQuestVarSet(\"volcano1\", trGetNextUnitScenarioNameNumber());");
code("trQuestVarSet(\"volcano2\", 1 + trQuestVarGet(\"volcano1\"));");
code("pos = trVectorQuestVarGet(\"bossRoomCenter\");");
code("trArmyDispatch(\"1,0\",\"Dwarf\",2,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(ENEMY_PLAYER);");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("}");
code("}");
code("case 1:");
code("{");
code("bossCooldown(10, 15);");
code("trSetLighting(\"anatolia\",0.1);");
code("addSpecialToDatabase(dBallistas,bossUnit,dEnemies,ENEMY_PLAYER);");
code("trLetterBox(false);");
code("trUIFadeToColor(0,0,0,1000,0,false);");
code("xsDisableSelf();");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+aiPlanGetUserVariableInt(ARRAYS,bossInts,0));");
code("trSetSelectedScale(1.2,0.25,2.0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+aiPlanGetUserVariableInt(ARRAYS,bossInts,1));");
code("trSetSelectedScale(0.7,0.5,0.5);");
code("xsEnableRule(\"boss6_battle\");");
code("trQuestVarSet(\"bossGem\", MANASTONE);");
code("trQuestVarSetFromRand(\"bossGemCount\", 3, 4, true);");
code("xsEnableRule(\"boss_music\");");

code("trModifyProtounit(\"Helepolis\", ENEMY_PLAYER, 27, 20);");
code("}");
code("case 2:");
code("{");
code("trQuestVarSet(\"cinTime\", trTime() + 6);");
code("trSoundPlayFN(\"\",\"1\",-1,\"Yeebaagooon: I'll be taking back what's mine now... along with your LIFE!\",");
code("\"icons\special e son of osiris icon 64\");");
code("bossScale = 1;");
code("trQuestVarSet(\"yeebaagooon\", bossUnit);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trUnitChangeProtoUnit(\"Pharaoh of Osiris XP\");");
code("xSetPointer(dEnemies, bossPointer);");
code("xSetBool(dEnemies, xLaunched, true);");
code("xSetFloat(dEnemies, xPhysicalResist, 0.47);");
code("xSetFloat(dEnemies, xMagicResist, 0.47);");

code("spyEffect(1*trQuestVarGet(\"yeebaagooon\"),");
code("kbGetProtoUnitID(\"Cinematic Block\"), xsVectorSet(ARRAYS,bossInts,yeebShieldSFX));");

code("pos = xsVectorSet(trQuestVarGet(\"bossRoomSize\"),0,trQuestVarGet(\"bossRoomSize\"));");
code("trVectorQuestVarSet(\"bossRoomUpper\", trVectorQuestVarGet(\"bossRoomCenter\") + pos);");
code("trVectorQuestVarSet(\"bossRoomLower\", trVectorQuestVarGet(\"bossRoomCenter\") - pos);");

code("trQuestVarSet(\"yeebNextInvulnerabilityPhase\", 30);");

code("trVectorQuestVarSet(\"yeebPos\", trVectorQuestVarGet(\"bossRoomCenter\"));");

code("trOverlayText(\"Yeebaagooon\",3.0,-1,-1,-1);");

code("trQuestVarSet(\"lightningBolts\", trGetNextUnitScenarioNameNumber());");
code("}");
code("case 3:");
code("{");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trUnitConvert(ENEMY_PLAYER);");
code("xsEnableRule(\"yeebaagooon_battle\");");
code("xsEnableRule(\"boss_stun_recovery\");");
code("bossCooldown(10, 12);");

code("trUIFadeToColor(0,0,0,1000,0,false);");
code("trLetterBox(false);");
code("xsEnableRule(\"boss_music\");");
code("trQuestVarSet(\"cinTime\", trTime() + 3);");
code("}");
code("case 4:");
code("{");
code("trMessageSetText(\"Yeebaagooon's spells will drain your favor if they hit you.\", -1);");
code("xsDisableSelf();");
code("}");
code("}");
code("trQuestVarSet(\"cinStep\", 1 + trQuestVarGet(\"cinStep\"));");
code("}");
code("}");


code("rule boss6_battle");
code("inactive");
code("highFrequency");
code("{");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("int p = 0;");
code("int x = 0;");
code("int action = 0;");
code("int id = 0;");
code("float amt = 0;");
code("float angle = 0;");
code("bool hit = false;");
code("vector pos = vector(0,0,0);");
code("vector prev = vector(0,0,0);");
code("vector dir = vector(0,0,0);");
code("if (trUnitAlive() == true) {");
code("if (xGetDatabaseCount(dBossLasers) > 0) {");
code("xDatabaseNext(dBossLasers);");
code("if (trTimeMS() > xGetInt(dBossLasers, xBossLaserNext)) {");
code("switch(xGetInt(dBossLasers, xBossLaserStep))");
code("{");
code("case 1:");
code("{");
code("xSetInt(dBossLasers, xBossLaserStep, 2);");
code("for(x=0; < 4) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+(x+xGetInt(dBossLasers, xUnitName)), true);");
code("trSetSelectedScale(6,6,60);");
code("trUnitHighlight(3, false);");
code("}");
code("pos = xGetVector(dBossLasers, xBossLaserPos);");
code("for(x=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("xUnitSelectByID(dPlayerUnits, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else {");
code("prev = kbGetBlockPosition(\"\"+xGetInt(dPlayerUnits, xUnitName), true);");
code("if (xsAbs(xsVectorGetX(prev) - xsVectorGetX(pos)) < 1.0 ||");
code("xsAbs(xsVectorGetZ(prev) - xsVectorGetZ(pos)) < 1.0) {");
code("damagePlayerUnit(300);");
code("}");
code("}");
code("}");
code("trSoundPlayFN(\"sky passage.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"phoenixattack.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("case 2:");
code("{");
code("amt = 500 - trTimeMS() + xGetInt(dBossLasers, xBossLaserNext);");
code("if (amt > 0) {");
code("amt = amt * 0.012;");
code("for(x=0; < 4) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+(x+xGetInt(dBossLasers, xUnitName)), true);");
code("trSetSelectedScale(amt,amt,60);");
code("}");
code("} else {");
code("for(x=0; < 4) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+(x+xGetInt(dBossLasers, xUnitName)), true);");
code("trUnitDestroy();");
code("}");
code("xFreeDatabaseBlock(dBossLasers);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("if (xGetDatabaseCount(dDeployRobots) > 0) {");
code("if (processGenericProj(dDeployRobots) == PROJ_GROUND) {");
code("trDamageUnitPercent(-100);");
code("trUnitChangeProtoUnit(trStringQuestVarGet(\"enemyProto\"+1*trQuestVarGet(\"bossSummonProto\")));");
code("xUnitSelectByID(dDeployRobots, xUnitID);");
code("trDamageUnitPercent(-100);");
code("if (terrainIsType(vectorToGrid(kbGetBlockPosition(\"\"+xGetInt(dDeployRobots, xUnitName), true)),");
code("TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("trUnitChangeProtoUnit(\"Dust Large\");");
code("} else {");
code("activateEnemy(xGetInt(dDeployRobots, xUnitName),-1,0);");
code("}");
code("xFreeDatabaseBlock(dDeployRobots);");
code("}");
code("}");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("if (trQuestVarGet(\"bossSpell\") == BOSS_SPELL_COOLDOWN) {");
code("processBossCooldown();");
code("} else if (trQuestVarGet(\"bossSpell\") > 30) {");
code("trMutateSelected(kbGetProtoUnitID(\"Helepolis\"));");
code("if (trQuestVarGet(\"bossSpell\") == 31) {");
code("trStringQuestVarSet(\"advice\", \"Having trouble dodging the Extinction Cannon? Try equipping speed relics!\");");
code("trSetLighting(\"night\", 1.0);");
code("trSoundPlayFN(\"cinematics\15_in\gong.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"godpower.wav\",\"1\",-1,\"\",\"\");");
code("trOverlayText(\"Extinction Cannon\",3.0,-1,-1,-1);");
code("trQuestVarSet(\"bossSpell\", 32);");
code("bossCount = 10;");
code("bossPos = kbGetBlockPosition(\"\"+bossUnit, true);");
code("bossDir = vectorSetFromAngle(bossAngle);");

code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossTurret\", true);");
code("trUnitSetStance(\"Aggressive\");");
code("trUnitTeleport(xsVectorGetX(bossPos),worldHeight+2.0,xsVectorGetZ(bossPos));");
code("trSetUnitOrientation(bossDir,vector(0,1,0),true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossBarrel\", true);");
code("trUnitSetStance(\"Aggressive\");");
code("trUnitTeleport(xsVectorGetX(bossPos),worldHeight+3.5,xsVectorGetZ(bossPos));");
code("trSetUnitOrientation(vector(0,1,0),bossDir,true);");
code("} else if (trQuestVarGet(\"bossSpell\") == 32) {");
code("pos = kbGetBlockPosition(\"\"+1*trQuestVarGet(\"bossTurret\"));");
code("if (distanceBetweenVectors(pos, bossPos) < 1.0) {");
code("trQuestVarSet(\"bossSpell\", 33);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossTurret\", true);");
code("trUnitSetStance(\"Passive\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossBarrel\", true);");
code("trUnitSetStance(\"Passive\");");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") == 33) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossBarrelObject\", true);");
code("if (trTimeMS() > bossNext) {");
code("if (bossCount > 0) {");
code("trSetSelectedScale(1.5,1.0,1.5);");
code("bossDir = vectorSetFromAngle(bossAngle);");
code("trQuestVarSetFromRand(\"rand\", 1, xGetDatabaseCount(dPlayerCharacters), true);");
code("for(x=trQuestVarGet(\"rand\"); >0) {");
code("xDatabaseNext(dPlayerCharacters);");
code("xUnitSelectByID(dPlayerCharacters, xUnitID);");
code("if (trUnitAlive()) {");
code("trUnitHighlight(2.5, true);");
code("break;");
code("}");
code("}");
code("bossTarget = xGetInt(dPlayerCharacters, xUnitName);");
code("pos = kbGetBlockPosition(\"\"+bossTarget, true);");
code("bossPrev = bossDir;");
code("bossTargetPos = getUnitVector(bossPos, pos);");
code("dir = rotationMatrix(bossDir,0,1.0);");
code("if (dotProduct(dir, bossTargetPos) > dotProduct(rotationMatrix(bossDir,0,-1.0), bossTargetPos)) {");
code("trQuestVarSet(\"bossTurnDir\", -1.0);");
code("} else {");
code("trQuestVarSet(\"bossTurnDir\", 1.0);");
code("}");
code("bossNext = trTimeMS() + 3000;");
code("trQuestVarSet(\"bossLast\", trTimeMS());");
code("trQuestVarSet(\"bossSpell\", 34);");
code("trSoundPlayFN(\"automatonspcbirth.wav\",\"1\",-1,\"\",\"\");");
code("} else {");
code("bossCooldown(10, 20);");
code("trQuestVarSet(\"bossUltimate\", 3);");
code("trSoundPlayFN(\"godpowerfailed.wav\",\"1\",-1,\"\",\"\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossBarrel\", true);");
code("trUnitSetStance(\"Aggressive\");");
code("trUnitTeleport(1,0,1);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossTurret\", true);");
code("trUnitSetStance(\"Aggressive\");");
code("trUnitTeleport(1,0,1);");
code("trSetLighting(\"anatolia\",2.0);");
code("}");
code("} else {");
code("amt = bossNext - trTimeMS();");
code("amt = 1.0 - 0.0005 * amt;");
code("trSetSelectedScale(1.5,amt,1.5);");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") == 34) {");
code("amt = trTimeMS() - trQuestVarGet(\"bossLast\");");
code("trQuestVarSet(\"bossLast\", trTimeMS());");
code("angle = fModulo(6.283185, bossAngle + trQuestVarGet(\"bossTurnDir\") * amt * 0.0016);");
code("bossAngle = angle;");
code("bossDir = vectorSetFromAngle(angle);");
code("pos = kbGetBlockPosition(\"\"+bossTarget, true);");
code("if (xsVectorGetX(pos) > 0) {");
code("bossTargetPos = getUnitVector(bossPos, pos);");
code("}");
code("if (dotProduct(bossDir, bossTargetPos) < dotProduct(bossPrev, bossTargetPos) ||");
code("trTimeMS() > bossNext) {");
code("trQuestVarSet(\"bossSpell\", 35);");
code("bossNext = trTimeMS() + 1000;");
code("trSoundPlayFN(\"storehouse.wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSetFromRand(\"rand\", 1, 10, true);");
code("if (trQuestVarGet(\"rand\") == 1) {");
code("trChatSendSpoofed(ENEMY_PLAYER, \"The Exterminator: PARRY THIS YOU FILTHY CASUAL\");");
code("} else if (trQuestVarGet(\"rand\") == 2) {");
code("trChatSendSpoofed(ENEMY_PLAYER, \"The Exterminator: EXTERMINATE. EXTERMINATE.\");");
code("} else if (trQuestVarGet(\"rand\") == 3) {");
code("trChatSendSpoofed(ENEMY_PLAYER, \"The Exterminator: DEATH TO ALL HUMANS\");");
code("}");
code("} else {");
code("bossPrev = bossDir;");
code("}");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossTurret\", true);");
code("trSetUnitOrientation(bossDir,vector(0,1,0),true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossBarrel\", true);");
code("trSetUnitOrientation(vector(0,1,0),bossDir,true);");
code("} else if (trQuestVarGet(\"bossSpell\") == 35) {");
code("if (trTimeMS() > bossNext) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossBarrel\");");
code("trMutateSelected(kbGetProtoUnitID(\"Hero Greek Achilles\"));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"volcano1\", true);");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"volcano2\", true);");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"volcano1\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Volcano\"));");
code("trSetSelectedUpVector(xsVectorGetX(bossDir),-0.5,xsVectorGetZ(bossDir));");
code("trUnitOverrideAnimation(18,0,false,false,-1);");
code("trMutateSelected(kbGetProtoUnitID(\"Relic\"));");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"bossBarrel\"));");
code("trMutateSelected(kbGetProtoUnitID(\"Volcano\"));");
code("trSetSelectedScale(0,0,0);");


code("trUnitSelectClear();");
code("trUnitSelectByQV(\"volcano2\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Volcano\"));");
code("trSetSelectedUpVector(xsVectorGetX(bossDir),-0.5,xsVectorGetZ(bossDir));");
code("trUnitOverrideAnimation(18,0,false,false,-1);");
code("trMutateSelected(kbGetProtoUnitID(\"Relic\"));");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"bossBarrel\"));");
code("trMutateSelected(kbGetProtoUnitID(\"Volcano\"));");
code("trSetSelectedScale(0,0,0);");


code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossBarrel\");");
code("trMutateSelected(kbGetProtoUnitID(\"Wadjet Spit\"));");
code("bossCount = bossCount - 1;");
code("pos = bossPos;");
code("for(x=50; > 0) {");
code("pos = pos + (bossDir * 2.0);");
code("if (terrainIsType(vectorToGrid(pos), TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Meteor Impact Ground\");");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"1,0\");");
code("trMutateSelected(kbGetProtoUnitID(\"Meteor\"));");
code("break;");
code("}");
code("}");
code("for(x=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("xUnitSelectByID(dPlayerUnits,xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (rayCollision(dPlayerUnits,bossPos,bossDir,100.0,10.0) ||");
code("unitDistanceToVector(xGetInt(dPlayerUnits, xUnitName),pos) < 25.0) {");
code("damagePlayerUnit(1000);");
code("}");
code("}");
code("trSoundPlayFN(\"ui\thunder1.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"cinematics\32_out\doorbigshut.mp3\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"meteordustcloud.wav\",\"1\",-1,\"\",\"\");");
code("trCameraShake(0.7, 0.8);");
code("trQuestVarSet(\"bossSpell\", 33);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossBarrelObject\", true);");
code("trSetSelectedScale(1.5,0.25,1.5);");
code("bossNext = trTimeMS() + 1500;");
code("}");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") > 20) {");
code("if (trQuestVarGet(\"bossSpell\") == 21) {");
code("trQuestVarSetFromRand(\"rand\", 1, 3, true);");
code("if (trQuestVarGet(\"rand\") == 1) {");
code("trChatSendSpoofed(ENEMY_PLAYER, \"The Exterminator: DEPLOYING DRONES\");");
code("} else if (trQuestVarGet(\"rand\") == 2) {");
code("trChatSendSpoofed(ENEMY_PLAYER, \"The Exterminator: EXTERMINATE THE HUMANS\");");
code("}");
code("trQuestVarSetFromRand(\"bossSummonProto\", 1, 3, true);");
code("trQuestVarSetFromRand(\"rand\", 5, 5 + ENEMY_PLAYER);");
code("bossCount = trQuestVarGet(\"rand\");");
code("trQuestVarSet(\"bossSpell\", 22);");
code("bossNext = trTimeMS();");
code("trSoundPlayFN(\"catapultattack.wav\",\"1\",-1,\"\",\"\");");
code("} else if (trQuestVarGet(\"bossSpell\") == 22) {");
code("if (trTimeMS() > bossNext) {");
code("bossNext = trTimeMS() + 200;");
code("trQuestVarSetFromRand(\"rand\", 0, 6.283185, false);");
code("dir = vectorSetFromAngle(trQuestVarGet(\"rand\"));");
code("trQuestVarSetFromRand(\"speed\", 5, 12, false);");
code("bossPos = kbGetBlockPosition(\"\"+bossUnit, true);");
code("addGenericProj(dDeployRobots,bossPos,dir,ENEMY_PLAYER,trQuestVarGet(\"speed\"));");
code("bossCount = bossCount - 1;");
code("if (bossCount <= 0) {");
code("bossCooldown(10, 20);");
code("}");
code("}");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") > 10) {");
code("if (trQuestVarGet(\"bossSpell\") == 11) {");
code("trQuestVarSetFromRand(\"rand\", 1, 3, true);");
code("if (trQuestVarGet(\"rand\") == 1) {");
code("trChatSendSpoofed(ENEMY_PLAYER, \"The Exterminator: RAMMING SPEED\");");
code("} else if (trQuestVarGet(\"rand\") == 2) {");
code("trChatSendSpoofed(ENEMY_PLAYER, \"The Exterminator: THRUSTERS ENGAGED\");");
code("}");
code("trSoundPlayFN(\"siegeacknowledge.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"attackwarning.wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSet(\"bossStunIndex\", xAddDatabaseBlock(dStunnedUnits, true));");
code("xSetInt(dStunnedUnits, xUnitName, bossUnit);");
code("xSetInt(dStunnedUnits, xStunnedProto, kbGetProtoUnitID(\"Helepolis\"));");
code("xDatabaseNext(dPlayerCharacters);");
code("bossTargetPos = kbGetBlockPosition(\"\"+xGetInt(dPlayerCharacters, xUnitName), true);");

code("bossPos = kbGetBlockPosition(\"\"+bossUnit, true);");
code("bossDir = getUnitVector(bossPos, bossTargetPos);");
code("trSetUnitOrientation(bossDir,vector(0,1,0),true);");
code("pos = bossTargetPos;");
code("for(x=50; >0) {");
code("pos = pos + (bossDir * 2.0);");
code("if (terrainIsType(vectorToGrid(pos), TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("break;");
code("} else {");
code("bossTargetPos = pos;");
code("}");
code("}");
code("bossNext = trTimeMS() + 1000;");
code("trQuestVarSet(\"bossSpell\", 12);");
code("trQuestVarSet(\"bossCar\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,1,0,1,0,true);");
code("trArmySelect(\"1,0\");");
code("trImmediateUnitGarrison(\"\"+bossUnit);");
code("} else if (trQuestVarGet(\"bossSpell\") == 12) {");
code("if (trTimeMS() > bossNext) {");
code("xFreeDatabaseBlock(dStunnedUnits, 1*trQuestVarGet(\"bossStunIndex\"));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossCar\", true);");
code("trUnitConvert(ENEMY_PLAYER);");
code("trUnitChangeProtoUnit(\"Hero Greek Achilles\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossCar\", true);");
code("trSetUnitOrientation(bossDir,vector(0,1,0),true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Relic\"));");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"bossCar\"));");
code("trMutateSelected(kbGetProtoUnitID(\"Helepolis\"));");
code("trQuestVarSet(\"bossSFX\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,1,0,1,0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossSFX\");");
code("trMutateSelected(kbGetProtoUnitID(\"Meteorite\"));");
code("trUnitOverrideAnimation(6,0,true,false,-1);");
code("trMutateSelected(kbGetProtoUnitID(\"Relic\"));");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"bossCar\"));");
code("trMutateSelected(kbGetProtoUnitID(\"Meteorite\"));");

code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossCar\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Wadjet Spit\"));");
code("trUnitMoveToPoint(xsVectorGetX(bossTargetPos),0,xsVectorGetZ(bossTargetPos),-1,false);");
code("trSoundPlayFN(\"phoenixattack.wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSet(\"bossSpell\", 13);");
code("bossTimeout = trTimeMS() + 3000;");
code("xClearDatabase(dSplatterUnits);");
code("for(x=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("xAddDatabaseBlock(dSplatterUnits, true);");
code("xSetInt(dSplatterUnits, xUnitName, xGetInt(dPlayerUnits, xUnitName));");
code("xSetInt(dSplatterUnits, xDatabaseIndex, xGetPointer(dPlayerUnits));");
code("}");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") == 13) {");
code("bossPos = kbGetBlockPosition(\"\"+bossUnit, true);");
code("if (distanceBetweenVectors(bossPos, bossTargetPos) < 4 ||");
code("trTimeMS() > bossTimeout) {");
code("trUnitChangeProtoUnit(\"Helepolis\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossSFX\");");
code("trDamageUnitPercent(100);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossCar\");");
code("trUnitChangeProtoUnit(\"Meteor Impact Ground\");");
code("for(x=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("xUnitSelectByID(dPlayerUnits, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (unitDistanceToVector(xGetInt(dPlayerUnits, xUnitName), bossPos) < 16) {");
code("damagePlayerUnit(500);");
code("}");
code("}");
code("trSoundPlayFN(\"meteorbighit.wav\",\"1\",-1,\"\",\"\");");
code("trCameraShake(0.5,0.5);");

code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trSetSelectedScale(bossScale,bossScale,bossScale);");
code("bossCooldown(10, 16);");
code("} else {");
code("trQuestVarSet(\"sound\", 0);");
code("for(x=xGetDatabaseCount(dSplatterUnits); >0) {");
code("xDatabaseNext(dSplatterUnits);");
code("xUnitSelect(dSplatterUnits, xUnitName);");
code("if (trUnitAlive() == false) {");
code("xFreeDatabaseBlock(dSplatterUnits);");
code("} else if (unitDistanceToVector(xGetInt(dSplatterUnits, xUnitName), bossPos) < 25) {");
code("if (xSetPointer(dPlayerUnits, xGetInt(dSplatterUnits, xDatabaseIndex))) {");
code("trQuestVarSet(\"sound\", 1);");
code("damagePlayerUnit(500);");
code("id = xGetInt(dPlayerUnits, xUnitID);");
code("xsSetContextPlayer(xGetInt(dPlayerUnits, xPlayerOwner));");
code("action = kbUnitGetCurrentHitpoints(id);");
code("xsSetContextPlayer(0);");
code("if (action > 0) {");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dPlayerUnits, xUnitName), true);");
code("pos = pos - bossPos + bossTargetPos;");
code("launchUnit(dPlayerUnits, pos);");
code("} else {");
code("trSetSelectedUpVector(5.0*xsVectorGetX(bossDir),-0.5,5.0*xsVectorGetZ(bossDir));");
code("}");
code("}");
code("xFreeDatabaseBlock(dSplatterUnits);");
code("}");
code("}");
code("if (trQuestVarGet(\"sound\") == 1) {");
code("trQuestVarSetFromRand(\"sound\", 1, 2, true);");
code("trSoundPlayFN(\"titanpunch\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSet(\"sound\", 0);");
code("}");
code("}");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") > 0) {");
code("if (trQuestVarGet(\"bossSpell\") == 1) {");
code("trQuestVarSetFromRand(\"rand\", 1, 3, true);");
code("if (trQuestVarGet(\"rand\") == 1) {");
code("trChatSendSpoofed(ENEMY_PLAYER, \"The Exterminator: TARGET LOCKED\");");
code("} else if (trQuestVarGet(\"rand\") == 2) {");
code("trChatSendSpoofed(ENEMY_PLAYER, \"The Exterminator: ACTIVATING LASERS\");");
code("}");
code("trQuestVarSet(\"bossSpell\", 2);");
code("bossNext = trTimeMS();");
code("bossCount = 5;");
code("} else if (trQuestVarGet(\"bossSpell\") == 2) {");
code("if (trTimeMS() > bossNext) {");
code("bossNext = trTimeMS() + 1000;");
code("xDatabaseNext(dPlayerCharacters);");
code("pos = vectorSnapToGrid(kbGetBlockPosition(\"\"+xGetInt(dPlayerCharacters, xUnitName), true));");
code("action = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos)+2,180,true);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos)-2,0,false);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos)+2,0,xsVectorGetZ(pos),270,false);");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos)-2,0,xsVectorGetZ(pos),90,false);");
code("trArmySelect(\"1,0\");");
code("trUnitSetStance(\"Passive\");");
code("trMutateSelected(kbGetProtoUnitID(\"Petosuchus Projectile\"));");
code("trSetSelectedScale(3,0,60);");
code("xAddDatabaseBlock(dBossLasers, true);");
code("xSetInt(dBossLasers, xUnitName, action);");
code("xSetInt(dBossLasers, xBossLaserNext, trTimeMS() + 2000);");
code("xSetVector(dBossLasers, xBossLaserPos, pos);");
code("trSoundPlayFN(\"skypassagein.wav\",\"1\",-1,\"\",\"\");");
code("bossCount = bossCount - 1;");
code("if (bossCount <= 0) {");
code("bossCooldown(9, 15);");
code("}");
code("}");
code("}");
code("} else if (xGetInt(dEnemies, xStunStatus, bossPointer) == 0) {");
code("trQuestVarSetFromRand(\"bossSpell\", 0, xsMin(3, trUnitPercentDamaged() * 0.05), true);");
code("trQuestVarSet(\"bossSpell\", trQuestVarGet(\"bossSpell\") * 10 + 1);");
code("if (trQuestVarGet(\"bossSpell\") == 31 && trQuestVarGet(\"bossUltimate\") > 0) {");
code("trQuestVarSetFromRand(\"bossSpell\", 0, 2, true);");
code("trQuestVarSet(\"bossSpell\", 1 + 10 * trQuestVarGet(\"bossSpell\"));");
code("}");
code("}");
code("} else {");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("xsDisableSelf();");
code("trMusicStop();");
code("boss = 0;");
code("trSetLighting(\"default\", 1.0);");
code("trSoundPlayFN(\"win.wav\",\"1\",-1,\"\",\"\");");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("trDamageUnitPercent(100);");
code("}");
code("uiLookAtUnitByName(\"\"+bossUnit);");
code("xsEnableRule(\"boss_ded\");");
code("xsDisableRule(\"gameplay_always\");");
code("}");
code("}");

code("rule yeebaagooon_battle");
code("inactive");
code("highFrequency");
code("{");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("int p = 0;");
code("int x = 0;");
code("int z = 0;");
code("int action = 0;");
code("int id = 0;");
code("float amt = 0;");
code("float dist = 0;");
code("float angle = 0;");
code("bool hit = false;");
code("vector pos = vector(0,0,0);");
code("vector dir = vector(0,0,0);");
code("if (trUnitAlive() == true) {");
code("if (trQuestVarGet(\"bossSpell\") == BOSS_SPELL_COOLDOWN) {");
code("processBossCooldown();");
code("if (trQuestVarGet(\"bossSpell\") == BOSS_SPELL_COOLDOWN) {");
code("if (trUnitPercentDamaged() > trQuestVarGet(\"yeebNextInvulnerabilityPhase\")) {");
code("trQuestVarSet(\"bossSpell\", 51);");
code("trQuestVarSet(\"yeebNextInvulnerabilityPhase\", trQuestVarGet(\"yeebNextInvulnerabilityPhase\") + 20);");
code("}");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") > 50) {");
code("if (trQuestVarGet(\"bossSpell\") == 51) {");
code("trQuestVarSetFromRand(\"rand\", 1, 5, true);");
code("if (trQuestVarGet(\"rand\") == 1) {");
code("trChatSendSpoofed(ENEMY_PLAYER, \"Yeebaagooon: Invincibility Shield\");");
code("} else if (trQuestVarGet(\"rand\") == 2) {");
code("trChatSendSpoofed(ENEMY_PLAYER, \"Yeebaagooon: *Yawns*\");");
code("} else if (trQuestVarGet(\"rand\") == 3) {");
code("trChatSendSpoofed(ENEMY_PLAYER, \"Yeebaagooon: You can't touch me.\");");
code("}");
code("trSoundPlayFN(\"bronzebirth.wav\",\"1\",-1,\"\",\"\");");
code("trMessageSetText(\"Destroy the obelisks to break Yeebaagooon's shield.\", -1);");
code("if (kbGetBlockID(\"\"+aiPlanGetUserVariableInt(ARRAYS,bossInts,yeebShieldSFX)) == -1) {");
code("trQuestVarSet(\"bossSpell\", 52);");
code("spyEffect(1*trQuestVarGet(\"yeebaagooon\"),");
code("kbGetProtoUnitID(\"Cinematic Block\"),xsVectorSet(ARRAYS,bossInts,yeebShieldSFX));");
code("} else {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+aiPlanGetUserVariableInt(ARRAYS,bossInts,yeebShieldSFX), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Phoenix Egg\"));");
code("trSetSelectedScale(2,2,2);");
code("trQuestVarSet(\"bossSpell\", 53);");
code("}");
code("xSetFloat(dEnemies, xPhysicalResist, 1.0, bossPointer);");
code("xSetFloat(dEnemies, xMagicResist, 1.0, bossPointer);");
code("trModifyProtounit(\"Pharaoh of Osiris XP\", ENEMY_PLAYER, 24, 1);");
code("trModifyProtounit(\"Pharaoh of Osiris XP\", ENEMY_PLAYER, 25, 1);");
code("trModifyProtounit(\"Pharaoh of Osiris XP\", ENEMY_PLAYER, 26, 1);");

code("trQuestVarSetFromRand(\"bossDirection\", 0, 1, true);");
code("bossCount = 9;");
code("bossNext = trTimeMS();");
code("pos = trVectorQuestVarGet(\"bossRoomLower\");");
code("trQuestVarSet(\"lower\", xsVectorGetX(pos) + 2);");
code("amt = trVectorQuestVarGetX(\"bossRoomUpper\") - xsVectorGetX(pos);");
code("for(x=0; <= 1) {");
code("for(z=0; <= 1) {");
code("action = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,trQuestVarGet(\"lower\") + amt * x, 0, trQuestVarGet(\"lower\") + amt * z, 0, true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+action, true);");
code("trUnitConvert(ENEMY_PLAYER);");
code("trUnitChangeProtoUnit(\"Outpost\");");
code("xAddDatabaseBlock(dYeebObelisks, true);");
code("xSetInt(dYeebObelisks, xUnitName, action);");
code("}");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") == 52) {");
code("if (trQuestVarGet(\"spyfind\") == trQuestVarGet(\"spyfound\")) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+aiPlanGetUserVariableInt(ARRAYS,bossInts,yeebShieldSFX),true);");
code("trMutateSelected(kbGetProtoUnitID(\"Phoenix Egg\"));");
code("trSetSelectedScale(2,2,2);");
code("trQuestVarSet(\"bossSpell\", 53);");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") >= 53) {");
code("xDatabaseNext(dYeebObelisks);");
code("xUnitSelect(dYeebObelisks, xUnitName);");
code("if (trUnitAlive() == false) {");
code("xFreeDatabaseBlock(dYeebObelisks);");
code("if (xGetDatabaseCount(dYeebObelisks) == 0) {");
code("bossCooldown(1, 2);");
code("xSetFloat(dEnemies, xPhysicalResist, 0.47, bossPointer);");
code("xSetFloat(dEnemies, xMagicResist, 0.47, bossPointer);");
code("trModifyProtounit(\"Pharaoh of Osiris XP\", ENEMY_PLAYER, 24, -0.53);");
code("trModifyProtounit(\"Pharaoh of Osiris XP\", ENEMY_PLAYER, 25, -0.53);");
code("trModifyProtounit(\"Pharaoh of Osiris XP\", ENEMY_PLAYER, 26, -0.53);");
code("}");
code("}");
code("if (trTimeMS() > bossNext) {");
code("if (trQuestVarGet(\"bossSpell\") == 53) {");
code("bossNext = bossNext + 1000;");
code("for(x=xGetDatabaseCount(dPlayerCharacters); >0) {");
code("xDatabaseNext(dPlayerCharacters);");
code("xUnitSelectByID(dPlayerCharacters, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerCharacter();");
code("} else {");
code("pos = vectorSnapToGrid(kbGetBlockPosition(\"\"+xGetInt(dPlayerCharacters, xUnitName), true));");
code("spawnLightning(pos, ENEMY_PLAYER);");
code("}");
code("}");
code("bossCount = bossCount - 1;");
code("if (bossCount == 0) {");
code("trQuestVarSet(\"bossSpell\", 54);");
code("trQuestVarSet(\"bossDirection\", 1 - trQuestVarGet(\"bossDirection\"));");
code("pos = trVectorQuestVarGet(\"bossRoomUpper\");");
code("trQuestVarSet(\"lightningLineCount\", (xsVectorGetX(pos) - trVectorQuestVarGetX(\"bossRoomLower\")) / 4);");
code("trVectorQuestVarSet(\"lightningLineStart\", pos - vector(1.0,0,1.0));");
code("if (trQuestVarGet(\"bossDirection\") == 1) {");
code("trVectorQuestVarSet(\"lineDir\", vector(-4,0,0));");
code("trVectorQuestVarSet(\"lineMove\", vector(0,0,-2));");
code("} else if (trQuestVarGet(\"bossDirection\") == 0) {");
code("trVectorQuestVarSet(\"lineDir\", vector(0,0,-4));");
code("trVectorQuestVarSet(\"lineMove\", vector(-2,0,0));");
code("}");
code("}");
code("} else {");
code("while(trTimeMS() > bossNext) {");
code("bossNext = trTimeMS() + 100;");
code("pos = trVectorQuestVarGet(\"lightningLineStart\");");
code("for(x=trQuestVarGet(\"lightningLineCount\"); >0) {");
code("spawnLightning(pos, ENEMY_PLAYER);");
code("pos = pos + trVectorQuestVarGet(\"lineDir\");");
code("}");
code("trVectorQuestVarSet(\"lightningLineStart\", trVectorQuestVarGet(\"lightningLineStart\") + trVectorQuestVarGet(\"lineMove\"));");
code("if (terrainIsType(vectorToGrid(trVectorQuestVarGet(\"lightningLineStart\")), TERRAIN_WALL, TERRAIN_SUB_WALL)) {");
code("trQuestVarSet(\"bossSpell\", 53);");
code("bossCount = 10;");
code("break;");
code("}");
code("}");
code("}");
code("}");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") > 30) {");
code("if (trQuestVarGet(\"bossSpell\") == 31) {");
code("trSoundPlayFN(\"cinematics\15_in\gong.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"godpower.wav\",\"1\",-1,\"\",\"\");");
code("trOverlayText(\"The Banhammer\", 3.0, -1, -1, -1);");
code("trSetLighting(\"night\", 1.0);");
code("trSoundPlayFN(\"meteorapproach.wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSet(\"bossSpell\", 32);");
code("bossNext = trTimeMS() + 3000;");
code("xDatabaseNext(dPlayerCharacters);");
code("trVectorQuestVarSet(\"hammerPos\", kbGetBlockPosition(\"\"+xGetInt(dPlayerCharacters, xUnitName), true));");
code("dir = vector(0,0,-16);");
code("trQuestVarSet(\"heading\", 360);");
code("trQuestVarSet(\"hammerIndicatorsStart\", trGetNextUnitScenarioNameNumber());");
code("for(x=8; >0) {");
code("pos = trVectorQuestVarGet(\"hammerPos\") + dir;");
code("if (terrainIsType(vectorToGrid(pos), TERRAIN_WALL, TERRAIN_SUB_WALL) == false) {");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),trQuestVarGet(\"heading\"),true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"UI Range Indicator Egypt SFX\");");
code("}");
code("trQuestVarSet(\"heading\", trQuestVarGet(\"heading\") - 45);");
code("dir = rotationMatrix(dir, 0.707107, 0.707107);");
code("}");
code("trQuestVarSet(\"hammerIndicatorsEnd\", trGetNextUnitScenarioNameNumber());");
code("} else if (trQuestVarGet(\"bossSpell\") == 32) {");
code("if (trTimeMS() > bossNext) {");
code("trQuestVarSet(\"bossSpell\", 33);");
code("zSetProtoUnitStat(\"Kronny Flying\", 0, 1, 0.001);");
code("pos = trVectorQuestVarGet(\"hammerPos\");");
code("trQuestVarSet(\"hammerObject\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Kronny Flying\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"hammerObject\", true);");
code("trUnitConvert(0);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"hammerObject\", true);");
code("trSetSelectedScale(0,15,0);");
code("trDamageUnitPercent(100);");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") == 33) {");
code("trQuestVarSet(\"bossSpell\", 34);");
code("} else if (trQuestVarGet(\"bossSpell\") == 34) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"hammerObject\", true);");
code("if (trUnitDead()) {");
code("bossNext = trTimeMS() + 1000;");
code("trQuestVarSet(\"bossSpell\", 35);");
code("trMutateSelected(kbGetProtoUnitID(\"Thor Hammer\"));");
code("trSetSelectedScale(2,-2,2);");
code("trUnitOverrideAnimation(2,0,true,false,-1);");
code("trUnitSetAnimationPath(\"0,0,0,0,0,0,0\");");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") == 35) {");
code("if (trTimeMS() > bossNext) {");
code("trQuestVarSet(\"bossSpell\", 36);");
code("bossCount = 0;");
code("trQuestVarSet(\"bossRadius\", 0);");
code("trSoundPlayFN(\"meteordustcloud.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"cinematics\35_out\strike.mp3\",\"1\",-1,\"\",\"\");");
code("trCameraShake(1.0, 0.5);");
code("bossDir = vector(1,0,0);");
code("for(x=trQuestVarGet(\"hammerIndicatorsStart\"); < trQuestVarGet(\"hammerIndicatorsEnd\")) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+x, true);");
code("trUnitDestroy();");
code("}");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") == 36) {");
code("if (trTimeMS() > bossNext) {");
code("bossNext = trTimeMS() + 200;");
code("bossCount = 1 + bossCount;");
code("angle = 3.141592 / bossCount;");
code("trQuestVarSet(\"cos\", xsCos(angle));");
code("trQuestVarSet(\"sin\", xsSin(angle));");
code("for(x=bossCount*2; >0) {");
code("bossDir = rotationMatrix(bossDir, trQuestVarGet(\"cos\"), trQuestVarGet(\"sin\"));");
code("pos = trVectorQuestVarGet(\"hammerPos\") + (bossDir * trQuestVarGet(\"bossRadius\"));");
code("trArmyDispatch(\"1,0\",\"Meteor Impact Ground\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("}");
code("trQuestVarSet(\"bossRadius\", trQuestVarGet(\"bossRadius\") + 4);");
code("dist = xsPow(trQuestVarGet(\"bossRadius\"), 2);");
code("pos = trVectorQuestVarGet(\"hammerPos\");");
code("for(x=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("xUnitSelectByID(dPlayerUnits, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (unitDistanceToVector(xGetInt(dPlayerUnits, xUnitName), pos) < dist) {");
code("damagePlayerUnit(999);");
code("}");
code("}");

code("if (boss > 999) {");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (unitDistanceToVector(xGetInt(dEnemies, xUnitName), pos) < dist) {");
code("damageEnemy(0, 999);");
code("damageEnemy(0, 999, false);");
code("}");
code("}");
code("}");

code("if (bossCount == 4) {");
code("trSetLighting(\"anatolia\", 1.0);");
code("bossCooldown(12, 16);");
code("trQuestVarSet(\"bossUltimate\", 3);");
code("}");
code("}");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") > 20) {");
code("if (trQuestVarGet(\"bossSpell\") == 21) {");
code("trQuestVarSetFromRand(\"rand\", 1, 5, true);");
code("if (trQuestVarGet(\"rand\") == 1) {");
code("trChatSendSpoofed(ENEMY_PLAYER, \"Yeebaagooon: Shockwave\");");
code("} else if (trQuestVarGet(\"rand\") == 2) {");
code("trChatSendSpoofed(ENEMY_PLAYER, \"Yeebaagooon: Don't be shocked about this one.\");");
code("} else if (trQuestVarGet(\"rand\") == 3) {");
code("trChatSendSpoofed(ENEMY_PLAYER, \"Yeebaagooon: Lightning has many interesting properities.\");");
code("}");
code("pos = kbGetBlockPosition(\"\"+1*trQuestVarGet(\"yeebaagooon\"),true);");
code("trQuestVarSetFromRand(\"rand\", 0, 3.14, false);");
code("dir = vectorSetFromAngle(trQuestVarGet(\"rand\"));");
code("for(x=8; >0) {");
code("addGenericProj(dYeebLightningBalls,pos,dir,ENEMY_PLAYER);");
code("xSetVector(dYeebLightningBalls, xProjPrev, pos);");
code("xSetInt(dYeebLightningBalls, xProjDist, 3);");
code("dir = rotationMatrix(dir, 0.707107, 0.707107);");
code("}");
code("bossCooldown(6, 12);");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") > 10) {");
code("if (trQuestVarGet(\"bossSpell\") == 11) {");
code("trQuestVarSetFromRand(\"rand\", 1, 5, true);");
code("if (trQuestVarGet(\"rand\") == 1) {");
code("trChatSendSpoofed(ENEMY_PLAYER, \"Yeebaagooon: Lightning Cage\");");
code("} else if (trQuestVarGet(\"rand\") == 2) {");
code("trChatSendSpoofed(ENEMY_PLAYER, \"Yeebaagooon: Time to die~\");");
code("} else if (trQuestVarGet(\"rand\") == 3) {");
code("trChatSendSpoofed(ENEMY_PLAYER, \"Yeebaagooon: Can you escape this?\");");
code("}");
code("trQuestVarSetFromRand(\"rand\", 1, xGetDatabaseCount(dPlayerCharacters), true);");
code("for(x=trQuestVarGet(\"rand\"); >0) {");
code("xDatabaseNext(dPlayerCharacters);");
code("}");
code("trVectorQuestVarSet(\"cageCenter\", vectorSnapToGrid(kbGetBlockPosition(\"\"+xGetInt(dPlayerCharacters, xUnitName), true)));");
code("trQuestVarSet(\"cageCount\", 12);");
code("trQuestVarSet(\"cageRadius\", 6);");
code("trQuestVarSet(\"bossSpell\", 12);");
code("bossNext = trTimeMS();");
code("} else if (trQuestVarGet(\"bossSpell\") == 12) {");
code("if (trTimeMS() > bossNext) {");
code("bossNext = trTimeMS() + 100;");
code("dir = xsVectorSet(2 * trQuestVarGet(\"cageRadius\"), 0, 2 * (trQuestVarGet(\"cageCount\") - trQuestVarGet(\"cageRadius\")));");
code("for(x=4; >0) {");
code("pos = dir + trVectorQuestVarGet(\"cageCenter\");");
code("spawnLightning(pos, ENEMY_PLAYER);");
code("dir = rotationMatrix(dir, 0, -1.0);");
code("}");
code("trQuestVarSet(\"cageCount\", trQuestVarGet(\"cageCount\") - 1);");
code("if (trQuestVarGet(\"cageCount\") == 0) {");
code("trQuestVarSet(\"cageRadius\", trQuestVarGet(\"cageRadius\") - 1);");
code("trQuestVarSet(\"cageCount\", trQuestVarGet(\"cageRadius\") * 2);");
code("if (trQuestVarGet(\"cageRadius\") <= 0) {");
code("bossCooldown(6, 12);");
code("if (boss > 999) {");
code("pos = trVectorQuestVarGet(\"cageCenter\");");
code("trQuestVarSet(\"boat\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"boat\", true);");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Transport Ship Greek\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"yeebBird\", true);");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"boat\"));");
code("trUnitChangeProtoUnit(\"Dwarf\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"yeebBird\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Stymphalian Bird\"));");
code("trSetSelectedScale(0,0,0);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"boat\", true);");
code("trUnitChangeProtoUnit(\"Hero Birth\");");
code("}");
code("}");
code("}");
code("}");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") > 0) {");

code("if (trQuestVarGet(\"bossSpell\") == 1) {");
code("trQuestVarSetFromRand(\"rand\", 1, 5, true);");
code("if (trQuestVarGet(\"rand\") == 1) {");
code("trChatSendSpoofed(ENEMY_PLAYER, \"Yeebaagooon: Zappy Zap\");");
code("} else if (trQuestVarGet(\"rand\") == 2) {");
code("trChatSendSpoofed(ENEMY_PLAYER, \"Yeebaagooon: Relics begone!\");");
code("} else if (trQuestVarGet(\"rand\") == 3) {");
code("trChatSendSpoofed(ENEMY_PLAYER, \"Yeebaagooon: Want to see a magic trick?\");");
code("}");
code("trQuestVarSet(\"bossSpell\", 2);");
code("bossTimeout = trTimeMS() + 500;");
code("bossNext = 500;");
code("trQuestVarSet(\"zappyStart\", trQuestVarGet(\"yeebaagooon\"));");
code("z = 0;");
code("for(x=1; < ENEMY_PLAYER) {");
code("if (xGetInt(dPlayerData, xPlayerDead, x) == 0) {");
code("z = z + 1;");
code("trQuestVarSet(\"choose\"+z, x);");
code("}");
code("}");
code("trQuestVarSetFromRand(\"zappyTarget\", 1, z, true);");
code("p = trQuestVarGet(\"choose\"+1*trQuestVarGet(\"zappyTarget\"));");
code("trQuestVarSet(\"zappyTarget\", p);");
code("trQuestVarSet(\"zappyEnd\", xGetInt(dPlayerData, xPlayerUnit, p));");
code("trQuestVarSet(\"zappyIndex\", xGetPointer(dPlayerUnits));");
code("} else if (trQuestVarGet(\"bossSpell\") == 2) {");
code("if (bossTimeout - trTimeMS() < bossNext) {");
code("bossNext = bossNext - 100;");
code("dist = bossNext / 500;");
code("pos = kbGetBlockPosition(\"\"+1*trQuestVarGet(\"zappyEnd\"), true);");
code("pos = pos + (kbGetBlockPosition(\"\"+1*trQuestVarGet(\"zappyStart\"),true) - pos) * dist;");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Lightning sparks Ground\");");
code("if (bossNext <= 0) {");
code("if (boss > 999) {");
code("spawnRelicSpecific(pos, RELIC_MAGIC_DETECTOR);");
code("}");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"zappyEnd\", true);");
code("trUnitHighlight(0.2, false);");
code("damagePlayerUnit(150, 1*trQuestVarGet(\"zappyIndex\"));");
code("p = trQuestVarGet(\"zappyTarget\");");
code("action = xGetInt(dPlayerData, xPlayerClass);");
code("trUnitChangeProtoUnit(kbGetProtoUnitName(xGetInt(dClass, xClassProto, action)));");
code("trQuestVarSetFromRand(\"sound\", 1, 5, true);");
code("trSoundPlayFN(\"lightningstrike\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("gainFavor(p, -5.0);");
code("if (trCurrentPlayer() == p) {");
code("trChatSend(0, \"<color=1,1,1>Yeebaagooon has ejected all of your relics!\");");
code("}");

code("bossCooldown(6, 12);");
code("}");
code("}");
code("}");
code("} else if (boss > 999) {");

code("trQuestVarSetFromRand(\"bossSpell\", 0, 3, true);");
code("trQuestVarSet(\"bossSpell\", 1 + 10 * trQuestVarGet(\"bossSpell\"));");
code("} else if (xGetInt(dEnemies, xStunStatus, bossPointer) == 0) {");
code("trQuestVarSetFromRand(\"bossSpell\", 0, xsMin(5, (trUnitPercentDamaged() * 0.05)), true);");
code("trQuestVarSet(\"bossSpell\", trQuestVarGet(\"bossSpell\") * 10 + 1);");
code("if (trQuestVarGet(\"bossSpell\") == 21 && trQuestVarGet(\"bossUltimate\") > 0) {");
code("trQuestVarSetFromRand(\"bossSpell\", 0, 2, true);");
code("trQuestVarSet(\"bossSpell\", 1 + 10 * trQuestVarGet(\"bossSpell\"));");
code("}");
code("}");
code("} else {");
code("xsDisableSelf();");
code("xsDisableRule(\"boss_music\");");
code("xsEnableRule(\"yeebaagooon_ded\");");

code("trMusicStop();");
code("trSetLighting(\"anatolia\", 1.0);");

code("uiLookAtUnitByName(\"\"+bossUnit);");
code("}");

code("if (trQuestVarGet(\"gameOverStep\") > 0) {");
code("trQuestVarSet(\"gameOverStep\", 7);");
code("trQuestVarSet(\"yeebhit\", 0);");
code("action = trQuestVarGet(\"yeebRelics\");");
code("for(x=xGetDatabaseCount(action); >0) {");
code("xDatabaseNext(action);");
code("trUnitDestroy();");
code("}");
code("for(p=1; < ENEMY_PLAYER) {");
code("action = getRelicsDB(p);");
code("for(x=xGetDatabaseCount(action); >0) {");
code("xDatabaseNext(action);");
code("if (kbGetBlockID(\"\"+xGetInt(action, xUnitName)) == -1) {");
code("xFreeDatabaseBlock(action);");
code("}");
code("}");
code("}");
code("xsDisableSelf();");
code("}");
code("}");

code("int dYeebFeathers = 0;");
code("int xYeebFeatherPos = 0;");

code("rule yeebaagooon_ded");
code("inactive");
code("highFrequency");
code("{");
code("int x = 0;");
code("vector pos = vector(0,0,0);");
code("if (trTime() > trQuestVarGet(\"yeebOverNext\")) {");
code("trQuestVarSet(\"yeebOverStep\", 1 + trQuestVarGet(\"yeebOverStep\"));");
code("switch(1*trQuestVarGet(\"yeebOverStep\"))");
code("{");
code("case 1:");
code("{");
code("trSetUnitIdleProcessing(false);");
code("trUIFadeToColor(0,0,0,1000,0,true);");
code("trLetterBox(true);");
code("trQuestVarSet(\"yeebOverNext\", trTime() + 2);");
code("dYeebFeathers = xInitDatabase(\"yeebFeathers\");");
code("xInitAddInt(dYeebFeathers, \"name\");");
code("xYeebFeatherPos = xInitAddVector(dYeebFeathers, \"pos\");");
code("}");
code("case 2:");
code("{");
code("if (boss == 1) {");
code("trPaintTerrain(30, 10, 32, 30, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trPaintTerrain(10, 30, 30, 32, TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY, false);");
code("trChangeTerrainHeight(31, 10, 32, 32, worldHeight, false);");
code("trChangeTerrainHeight(10, 31, 32, 32, worldHeight, false);");
code("} else {");
code("pos = trVectorQuestVarGet(\"bossRoomEntrance\");");
code("trPaintTerrain(xsVectorGetX(pos), xsVectorGetZ(pos) - 3,");
code("xsVectorGetX(pos) + 35, xsVectorGetZ(pos),");
code("TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY);");
code("trChangeTerrainHeight(xsVectorGetX(pos), xsVectorGetZ(pos) - 3,");
code("xsVectorGetX(pos) + 35, xsVectorGetZ(pos),worldHeight,false);");
code("trPaintTerrain(xsVectorGetX(pos)-4, xsVectorGetZ(pos),");
code("xsVectorGetX(pos), xsVectorGetZ(pos) + 35,");
code("TERRAIN_PRIMARY, TERRAIN_SUB_PRIMARY);");
code("trChangeTerrainHeight(xsVectorGetX(pos) - 3, xsVectorGetZ(pos),");
code("xsVectorGetX(pos), xsVectorGetZ(pos) + 35,worldHeight,false);");
code("}");
code("trPaintTerrain(0,0,5,5,0,70,true);");
code("trPaintTerrain(0,0,5,5,TERRAIN_WALL,TERRAIN_SUB_WALL,false);");
code("trPlayerSetDiplomacy(ENEMY_PLAYER, 0, \"Enemy\");");
code("trSoundPlayFN(\"\",\"1\",-1,\"Yeebaagooon: Blargh, I am dead.\",\"icons\special e son of osiris icon 64\");");
code("trQuestVarSet(\"yeebOverNext\", trTime() + 4);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"yeebaagooon\", true);");
code("trUnitDestroy();");
code("}");
code("case 3:");
code("{");
code("trSoundPlayFN(\"\",\"1\",-1,\"Yeebaagooon: Just kidding. Did you think you were the only ones who could revive?\",");
code("\"icons\special e son of osiris icon 64\");");
code("pos = trVectorQuestVarGet(\"yeebPos\");");
code("trQuestVarSet(\"yeebOverNext\", trTime() + 6);");
code("trQuestVarSet(\"yeebBird\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Stymphalian Bird\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"yeebBird\", true);");
code("trTechGodPower(ENEMY_PLAYER, \"spy\", 1);");
code("trTechInvokeGodPower(ENEMY_PLAYER,\"spy\",vector(1,1,1),vector(1,1,1));");
code("x = modularCounterNext(\"spyFind\");");
code("aiPlanSetUserVariableInt(ARRAYS,spyProto,x,kbGetProtoUnitID(\"Pharaoh of Osiris\"));");
code("aiPlanSetUserVariableInt(ARRAYS,spyUnit,x,1*trQuestVarGet(\"yeebBird\"));");
code("aiPlanSetUserVariableBool(ARRAYS,spyActive,x,true);");
code("aiPlanSetUserVariableVector(ARRAYS,spyDest,x,xsVectorSet(ARRAYS,bossInts,1));");
code("aiPlanSetUserVariableVector(ARRAYS,spyScale,x,vector(1,1,1));");
code("}");
code("case 4:");
code("{");
code("trQuestVarSet(\"yeebBirdID\", kbGetBlockID(\"\"+1*trQuestVarGet(\"yeebBird\")));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"yeebaagooon\", true);");
code("trUnitOverrideAnimation(33,0,true,false,-1);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"yeebBird\", true);");
code("trUnitConvert(0);");
code("trSetSelectedScale(0,0,0);");
code("trSetUnitIdleProcessing(true);");
code("trLetterBox(false);");
code("trUIFadeToColor(0,0,0,1000,0,false);");
code("trSoundPlayFN(\"herorevived.wav\",\"1\",-1,\"\",\"\");");
code("uiLookAtUnitByName(\"\"+1*trQuestVarGet(\"yeebBird\"));");
code("trQuestVarSet(\"yeebOverNext\", trTime() + 3);");
code("trChatSendSpoofed(ENEMY_PLAYER, \"Yeebaagooon: Now, die!\");");
code("}");
code("case 5:");
code("{");
code("bossUnit = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,1,0,1,0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("xsEnableRule(\"yeebaagooon_battle\");");
code("bossCooldown(10, 12);");
code("trQuestVarSet(\"musicTime\", 0);");
code("xsEnableRule(\"boss_music\");");
code("trVectorQuestVarSet(\"yeebDir\", vector(1,0,0));");
code("trQuestVarSet(\"yeebLightningNext\", trTimeMS());");
code("if (boss == 1) {");
code("trQuestVarSet(\"yeebBossFight\", 0);");
code("trQuestVarSet(\"boss\", 1000);");
code("trMessageSetText(\"Reach the boss room to escape. You will get to keep the stolen relic.\", 60);");
code("trVectorQuestVarSet(\"yeebDestination\", trVectorQuestVarGet(\"bossRoomCenter\"));");
code("} else {");
code("trQuestVarSet(\"boss\", 1001);");
code("trMessageSetText(\"Return to the starting room to escape. You will get to keep the stolen relic.\", 60);");
code("trVectorQuestVarSet(\"yeebDestination\", trVectorQuestVarGet(\"startPosition\"));");
code("}");
code("trQuestVarSet(\"yeebLatestFeather\", trGetNextUnitScenarioNameNumber() - 1);");
code("trMinimapFlare(trCurrentPlayer(), 60, trVectorQuestVarGet(\"yeebDestination\"), true);");
code("trSoundPlayFN(\"xnew_objective.wav\",\"1\",-1,\"\",\"\");");
code("xsEnableRule(\"yeebaagooon_battle_2\");");
code("xsDisableSelf();");
code("}");
code("}");
code("}");
code("}");
code("rule yeebaagooon_battle_2");
code("inactive");
code("highFrequency");
code("{");
code("bool hit = false;");
code("int id = 0;");
code("vector pos = vector(0,0,0);");
code("if (kbUnitGetAnimationActionType(1*trQuestVarGet(\"yeebBirdID\")) == 9) {");
code("if (trTime() > trQuestVarGet(\"yeebBirdMoveTime\")) {");
code("trQuestVarSet(\"yeebBirdMoveTime\", trTime());");
code("xDatabaseNext(dPlayerUnits);");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dPlayerUnits, xUnitName), true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"yeebBird\", true);");
code("trUnitMoveToPoint(xsVectorGetX(pos),0,xsVectorGetZ(pos),-1,true);");
code("}");
code("}");

code("if (xGetDatabaseCount(dYeebFeathers) > 0) {");
code("hit = false;");
code("xDatabaseNext(dYeebFeathers);");
code("id = kbGetBlockID(\"\"+xGetInt(dYeebFeathers, xUnitName));");
code("xUnitSelect(dYeebFeathers, xUnitName);");
code("if (id == -1) {");
code("pos = xGetVector(dYeebFeathers, xYeebFeatherPos);");
code("hit = true;");
code("} else {");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dYeebFeathers, xUnitName), true);");
code("if (xsVectorGetY(pos) < worldHeight + 0.5) {");
code("hit = true;");
code("} else {");
code("xSetVector(dYeebFeathers, xYeebFeatherPos, pos);");
code("}");
code("}");

code("if (hit) {");
code("spawnLightning(pos, ENEMY_PLAYER);");
code("xFreeDatabaseBlock(dYeebFeathers);");
code("}");
code("}");

code("while (yFindLatest(\"yeebLatestFeather\", \"Stymph Bird Feather\", 0) > 0) {");
code("pos = kbGetBlockPosition(\"\"+1*trQuestVarGet(\"yeebLatestFeather\"), true);");
code("xAddDatabaseBlock(dYeebFeathers, true);");
code("xSetInt(dYeebFeathers, xUnitName, 1*trQuestVarGet(\"yeebLatestFeather\"));");
code("xSetVector(dYeebFeathers, xYeebFeatherPos, pos);");
code("trMutateSelected(kbGetProtoUnitID(\"Lampades Bolt\"));");
code("}");

code("if (trTimeMS() > trQuestVarGet(\"yeebLightningNext\")) {");
code("pos = kbGetBlockPosition(\"\"+1*trQuestVarGet(\"yeebaagooon\"), true);");
code("trQuestVarSet(\"yeebLightningNext\",");
code("trQuestVarGet(\"yeebLightningNext\") + 2.0 * distanceBetweenVectors(pos, trVectorQuestVarGet(\"yeebDestination\")));");
code("trQuestVarSetFromRand(\"rand\", 4, 20, false);");
code("trVectorQuestVarSet(\"yeebDir\", rotationMatrix(trVectorQuestVarGet(\"yeebDir\"), -0.757323, 0.653041));");
code("pos = vectorSnapToGrid(pos + (trVectorQuestVarGet(\"yeebDir\") * trQuestVarGet(\"rand\")));");
code("spawnLightning(pos, ENEMY_PLAYER);");
code("}");


code("if (trQuestVarGet(\"gameOverStep\") > 0) {");
code("xsDisableSelf();");
code("} else if ((boss == 1001) && (trQuestVarGet(\"deadPlayerCount\") < trQuestVarGet(\"activePlayerCount\"))) {");

code("int escape = 0;");
code("pos = trVectorQuestVarGet(\"yeebDestination\");");
code("for(p=1; < ENEMY_PLAYER) {");
code("if (unitDistanceToVector(xGetInt(dPlayerData, xPlayerUnit, p), pos) < 400) {");
code("escape = escape + 1;");
code("}");
code("}");
code("if (escape == trQuestVarGet(\"activePlayerCount\") - trQuestVarGet(\"deadPlayerCount\")) {");
code("trSoundPlayFN(\"win.wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSet(\"gameOverStep\", 4);");
code("trQuestVarSet(\"playersWon\", 1);");
code("xsEnableRule(\"game_over\");");
code("xsDisableRule(\"gameplay_always\");");
code("xsDisableRule(\"yeebaagooon_battle\");");
code("xsDisableSelf();");
code("trQuestVarSet(\"yeebhit\", 0);");
code("trQuestVarSet(\"ownedRelics\"+RELIC_YEEBAAGOOON,");
code("trQuestVarGet(\"ownedRelics\"+RELIC_YEEBAAGOOON) + trQuestVarGet(\"yeebRelicRetrieved\"));");
code("}");
code("} else if (boss < 1000) {");
code("xsDisableRule(\"yeebaagooon_battle\");");
code("xsDisableSelf();");
code("trQuestVarSet(\"yeebhit\", 0);");
code("trQuestVarSet(\"ownedRelics\"+RELIC_YEEBAAGOOON,");
code("trQuestVarGet(\"ownedRelics\"+RELIC_YEEBAAGOOON) + trQuestVarGet(\"yeebRelicRetrieved\"));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"yeebBird\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"yeebaagooon\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("}");
code("}");

code("int dBossWhirlpoolBalls = 0;");
code("int xBossWhirlpoolBallLast = 0;");
code("int bossJumpPath = 0;");

code("rule boss7_init");
code("inactive");
code("highFrequency");
code("{");
code("vector pos = vector(0,0,0);");
code("if (trTime() > trQuestVarGet(\"cinTime\")) {");
code("switch(1*trQuestVarGet(\"cinStep\"))");
code("{");
code("case 0:");
code("{");
code("xsDisableRule(\"the_deep_damage\");");
code("trOverlayText(\"Mother of the Depths\", 3.0, -1, -1, -1);");
code("trQuestVarSet(\"cinTime\", trTime() + 2);");
code("xsDisableRule(\"deep_village_always\");");
code("for(p=1; < ENEMY_PLAYER) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"p\"+p+\"medic\");");
code("trUnitDestroy();");
code("}");
code("dBossWhirlpoolBalls = initGenericProj(\"bossWhirlpoolBalls\",");
code("kbGetProtoUnitID(\"Pharaoh of Osiris XP\"),50,8.0,5.0,0,ENEMY_PLAYER,true);");
code("xBossWhirlpoolBallLast = xInitAddInt(dBossWhirlpoolBalls, \"last\");");
code("}");
code("case 1:");
code("{");
code("trLetterBox(false);");
code("trUIFadeToColor(0,0,0,1000,0,false);");
code("xsDisableSelf();");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trUnitConvert(ENEMY_PLAYER);");
code("trSetSelectedScale(bossScale, bossScale, bossScale);");
code("xsEnableRule(\"boss7_battle\");");
code("trQuestVarSet(\"bossGem\", SOULSTONE);");
code("trQuestVarSetFromRand(\"bossGemCount\", 4, 5, true);");
code("xsEnableRule(\"boss_music\");");

code("pos = trVectorQuestVarGet(\"bossRoomCenter\");");
code("bossJumpPath = zNewArray(mInt, 50, \"jumpPath\");");
code("for(i=0; < 50) {");
code("aiPlanSetUserVariableInt(ARRAYS,bossJumpPath,i,trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+ENEMY_PLAYER+\",0\",\"Dwarf\",1,");
code("xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"\"+ENEMY_PLAYER+\",0\");");
code("trMutateSelected(kbGetProtoUnitID(\"Rocket\"));");
code("}");

code("trQuestVarSet(\"bossEscape\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+ENEMY_PLAYER+\",0\",\"Dwarf\",1,1,0,1,0,true);");
code("trArmySelect(\"\"+ENEMY_PLAYER+\",0\");");
code("trUnitChangeProtoUnit(\"Transport Ship Greek\");");
code("trArmySelect(\"\"+ENEMY_PLAYER+\",0\");");
code("trSetSelectedScale(0,0,0);");
code("bossCooldown(10, 15);");

code("trModifyProtounit(\"Scylla\", ENEMY_PLAYER, 27, 50);");
code("xSetBool(dEnemies, xLaunched, true, bossPointer);");

code("spyEffect(bossUnit,kbGetProtoUnitID(\"Cinematic Block\"), xsVectorSet(ARRAYS,bossInts,0));");
code("spyEffect(bossUnit,kbGetProtoUnitID(\"Cinematic Block\"), xsVectorSet(ARRAYS,bossInts,1));");

code("trStringQuestVarSet(\"advice\",");
code("\"She will heal if she eats someone. You can poison her to prevent the healing.\");");
code("}");
code("}");
code("trQuestVarSet(\"cinStep\", 1 + trQuestVarGet(\"cinStep\"));");
code("}");
code("}");


code("rule boss7_battle");
code("inactive");
code("highFrequency");
code("{");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("int p = 0;");
code("int x = 0;");
code("int z = 0;");
code("int action = 0;");
code("int id = 0;");
code("float amt = 0;");
code("float angle = 0;");
code("float sVal = 0;");
code("float cVal = 0;");
code("float m = 0;");
code("float dist = 0;");
code("bool hit = false;");

code("vector pos = vector(0,0,0);");
code("vector prev = vector(0,0,0);");
code("vector dir = vector(0,0,0);");

code("if (trUnitAlive() == true) {");
code("if (trQuestVarGet(\"secondPhase\") == 1) {");
code("if (trTime() > trQuestVarGet(\"bossSpawnNext\")) {");
code("trQuestVarSet(\"bossSpawnNext\", trTime() + 30);");
code("trQuestVarSetFromRand(\"rand\", 1, 6, true);");
code("trQuestVarSetFromRand(\"count\", 3, 5, true);");
code("trVectorSetUnitPos(\"pos\", \"bossUnit\");");
code("for(i=trQuestVarGet(\"count\"); >0) {");
code("trQuestVarSetFromRand(\"heading\", 1, 360, false);");
code("action = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"\"+ENEMY_PLAYER+\",0\",trStringQuestVarGet(\"enemyProto\"+1*trQuestVarGet(\"rand\")),1,");
code("xsVectorGetX(pos),0,xsVectorGetZ(pos),trQuestVarGet(\"heading\"),true);");
code("activateEnemy(action,-1,0);");
code("}");
code("}");
code("}");

code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");

code("if (trQuestVarGet(\"bossSpell\") == BOSS_SPELL_COOLDOWN) {");
code("processBossCooldown();");
code("} else if (trQuestVarGet(\"bossSpell\") > 30) {");
code("if (trQuestVarGet(\"bossSpell\") == 31) {");
code("trSoundPlayFN(\"cinematics\15_in\gong.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"godpower.wav\",\"1\",-1,\"\",\"\");");
code("trSetLighting(\"night\", 1.0);");
code("trOverlayText(\"Drowning Whirlpool\",3.0,-1,-1,-1);");
code("trQuestVarSet(\"bossSpell\", 32);");
code("bossNext = trTimeMS();");
code("bossTimeout = trTimeMS() + 2000;");
code("bossAngle = 0;");
code("trQuestVarSet(\"bossAngularVelocity\", 0.1);");
code("if (kbGetBlockID(\"\"+1*trQuestVarGet(\"bossWhirlpoolSFX\")) == -1) {");
code("spyEffect(1*bossUnit,kbGetProtoUnitID(\"Kronny Birth\"), xsVectorSet(ARRAYS,bossInts,0));");
code("} else {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+aiPlanGetUserVariableInt(ARRAYS,bossInts,0), true);");
code("trMutateSelected(kbGetProtoUnitID(\"Kronny Birth\"));");
code("}");
code("bossPos = kbGetBlockPosition(\"\"+bossUnit, true);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Scylla\"));");
code("} else if ((trQuestVarGet(\"bossSpell\") >= 32) && (trQuestVarGet(\"bossSpell\") <= 33)) {");
code("trMutateSelected(kbGetProtoUnitID(\"Scylla\"));");
code("amt = trTimeMS() - bossNext;");
code("bossNext = trTimeMS();");
code("if (trQuestVarGet(\"bossSpell\") == 32) {");
code("trQuestVarSet(\"bossAngularVelocity\", trQuestVarGet(\"bossAngularVelocity\") + 0.006 * amt);");
code("} else {");
code("bossScale = xsMax(0, bossScale - amt * 0.0013);");
code("trSetSelectedScale(bossScale,1.3,bossScale);");
code("}");
code("bossAngle = fModulo(6.283185, bossAngle - 0.001 * amt * trQuestVarGet(\"bossAngularVelocity\"));");
code("dir = vectorSetFromAngle(bossAngle);");
code("trSetUnitOrientation(dir,vector(0,1,0),true);");
code("if (trTimeMS() > bossTimeout) {");
code("if (trQuestVarGet(\"bossSpell\") == 32) {");
code("trQuestVarSet(\"bossSpell\", 33);");
code("bossTimeout = bossTimeout + 1000;");
code("} else {");
code("trSetSelectedScale(0,0,0);");
code("trQuestVarSet(\"bossSpell\", 34);");
code("bossTimeout = trTimeMS() + 15000;");
code("bossNext = trTimeMS();");
code("bossDir = vector(1,0,0);");
code("trModifyProtounit(\"Scylla\", ENEMY_PLAYER, 1, -2);");
code("}");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") == 34) {");
code("bossPos = kbGetBlockPosition(\"\"+bossUnit, true);");
code("for(i=xsMin(6, xGetDatabaseCount(dBossWhirlpoolBalls)); >0) {");
code("action = processGenericProj(dBossWhirlpoolBalls);");
code("if (action == PROJ_FALLING) {");
code("hit = false;");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dBossWhirlpoolBalls, xUnitName), true);");
code("prev = xGetVector(dBossWhirlpoolBalls, xProjPrev);");
code("dir = xGetVector(dBossWhirlpoolBalls, xProjDir);");
code("dist = distanceBetweenVectors(pos, prev, false) + 2.0;");
code("for(j=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("xUnitSelectByID(dPlayerUnits, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (rayCollision(dPlayerUnits,prev,dir,dist,4.0)) {");
code("damagePlayerUnit(300);");
code("hit = true;");
code("}");
code("}");
code("if (hit) {");
code("trQuestVarSetFromRand(\"sound\", 1, 3, true);");
code("trSoundPlayFN(\"fleshcrush\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("xUnitSelectByID(dBossWhirlpoolBalls, xUnitID);");
code("trUnitChangeProtoUnit(\"Rocket\");");
code("xFreeDatabaseBlock(dBossWhirlpoolBalls);");
code("} else if (unitDistanceToVector(xGetInt(dBossWhirlpoolBalls, xUnitName), bossPos) < 36.0) {");
code("xUnitSelectByID(dBossWhirlpoolBalls, xUnitID);");
code("trUnitChangeProtoUnit(\"Rocket\");");
code("xFreeDatabaseBlock(dBossWhirlpoolBalls);");
code("} else {");
code("amt = 0.004 * (trTimeMS() - xGetInt(dBossWhirlpoolBalls, xBossWhirlpoolBallLast));");
code("xSetInt(dBossWhirlpoolBalls, xBossWhirlpoolBallLast, trTimeMS());");
code("xSetVector(dBossWhirlpoolBalls, xProjPrev, pos);");
code("dir = xsVectorNormalize(dir + (getUnitVector(pos, bossPos) * amt));");
code("xSetVector(dBossWhirlpoolBalls,xProjDir,dir);");
code("}");
code("}");
code("}");
code("if (trTimeMS() > bossNext) {");
code("bossDir = rotationMatrix(bossDir, -0.757323, 0.653041);");
code("dir = rotationMatrix(bossDir, -0.707107, 0.707107);");
code("pos = trVectorQuestVarGet(\"bossRoomCenter\") + (bossDir * (2.0 * trQuestVarGet(\"bossRoomSize\")));");
code("addGenericProj(dBossWhirlpoolBalls, pos,dir);");
code("xSetVector(dBossWhirlpoolBalls, xProjPrev, pos);");
code("xSetInt(dBossWhirlpoolBalls, xBossWhirlpoolBallLast, trTimeMS());");
code("bossNext = bossNext + 300;");
code("}");
code("if (trTimeMS() > bossTimeout) {");
code("bossCooldown(10, 15);");
code("trQuestVarSet(\"bossUltimate\", 3);");
code("xClearDatabase(dBossWhirlpoolBalls);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+aiPlanGetUserVariableInt(ARRAYS,bossInts,0));");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");
code("bossScale = 1.3;");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trSetSelectedScale(bossScale,bossScale,bossScale);");
code("trSetLighting(\"Fimbulwinter\", 1.0);");
code("trSoundPlayFN(\"godpowerfailed.wav\",\"1\",-1,\"\",\"\");");
code("trModifyProtounit(\"Scylla\", ENEMY_PLAYER, 1, 2);");
code("}");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") > 20) {");
code("if (trQuestVarGet(\"bossSpell\") == 21) {");
code("trQuestVarSetFromRand(\"rand\", 1, 5, true);");
code("if (trQuestVarGet(\"rand\") == 1) {");
code("trChatSendSpoofed(ENEMY_PLAYER, \"Mother of the Depths: I'm going to eat you!\");");
code("} else if (trQuestVarGet(\"rand\") == 2) {");
code("trChatSendSpoofed(ENEMY_PLAYER, \"Mother of the Depths: This one looks tasty!\");");
code("} else if (trQuestVarGet(\"rand\") == 3) {");
code("trChatSendSpoofed(ENEMY_PLAYER, \"Mother of the Depths: Delicious!\");");
code("}");
code("for(i=xGetDatabaseCount(dPlayerCharacters); >0) {");
code("xDatabaseNext(dPlayerCharacters);");
code("p = xGetInt(dPlayerCharacters, xPlayerOwner);");
code("if (xGetInt(dPlayerData, xPlayerUnit, p) == xGetInt(dPlayerCharacters, xUnitName)) {");
code("bossTarget = p;");
code("break;");
code("}");
code("}");
code("bossTargetPos = kbGetBlockPosition(\"\"+xGetInt(dPlayerData, xPlayerUnit, p), true);");
code("bossPos = kbGetBlockPosition(\"\"+bossUnit, true);");
code("dir = getUnitVector(bossTargetPos, bossPos, 4.0);");
code("bossPos = vectorSnapToGrid(bossTargetPos + dir);");
code("dir = getUnitVector(bossPos, bossTargetPos);");
code("trQuestVarSet(\"boat\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+ENEMY_PLAYER+\",0\",\"Dwarf\",1,xsVectorGetX(bossPos),0,xsVectorGetZ(bossPos),0,true);");
code("trArmySelect(\"\"+ENEMY_PLAYER+\",0\");");
code("trSetUnitOrientation(dir,vector(0,1,0),true);");
code("trUnitChangeProtoUnit(\"Transport Ship Greek\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Dwarf\"));");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"boat\"));");
code("trUnitChangeProtoUnit(\"Scylla\");");
code("trQuestVarSet(\"bossSpell\", 22);");
code("bossNext = trTimeMS() + 1400;");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"boat\");");
code("trUnitChangeProtoUnit(\"Meteor Impact Water\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("if (kbGetBlockID(\"\"+aiPlanGetUserVariableInt(ARRAYS,bossInts,1)) == -1) {");
code("spyEffect(1*bossUnit,kbGetProtoUnitID(\"Cinematic Block\"), xsVectorSet(ARRAYS,bossInts,1));");
code("}");
code("trSetSelectedScale(bossScale,bossScale,bossScale);");
code("} else if (trQuestVarGet(\"bossSpell\") == 22) {");
code("if (trTimeMS() > bossNext) {");
code("trUnitSetAnimationPath(\"4,0,0,0,0,0,0\");");
code("trUnitOverrideAnimation(1,0,false,false,-1);");
code("bossNext = trTimeMS() + 700;");
code("trQuestVarSet(\"bossSpell\", 23);");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") == 23) {");
code("if (trTimeMS() > bossNext) {");
code("p = bossTarget;");
code("if (unitDistanceToVector(xGetInt(dPlayerData, xPlayerUnit, p), bossTargetPos) < 16) {");
code("silenceUnit(dPlayerUnits, 9999, xGetInt(dPlayerData, xPlayerIndex, p));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+aiPlanGetUserVariableInt(ARRAYS,bossInts,1),true);");
code("trUnitChangeProtoUnit(\"Roc\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+aiPlanGetUserVariableInt(ARRAYS,bossInts,1),true);");
code("trUnitConvert(p);");
code("trSetSelectedScale(0,0,0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xPlayerUnit, p), true);");
code("trImmediateUnitGarrison(\"\"+aiPlanGetUserVariableInt(ARRAYS,bossInts,1));");
code("trUnitOverrideAnimation(2,0,true,true,-1);");
code("trSoundPlayFN(\"changeunit.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"titanpunch1.wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSet(\"bossSpell\", 24);");
code("bossTimeout = trTimeMS() + 10000;");
code("bossNext = trTimeMS() + 1000;");
code("trQuestVarSet(\"bossDamage\", 0);");
code("trMessageSetText(trStringQuestVarGet(\"p\"+p+\"name\") + \" has been eaten! Poison the boss to make her spit them out!\", -1);");
code("bossScale = 2.3;");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trSetSelectedScale(bossScale,bossScale,bossScale);");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("if (trCurrentPlayer() == p) {");
code("trSetCurrentPlayerStatus(false);");
code("}");
code("} else {");
code("bossCooldown(3, 6);");
code("}");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") == 24) {");
code("if (trTimeMS() > bossNext) {");
code("if (xGetInt(dEnemies,xPoisonStatus,bossPointer) > 0) {");
code("bossTimeout = bossTimeout - 1000;");
code("} else {");
code("trSoundPlayFN(\"colossuseat.wav\",\"1\",-1,\"\",\"\");");
code("trDamageUnitPercent(-1);");
code("pos = kbGetBlockPosition(\"\"+bossUnit, true);");
code("trArmyDispatch(\"0,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"0,0\");");
code("trUnitChangeProtoUnit(\"Regeneration SFX\");");
code("if (trQuestVarGet(\"secondPhase\") == 1) {");
code("trQuestVarSetFromRand(\"rand\", 1, 6, true);");
code("action = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"\"+ENEMY_PLAYER+\",0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),180,true);");
code("trArmySelect(\"\"+ENEMY_PLAYER+\",0\");");
code("trUnitChangeProtoUnit(trStringQuestVarGet(\"enemyProto\"+1*trQuestVarGet(\"rand\")));");
code("activateEnemy(action);");
code("}");
code("}");
code("bossNext = bossNext + 1000;");
code("trQuestVarSet(\"bossDamage\", trQuestVarGet(\"bossDamage\") + 150);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("if (trTimeMS() > bossTimeout) {");
code("bossScale = 1.3;");
code("trSetSelectedScale(bossScale,bossScale,bossScale);");
code("p = bossTarget;");
code("if (trCurrentPlayer() == p) {");
code("trSetCurrentPlayerStatus(true);");
code("}");
code("xSetPointer(dPlayerUnits, xGetInt(dPlayerData, xPlayerIndex, bossTarget));");
code("xSetInt(dPlayerUnits, xSilenceTimeout, 0);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+aiPlanGetUserVariableInt(ARRAYS,bossInts,1), true);");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xPlayerUnit, bossTarget), true);");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("damagePlayerUnit(trQuestVarGet(\"bossDamage\"));");
code("bossCooldown(3, 6);");
code("} else {");
code("bossScale = 1.3 + 0.0001 * (bossTimeout - trTimeMS());");
code("trSetSelectedScale(bossScale,bossScale,bossScale);");
code("}");
code("}");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") > 10) {");
code("if (trQuestVarGet(\"bossSpell\") == 11) {");
code("trQuestVarSetFromRand(\"rand\", 1, 5, true);");
code("if (trQuestVarGet(\"rand\") == 1) {");
code("trChatSendSpoofed(ENEMY_PLAYER, \"Mother of the Depths: I will drag you to the depths!\");");
code("} else if (trQuestVarGet(\"rand\") == 2) {");
code("trChatSendSpoofed(ENEMY_PLAYER, \"Mother of the Depths: A dance of death!\");");
code("} else if (trQuestVarGet(\"rand\") == 3) {");
code("trChatSendSpoofed(ENEMY_PLAYER, \"Mother of the Depths: Your death will be swift!\");");
code("}");
code("bossCount = 3;");
code("if (trQuestVarGet(\"secondPhase\") == 1) {");
code("bossCount = 5;");
code("}");
code("trQuestVarSet(\"bossSpell\", 12);");
code("bossPos = kbGetBlockPosition(\"\"+bossUnit, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Dwarf\"));");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"bossEscape\"));");
code("trUnitChangeProtoUnit(\"Scylla\");");
code("trArmyDispatch(\"0,0\",\"Dwarf\",1,xsVectorGetX(bossPos),0,xsVectorGetZ(bossPos),0,true);");
code("trArmySelect(\"0,0\");");
code("trUnitChangeProtoUnit(\"Meteor Impact Water\");");
code("trSoundPlayFN(\"shipmove1.wav\",\"1\",-1,\"\",\"\");");
code("trModifyProtounit(\"Wadjet Spit\",ENEMY_PLAYER,55,2);");
code("} else if (trQuestVarGet(\"bossSpell\") == 12) {");
code("for (x=xGetDatabaseCount(dPlayerCharacters); >0) {");
code("xDatabaseNext(dPlayerCharacters);");
code("xUnitSelectByID(dPlayerCharacters, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerCharacter();");
code("} else {");
code("break;");
code("}");
code("}");
code("bossTargetPos = kbGetBlockPosition(\"\"+xGetInt(dPlayerCharacters, xUnitName), true);");
code("dir = getUnitVector(bossPos, bossTargetPos);");
code("dist = 0.5 * distanceBetweenVectors(bossPos, bossTargetPos, false);");
code("amt = dist * 0.04;");
code("m = 15.0 / xsPow(dist, 2);");
code("for(i=0; < 50) {");
code("angle = 0.0 - 2.0 * m * (amt * i - dist);");
code("cVal = xsSqrt(xsPow(angle, 2) + 1);");
code("sVal = angle / cVal;");
code("cVal = 1.0 / cVal;");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+aiPlanGetUserVariableInt(ARRAYS,bossJumpPath,i), true);");
code("trSetUnitOrientation(xsVectorSet(xsVectorGetX(dir)*cVal,sVal,xsVectorGetZ(dir)*cVal),");
code("xsVectorSet(0.0-xsVectorGetX(dir)*sVal,cVal,0.0-xsVectorGetZ(dir)*sVal),true);");
code("trUnitTeleport(xsVectorGetX(bossPos) + xsVectorGetX(dir) * amt * i,");
code("worldHeight + 15.0 - m * xsPow(amt * i - dist, 2),");
code("xsVectorGetZ(bossPos) + xsVectorGetZ(dir) * amt * i);");
code("}");
code("trQuestVarSet(\"bossSpell\", 13);");
code("bossNext = trTimeMS() + 1000;");
code("} else if (trQuestVarGet(\"bossSpell\") == 13) {");
code("if (trTimeMS() > bossNext) {");
code("trSetSelectedScale(bossScale,bossScale,bossScale);");
code("trArmyDispatch(\"0,0\",\"Dwarf\",1,xsVectorGetX(bossPos),0,xsVectorGetZ(bossPos),0,true);");
code("trArmySelect(\"0,0\");");
code("trUnitChangeProtoUnit(\"Meteor Impact Water\");");
code("trSoundPlayFN(\"geyserhit1.wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSet(\"bossSpell\", 14);");
code("if (trQuestVarGet(\"secondPhase\") == 0) {");
code("action = 2000;");
code("} else {");
code("action = 1000;");
code("}");
code("trQuestVarSet(\"bossPrev\", -1);");
code("trQuestVarSet(\"bossStep\", action / 50);");
code("bossNext = trTimeMS();");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") == 14) {");
code("action = trTimeMS() - bossNext;");
code("action = action / trQuestVarGet(\"bossStep\");");
code("if (action > trQuestVarGet(\"bossPrev\")) {");
code("if (action < 50) {");
code("trQuestVarSet(\"bossPrev\", action);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+aiPlanGetUserVariableInt(ARRAYS,bossJumpPath,action),true);");
code("trMutateSelected(kbGetProtoUnitID(\"Hero Greek Achilles\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trUnitChangeProtoUnit(\"Dwarf\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Relic\"));");
code("trImmediateUnitGarrison(\"\"+aiPlanGetUserVariableInt(ARRAYS,bossJumpPath,action));");
code("trMutateSelected(kbGetProtoUnitID(\"Scylla\"));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+aiPlanGetUserVariableInt(ARRAYS,bossJumpPath,action),true);");
code("trMutateSelected(kbGetProtoUnitID(\"Wadjet Spit\"));");
code("} else {");
code("trSoundPlayFN(\"meteorsplash.wav\",\"1\",-1,\"\",\"\");");
code("trCameraShake(0.7, 0.4);");
code("trArmyDispatch(\"0,0\",\"Dwarf\",1,xsVectorGetX(bossTargetPos),0,xsVectorGetZ(bossTargetPos),0,true);");
code("dir = vector(6,0,0);");
code("for(i=8; >0) {");
code("x = xsVectorGetX(bossTargetPos) + xsVectorGetX(dir);");
code("z = xsVectorGetZ(bossTargetPos) + xsVectorGetZ(dir);");
code("trArmyDispatch(\"0,0\",\"Dwarf\",1,x,0,z,0,false);");
code("dir = rotationMatrix(dir, 0.707107, 0.707107);");
code("}");
code("trArmySelect(\"0,0\");");
code("trUnitChangeProtoUnit(\"Meteor Impact Water\");");
code("for(i=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("xUnitSelectByID(dPlayerUnits, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (unitDistanceToVector(xGetInt(dPlayerUnits, xUnitName), bossTargetPos) < 64.0) {");
code("damagePlayerUnit(500);");
code("}");
code("}");
code("bossCount = bossCount - 1;");
code("if (bossCount <= 0) {");
code("trModifyProtounit(\"Wadjet Spit\", ENEMY_PLAYER, 55, 4);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trUnitChangeProtoUnit(\"Scylla\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trSetSelectedScale(bossScale,bossScale,bossScale);");
code("bossCooldown(10, 15);");
code("} else {");
code("trQuestVarSet(\"bossSpell\", 12);");
code("bossPos = bossTargetPos;");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trUnitChangeProtoUnit(\"Scylla\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trSetSelectedScale(0,0,0);");
code("}");
code("}");
code("}");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") > 0) {");
code("if (trQuestVarGet(\"bossSpell\") == 1) {");
code("xsSetContextPlayer(ENEMY_PLAYER);");
code("id = kbUnitGetTargetUnitID(bossID);");
code("xsSetContextPlayer(0);");
code("if (id >= 0) {");
code("trQuestVarSetFromRand(\"rand\", 1, 5, true);");
code("if (trQuestVarGet(\"rand\") == 1) {");
code("trChatSendSpoofed(ENEMY_PLAYER, \"Mother of the Depths: Begone!\");");
code("} else if (trQuestVarGet(\"rand\") == 2) {");
code("trChatSendSpoofed(ENEMY_PLAYER, \"Mother of the Depths: Impact!\");");
code("} else if (trQuestVarGet(\"rand\") == 3) {");
code("trChatSendSpoofed(ENEMY_PLAYER, \"Mother of the Depths: Perish!\");");
code("}");
code("trSoundPlayFN(\"shipmove2.wav\",\"1\",-1,\"\",\"\");");
code("trMutateSelected(kbGetProtoUnitID(\"Scylla\"));");
code("trUnitSetStance(\"Passive\");");
code("bossPos = vectorSnapToGrid(kbGetBlockPosition(\"\"+bossUnit, true));");
code("pos = kbGetBlockPosition(\"\"+trGetUnitScenarioNameNumber(id));");
code("bossDir = getUnitVector(pos, bossPos);");
code("trVectorQuestVarSet(\"bossSplashDir\", bossDir);");
code("trVectorQuestVarSet(\"bossStartDir\", vector(0,0,0) - bossDir);");
code("bossAngle = angleBetweenVectors(pos, bossPos);");
code("trQuestVarSet(\"bossWarnStart\", trGetNextUnitScenarioNameNumber());");
code("dir = vector(0,0,-12);");
code("trQuestVarSet(\"heading\", 360);");
code("for(i=8; >0) {");
code("x = xsVectorGetX(bossPos) + xsVectorGetX(dir);");
code("z = xsVectorGetZ(bossPos) + xsVectorGetZ(dir);");
code("trArmyDispatch(\"0,0\",\"Dwarf\",1,x,0,z,trQuestVarGet(\"heading\"),true);");
code("trArmySelect(\"0,0\");");
code("trUnitChangeProtoUnit(\"UI Range Indicator Greek SFX\");");
code("dir = rotationMatrix(dir, 0.707107, 0.707107);");
code("trQuestVarSet(\"heading\", trQuestVarGet(\"heading\") - 45);");
code("}");
code("trQuestVarSet(\"bossWarnEnd\", trGetNextUnitScenarioNameNumber());");

code("trQuestVarSet(\"bossSpell\", 2);");
code("bossNext = trTimeMS() + 1000;");
code("action = 1500;");
code("if (trQuestVarGet(\"secondPhase\") == 1) {");
code("action = 500;");
code("}");
code("bossTimeout = bossNext + action;");
code("trQuestVarSet(\"bossAngularVelocity\", 6.283185 / action);");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") == 2) {");
code("if (trTimeMS() > bossNext) {");
code("for(i=trQuestVarGet(\"bossWarnStart\"); < trQuestVarGet(\"bossWarnEnd\")) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+i, true);");
code("trUnitDestroy();");
code("}");
code("trQuestVarSet(\"bossLast\", bossNext);");
code("trQuestVarSet(\"bossSpell\", 3);");
code("trArmyDispatch(\"0,0\",\"Dwarf\",1,xsVectorGetX(bossPos),0,xsVectorGetZ(bossPos),0,true);");
code("trArmySelect(\"0,0\");");
code("trUnitChangeProtoUnit(\"Tremor\");");
code("trSoundPlayFN(\"shockwave.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") == 3) {");
code("amt = trTimeMS() - trQuestVarGet(\"bossLast\");");
code("trQuestVarSet(\"bossLast\", trTimeMS());");
code("bossAngle = bossAngle + amt * trQuestVarGet(\"bossAngularVelocity\");");
code("prev = vectorSetFromAngle(bossAngle);");
code("angle = dotProduct(prev, bossDir);");
code("for(i=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("xUnitSelectByID(dPlayerUnits, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (xGetBool(dPlayerUnits, xLaunched) == false) {");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dPlayerUnits, xUnitName), true);");
code("if (distanceBetweenVectors(pos, bossPos) < 144.0) {");
code("dir = getUnitVector(bossPos, pos);");
code("if (dotProduct(dir, prev) > angle) {");
code("if (dotProduct(dir, bossDir) > angle) {");
code("damagePlayerUnit(500);");
code("if (trUnitAlive()) {");
code("launchUnit(dPlayerUnits, bossPos + (dir * 50.0));");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");
code("dir = trVectorQuestVarGet(\"bossSplashDir\");");
code("if (dotProduct(dir, bossDir) > dotProduct(dir, prev)) {");
code("pos = bossPos + (dir * 12.0);");
code("trArmyDispatch(\"0,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"0,0\");");
code("trUnitChangeProtoUnit(\"Meteor Impact Water\");");
code("trVectorQuestVarSet(\"bossSplashDir\", rotationMatrix(dir, 0.866025, -0.5));");
code("}");
code("bossDir = prev;");
code("dir = vector(0,0,0) - bossDir;");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("if (trTimeMS() > bossTimeout) {");
code("trSetUnitOrientation(trVectorQuestVarGet(\"bossStartDir\"),vector(0,1,0),true);");
code("if (trQuestVarGet(\"secondPhase\") == 1) {");
code("trQuestVarSet(\"bossSpell\", 4);");
code("bossTimeout = trTimeMS() + 500;");
code("bossAngle = 0;");
code("trQuestVarSet(\"bossAngularVelocity\", 3.141592 / 500);");
code("} else {");
code("trUnitSetStance(\"Aggressive\");");
code("bossCooldown(10, 15);");
code("}");
code("} else {");
code("trSetUnitOrientation(xsVectorSet(xsVectorGetX(dir)*0.866025,-0.5,xsVectorGetZ(dir)*0.866025),");
code("xsVectorSet(xsVectorGetX(dir)*0.5,0.866025,xsVectorGetZ(dir)*0.5), true);");
code("}");
code("} else {");
code("amt = trTimeMS() - trQuestVarGet(\"bossLast\");");
code("trQuestVarSet(\"bossLast\", trTimeMS());");
code("if (trQuestVarGet(\"bossSpell\") == 4) {");
code("trQuestVarSet(\"bossScale\", bossScale + 0.001 * amt);");
code("} else {");
code("trQuestVarSet(\"bossScale\", bossScale - 0.001 * amt);");
code("}");
code("bossAngle = bossAngle + amt * trQuestVarGet(\"bossAngularVelocity\");");
code("sVal = xsSin(bossAngle);");
code("cVal = xsCos(bossAngle);");

code("dir = trVectorQuestVarGet(\"bossStartDir\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trSetSelectedScale(1.3,1.3,bossScale);");
code("trSetUnitOrientation(xsVectorSet(xsVectorGetX(dir)*cVal,0.0-sVal,xsVectorGetZ(dir)*cVal),");
code("xsVectorSet(xsVectorGetX(dir)*sVal,cVal,xsVectorGetZ(dir)*sVal), true);");
code("if (trTimeMS() > bossTimeout) {");
code("trQuestVarSet(\"bossSpell\", 1 + trQuestVarGet(\"bossSpell\"));");
code("if (trQuestVarGet(\"bossSpell\") == 5) {");
code("trSoundPlayFN(\"shockwave.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"meteorsplash.wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSet(\"bossDistance\", 0);");
code("bossNext = trTimeMS() - 1;");
code("bossTimeout = bossTimeout + 500;");
code("} else if (trQuestVarGet(\"bossSpell\") == 6) {");
code("trQuestVarSet(\"bossScale\", 1.3);");
code("trSetSelectedScale(bossScale,bossScale,bossScale);");
code("trSetUnitOrientation(trVectorQuestVarGet(\"bossStartDir\"),vector(0,1,0),true);");
code("trUnitSetStance(\"Aggressive\");");
code("bossCooldown(10, 15);");
code("}");
code("}");
code("if (trQuestVarGet(\"bossSpell\") == 5) {");
code("if (trTimeMS() > bossNext) {");
code("bossNext = bossNext + 100;");
code("trQuestVarSet(\"bossDistance\", 6 + trQuestVarGet(\"bossDistance\"));");
code("pos = bossPos + (dir * trQuestVarGet(\"bossDistance\"));");
code("trArmyDispatch(\"0,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"0,0\");");
code("trUnitChangeProtoUnit(\"Meteor Impact Water\");");
code("for(x=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("xUnitSelectByID(dPlayerUnits, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (unitDistanceToVector(xGetInt(dPlayerUnits, xUnitName), pos) < 16.0) {");
code("damagePlayerUnit(500);");
code("if (trUnitAlive()) {");
code("stunUnit(dPlayerUnits, 2.0);");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");
code("} else if (xGetInt(dEnemies, xStunStatus, bossPointer) == 0) {");
code("trQuestVarSetFromRand(\"bossSpell\", 0, xsMin(3, trUnitPercentDamaged() * 0.05), true);");
code("trQuestVarSet(\"bossSpell\", trQuestVarGet(\"bossSpell\") * 10 + 1);");
code("if (trQuestVarGet(\"bossSpell\") == 31 && trQuestVarGet(\"bossUltimate\") > 0) {");
code("trQuestVarSetFromRand(\"bossSpell\", 0, 2, true);");
code("trQuestVarSet(\"bossSpell\", 1 + 10 * trQuestVarGet(\"bossSpell\"));");
code("}");
code("}");
code("} else {");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("xsDisableSelf();");
code("trMusicStop();");
code("xsDisableRule(\"boss_music\");");
code("if (trQuestVarGet(\"secondPhase\") == 1) {");
code("xsEnableRule(\"boss_ded\");");
code("xsDisableRule(\"gameplay_always\");");
code("} else {");
code("trQuestVarSet(\"secondPhase\", 1);");
code("trQuestVarSet(\"cinStep\", 0);");
code("trQuestVarSet(\"cinTime\", trTime() + 3);");
code("xsEnableRule(\"boss7_start_again\");");
code("trForceNonCinematicModels(true);");
code("trUIFadeToColor(0,0,0,1000,0,true);");
code("trLetterBox(true);");
code("}");
code("boss = 0;");
code("trSetLighting(\"Fimbulwinter\", 1.0);");
code("trSoundPlayFN(\"win.wav\",\"1\",-1,\"\",\"\");");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("trDamageUnitPercent(100);");
code("}");
code("uiLookAtUnitByName(\"\"+bossUnit);");
code("}");
code("}");


code("rule boss7_start_again");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > trQuestVarGet(\"cinTime\")) {");
code("trQuestVarSet(\"cinStep\", 1 + trQuestVarGet(\"cinStep\"));");
code("switch(1*trQuestVarGet(\"cinStep\"))");
code("{");
code("case 1:");
code("{");
code("trSoundPlayFN(\"\",\"1\",-1,\"Mother of the Depths:Don't you dare think this is over!\");");
code("trQuestVarSet(\"cinTime\", trTime() + 4);");
code("}");
code("case 2:");
code("{");
code("trSoundPlayFN(\"cinematics\15_in\gong.wav\",\"1\",-1,\"Mother of the Depths:Children of the depths, heed my call!\");");
code("trQuestVarSet(\"cinTime\", trTime() + 4);");
code("}");
code("case 3:");
code("{");
code("xsEnableRule(\"boss7_battle\");");
code("bossUnit = trGetNextUnitScenarioNameNumber();");
code("vector pos = trVectorQuestVarGet(\"bossRoomCenter\");");
code("trArmyDispatch(\"\"+ENEMY_PLAYER+\",0\",\"Dwarf\",1,");
code("xsVectorGetX(pos),0,xsVectorGetZ(pos),225,true);");
code("trArmySelect(\"\"+ENEMY_PLAYER+\",0\");");
code("trUnitChangeProtoUnit(\"Scylla\");");
code("boss = trQuestVarGet(\"stage\");");
code("activateEnemy(bossUnit);");
code("bossPointer = xGetNewestPointer(dEnemies);");
code("xSetBool(dEnemies, xLaunched, true);");
code("bossCooldown(10, 15);");
code("xsEnableRule(\"boss_music\");");
code("trLetterBox(false);");
code("trUIFadeToColor(0,0,0,1000,0,false);");
code("trQuestVarSet(\"musicTime\", 0);");

code("int next = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"\"+ENEMY_PLAYER+\",0\",\"Hydra\",1,");
code("xsVectorGetX(pos) + 6.0,0,xsVectorGetZ(pos) - 6.0,225,true);");
code("activateEnemy(next);");
code("next = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"\"+ENEMY_PLAYER+\",0\",\"Hydra\",1,");
code("xsVectorGetX(pos) - 6.0,0,xsVectorGetZ(pos) + 6.0,225,true);");
code("activateEnemy(next);");
code("}");
code("}");
code("}");
code("}");

code("int dDragonMeteors = 0;");
code("int xDragonMeteorSFX = 0;");
code("int xDragonMeteorTimeout = 0;");
code("int xDragonMeteorPos = 0;");

code("int dFallingFireballs = 0;");

code("int dDragonFireballs = 0;");
code("int xDragonFireballRemove = 0;");

code("rule boss8_init");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > trQuestVarGet(\"cinTime\")) {");
code("switch(1*trQuestVarGet(\"cinStep\"))");
code("{");
code("case 0:");
code("{");
code("trOverlayText(\"Lord of the Heavens\", 3.0, -1, -1, -1);");
code("trQuestVarSet(\"cinTime\", trTime() + 2);");
code("xsDisableRule(\"the_cloud_damage\");");
code("xsEnableRule(\"the_clouds_build_01\");");

code("dDragonMeteors = xInitDatabase(\"dragonMeteors\");");
code("xInitAddInt(dDragonMeteors, \"name\");");
code("xDragonMeteorSFX = xInitAddInt(dDragonMeteors, \"sfx\");");
code("xDragonMeteorTimeout = xInitAddInt(dDragonMeteors, \"timeout\");");
code("xDragonMeteorPos = xInitAddVector(dDragonMeteors, \"pos\");");

code("dFallingFireballs = initGenericProj(\"fallingFireballs\",kbGetProtoUnitID(\"Fire Giant\"),19,10.0,0,0,ENEMY_PLAYER);");

code("dDragonFireballs = initGenericProj(\"dragonFireballs\",kbGetProtoUnitID(\"Fire Giant\"),19,10,4.5,0,ENEMY_PLAYER,true);");
code("xDragonFireballRemove = xInitAddBool(dDragonFireballs, \"remove\");");
code("}");
code("case 1:");
code("{");
code("trModifyProtounit(\"Meteor\", 0, 8, -12);");
code("trPaintTerrain(0,0,5,5,0,70,true);");
code("trPaintTerrain(0,0,5,5,TERRAIN_WALL,TERRAIN_SUB_WALL,false);");
code("TERRAIN_WALL = 4;");
code("TERRAIN_SUB_WALL = 15;");
code("bossDir = vector(0,0,-1);");
code("int db = trQuestVarGet(\"cloudTornados\");");
code("for(i=0; < 10) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+aiPlanGetUserVariableInt(ARRAYS,db,i),true);");
code("trUnitDestroy();");
code("}");
code("trLetterBox(false);");
code("trUIFadeToColor(0,0,0,1000,0,false);");
code("xsDisableSelf();");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trUnitConvert(ENEMY_PLAYER);");
code("trUnitSetStance(\"Passive\");");
code("trSetSelectedScale(bossScale, bossScale, bossScale);");
code("xsEnableRule(\"boss8_battle\");");
code("trQuestVarSet(\"bossGem\", STARSTONE);");
code("trQuestVarSetFromRand(\"bossGemCount\", 4, 5, true);");
code("xsEnableRule(\"boss_music\");");

code("vector pos = trVectorQuestVarGet(\"bossRoomCenter\");");
code("trQuestVarSet(\"bossStatue\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"0,0\",\"Dwarf\",1,xsVectorGetX(pos)+1,0,xsVectorGetZ(pos)+1,225,true);");
code("trArmySelect(\"0,0\");");
code("trUnitChangeProtoUnit(\"Statue of Lightning\");");
code("trArmySelect(\"0,0\");");
code("trUnitOverrideAnimation(2,0,true,false,-1);");

code("xSetPointer(dEnemies, bossPointer);");
code("xFreeDatabaseBlock(dEnemies);");

code("trVectorQuestVarSet(\"bossSmitePos\", trVectorQuestVarGet(\"bossRoomCenter\") + xsVectorSet(1, 6 + worldHeight, 1));");


code("trQuestVarSet(\"bossBreath1\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"0,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"0,0\");");
code("trSetSelectedScale(0,0,0);");
code("trMutateSelected(kbGetProtoUnitID(\"Meteorite\"));");
code("trQuestVarSet(\"bossBreath2\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"0,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"0,0\");");
code("trSetSelectedScale(0,0,0);");
code("trMutateSelected(kbGetProtoUnitID(\"Meteorite\"));");

code("trQuestVarSet(\"bossSmiteLaser\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"0,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"0,0\");");
code("trMutateSelected(kbGetProtoUnitID(\"Petosuchus Projectile\"));");
code("trSetSelectedScale(0,0,0);");
code("pos = trVectorQuestVarGet(\"bossSmitePos\");");
code("trUnitTeleport(xsVectorGetX(pos),xsVectorGetY(pos),xsVectorGetZ(pos));");

code("trMessageSetText(\"Bring Spark relics to the statue in the middle to damage the boss.\", -1);");

code("trQuestVarSet(\"secondPhase\", 1);");

code("trStringQuestVarSet(\"advice\",");
code("\"You need to bring Spark Relics to the statue in the middle in order to deal damage to him.\");");
code("}");
code("}");
code("trQuestVarSet(\"cinStep\", 1 + trQuestVarGet(\"cinStep\"));");
code("}");
code("}");


code("void dragonMeteor(vector pos = vector(0,0,0)) {");
code("int next = trGetNextUnitScenarioNameNumber();");
code("trArmyDispatch(\"0,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"0,0\");");
code("trUnitChangeProtoUnit(\"Relic\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\");");
code("trMutateSelected(kbGetProtoUnitID(\"Hero Birth\"));");
code("xAddDatabaseBlock(dDragonMeteors, true);");
code("xSetInt(dDragonMeteors, xUnitName, next);");
code("xSetInt(dDragonMeteors, xDragonMeteorSFX, trGetNextUnitScenarioNameNumber());");
code("xSetInt(dDragonMeteors, xDragonMeteorTimeout, trTimeMS() + 2000);");
code("xSetVector(dDragonMeteors, xDragonMeteorPos, pos);");
code("trArmyDispatch(\"0,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"0,0\");");
code("trUnitChangeProtoUnit(\"Gaia Forest effect\");");
code("}");

code("rule boss8_battle");
code("inactive");
code("highFrequency");
code("{");
code("int p = 0;");
code("int x = 0;");
code("int action = 0;");
code("int id = 0;");
code("float current = 0;");
code("float dist = 0;");
code("float amt = 0;");
code("bool hit = false;");
code("vector pos = vector(0,0,0);");
code("vector dir = vector(0,0,0);");

code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("if (trUnitAlive()) {");
code("switch(1*trQuestVarGet(\"bossSmiteStep\"))");
code("{");
code("case 0:");
code("{");
code("if (trQuestVarGet(\"bossSmite\") > 0) {");
code("trQuestVarSet(\"bossSmite\", trQuestVarGet(\"bossSmite\") - 1);");
code("bossPos = kbGetBlockPosition(\"\"+bossUnit, true);");
code("vector up = rotationMatrix(getUnitVector(trVectorQuestVarGet(\"bossSmitePos\"), bossPos));");
code("dir = getUnitVector3d(bossPos, trVectorQuestVarGet(\"bossSmitePos\"));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossSmiteLaser\");");
code("trSetSelectedScale(5.0, 5.0, 40.0);");
code("trUnitHighlight(10.0, false);");
code("trSetUnitOrientation(dir,up,true);");
code("trQuestVarSet(\"bossSmiteStep\", 1);");
code("trQuestVarSet(\"bossSmiteNext\", trTimeMS() + 500);");
code("trQuestVarSetFromRand(\"sound\", 1, 5, true);");
code("trSoundPlayFN(\"ui\lightning\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trDamageUnitPercent(1);");
code("}");
code("}");
code("case 1:");
code("{");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossSmiteLaser\");");
code("amt = trQuestVarGet(\"bossSmiteNext\") - trTimeMS();");
code("if (amt > 0) {");
code("amt = amt * 0.01;");
code("trSetSelectedScale(amt, amt, 40.0);");
code("} else {");
code("trSetSelectedScale(0,0,0);");
code("trQuestVarSet(\"bossSmiteStep\", 0);");
code("}");
code("}");
code("}");
code("if (xGetDatabaseCount(dFallingFireballs) > 0) {");
code("for(i=xsMin(3, xGetDatabaseCount(dFallingFireballs)); >0) {");
code("if (PROJ_GROUND == processGenericProj(dFallingFireballs)) {");
code("trUnitChangeProtoUnit(\"Dwarf\");");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dFallingFireballs, xUnitName), true);");
code("xUnitSelectByID(dFallingFireballs, xUnitID);");
code("trDamageUnitPercent(-100);");
code("trUnitChangeProtoUnit(\"Meteorite\");");
code("xUnitSelectByID(dFallingFireballs, xUnitID);");
code("trDamageUnitPercent(100);");
code("trQuestVarSetFromRand(\"sound\", 1, 2, true);");
code("trSoundPlayFN(\"fireball fall \" + 1*trQuestVarGet(\"sound\") + \".wav\",\"1\",-1,\"\",\"\");");
code("for (j=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("xUnitSelectByID(dPlayerUnits, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (unitDistanceToVector(xGetInt(dPlayerUnits, xUnitName),pos) < 9) {");
code("damagePlayerUnit(200);");
code("}");
code("}");
code("xFreeDatabaseBlock(dFallingFireballs);");
code("}");
code("}");

code("}");

code("if (xGetDatabaseCount(dDragonMeteors) > 0) {");
code("hit = false;");
code("for(i=xsMin(3, xGetDatabaseCount(dDragonMeteors)); >0) {");
code("xDatabaseNext(dDragonMeteors);");
code("if (trTimeMS() > xGetInt(dDragonMeteors, xDragonMeteorTimeout)) {");
code("hit = true;");
code("xUnitSelect(dDragonMeteors, xDragonMeteorSFX);");
code("trDamageUnitPercent(100);");
code("trUnitChangeProtoUnit(\"Meteorite\");");
code("xUnitSelect(dDragonMeteors, xUnitName);");
code("trUnitChangeProtoUnit(\"Meteor\");");
code("pos = xGetVector(dDragonMeteors, xDragonMeteorPos);");
code("for(j=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("xUnitSelectByID(dPlayerUnits, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (unitDistanceToVector(xGetInt(dPlayerUnits, xUnitName), pos) < 25.0) {");
code("damagePlayerUnit(1000.0);");
code("}");
code("}");
code("xFreeDatabaseBlock(dDragonMeteors);");
code("}");
code("}");
code("if (hit) {");
code("trSoundPlayFN(\"meteorsmallhit.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"meteordustcloud.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");

code("if (xGetDatabaseCount(dDragonFireballs) > 0) {");
code("for(i=xsMin(5, xGetDatabaseCount(dDragonFireballs)); >0) {");
code("action = processGenericProj(dDragonFireballs);");
code("if (action == PROJ_FALLING) {");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dDragonFireballs, xUnitName), true);");
code("prev = xGetVector(dDragonFireballs, xProjPrev);");
code("dist = distanceBetweenVectors(pos, prev);");
code("hit = false;");
code("if (dist > 1.0) {");
code("dir = xGetVector(dDragonFireballs, xProjDir);");
code("for(j=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("xUnitSelectByID(dPlayerUnits, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (rayCollision(dPlayerUnits,prev,dir, dist + 1.0, 2.0)) {");
code("damagePlayerUnit(300);");
code("hit = true;");
code("}");
code("}");
code("if (hit) {");
code("trQuestVarSetFromRand(\"sound\", 1, 2, true);");
code("trSoundPlayFN(\"fireball fall \" + 1*trQuestVarGet(\"sound\") + \".wav\",\"1\",-1,\"\",\"\");");
code("xUnitSelect(dDragonFireballs, xUnitName);");
code("trUnitChangeProtoUnit(\"Meteorite\");");
code("xFreeDatabaseBlock(dDragonFireballs);");
code("}");
code("}");
code("if (hit == false) {");
code("xSetVector(dDragonFireballs, xProjPrev, pos);");
code("}");
code("} else if (action == PROJ_GROUND) {");
code("if (terrainIsType(vectorToGrid(pos), 4, 15)) {");
code("xSetBool(dDragonFireballs,xDragonFireballRemove,true);");
code("}");
code("} else if (action == PROJ_BOUNCE) {");
code("if (xGetBool(dDragonFireballs,xDragonFireballRemove)) {");
code("xFreeDatabaseBlock(dDragonFireballs);");
code("}");
code("}");
code("}");
code("}");

code("for (i=xGetDatabaseCount(dCloudDeployStars); >0) {");
code("if (PROJ_GROUND == processGenericProj(dCloudDeployStars)) {");
code("trUnitChangeProtoUnit(trStringQuestVarGet(\"enemyProto\"+1*trQuestVarGet(\"cloudDeployProto\")));");
code("xUnitSelectByID(dCloudDeployStars, xUnitID);");
code("trDamageUnitPercent(-100);");
code("activateEnemy(xGetInt(dCloudDeployStars, xUnitName), -1, RELIC_SPARK);");
code("xFreeDatabaseBlock(dCloudDeployStars);");
code("trQuestVarSetFromRand(\"sound\", 1, 2, true);");
code("trSoundPlayFN(\"vortexland\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");

code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("if (trQuestVarGet(\"bossSpell\") == BOSS_SPELL_COOLDOWN) {");
code("if (trTimeMS() > trQuestVarGet(\"bossCooldownTime\")) {");
code("trQuestVarSet(\"bossSpell\", 0);");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") > 40) {");
code("if (trQuestVarGet(\"bossSpell\") == 41) {");
code("trQuestVarSetFromRand(\"bossCount\", 3, 6, true);");
code("trQuestVarSetFromRand(\"cloudDeployProto\", 1, 6, true);");
code("if (bossCount + xGetDatabaseCount(dEnemies) > ENEMY_PLAYER) {");
code("bossCount = ENEMY_PLAYER - xGetDatabaseCount(dEnemies);");
code("}");
code("trQuestVarSet(\"bossSpell\", 42);");
code("bossNext = trTimeMS();");
code("if (bossCount > 0) {");
code("trQuestVarSet(\"bCos\", xsCos(6.283185 / bossCount));");
code("trQuestVarSet(\"bSin\", xsSin(6.283185 / bossCount));");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") == 42) {");
code("if (bossCount <= 0) {");
code("bossCooldown(5, 10);");
code("} else if (trTimeMS() > bossNext) {");
code("trQuestVarSetFromRand(\"sound\", 1, 3, true);");
code("trSoundPlayFN(\"suckup\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("bossNext = bossNext + 200;");
code("trQuestVarSet(\"posx\", trQuestVarGet(\"bossRoomCenterx\") - trQuestVarGet(\"bossDirx\") * 16.0);");
code("trQuestVarSet(\"posz\", trQuestVarGet(\"bossRoomCenterz\") - trQuestVarGet(\"bossDirz\") * 16.0);");
code("addGenericProj(\"cloudDeployStars\",\"pos\",\"bossDir\",kbGetProtoUnitID(\"Lampades\"),18,0.01,2.5,0,ENEMY_PLAYER);");
code("bossDir = rotationMatrix(\"bossDir\",trQuestVarGet(\"bCos\"),trQuestVarGet(\"bSin\"));");
code("bossCount = bossCount - 1;");
code("}");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") > 30) {");
code("if (trQuestVarGet(\"bossSpell\") == 31) {");
code("trQuestVarSet(\"bossUsedUltimate\", 1);");
code("trSoundPlayFN(\"cinematics\15_in\gong.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"godpower.wav\",\"1\",-1,\"\",\"\");");
code("trSetLighting(\"night\", 1.0);");
code("trOverlayText(\"Heavenfall\",3.0,-1,-1,-1);");
code("bossPos = kbGetBlockPosition(\"\"+bossUnit, true);");
code("trArmyDispatch(\"0,0\",\"Dwarf\",2,trQuestVarGet(\"bossPosx\"),0,trQuestVarGet(\"bossPosz\"),0,true);");
code("trArmySelect(\"0,0\");");
code("trUnitChangeProtoUnit(\"Vision SFX\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("trQuestVarSet(\"bossSpell\", 32);");
code("trQuestVarSet(\"bossBarrageCount\", 1);");
code("} else if (trQuestVarGet(\"bossSpell\") == 32) {");
code("if (trQuestVarGet(\"bossBarrageCount\") >= 4) {");
code("trQuestVarSet(\"bossSpell\", 36);");
code("trQuestVarSet(\"bossDist\", 5.0);");
code("bossNext = trTimeMS() + 3000;");
code("} else {");
code("bossCount = 3;");
code("trQuestVarSet(\"bossSpell\", 33);");
code("bossNext = trTimeMS() + 1500;");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") == 33) {");
code("if (trTimeMS() > bossNext) {");
code("for(p=1; < ENEMY_PLAYER) {");
code("if (trQuestVarGet(\"p\"+p+\"dead\") == 0) {");
code("trVectorSetUnitPos(\"pos\", \"p\"+p+\"unit\");");
code("vectorSnapToGrid(\"pos\");");
code("dragonMeteor(\"pos\");");
code("}");
code("}");
code("bossCount = bossCount - 1;");
code("if (bossCount == 0) {");
code("trQuestVarSet(\"bossSpell\", 34);");
code("bossNext = trTimeMS() + 2000;");
code("bossCount = trQuestVarGet(\"bossBarrageCount\");");
code("trQuestVarSet(\"bossBarrageCount\", 1 + trQuestVarGet(\"bossBarrageCount\"));");
code("} else {");
code("bossNext = bossNext + 1000;");
code("}");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") == 34) {");
code("if (trTimeMS() > bossNext) {");
code("trQuestVarSet(\"bossSpell\", 35);");
code("bossDir = rotationMatrix(\"bossDir\", -0.757323, 0.653041);");
code("trQuestVarSet(\"bossPosx\", trQuestVarGet(\"bossRoomCenterx\") + trQuestVarGet(\"bossDirx\") * 20.0);");
code("trQuestVarSet(\"bossPosz\", trQuestVarGet(\"bossRoomCenterz\") + trQuestVarGet(\"bossDirz\") * 20.0);");
code("for(i=xGetDatabaseCount(dPlayerCharacters); >0) {");
code("if (xDatabaseNext(dPlayerCharacters,true) == -1 || trUnitAlive() == false) {");
code("removePlayerCharacter();");
code("} else {");
code("trVectorSetUnitPos(\"bossTarget\", dPlayerCharacters);");
code("break;");
code("}");
code("}");
code("bossDir = zGetUnitVector(\"bossPos\", \"bossTarget\");");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") == 35) {");
code("if (trTimeMS() > bossNext) {");
code("bossNext = bossNext + 200;");
code("trQuestVarSetFromRand(\"modx\", -3, 3, false);");
code("trQuestVarSetFromRand(\"modz\", -3, 3, false);");
code("trQuestVarSet(\"modx\", trQuestVarGet(\"modx\") + trQuestVarGet(\"bossPosx\"));");
code("trQuestVarSet(\"modz\", trQuestVarGet(\"modz\") + trQuestVarGet(\"bossPosz\"));");
code("vectorSnapToGrid(\"mod\");");
code("dragonMeteor(\"mod\");");
code("trQuestVarSet(\"bossPosx\", trQuestVarGet(\"bossPosx\") + 4.0 * trQuestVarGet(\"bossDirx\"));");
code("trQuestVarSet(\"bossPosz\", trQuestVarGet(\"bossPosz\") + 4.0 * trQuestVarGet(\"bossDirz\"));");
code("if (zDistanceBetweenVectorsSquared(\"bossPos\",\"bossRoomCenter\") > 441.0) {");
code("bossCount = bossCount - 1;");
code("if (bossCount > 0) {");
code("bossNext = trTimeMS() + 2000;");
code("trQuestVarSet(\"bossSpell\", 34);");
code("} else {");
code("trQuestVarSet(\"bossSpell\", 32);");
code("}");
code("}");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") == 36) {");
code("if (trTimeMS() > bossNext) {");
code("bossNext = trTimeMS() + 100;");
code("trQuestVarSet(\"posx\", trQuestVarGet(\"bossRoomCenterx\") + trQuestVarGet(\"bossDirx\") * trQuestVarGet(\"bossDist\"));");
code("trQuestVarSet(\"posz\", trQuestVarGet(\"bossRoomCenterz\") + trQuestVarGet(\"bossDirz\") * trQuestVarGet(\"bossDist\"));");
code("vectorSnapToGrid(\"pos\");");
code("dragonMeteor(\"pos\");");
code("trQuestVarSet(\"bossDist\", trQuestVarGet(\"bossDist\") + 1.0);");
code("if (trQuestVarGet(\"bossDist\") >= 20) {");
code("trQuestVarSet(\"bossSpell\", 41);");
code("trQuestVarSet(\"bossUltimate\", 3);");
code("trSetLighting(\"default\", 1.0);");
code("trSoundPlayFN(\"godpowerfailed.wav\",\"1\",-1,\"\",\"\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trUnitChangeProtoUnit(\"Nidhogg\");");
code("} else {");
code("bossDir = rotationMatrix(\"bossDir\", 0.71934, 0.694658);");
code("}");
code("}");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") > 20) {");
code("if (trQuestVarGet(\"bossSpell\") == 21) {");
code("trQuestVarSet(\"bossPosx\", trQuestVarGet(\"bossRoomCenterx\") - trQuestVarGet(\"bossDirx\") * 24.0 - 1.0);");
code("trQuestVarSet(\"bossPosz\", trQuestVarGet(\"bossRoomCenterz\") - trQuestVarGet(\"bossDirz\") * 24.0 - 1.0);");
code("vectorSnapToGrid(\"bossPos\");");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+ENEMY_PLAYER+\",0\",\"Dwarf\",1,trQuestVarGet(\"bossPosx\"),0,trQuestVarGet(\"bossPosz\"),0,true);");
code("trArmySelect(\"\"+ENEMY_PLAYER+\",0\");");
code("trSetUnitOrientation(bossDir,vector(0,1,0),true);");
code("trUnitChangeProtoUnit(\"Helepolis\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trMutateSelected(kbGetProtoUnitID(\"Dwarf\"));");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"next\"));");
code("trUnitChangeProtoUnit(\"Nidhogg\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trUnitSetStance(\"Passive\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\");");
code("trUnitChangeProtoUnit(\"Rocket\");");
code("trQuestVarSet(\"bossSpell\", 22);");
code("bossNext = trTimeMS() + 5000;");
code("} else if (trQuestVarGet(\"bossSpell\") == 22) {");
code("if (trTimeMS() > bossNext) {");
code("trSoundPlayFN(\"nidhoggflame2.wav\",\"1\",-1,\"\",\"\");");
code("bossDir = rotationMatrix(\"bossDir\", 0.34202, 0.939693);");
code("bossAngle = angleBetweenVectors(\"zeroVector\", \"bossDir\");");
code("trQuestVarSet(\"bossSpell\", 23);");
code("bossNext = trTimeMS();");
code("bossTimeout = trTimeMS() + 2000;");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") == 23) {");
code("while (trTimeMS() > bossNext) {");
code("addGenericProj(dDragonFireballs,\"bossPos\",\"bossDir\");");
code("yAddUpdateVar(dDragonFireballs,\"prevX\",trQuestVarGet(\"bossPosX\"));");
code("yAddUpdateVar(dDragonFireballs,\"prevZ\",trQuestVarGet(\"bossPosZ\"));");
code("yAddUpdateVar(dDragonFireballs, \"rm\", 0);");
code("trSetSelectedScale(0,2,0);");
code("bossNext = bossNext + 100;");
code("bossDir = rotationMatrix(\"bossDir\", 0.992546, -0.121869);");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trSetUnitOrientation(bossDir,vector(0,1,0),true);");
code("}");
code("if (trTimeMS() > bossTimeout) {");
code("trQuestVarSet(\"bossSpell\", 41);");
code("trUnitSetStance(\"Aggressive\");");
code("trUnitMoveToPoint(trQuestVarGet(\"bossRoomCenterX\"),0,trQuestVarGet(\"bossRoomCenterZ\"),-1,true);");
code("}");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") > 10) {");
code("if (trQuestVarGet(\"bossSpell\") == 11) {");
code("trSoundPlayFN(\"nidhoggflame1.wav\",\"1\",-1,\"\",\"\");");
code("trMutateSelected(kbGetProtoUnitID(\"Nidhogg\"));");
code("trUnitSetStance(\"Passive\");");
code("trUnitOverrideAnimation(2,-1,true,false,-1);");
code("bossPos = kbGetBlockPosition(\"\"+bossUnit, true);");
code("for(i=2; > 0) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossBreath\"+i);");
code("trUnitTeleport(trQuestVarGet(\"bossPosx\"),trQuestVarGet(\"bossPosy\"),trQuestVarGet(\"bossPosz\"));");
code("}");
code("for(x=xGetDatabaseCount(dPlayerCharacters); >0) {");
code("if (xDatabaseNext(dPlayerCharacters,true) == -1 || trUnitAlive() == false) {");
code("removePlayerCharacter();");
code("} else {");
code("bossTarget = trQuestVarGet(dPlayerCharacters));");
code("trVectorSetUnitPos(\"bossTarget\", dPlayerCharacters);");
code("break;");
code("}");
code("}");
code("bossDir = zGetUnitVector(\"bossPos\", \"bossTarget\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trSetUnitOrientation(bossDir,vector(0,1,0),true);");
code("trQuestVarSet(\"bossSpell\", 12);");
code("bossNext = trTimeMS() + 1500;");
code("} else if (trQuestVarGet(\"bossSpell\") == 12) {");
code("if (trTimeMS() > bossNext) {");
code("trQuestVarSet(\"bossLast\", trTimeMS());");
code("bossNext = trTimeMS() + 500;");
code("bossTimeout = trTimeMS() + 8000;");
code("trSoundPlayFN(\"sonofosirisbolt.wav\",\"1\",-1,\"\",\"\");");
code("trVectorQuestVarSet(\"dir\", zGetUnitVector3d(\"bossPos\", \"bossTarget\", 5.0));");
code("for(i=2; >0) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossBreath\"+i);");
code("trMutateSelected(kbGetProtoUnitID(\"Meteorite\"));");
code("trUnitOverrideAnimation(6,0,true,false,-1);");
code("trSetSelectedUpVector(trQuestVarGet(\"dirx\"),trQuestVarGet(\"diry\") - 1.0,trQuestVarGet(\"dirz\"));");
code("}");
code("trSetSelectedUpVector(0,-1,0);");
code("trQuestVarSet(\"bossSpell\", 13);");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") == 13) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossTarget\");");
code("if (trUnitAlive() == false) {");
code("for(i=xGetDatabaseCount(dPlayerCharacters); >0) {");
code("if (xDatabaseNext(dPlayerCharacters,true) == -1 || trUnitAlive() == false) {");
code("removePlayerCharacter();");
code("} else {");
code("bossTarget = trQuestVarGet(dPlayerCharacters));");
code("break;");
code("}");
code("}");
code("}");
code("trVectorSetUnitPos(\"dest\", \"bossTarget\");");
code("if (zDistanceBetweenVectorsSquared(\"dest\", \"bossTarget\") > 0.1) {");
code("amt = trTimeMS() - trQuestVarGet(\"bossLast\");");
code("trQuestVarSet(\"bossLast\", trTimeMS());");
code("amt = amt * 0.004;");
code("if (trQuestVarGet(\"secondPhase\") == 1) {");
code("amt = amt * 1.5;");
code("}");
code("trVectorQuestVarSet(\"dir\", zGetUnitVector(\"bossTarget\", \"dest\", amt));");
code("trQuestVarSet(\"bossTargetx\", trQuestVarGet(\"bossTargetx\") + trQuestVarGet(\"dirx\"));");
code("trQuestVarSet(\"bossTargetz\", trQuestVarGet(\"bossTargetz\") + trQuestVarGet(\"dirz\"));");
code("if (zDistanceBetweenVectorsSquared(\"bossPos\",\"bossTarget\") > 1.0) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trSetUnitOrientation(zGetUnitVector(\"bossPos\",\"bossTarget\"),vector(0,1,0),true);");
code("trVectorQuestVarSet(\"dir\", zGetUnitVector3d(\"bossPos\", \"bossTarget\", 5.0));");
code("for(i=2; >0) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossBreath\"+i);");
code("trSetSelectedUpVector(trQuestVarGet(\"dirx\"),trQuestVarGet(\"diry\") - 1.0,trQuestVarGet(\"dirz\"));");
code("}");
code("}");
code("} else {");
code("trQuestVarSet(\"bossLast\", trTimeMS());");
code("}");

code("if (trTimeMS() > bossNext) {");
code("for(i=xGetDatabaseCount(dPlayerUnits); >0) {");
code("if (xDatabaseNext(dPlayerUnits,true) == -1 || trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else if (zDistanceToVectorSquared(dPlayerUnits, \"bossTarget\") < 9.0) {");
code("damagePlayerUnit(250);");
code("}");
code("}");

code("trQuestVarSetFromRand(\"sound\", 1, 3, true);");
code("trSoundPlayFN(\"suckup\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");

code("bossNext = bossNext + 500;");
code("if (trTimeMS() > bossTimeout) {");
code("trSoundPlayFN(\"godpowerfailed.wav\",\"1\",-1,\"\",\"\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+bossUnit, true);");
code("trUnitSetStance(\"Aggressive\");");

code("for(i=2; >0) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"bossBreath\"+i);");
code("trSetSelectedUpVector(0,1,0);");
code("trMutateSelected(kbGetProtoUnitID(\"Rocket\"));");
code("trUnitOverrideAnimation(2,0,true,false,-1);");
code("}");
code("trQuestVarSet(\"bossSpell\", 41);");
code("}");
code("}");
code("}");
code("} else if (trQuestVarGet(\"bossSpell\") > 0) {");
code("if (trQuestVarGet(\"bossSpell\") == 1) {");
code("trUnitSetStance(\"Aggressive\");");
code("xDatabaseNext(dPlayerUnits);");
code("trVectorSetUnitPos(\"dest\", dPlayerUnits);");
code("trUnitMoveToPoint(trQuestVarGet(\"destx\"),0,trQuestVarGet(\"destz\"),-1,true);");
code("trQuestVarSet(\"bossSpell\", 2);");
code("bossTimeout = trTimeMS() + 10000;");
code("bossNext = trTimeMS();");
code("bossDir = vector(1,0,0);");
code("} else if (trQuestVarGet(\"bossSpell\") == 2) {");
code("if (trTimeMS() > bossNext) {");
code("if (trQuestVarGet(\"secondPhase\") == 1) {");
code("xsSetContextPlayer(ENEMY_PLAYER);");
code("if (kbUnitGetActionType(1*trQuestVarGet(\"bossID\")) == 6) {");
code("id = kbUnitGetTargetUnitID(1*trQuestVarGet(\"bossID\"));");
code("bossPos = kbGetBlockPosition(\"\"+bossUnit, true);");
code("trVectorQuestVarSet(\"pos\",kbGetBlockPosition(\"\"+trGetUnitScenarioNameNumber(id)));");
code("bossDir = zGetUnitVector(\"bossPos\",\"pos\");");
code("}");
code("bossNext = trTimeMS() + 300;");
code("} else {");
code("bossDir = rotationMatrix(\"bossDir\", -0.757323, 0.653041);");
code("bossNext = trTimeMS() + 500;");
code("}");
code("bossPos = kbGetBlockPosition(\"\"+bossUnit, true);");
code("trQuestVarSetFromRand(\"rand\", 4.0, 10.0, false);");
code("addGenericProj(dFallingFireballs,\"bossPos\",\"bossDir\",ENEMY_PLAYER,trQuestVarGet(\"rand\"));");
code("if (trTimeMS() > bossTimeout) {");
code("trQuestVarSet(\"bossSpell\", 41);");
code("}");
code("}");
code("}");
code("} else if ((trQuestVarGet(\"bossUsedUltimate\") == 0) && trUnitPercentDamaged() >= 70) {");
code("trQuestVarSet(\"bossSpell\", 31);");
code("} else {");
code("trQuestVarSetFromRand(\"bossSpell\", 0, xsMin(3, trUnitPercentDamaged() * 0.05), true);");
code("trQuestVarSet(\"bossSpell\", trQuestVarGet(\"bossSpell\") * 10 + 1);");
code("if (trQuestVarGet(\"bossSpell\") == 31 && trQuestVarGet(\"bossUltimate\") > 0) {");
code("trQuestVarSetFromRand(\"bossSpell\", 0, 2, true);");
code("trQuestVarSet(\"bossSpell\", 1 + 10 * trQuestVarGet(\"bossSpell\"));");
code("}");
code("trQuestVarSet(\"bossUltimate\", trQuestVarGet(\"bossUltimate\") - 1);");
code("}");

code("} else {");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("xsDisableSelf();");
code("trMusicStop();");
code("boss = 0;");
code("trSetLighting(\"default\", 1.0);");
code("trSoundPlayFN(\"win.wav\",\"1\",-1,\"\",\"\");");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies, true);");
code("trDamageUnitPercent(100);");
code("}");
code("uiLookAtUnitByName(\"\"+bossUnit);");
code("xsEnableRule(\"boss_ded\");");
code("xsDisableRule(\"gameplay_always\");");
code("}");
code("}");

code("rule boss_ded");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > trQuestVarGet(\"gameOverNext\")) {");
code("int relic = 0;");
code("trQuestVarSet(\"gameOverStep\", 1 + trQuestVarGet(\"gameOverStep\"));");
code("switch(1*trQuestVarGet(\"gameOverStep\"))");
code("{");
code("case 1:");
code("{");
code("trQuestVarSet(\"playersWon\", 1);");
code("trLetterBox(true);");
code("trUIFadeToColor(0,0,0, 2000,0,true);");
code("trQuestVarSet(\"gameOverNext\", trTime() + 5);");
code("trSoundPlayFN(\"default\",\"1\",-1,");
code("\"Zenophobia: Boss defeated! Here are the rewards!\",\"icons\infantry g hoplite icon 64\");");
code("}");
code("case 2:");
code("{");
code("trQuestVarSet(\"gameOverNext\", trTime() + 3);");
code("int gem = trQuestVarGet(\"bossGem\");");
code("trShowImageDialog(gemstoneIcon(gem), gemstoneName(gem) + \" x\" + 1*trQuestVarGet(\"bossGemCount\"));");
code("trQuestVarSet(\"gemstone\"+gem, trQuestVarGet(\"bossGemCount\") + trQuestVarGet(\"gemstone\"+gem));");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("case 3:");
code("{");
code("trQuestVarSet(\"gameOverNext\", trTime() + 3);");
code("relic = randomStageClosest();");
code("trShowImageDialog(relicIcon(relic), \"Relic: \" + relicName(relic));");
code("trQuestVarSet(\"normalRelicCount\", trQuestVarGet(\"normalRelicCount\") - 1);");
code("if (trQuestVarGet(\"normalRelicCount\") > 0) {");
code("trQuestVarSet(\"gameOverStep\", 2);");
code("}");
code("trQuestVarSet(\"ownedRelics\"+relic, 1 + trQuestVarGet(\"ownedRelics\"+relic));");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("case 4:");
code("{");
code("trQuestVarSet(\"gameOverNext\", trTime() + 3);");
code("relic = randomStageClosest() + 10;");
code("trShowImageDialog(relicIcon(relic), \"Relic: \" + relicName(relic));");
code("trQuestVarSet(\"bossRelicCount\", trQuestVarGet(\"bossRelicCount\") - 1);");
code("if (trQuestVarGet(\"bossRelicCount\") > 0) {");
code("trQuestVarSet(\"gameOverStep\", 3);");
code("}");
code("trQuestVarSet(\"ownedRelics\"+relic, 1 + trQuestVarGet(\"ownedRelics\"+relic));");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("case 5:");
code("{");
code("if (trQuestVarGet(\"stage\") < 10) {");
code("int p = trCurrentPlayer();");
code("int stage = 1 + trQuestVarGet(\"stage\");");
code("if (trQuestVarGet(\"stage\") == xGetInt(dPlayerData, xPlayerProgress, p)+1) {");
code("xSetInt(dPlayerData, xPlayerProgress, xGetInt(dPlayerData, xPlayerProgress, p) + 1, p);");
code("trShowImageDialog(stageIcon(stage), \"Unlocked stage \" + stage + \": \" + stageName(stage) + \"!\");");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"\",\"\");");
code("} else if (trQuestVarGet(\"stage\") > xGetInt(dPlayerData, xPlayerProgress, p)) {");
code("trShowImageDialog(stageIcon(stage), \"You must beat previous stages to unlock this one.\");");
code("trSoundPlayFN(\"cantdothat.wav\",\"1\",-1,\"\",\"\");");
code("} else {");
code("trShowImageDialog(stageIcon(stage), \"You have already unlocked the next stage.\");");
code("}");
code("trQuestVarSet(\"gameOverNext\", trTime() + 5);");
code("}");
code("}");
code("case 6:");
code("{");
code("gadgetUnreal(\"ShowImageBox\");");
code("trQuestVarSet(\"gameOverNext\", trTime() + 8);");
code("trSoundPlayFN(\"default.wav\",\"1\",-1,");
code("\"Zenophobia: Rewards have been sent to your warehouse. You can access them by playing this map in singleplayer.\",");
code("\"icons\infantry g hoplite icon 64\");");
code("trQuestVarSet(\"gameOverStep\", 1);");
code("if (trQuestVarGet(\"newPlayers\") == 0) {");
code("trQuestVarSet(\"gameOverStep\", 4);");
code("}");
code("xsDisableSelf();");
code("xsEnableRule(\"game_over\");");
code("trQuestVarSet(\"bossKills\", 1 + trQuestVarGet(\"bossKills\"));");
code("}");
code("}");
code("gadgetUnreal(\"ShowImageBox-CloseButton\");");
code("}");
code("}");
code("void removeCamTracks(int eventID = -1) {");
code("trackRemove();");
code("trUnblockAllSounds();");
code("}");

code("void fixAnimations(int p = 0) {");
code("int action = 0;");
code("int id = kbGetBlockID(\"\"+xGetInt(dPlayerData,xPlayerUnit,p));");
code("if (id > 0) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData,xPlayerUnit,p),true);");
code("action = kbUnitGetAnimationActionType(id);");
code("if (xGetInt(dPlayerData, xPlayerAnimation, p) == action) {");
code("if (action == -1) {");
code("trUnitOverrideAnimation(-1,0,false,true,-1);");
code("}");
code("} else {");
code("xSetInt(dPlayerData, xPlayerAnimation, action, p);");
code("if ((action == 11) && (xGetInt(dPlayerData, xPlayerAction, p) != 12) &&");
code("(xGetInt(dPlayerData, xPlayerAction, p) != 30)) {");
code("trUnitSetAnimationPath(\"0,0,0,0,0,0,0\");");
code("} else if (action == -1) {");
code("xsSetContextPlayer(p);");
code("action = kbUnitGetActionType(id);");
code("xsSetContextPlayer(0);");
code("xSetInt(dPlayerData, xPlayerAction, action, p);");
code("}");
code("}");
code("}");
code("}");

code("int noSpecialsNext = 0;");
code("void noSpecials() {");
code("if (trTime() > noSpecialsNext) {");
code("noSpecialsNext = trTime();");
code("for(p=ENEMY_PLAYER; >0) {");
code("trModifyProtounit(\"Frost Giant\", p, 9, -99990);");
code("trModifyProtounit(\"Frost Giant\", p, 9, 99999);");
code("trModifyProtounit(\"Medusa\", p, 9, -99990);");
code("trModifyProtounit(\"Medusa\", p, 9, 99999);");
code("trModifyProtounit(\"Mummy\", p, 9, -99990);");
code("trModifyProtounit(\"Mummy\", p, 9, 99999);");
code("trModifyProtounit(\"Scorpion Man\", p, 9, -99990);");
code("trModifyProtounit(\"Scorpion Man\", p, 9, 99999);");
code("trModifyProtounit(\"Battle Boar\", p, 9, -99990);");
code("trModifyProtounit(\"Battle Boar\", p, 9, 99999);");
code("trModifyProtounit(\"Nereid\", p, 9, -99990);");
code("trModifyProtounit(\"Nereid\", p, 9, 99999);");
code("trModifyProtounit(\"Lampades\", p, 9, -99990);");
code("trModifyProtounit(\"Lampades\", p, 9, 99999);");
code("trModifyProtounit(\"Einheriar\", p, 9, -99990);");
code("trModifyProtounit(\"Einheriar\", p, 9, 99999);");
code("}");
code("}");
code("}");

code("void processSilence(int p = 0) {");
code("if (xGetBool(dPlayerData, xPlayerSilenced, p) && (xGetInt(dPlayerData, xPlayerDead, p) == 0)) {");
code("if (xGetInt(dPlayerUnits, xSilenceStatus, xGetInt(dPlayerData, xPlayerIndex)) == 0) {");
code("xSetBool(dPlayerData, xPlayerSilenced, false, p);");
code("if (xGetInt(dPlayerData, xPlayerWellCooldownStatus, p) == ABILITY_READY) {");
code("trTechGodPower(p, \"Underworld Passage\", 1);");
code("if (trCurrentPlayer() == p) {");
code("trCounterAbort(\"well\");");
code("trCounterAddTime(\"well\", -1, -99999, wellName);");
code("}");
code("}");
code("if (xGetInt(dPlayerData, xPlayerLureCooldownStatus, p) == ABILITY_READY) {");
code("trTechGodPower(p, \"Animal magnetism\", 1);");
code("if (trCurrentPlayer() == p) {");
code("trCounterAbort(\"lure\");");
code("trCounterAddTime(\"lure\", -1, -99999, lureName);");
code("}");
code("}");
code("if (xGetInt(dPlayerData, xPlayerRainCooldownStatus, p) == ABILITY_READY) {");
code("trTechGodPower(p, \"rain\", 1);");
code("if (trCurrentPlayer() == p) {");
code("trCounterAbort(\"rain\");");
code("trCounterAddTime(\"rain\", -1, -99999, rainName);");
code("}");
code("}");
code("if (trCurrentPlayer() == p) {");
code("trCounterAbort(\"silence\");");
code("}");
code("}");
code("}");
code("}");

code("void processLifesteal(int p = 0) {");
code("int simp = 0;");
code("if (xGetFloat(dPlayerData, xPlayerLifestealTotal, p) > 0) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData,xPlayerUnit,p),true);");
code("healUnit(p, xGetFloat(dPlayerData,xPlayerLifestealTotal,p), xGetInt(dPlayerData,xPlayerIndex,p));");
code("simp = xGetInt(dPlayerData,xPlayerSimp,p);");
code("if (simp > 0) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData,xPlayerUnit,simp),true);");
code("healUnit(p, xGetFloat(dPlayerData,xPlayerLifestealTotal,p), xGetInt(dPlayerData,xPlayerIndex,simp));");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData,xPlayerUnit,p),true);");
code("}");
code("xSetFloat(dPlayerData,xPlayerLifestealTotal,0,p);");
code("}");
code("}");

code("void processRegen(int p = 0) {");
code("float amt = 0;");
code("float diff = 0;");
code("if (xGetFloat(dPlayerData, xPlayerFavorRegen, p) != 0) {");
code("if (trTimeMS() > xGetInt(dPlayerData, xPlayerRegenerateFavorLast, p) + 1000) {");
code("amt = trTimeMS() - xGetInt(dPlayerData, xPlayerRegenerateFavorLast, p);");
code("amt = amt * 0.001 * xGetFloat(dPlayerData, xPlayerFavorRegen, p);");
code("gainFavor(p, amt);");
code("xSetInt(dPlayerData, xPlayerRegenerateFavorLast,trTimeMS(),p);");
code("}");
code("}");
code("if (trTimeMS() > xGetInt(dPlayerData, xPlayerRegenerateHealthLast, p) + 1000) {");
code("amt = 0;");
code("diff = trTimeMS() - xGetInt(dPlayerData, xPlayerRegenerateHealthLast, p);");
code("if (xGetInt(dPlayerData, xPlayerGodBoon, p) == BOON_REGENERATE_HEALTH) {");
code("amt = diff * 0.00003 * xGetFloat(dPlayerData, xPlayerHealth, p);");
code("}");
code("if (xGetFloat(dPlayerData, xPlayerDefiance, p) > 0) {");
code("amt = amt + 0.001 * diff * xGetFloat(dPlayerData, xPlayerDefiance, p) * xGetDatabaseCount(dEnemies);");
code("}");
code("xSetFloat(dPlayerData, xPlayerLifestealTotal, xGetFloat(dPlayerData, xPlayerLifestealTotal, p) + amt, p);");
code("xSetInt(dPlayerData, xPlayerRegenerateHealthLast, trTimeMS(), p);");
code("}");
code("}");

code("void checkResourceCheating(int p = 0) {");
code("if (trPlayerResourceCount(p, \"gold\") > xGetInt(dPlayerData, xPlayerGold, p)) {");
code("trPlayerGrantResources(p, \"gold\", xGetInt(dPlayerData, xPlayerGold, p) - trPlayerResourceCount(p, \"gold\"));");
code("if (trCurrentPlayer() == p) {");
code("trChatSendSpoofed(0, \"Zenophobia: Did you really think I wouldn't catch that?\");");
code("}");
code("} else if (trPlayerResourceCount(p, \"gold\") < xGetInt(dPlayerData, xPlayerGold, p)) {");
code("xSetInt(dPlayerData, xPlayerGold, trPlayerResourceCount(p, \"gold\"), p);");
code("}");
code("if (trPlayerResourceCount(p, \"favor\") > 1 + xGetFloat(dPlayerData, xPlayerFavor)) {");
code("gainFavor(p, 0);");
code("if (trCurrentPlayer() == p) {");
code("trChatSendSpoofed(0, \"Zenophobia: Nice try, buddy.\");");
code("}");
code("}");
code("}");

code("void checkGodPowers(int p = 0) {");
code("float cost = 0;");
code("switch(xGetInt(dPlayerData, xPlayerWellCooldownStatus, p))");
code("{");
code("case ABILITY_READY:");
code("{");
code("if (trPlayerUnitCountSpecific(p, \"Tunnel\") == 2) {");
code("yFindLatest(\"p\"+p+\"wellObject\", \"Tunnel\", p);");
code("xSetVector(dPlayerData, xPlayerWellPos, kbGetBlockPosition(\"\"+1*trQuestVarGet(\"p\"+p+\"wellObject\"), true), p);");
code("trMutateSelected(kbGetProtoUnitID(\"Rocket\"));");
code("trDamageUnitPercent(100);");
code("yFindLatest(\"p\"+p+\"wellObject\", \"Tunnel\", p);");
code("trMutateSelected(kbGetProtoUnitID(\"Rocket\"));");
code("trDamageUnitPercent(100);");
code("xSetBool(dPlayerData, xPlayerWellActivated, true, p);");
code("xSetInt(dPlayerData, xPlayerWellCooldownStatus, ABILITY_COOLDOWN, p);");
code("xSetInt(dPlayerData, xPlayerWellReadyTime,");
code("trTimeMS() + 1000 * xGetInt(dPlayerData,xPlayerWellCooldown,p) * xGetFloat(dPlayerData,xPlayerCooldownReduction,p), p);");
code("if (trCurrentPlayer() == p) {");
code("trCounterAbort(\"well\");");
code("trCounterAddTime(\"well\",");
code("xGetInt(dPlayerData, xPlayerWellCooldown, p) * xGetFloat(dPlayerData, xPlayerCooldownReduction, p), 0, wellName);");
code("}");
code("} else {");
code("trQuestVarSet(\"p\"+p+\"wellObject\", trGetNextUnitScenarioNameNumber() - 1);");
code("}");
code("}");
code("case ABILITY_COOLDOWN:");
code("{");
code("if (trTimeMS() > xGetInt(dPlayerData, xPlayerWellReadyTime, p)) {");
code("xSetInt(dPlayerData, xPlayerWellCooldownStatus, ABILITY_COST, p);");
code("}");
code("}");
code("case ABILITY_COST:");
code("{");
code("cost = xGetFloat(dPlayerData, xPlayerWellCost, p) * xGetFloat(dPlayerData, xPlayerUltimateCost, p);");
code("if (xGetFloat(dPlayerData, xPlayerFavor, p) >= cost) {");
code("xSetInt(dPlayerData, xPlayerWellCooldownStatus, ABILITY_READY, p);");
code("if (xGetBool(dPlayerData, xPlayerSilenced, p) == false) {");
code("trTechGodPower(p, \"Underworld Passage\", 1);");
code("if (trCurrentPlayer() == p) {");
code("trCounterAddTime(\"well\", -1, -99999, wellName);");
code("if (wellIsUltimate) {");
code("trSoundPlayFN(\"ui\thunder2.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");

code("switch(xGetInt(dPlayerData, xPlayerRainCooldownStatus, p))");
code("{");
code("case ABILITY_READY:");
code("{");
code("if (trCheckGPActive(\"rain\", p)) {");
code("xSetBool(dPlayerData, xPlayerRainActivated, true, p);");
code("xSetInt(dPlayerData, xPlayerRainCooldownStatus, ABILITY_COOLDOWN, p);");
code("xSetInt(dPlayerData, xPlayerRainReadyTime,");
code("trTimeMS() + 1000 * xGetInt(dPlayerData,xPlayerRainCooldown,p) * xGetFloat(dPlayerData,xPlayerCooldownReduction,p), p);");
code("if (trCurrentPlayer() == p) {");
code("trCounterAbort(\"Rain\");");
code("trCounterAddTime(\"Rain\",");
code("xGetInt(dPlayerData, xPlayerRainCooldown, p) * xGetFloat(dPlayerData, xPlayerCooldownReduction, p), 0, rainName);");
code("}");
code("}");
code("}");
code("case ABILITY_COOLDOWN:");
code("{");
code("if (trTimeMS() > xGetInt(dPlayerData, xPlayerRainReadyTime, p)) {");
code("xSetInt(dPlayerData, xPlayerRainCooldownStatus, ABILITY_COST, p);");
code("}");
code("}");
code("case ABILITY_COST:");
code("{");
code("cost = xGetFloat(dPlayerData, xPlayerRainCost, p) * xGetFloat(dPlayerData, xPlayerUltimateCost, p);");
code("if (xGetFloat(dPlayerData, xPlayerFavor, p) >= cost) {");
code("xSetInt(dPlayerData, xPlayerRainCooldownStatus, ABILITY_READY, p);");
code("if (xGetBool(dPlayerData, xPlayerSilenced, p) == false) {");
code("trTechGodPower(p, \"Rain\", 1);");
code("if (trCurrentPlayer() == p) {");
code("trCounterAddTime(\"Rain\", -1, -99999, rainName);");
code("if (rainIsUltimate) {");
code("trSoundPlayFN(\"ui\thunder2.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");

code("switch(xGetInt(dPlayerData, xPlayerLureCooldownStatus, p))");
code("{");
code("case ABILITY_READY:");
code("{");
code("if (trPlayerUnitCountSpecific(p, \"Animal Attractor\") == 1) {");
code("yFindLatestReverse(\"p\"+p+\"LureObject\", \"Animal Attractor\", p);");
code("xSetVector(dPlayerData, xPlayerLurePos, kbGetBlockPosition(\"\"+1*trQuestVarGet(\"p\"+p+\"LureObject\"), true), p);");
code("trMutateSelected(kbGetProtoUnitID(\"Rocket\"));");
code("xSetBool(dPlayerData, xPlayerLureActivated, true, p);");
code("xSetInt(dPlayerData, xPlayerLureCooldownStatus, ABILITY_COOLDOWN, p);");
code("xSetInt(dPlayerData, xPlayerLureReadyTime,");
code("trTimeMS() + 1000 * xGetInt(dPlayerData,xPlayerLureCooldown,p) * xGetFloat(dPlayerData,xPlayerCooldownReduction,p), p);");
code("if (trCurrentPlayer() == p) {");
code("trCounterAbort(\"Lure\");");
code("trCounterAddTime(\"Lure\",");
code("xGetInt(dPlayerData, xPlayerLureCooldown, p) * xGetFloat(dPlayerData, xPlayerCooldownReduction, p), 0, lureName);");
code("}");
code("} else {");
code("trQuestVarSet(\"p\"+p+\"LureObject\", trGetNextUnitScenarioNameNumber() - 1);");
code("}");
code("}");
code("case ABILITY_COOLDOWN:");
code("{");
code("if (trTimeMS() > xGetInt(dPlayerData, xPlayerLureReadyTime, p)) {");
code("xSetInt(dPlayerData, xPlayerLureCooldownStatus, ABILITY_COST, p);");
code("}");
code("}");
code("case ABILITY_COST:");
code("{");
code("cost = xGetFloat(dPlayerData, xPlayerLureCost, p) * xGetFloat(dPlayerData, xPlayerUltimateCost, p);");
code("if (xGetFloat(dPlayerData, xPlayerFavor, p) >= cost) {");
code("xSetInt(dPlayerData, xPlayerLureCooldownStatus, ABILITY_READY, p);");
code("if (xGetBool(dPlayerData, xPlayerSilenced, p) == false) {");
code("trTechGodPower(p, \"animal magnetism\", 1);");
code("if (trCurrentPlayer() == p) {");
code("trCounterAddTime(\"Lure\", -1, -99999, lureName);");
code("if (lureIsUltimate) {");
code("trSoundPlayFN(\"ui\thunder2.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");
code("}");

code("void maintainStun() {");
code("int id = 0;");
code("for(x=xGetDatabaseCount(dStunnedUnits); >0) {");
code("xDatabaseNext(dStunnedUnits);");
code("xUnitSelect(dStunnedUnits, xUnitName);");
code("if (trUnitAlive() == false) {");
code("trUnitChangeProtoUnit(kbGetProtoUnitName(xGetInt(dStunnedUnits, xStunnedProto)));");
code("xFreeDatabaseBlock(dStunnedUnits);");
code("} else {");
code("if ((xGetInt(dStunnedUnits, xUnitName) != bossUnit) ||");
code("(bossAnim == false)) {");
code("trMutateSelected(xGetInt(dStunnedUnits, xStunnedProto));");
code("trUnitOverrideAnimation(2, 0, false, false, -1, 0);");
code("}");
code("}");
code("}");
code("}");

code("void playerLasers() {");
code("for(x=xsMin(3, xGetDatabaseCount(dPlayerLasers)); >0) {");
code("xDatabaseNext(dPlayerLasers);");
code("xUnitSelect(dPlayerLasers, xUnitName);");
code("if (trTimeMS() > xGetInt(dPlayerLasers, xPlayerLaserTimeout)) {");
code("trUnitDestroy();");
code("xFreeDatabaseBlock(dPlayerLasers);");
code("} else {");
code("float width = 4.0 * (xGetInt(dPlayerLasers, xPlayerLaserTimeout) - trTimeMS()) / 500;");
code("trSetSelectedScale(width, width, xGetFloat(dPlayerLasers, xPlayerLaserRange));");
code("}");
code("}");
code("}");

code("void relicTransporterGuy(int p = 0) {");
code("int id = 0;");
code("int db = getWarehouseDB(p);");
code("if (xGetDatabaseCount(db) > 0) {");
code("xDatabaseNext(db);");
code("id = xGetInt(db, xUnitID);");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("if ((trUnitGetIsContained(\"Villager Atlantean Hero\") || trUnitGetIsContained(\"Cinematic Block\")) == false) {");
code("if (xGetInt(db, xRelicType) < KEY_RELICS ||");
code("trPlayerUnitCountSpecific(p, \"Villager Atlantean Hero\") == 0) {");
code("if (kbGetUnitBaseTypeID(id) == relicProto(xGetInt(db, xRelicType))) {");
code("trUnitChangeProtoUnit(\"Relic\");");
code("xAddDatabaseBlock(dFreeRelics, true);");
code("xSetInt(dFreeRelics, xUnitName, xGetInt(db, xUnitName));");
code("xSetInt(dFreeRelics, xRelicType, xGetInt(db, xRelicType));");
code("}");
code("} else {");
code("trSoundPlayFN(\"storehouse.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("xFreeDatabaseBlock(db);");
code("}");
code("}");
code("}");

code("void processFreeRelics(int count = 1) {");
code("float amt = 0;");
code("int db = 0;");
code("vector pos = vector(0,0,0);");
code("for (x=xsMin(count, xGetDatabaseCount(dFreeRelics)); > 0) {");
code("amt = 0;");
code("xDatabaseNext(dFreeRelics);");
code("xUnitSelect(dFreeRelics, xUnitName);");
code("if (trUnitGetIsContained(\"Unit\")) {");
code("if (trUnitGetIsContained(\"Villager Atlantean Hero\")) {");
code("if (xGetInt(dFreeRelics, xRelicType) == RELIC_NICKONHAWK) {");
code("if (trUnitIsOwnedBy(trCurrentPlayer())) {");
code("startNPCDialog(NPC_NICK_NO);");
code("}");
code("trUnitChangeProtoUnit(\"Relic\");");
code("} else {");
code("for(p=1; < ENEMY_PLAYER) {");
code("if (trUnitIsOwnedBy(p)) {");
code("trSetSelectedScale(0,0,-1);");
code("trMutateSelected(relicProto(xGetInt(dFreeRelics, xRelicType)));");
code("if (xGetInt(dFreeRelics, xRelicType) < KEY_RELICS) {");
code("trUnitSetAnimationPath(\"1,0,1,1,0,0,0\");");
code("}");
code("db = getWarehouseDB(p);");
code("xAddDatabaseBlock(db, true);");
code("xSetInt(db, xUnitName, xGetInt(dFreeRelics, xUnitName));");
code("xSetInt(db, xRelicType, xGetInt(dFreeRelics, xRelicType));");
code("xFreeDatabaseBlock(dFreeRelics);");
code("break;");
code("}");
code("}");
code("}");
code("} else {");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dFreeRelics, xUnitName), true);");
code("for(p=1; < ENEMY_PLAYER) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xPlayerUnit, p), true);");
code("if (trUnitAlive()) {");
code("if (unitDistanceToVector(xGetInt(dPlayerData, xPlayerUnit, p), pos) < 1.5) {");
code("amt = 1;");
code("break;");
code("}");
code("}");
code("}");
code("if (amt == 1) {");
code("xUnitSelect(dFreeRelics, xUnitName);");
code("trSetSelectedScale(0,0,-1);");
code("trMutateSelected(relicProto(xGetInt(dFreeRelics, xRelicType)));");
code("if (xGetInt(dFreeRelics, xRelicType) < KEY_RELICS) {");
code("trUnitSetAnimationPath(\"1,0,1,1,0,0,0\");");
code("}");
code("if (trCurrentPlayer() == p) {");
code("trChatSend(0, relicName(xGetInt(dFreeRelics, xRelicType)) + \" equipped!\");");
code("trSoundPlayFN(\"researchcomplete.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("db = getRelicsDB(p);");
code("xAddDatabaseBlock(db, true);");
code("xSetInt(db, xUnitName, xGetInt(dFreeRelics, xUnitName));");
code("xSetInt(db, xRelicType, xGetInt(dFreeRelics, xRelicType));");
code("relicEffect(xGetInt(dFreeRelics, xRelicType), p, true);");
code("xFreeDatabaseBlock(dFreeRelics);");
code("}");
code("}");
code("} else if (trUnitIsSelected()) {");
code("trShowImageDialog(relicIcon(xGetInt(dFreeRelics, xRelicType)), relicName(xGetInt(dFreeRelics, xRelicType)));");
code("reselectMyself();");
code("}");
code("}");
code("}");

code("void processWolves() {");
code("if (xGetDatabaseCount(dPlayerWolves) > 0) {");
code("xDatabaseNext(dPlayerWolves);");
code("if (xGetBool(dPlayerWolves, xPlayerWolfDead)) {");
code("if (trTimeMS() > xGetInt(dPlayerWolves, xPlayerWolfTimeout)) {");
code("xUnitSelect(dPlayerWolves, xUnitName);");
code("trUnitChangeProtoUnit(\"Dust Small\");");
code("xFreeDatabaseBlock(dPlayerWolves);");
code("}");
code("} else {");
code("xUnitSelect(dPlayerWolves, xUnitName);");
code("if (trUnitAlive() == false) {");
code("xSetInt(dPlayerWolves, xPlayerWolfTimeout, 3000 + trTimeMS());");
code("xSetBool(dPlayerWolves, xPlayerWolfDead, true);");
code("}");
code("}");
code("}");
code("}");

code("void petDogs(int p = 0) {");
code("vector pos = vector(0,0,0);");
code("if (xGetBool(dPlayerData, xPlayerPetDogReady, p)) {");
code("if (trTime() > xGetInt(dPlayerData, xPlayerPetDogNext, p)) {");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dPlayerData, xPlayerUnit, p), true);");
code("xAddDatabaseBlock(dPlayerWolves, true);");
code("xSetInt(dPlayerWolves, xUnitName, trGetNextUnitScenarioNameNumber());");
code("spawnPlayerUnit(p, kbGetProtoUnitID(\"Dog\"), pos);");
code("if (trCurrentPlayer() == p) {");
code("trSoundPlayFN(\"bellaselect1.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("xSetBool(dPlayerData, xPlayerPetDogReady, false, p);");
code("}");
code("} else if (2 * xGetInt(dPlayerData, xPlayerPetDogs, p) > trPlayerUnitCountSpecific(p, \"Dog\")) {");
code("xSetInt(dPlayerData, xPlayerPetDogNext, trTime() + 30, p);");
code("xSetBool(dPlayerData, xPlayerPetDogReady, true, p);");
code("if (trCurrentPlayer() == p) {");
code("trCounterAddTime(\"petDogs\",30,1,\"Pet Dog respawn\",-1);");
code("}");
code("}");
code("if ((xGetInt(dPlayerData, xPlayerGodBoon, p) == BOON_MONSTER_COMPANION) && Multiplayer) {");
code("if (xGetBool(dPlayerData, xPlayerPetMonsterReady, p)) {");
code("if (trTime() > xGetInt(dPlayerData, xPlayerPetMonsterNext, p)) {");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dPlayerData, xPlayerUnit, p), true);");
code("xSetInt(dPlayerData, xPlayerMonsterName, trGetNextUnitScenarioNameNumber(), p);");
code("spawnPlayerUnit(p, xGetInt(dPlayerData,xPlayerMonsterProto,p), pos);");
code("if (trCurrentPlayer() == p) {");
code("trSoundPlayFN(\"mythcreate.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("xSetBool(dPlayerData, xPlayerPetMonsterReady, false, p);");
code("}");
code("} else {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xPlayerMonsterName, p), true);");
code("if (trUnitAlive() == false) {");
code("xSetInt(dPlayerData, xPlayerPetMonsterNext, trTime() + 30, p);");
code("xSetBool(dPlayerData, xPlayerPetMonsterReady, true, p);");
code("if (trCurrentPlayer() == p) {");
code("trCounterAddTime(\"petMonsters\",30,1,\"Pet Monster respawn\",-1);");
code("}");
code("}");
code("}");
code("}");
code("}");

code("rule enable_chat");
code("inactive");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("trChatSetStatus(true);");
code("}");

code("rule gameplay_start");
code("inactive");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("trDelayedRuleActivation(\"gameplay_start_2\");");
code("for(p=1; < ENEMY_PLAYER) {");
code("chooseClass(p, xGetInt(dPlayerData, xPlayerClass, p));");
code("}");
code("trMusicPlayCurrent();");
code("trPlayNextMusicTrack();");
code("trSetFogAndBlackmap(true, true);");
code("trPlayerResetBlackMapForAllPlayers();");
code("trQuestVarSet(\"play\", 1);");
code("}");

code("rule gameplay_start_2");
code("inactive");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("trEventSetHandler(999, \"removeCamTracks\");");

code("trCameraCut(vector(0,70.710701,0), vector(0.5,-0.707107,0.5), vector(0.5,0.707107,0.5), vector(0.707107,0,-0.707107));");
code("xsEnableRule(\"gameplay_always\");");
code("if (trQuestVarGet(\"p\"+trCurrentPlayer()+\"nickQuestProgress\") < 5) {");
code("trQuestVarSet(\"nickQuestProgressLocal\", trQuestVarGet(\"p\"+trCurrentPlayer()+\"nickQuestProgress\"));");
code("trQuestVarSet(\"nickEquippedLocal\", trQuestVarGet(\"p\"+trCurrentPlayer()+\"nickEquipped\"));");
code("xsEnableRule(\"nick_dialog\");");
code("}");
code("vector pos = trVectorQuestVarGet(\"startPosition\");");
code("int db = 0;");
code("for(p=1; < ENEMY_PLAYER) {");
code("spawnPlayer(p, pos);");
code("trQuestVarSet(\"p\"+p+\"lureObject\", trGetNextUnitScenarioNameNumber()-1);");
code("trQuestVarSet(\"p\"+p+\"wellObject\", trGetNextUnitScenarioNameNumber()-1);");
code("if (trQuestVarGet(\"p\"+p+\"nickEquipped\") == 1) {");
code("trQuestVarSet(\"p\"+p+\"nickEquipped\", 0);");
code("trQuestVarSet(\"p\"+p+\"relic12\", RELIC_NICKONHAWK);");
code("}");
code("db = getRelicsDB(p);");
code("for(x=12; >0) {");
code("if (trQuestVarGet(\"p\"+p+\"relic\"+x) > 0) {");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+p+\",0\",\"Dwarf\",1,1,0,1,0,true);");
code("xAddDatabaseBlock(db, true);");
code("xSetInt(db, xUnitName, 1*trQuestVarGet(\"next\"));");
code("xSetInt(db, xRelicType, 1*trQuestVarGet(\"p\"+p+\"relic\"+x));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitChangeProtoUnit(\"Relic\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trImmediateUnitGarrison(\"\"+xGetInt(dPlayerData, xPlayerUnit, p));");
code("trMutateSelected(relicProto(1*trQuestVarGet(\"p\"+p+\"relic\"+x)));");
code("trSetSelectedScale(0,0,-1);");
code("trUnitSetAnimationPath(\"1,0,1,1,0,0,0\");");
code("relicEffect(1*trQuestVarGet(\"p\"+p+\"relic\"+x), p, true);");
code("}");
code("}");
code("trSetCivilizationNameOverride(p, \"Level \" + (1+xGetInt(dPlayerData, xPlayerLevel, p)));");
code("}");
code("trQuestVarSet(\"nextProj\", trGetNextUnitScenarioNameNumber());");

code("if (Multiplayer) {");
code("trSetUnitIdleProcessing(true);");
code("}");

code("if (Multiplayer) {");
code("pos = trVectorQuestVarGet(\"bossRoomCenter\");");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+xGetInt(dPlayerData, xPlayerUnit, 1), true);");
code("trUnitTeleport(xsVectorGetX(pos),0,xsVectorGetZ(pos));");
code("}");
code("}");

code("rule gameplay_always");
code("inactive");
code("highFrequency");
code("{");
code("int old = xsGetContextPlayer();");
code("int id = 0;");
code("int p = 0;");
code("int count = 0;");
code("int relic = 0;");
code("int db = 0;");
code("float amt = 0;");
code("bool relicReturned = true;");

code("vector pos = vector(0,0,0);");

code("if (xGetDatabaseCount(dPlayerUnits) > 0) {");
code("xDatabaseNext(dPlayerUnits);");
code("xUnitSelectByID(dPlayerUnits, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerUnit();");
code("} else {");
code("if (xGetFloat(dPlayerUnits, xDecay) > 0) {");
code("count = trTimeMS() - xGetInt(dPlayerUnits, xDecayNext);");
code("if (count > 1000) {");
code("xSetInt(dPlayerUnits, xDecayNext, trTimeMS());");
code("trDamageUnitPercent(xGetFloat(dPlayerUnits, xDecay) * 0.001 * count);");
code("}");
code("}");
code("if (trQuestVarGet(\"stage\") == 5) {");
code("if (trCountUnitsInArea(\"\"+xGetInt(dPlayerUnits, xUnitName),ENEMY_PLAYER,\"Victory Marker\",4) > 0) {");
code("poisonUnit(dPlayerUnits, 10, 10);");
code("}");
code("}");
code("xSetVector(dPlayerUnits, xUnitPos, kbGetBlockPosition(\"\"+xGetInt(dPlayerUnits, xUnitName), true));");

code("stunsAndPoisons(dPlayerUnits);");
code("}");
code("}");

code("enemiesAlways();");
code("specialUnitsAlways();");

code("maintainStun();");

code("playerLasers();");

code("processWolves();");


code("if (trQuestVarGet(\"protectionCount\") > 0) {");
code("for(x=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("xUnitSelectByID(dPlayerUnits, xUnitID);");
code("trUnitHighlight(0.2, false);");
code("xsSetContextPlayer(xGetInt(dPlayerUnits, xPlayerOwner));");
code("amt = kbUnitGetCurrentHitpoints(id);");
code("xsSetContextPlayer(0);");
code("if (amt > xGetFloat(dPlayerUnits, xCurrentHealth)) {");
code("xSetFloat(dPlayerUnits, xCurrentHealth, amt);");
code("} else {");
code("trDamageUnit(amt - xGetFloat(dPlayerUnits, xCurrentHealth));");
code("}");
code("}");
code("if (trQuestVarGet(\"protectionWas\") == 0) {");
code("trQuestVarSet(\"protectionWas\", 1);");
code("}");
code("} else if (trQuestVarGet(\"protectionWas\") == 1) {");
code("trQuestVarSet(\"protectionWas\", 0);");
code("}");

code("trQuestVarSet(\"relicPlayer\", 1 + trQuestVarGet(\"relicPlayer\"));");
code("if (trQuestVarGet(\"relicPlayer\") >= ENEMY_PLAYER) {");
code("trQuestVarSet(\"relicPlayer\", 1);");
code("}");
code("trQuestVarSet(\"shopping\", 0);");
code("p = trQuestVarGet(\"relicPlayer\");");
code("xSetPointer(dPlayerData, p);");
code("if (xGetBool(dPlayerData, xPlayerResigned) == false) {");
code("xUnitSelect(dPlayerData, xPlayerUnit);");
code("if (trUnitAlive() && (xGetBool(dPlayerData, xPlayerLaunched) == false) && xGetInt(dPlayerData, xPlayerDead) <= 0) {");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dPlayerData,xPlayerUnit), true);");
code("db = getRelicsDB(p);");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("xUnitSelect(db, xUnitName);");
code("if (trUnitGetIsContained(\"Unit\") == false) {");
code("if (xGetInt(db, xRelicType) < KEY_RELICS) {");
code("relicReturned = false;");
code("if (distanceBetweenVectors(pos, trVectorQuestVarGet(\"relicTransporterGuyPos\")) < 36) {");
code("relicReturned = true;");
code("if (trPlayerUnitCountSpecific(p, \"Villager Atlantean Hero\") == 0) {");
code("if (trPlayerResourceCount(p, \"gold\") >= 100) {");
code("trPlayerGrantResources(p, \"gold\", -100);");
code("trQuestVarSet(\"p\"+p+\"transporterPurchased\", 1);");
code("spawnPlayerUnit(p, kbGetProtoUnitID(\"Villager Atlantean Hero\"), pos);");
code("if (trCurrentPlayer() == p) {");
code("trChatSend(0, \"A Relic Transporter has been hired!\");");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"villagercreate.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("} else if (trCurrentPlayer() == p) {");
code("trChatSend(0, \"You don't have enough gold! You need 100!\");");
code("trSoundPlayFN(\"cantdothat.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("} else if (unitDistanceToVector(1*trQuestVarGet(\"temple\"), pos) < 36) {");
code("if (trQuestVarGet(\"templeChallengeActive\") == 0) {");
code("trQuestVarSet(\"templeChallengeActive\", 1);");
code("relicReturned = true;");
code("} else if (trQuestVarGet(\"stageTemple\") == BOON_MORE_GOLD) {");
code("relicReturned = false;");
code("if ((trQuestVarGet(\"p\"+p+\"relicsSacrificed\") < 10) && (xGetInt(db, xRelicType) <= NORMAL_RELICS)) {");
code("trUnitChangeProtoUnit(\"Conversion SFX\");");
code("trQuestVarSet(\"p\"+p+\"relicsSacrificed\", 1 + trQuestVarGet(\"p\"+p+\"relicsSacrificed\"));");
code("if (trCurrentPlayer() == p) {");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"\",\"\");");
code("trChatSend(0, \"<color=1,1,1>Relic sacrificed! (\"+1*trQuestVarGet(\"p\"+p+\"relicsSacrificed\")+\"/10)</color>\");");
code("}");
code("}");
code("}");
code("} else if (1*trQuestVarGet(\"nottud\") > 0) {");
code("for(i=3; >0) {");
code("xDatabaseNext(dNottudShop);");
code("if (distanceBetweenVectors(pos, xGetVector(dNottudShop, xNottudShopPos)) < 25) {");
code("break;");
code("}");
code("}");
code("if (i > 0) {");
code("relicReturned = true;");
code("if (trQuestVarGet(\"shopping\") == 0) {");
code("trQuestVarSet(\"shopping\", 1);");
code("if (trPlayerResourceCount(p, \"gold\") >= 300) {");
code("relic = xGetInt(dNottudShop, xRelicType);");
code("trPlayerGrantResources(p, \"gold\", -300);");
code("if (trCurrentPlayer() == p) {");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"\",\"\");");
code("trChatSend(0, \"Purchased \" + relicName(relic) + \"!\");");
code("trChatSend(0, \"The purchased relic has been added to your warehouse.\");");
code("trQuestVarSet(\"ownedRelics\"+relic, 1 + trQuestVarGet(\"ownedRelics\"+relic));");
code("}");
code("} else if (trCurrentPlayer() == p) {");
code("trChatSend(0, \"You don't have enough gold! You need 300!\");");
code("trSoundPlayFN(\"cantdothat.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("}");
code("} else if (trQuestVarGet(\"shopGuyActive\") == 1) {");
code("if (distanceBetweenVectors(pos, trVectorQuestVarGet(\"shopGuyPos\")) < 9) {");
code("relicReturned = true;");
code("if (trQuestVarGet(\"shopping\") == 0) {");
code("trQuestVarSet(\"shopping\", 1);");
code("if (trPlayerResourceCount(p, \"gold\") >= 200) {");
code("relic = trQuestVarGet(\"shopRelic\");");
code("trPlayerGrantResources(p, \"gold\", -200);");
code("if (trCurrentPlayer() == p) {");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"\",\"\");");
code("trChatSend(0, \"Purchased \" + relicName(relic) + \"!\");");
code("trChatSend(0, \"The purchased relic has been added to your warehouse.\");");
code("trQuestVarSet(\"ownedRelics\"+relic, 1 + trQuestVarGet(\"ownedRelics\"+relic));");
code("}");
code("} else if (trCurrentPlayer() == p) {");
code("trChatSend(0, \"You don't have enough gold! You need 200!\");");
code("trSoundPlayFN(\"cantdothat.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("}");
code("} else if (xGetInt(db, xRelicType) == RELIC_SPARK) {");
code("if (distanceBetweenVectors(pos, trVectorQuestVarGet(\"bossRoomCenter\")) < 16.0) {");
code("relicReturned = false;");
code("xUnitSelect(db, xUnitName);");
code("trUnitChangeProtoUnit(\"Lightning Sparks Ground\");");
code("trQuestVarSet(\"bossSmite\", 1 + trQuestVarGet(\"bossSmite\"));");
code("}");
code("}");
code("if (relicReturned == false) {");
code("id = kbGetBlockID(\"\"+xGetInt(db, xUnitName));");
code("if (trCurrentPlayer() == p) {");
code("trSoundPlayFN(\"backtowork.wav\",\"1\",-1,\"\",\"\");");
code("trChatSend(0, relicName(xGetInt(db, xRelicType)) + \" dropped.\");");
code("}");
code("relicEffect(xGetInt(db, xRelicType), p, false);");
code("if ((Multiplayer == false) &&");
code("(trQuestVarGet(\"p1nickQuestProgress\") >= 5) &&");
code("(distanceBetweenVectors(pos, trVectorQuestVarGet(\"nickPos\")) < 9) &&");
code("(xGetDatabaseCount(dSlotRelics) < 3)) {");
code("trSoundPlayFN(\"storehouse.wav\",\"1\",-1,\"\",\"\");");
code("xUnitSelect(db, xUnitName);");
code("trUnitChangeProtoUnit(\"Conversion SFX\");");
code("xAddDatabaseBlock(dSlotRelics, true);");
code("xSetInt(dSlotRelics, xUnitName, trGetNextUnitScenarioNameNumber());");
code("xSetInt(dSlotRelics, xRelicType, xGetInt(db, xRelicType));");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,1,0,1,0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"pad\"+xGetPointer(dSlotRelics));");
code("trMutateSelected(kbGetProtoUnitID(\"Transport Ship Greek\"));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trImmediateUnitGarrison(\"\"+1*trQuestVarGet(\"pad\"+xGetPointer(dSlotRelics)));");
code("trUnitChangeProtoUnit(\"Dwarf\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitSetHeading(225);");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Relic\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"pad\"+xGetPointer(dSlotRelics));");
code("trMutateSelected(kbGetProtoUnitID(\"Statue of Automaton Base\"));");
code("if (xGetDatabaseCount(dSlotRelics) == 3) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"nickonhawk\", true);");
code("trUnitHighlight(3.0, true);");
code("}");
code("} else if (kbGetUnitBaseTypeID(id) == relicProto(xGetInt(db, xRelicType))) {");
code("trUnitChangeProtoUnit(\"Relic\");");
code("xAddDatabaseBlock(dFreeRelics, true);");
code("xSetInt(dFreeRelics, xUnitName, xGetInt(db, xUnitName));");
code("xSetInt(dFreeRelics, xRelicType, xGetInt(db, xRelicType));");
code("}");
code("xFreeDatabaseBlock(db);");
code("} else {");
code("xUnitSelect(db, xUnitName);");
code("trUnitChangeProtoUnit(\"Relic\");");
code("xUnitSelect(db, xUnitName);");
code("trImmediateUnitGarrison(\"\"+xGetInt(dPlayerData, xPlayerUnit, p));");
code("trMutateSelected(relicProto(xGetInt(db, xRelicType)));");
code("trSetSelectedScale(0,0,-1);");
code("trUnitSetAnimationPath(\"1,0,1,1,0,0,0\");");
code("}");
code("} else {");
code("trSoundPlayFN(\"storehouse.wav\",\"1\",-1,\"\",\"\");");
code("xFreeDatabaseBlock(db);");
code("}");
code("}");
code("}");
code("}");

code("relicTransporterGuy(p);");
code("}");

code("if (Multiplayer) {");
code("count = 5;");
code("} else {");
code("count = 30;");
code("}");
code("processFreeRelics(count);");

code("if (trQuestVarGet(\"stunSound\") == 1) {");
code("trQuestVarSet(\"stunSound\", 0);");
code("trQuestVarSetFromRand(\"sound\", 1, 3, true);");
code("trSoundPlayFN(\"woodcrush\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("}");

code("if (trQuestVarGet(\"poisonSound\") == 1) {");
code("trQuestVarSet(\"poisonSound\", 0);");
code("trSoundPlayFN(\"lampadesblood.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"carnivorabirth.wav\",\"1\",-1,\"\",\"\");");
code("}");

code("for(p=1; < ENEMY_PLAYER) {");
code("xSetPointer(dPlayerData, p);");
code("if (xGetBool(dPlayerData, xPlayerResigned) == false) {");
code("checkGodPowers(p);");
code("checkResourceCheating(p);");
code("if (xGetInt(dPlayerData, xPlayerDead) == 0) {");
code("xUnitSelect(dPlayerData, xPlayerUnit);");
code("if (Multiplayer) {");
code("if (trUnitIsSelected() && trCurrentPlayer() != p) {");
code("if (trQuestVarGet(\"ISelected\"+p) == 0) {");
code("trQuestVarSet(\"iSelected\"+p, 1);");
code("trChatSend(0, \"<color=1,1,1><u>\"+trStringQuestVarGet(\"p\"+p+\"name\")+\"</u></color>\");");
code("if (xGetInt(dPlayerData, xPlayerGodBoon) > 0) {");
code("trChatSend(0, boonName(xGetInt(dPlayerData, xPlayerGodBoon)));");
code("}");
code("db = getRelicsDB(p);");
code("count = xGetPointer(db);");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("trChatSend(0, relicName(xGetInt(db, xRelicType)));");
code("}");
code("xSetPointer(db, count);");
code("}");
code("} else if (trQuestVarGet(\"iSelected\"+p) == 1) {");
code("trQuestVarSet(\"iSelected\"+p, 0);");
code("}");
code("if (SAVIOR != xGetInt(dPlayerData, xPlayerClass)) {");
code("fixAnimations(p);");
code("}");
code("}");
code("processLifesteal(p);");
code("processSilence(p);");
code("processRegen(p);");
code("petDogs(p);");
code("} else if (trTimeMS() > xGetInt(dPlayerData, xPlayerReviveNext)) {");
code("count = 0;");
code("for(x=xGetDatabaseCount(dEnemies); >0) {");
code("xDatabaseNext(dEnemies);");
code("xUnitSelectByID(dEnemies, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removeEnemy();");
code("} else if (unitDistanceToVector(xGetInt(dEnemies, xUnitName), trVectorQuestVarGet(\"dead\"+p+\"pos\")) < 225) {");
code("count = count - 1;");
code("}");
code("}");
code("xSetInt(dPlayerData, xPlayerReviveNext, trTimeMS() + 1000);");
code("trQuestVarSet(\"playersReviving\", 0);");
code("if (Multiplayer == false) {");
code("trQuestVarSet(\"playersReviving\", 1);");
code("count = 1;");
code("} else {");
code("for(x=xGetDatabaseCount(dPlayerCharacters); >0) {");
code("xDatabaseNext(dPlayerCharacters);");
code("xUnitSelectByID(dPlayerCharacters, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerCharacter();");
code("} else if (unitDistanceToVector(xGetInt(dPlayerCharacters, xUnitName), trVectorQuestVarGet(\"dead\"+p+\"pos\")) < 100) {");
code("if (xGetInt(dPlayerData, xPlayerClass, xGetInt(dPlayerCharacters, xPlayerOwner)) == SUNBOW) {");
code("if (count < 0) {");
code("count = 0;");
code("}");
code("}");
code("count = count + 1;");
code("trQuestVarSet(\"playersReviving\", 1);");
code("}");
code("}");
code("}");
code("if (trQuestVarGet(\"playersReviving\") == 1) {");
code("if (count > 0) {");
code("xSetInt(dPlayerData, xPlayerDead, 1*xsMax(0, xGetInt(dPlayerData, xPlayerDead) - count));");
code("trChatSend(0,");
code("\"<color={Playercolor(\"+p+\")}>{Playername(\"+p+\")}</color> is being revived: \" + xGetInt(dPlayerData, xPlayerDead));");
code("}");
code("if (xGetInt(dPlayerData, xPlayerDead) <= 0) {");
code("revivePlayer(p);");
code("}");
code("}");
code("}");
code("if (kbIsPlayerResigned(p)) {");
code("xSetBool(dPlayerData, xPlayerResigned, true);");
code("trQuestVarSet(\"activePlayerCount\", trQuestVarGet(\"activePlayerCount\") - 1);");
code("db = getRelicsDB(p);");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("if (xGetInt(db, xRelicType) > NORMAL_RELICS) {");
code("xAddDatabaseBlock(dFreeRelics, true);");
code("xSetInt(dFreeRelics, xUnitName, xGetInt(db, xUnitName));");
code("xSetInt(dFreeRelics, xRelicType, xGetInt(db, xRelicType));");
code("xUnitSelect(db, xUnitName);");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Relic\");");
code("}");
code("}");
code("db = getWarehouseDB(p);");
code("for(x=xGetDatabaseCount(db); >0) {");
code("xDatabaseNext(db);");
code("if (xGetInt(db, xRelicType) > NORMAL_RELICS) {");
code("xAddDatabaseBlock(dFreeRelics, true);");
code("xSetInt(dFreeRelics, xUnitName, xGetInt(db, xUnitName));");
code("xSetInt(dFreeRelics, xRelicType, xGetInt(db, xRelicType));");
code("xUnitSelect(db, xUnitName);");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(\"Relic\");");
code("}");
code("}");
code("if (xGetInt(dPlayerData, xPlayerDead) > 0) {");
code("trQuestVarSet(\"deadPlayerCount\", trQuestVarGet(\"deadPlayerCount\") - 1);");
code("}");
code("for(x=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("if (xGetInt(dPlayerUnits, xPlayerOwner) == p) {");
code("xUnitSelectByID(dPlayerUnits, xUnitID);");
code("trUnitChangeProtoUnit(\"Hero Death\");");
code("}");
code("}");
code("if ((trCurrentPlayer() == p) && Multiplayer) {");
code("saveAllData();");
code("}");
code("} else {");
code("trEventFire(12*xGetInt(dPlayerData, xPlayerClass, p) + p);");
code("}");
code("}");
code("}");

code("if (xGetDatabaseCount(dSkyPassages) > 0) {");
code("if (trQuestVarGet(\"portalsActive\") == 1) {");
code("xDatabaseNext(dSkyPassages);");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dSkyPassages, xUnitName));");
code("trQuestVarSet(\"sound\", 0);");
code("for(x=xGetDatabaseCount(dPlayerUnits); >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("if (unitDistanceToVector(xGetInt(dPlayerUnits, xUnitName), pos) < 6) {");
code("xAddDatabaseBlock(dMagicalJourney, true);");
code("xSetInt(dMagicalJourney, xUnitName, xGetInt(dPlayerUnits, xUnitID));");
code("if (xGetInt(dPlayerData, xPlayerUnit, trCurrentPlayer()) == xGetInt(dPlayerUnits, xUnitName)) {");
code("uiLookAtUnitByName(\"\"+xGetInt(dSkyPassages, xSkyPassageExit));");
code("trQuestVarSet(\"sound\", 1);");
code("}");
code("}");
code("}");
code("}");

code("if (xGetDatabaseCount(dMagicalJourney) > 0) {");
code("xUnitSelect(dSkyPassages, xSkyPassageExit);");
code("trUnitChangeProtoUnit(\"Dwarf\");");
code("xUnitSelect(dSkyPassages, xSkyPassageExit);");
code("trMutateSelected(kbGetProtoUnitID(\"Sky Passage\"));");
code("for(x=xGetDatabaseCount(dMagicalJourney); >0) {");
code("xDatabaseNext(dMagicalJourney);");
code("xUnitSelectByID(dMagicalJourney, xUnitName);");
code("trImmediateUnitGarrison(\"\"+xGetInt(dSkyPassages, xSkyPassageExit));");
code("}");
code("xClearDatabase(dMagicalJourney);");
code("xUnitSelect(dSkyPassages, xSkyPassageExit);");
code("trUnitEjectContained();");
code("trUnitChangeProtoUnit(\"Spy Eye\");");
code("xUnitSelect(dSkyPassages, xSkyPassageExit);");
code("trMutateSelected(kbGetProtoUnitID(\"Sky Passage\"));");
code("trSetSelectedScale(0, 0.2, 0);");
code("}");
code("if (trQuestVarGet(\"sound\") == 1) {");
code("trSoundPlayFN(\"skypassageout.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");

code("for(x=xsMin(3, xGetDatabaseCount(dLaunchedUnits)); >0) {");
code("processLaunchedUnit();");
code("}");

code("processChests();");
code("processWalls();");

code("if (trQuestVarGet(\"deadPlayerCount\") == trQuestVarGet(\"activePlayerCount\") && Multiplayer &&");
code("trQuestVarGet(\"activePlayerCount\") > 0) {");
code("trQuestVarSet(\"play\", 0);");
code("xsDisableSelf();");
code("xsDisableRule(\"boss\"+1*trQuestVarGet(\"stage\")+\"_battle\");");
code("trSoundPlayFN(\"lose.wav\",\"1\",-1,\"\",\"\");");
code("trUIFadeToColor(0,0,0,1500,0,true);");
code("trLetterBox(true);");
code("trQuestVarSet(\"gameOverNext\", trTime() + 2);");
code("xsEnableRule(\"game_over\");");
code("if (trQuestVarGet(\"newPlayers\") == 0) {");
code("trQuestVarSet(\"gameOverStep\", 6);");
code("}");
code("}");

code("noSpecials();");
code("}");

code("rule game_over");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > trQuestVarGet(\"gameOverNext\")) {");
code("trQuestVarSet(\"gameOverStep\", 1 + trQuestVarGet(\"gameOverStep\"));");
code("switch(1*trQuestVarGet(\"gameOverStep\"))");
code("{");
code("case 1:");
code("{");
code("trSoundPlayFN(\"default\",\"1\",-1,\"Zenophobia: Your journey is not over! This map remembers your progress!\",");
code("\"icons\infantry g hoplite icon 64\");");
code("trQuestVarSet(\"gameOverNext\", trTime() + 4);");
code("}");
code("case 2:");
code("{");
code("trSoundPlayFN(\"default\", \"1\",-1,");
code("\"Zenophobia: Your level, gold, and relics have been saved! The next time you play, you will keep them!\",");
code("\"icons\infantry g hoplite icon 64\");");
code("trQuestVarSet(\"gameOverNext\", trTime() + 6);");
code("}");
code("case 3:");
code("{");
code("trSoundPlayFN(\"default\", \"1\",-1,");
code("\"Zenophobia: Be sure to also play this map in singleplayer to switch classes, level up, and more!\",");
code("\"icons\infantry g hoplite icon 64\");");
code("trQuestVarSet(\"gameOverNext\", trTime() + 6);");
code("}");
code("case 4:");
code("{");
code("trSoundPlayFN(\"default\", \"1\",-1,");
code("\"Zenophobia: That's Singleplayer -> Random Map -> Ascension MMORPG\",");
code("\"icons\infantry g hoplite icon 64\");");
code("trQuestVarSet(\"gameOverNext\", trTime() + 6);");
code("}");
code("case 5:");
code("{");
code("trQuestVarSet(\"gameOverNext\", trTime() + 1);");
code("trUIFadeToColor(0,0,0,1000,0,false);");
code("trLetterBox(false);");
code("saveAllData();");
code("}");
code("case 6:");
code("{");
code("xsDisableSelf();");
code("for(p=1; < ENEMY_PLAYER) {");
code("if (trQuestVarGet(\"playersWon\") == 1) {");
code("trSetPlayerWon(p);");
code("} else {");
code("trSetPlayerDefeated(p);");
code("}");
code("}");
code("trEndGame();");
code("}");
code("case 7:");
code("{");
code("trSoundPlayFN(\"default\", \"1\",-1,\"Zenophobia:\" + trStringQuestVarGet(\"advice\"),\"icons\infantry g hoplite icon 64\");");
code("trQuestVarSet(\"gameOverStep\", 4);");
code("trQuestVarSet(\"gameOverNext\", trTime() + 5);");
code("}");
code("case 8:");
code("{");
code("trSoundPlayFN(\"\",\"1\",-1,\"Yeebaagooon: That'll teach you to steal from me.\",");
code("\"icons\special e son of osiris icon 64\");");
code("trQuestVarSet(\"gameOverNext\", trTime() + 5);");
code("}");
code("case 9:");
code("{");
code("if (trQuestVarGet(\"p\"+trCurrentPlayer()+\"yeebHit\") == 1) {");
code("trSoundPlayFN(\"\",\"1\",-1,\":Yeebaagooon has taken back his stolen relic!\",\"\");");
code("}");
code("trQuestVarSet(\"gameOverStep\", 4);");
code("trQuestVarSet(\"gameOverNext\", trTime() + 5);");
code("}");
code("}");
code("}");
code("}");

code("rule deep_village_always");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > trQuestVarGet(\"deepDeployNext\")) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"stageWonder\");");
code("if ((trUnitAlive() == false) || (trQuestVarGet(\"play\") == 0)) {");
code("xsDisableSelf();");
code("trMessageSetText(\"The Palace of the Deep has been destroyed!\",-1);");
code("trUnitOverrideAnimation(-1,0,true,true,-1);");
code("} else if (xGetDatabaseCount(dPlayerUnits) > 0) {");
code("int x = 0;");
code("int z = 0;");
code("trQuestVarSet(\"deepDeployNext\", trTime() + 60);");
code("vector dir = vector(-13,0,-13);");
code("int heading = 45;");
code("for(i=4; >0) {");
code("xDatabaseNext(dPlayerUnits);");
code("vector dest = kbGetBlockPosition(\"\"+xGetInt(dPlayerUnits, xUnitName), true);");
code("x = trQuestVarGet(\"deepDeployCenterX\") + xsVectorGetX(dir);");
code("z = trQuestVarGet(\"deepDeployCenterZ\") + xsVectorGetZ(dir);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"\"+ENEMY_PLAYER+\",0\",\"Dwarf\",1,x,0,z,heading,true);");
code("trArmySelect(\"\"+ENEMY_PLAYER+\",0\");");
code("trUnitChangeProtoUnit(\"Nereid\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\");");
code("trUnitMoveToPoint(xsVectorGetX(dest),0,xsVectorGetZ(dest),-1,true);");
code("activateEnemy(1*trQuestVarGet(\"next\"));");

code("dir = rotationMatrix(dir, 0, -1);");
code("heading = heading + 90;");
code("}");
code("}");
code("}");
code("}");

code("rule the_deep_damage");
code("inactive");
code("highFrequency");
code("{");
code("int index = xGetPointer(dPlayerUnits);");
code("xSetPointer(dPlayerUnits, 1*trQuestVarGet(\"deepPlayerPointer\"));");
code("xDatabaseNext(dPlayerUnits);");
code("trQuestVarSet(\"deepPlayerPointer\", xGetPointer(dPlayerUnits));");
code("bool found = false;");
code("float amt = trTimeMS() - xGetInt(dPlayerUnits, xDeepDamageLast);");
code("if (amt > 500) {");
code("xSetInt(dPlayerUnits, xDeepDamageLast, trTimeMS() + 500);");
code("for(p=1; < ENEMY_PLAYER) {");
code("if (trCountUnitsInArea(\"\"+xGetInt(dPlayerUnits, xUnitName),p,\"Flying Medic\", 25) > 0) {");
code("found = true;");
code("break;");
code("}");
code("}");
code("if (found == false) {");
code("trQuestVarSetFromRand(\"sound\", 1, 2, true);");
code("trSoundPlayFN(\"titanpunch\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("xUnitSelectByID(dPlayerUnits, xUnitID);");
code("trDamageUnit(0.2 * amt);");
code("}");
code("}");

code("xSetPointer(dPlayerUnits, index);");
code("}");

code("rule the_cloud_damage");
code("inactive");
code("highFrequency");
code("{");
code("vector pos = vector(0,0,0);");
code("int hit = 0;");
code("float amt = trTimeMS() - xGetInt(dPlayerUnits, xDeepDamageLast);");
code("if (amt > 500) {");
code("xSetInt(dPlayerUnits, xDeepDamageLast, trTimeMS() + 500);");
code("hit = trCountUnitsInArea(\"\"+xGetInt(dPlayerUnits,xUnitName),0,\"Invisible Target\",6);");

code("if (hit > 0) {");
code("trQuestVarSetFromRand(\"sound\", 1, 4, true);");
code("trSoundPlayFN(\"swordonflesh\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("xUnitSelectByID(dPlayerUnits, xUnitID);");
code("damagePlayerUnit(amt * hit * 0.5);");
code("}");
code("}");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"stageWonder\");");
code("if (trUnitAlive() == false) {");
code("int db = trQuestVarGet(\"cloudTornados\");");
code("for(i=0; < 10) {");
code("trUnitSelectClear();");
code("trUnitSelect(\"\"+aiPlanGetUserVariableInt(ARRAYS,db,i));");
code("trUnitDestroy();");
code("}");
code("trMessageSetText(\"The Sky Palace has been destroyed! Tornados dispelled!\", -1);");
code("xsDisableSelf();");
code("}");
code("for (i=xGetDatabaseCount(dCloudDeployStars); >0) {");
code("if (PROJ_GROUND == processGenericProj(dCloudDeployStars)) {");
code("trUnitChangeProtoUnit(trStringQuestVarGet(\"enemyProto\"+1*trQuestVarGet(\"cloudDeployProto\")));");
code("xUnitSelectByID(dCloudDeployStars, xUnitID);");
code("trDamageUnitPercent(-100);");
code("activateEnemy(xGetInt(dCloudDeployStars, xUnitName));");
code("xFreeDatabaseBlock(dCloudDeployStars);");
code("trQuestVarSetFromRand(\"sound\", 1, 2, true);");
code("trSoundPlayFN(\"vortexland\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("switch(1*trQuestVarGet(\"cloudDeployStep\"))");
code("{");
code("case 0:");
code("{");
code("if (trTime() > trQuestVarGet(\"cloudDeployNext\")) {");
code("for(i=xGetDatabaseCount(dPlayerCharacters); >0) {");
code("xDatabaseNext(dPlayerCharacters);");
code("xUnitSelectByID(dPlayerCharacters, xUnitID);");
code("if (trUnitAlive() == false) {");
code("removePlayerCharacter();");
code("} else {");
code("trVectorQuestVarSet(\"cloudDeployCenter\", kbGetBlockPosition(\"\"+xGetInt(dPlayerCharacters, xUnitName), true));");
code("break;");
code("}");
code("}");
code("pos = trVectorQuestVarGet(\"cloudDeployCenter\");");
code("trQuestVarSet(\"cloudDeployStep\", 1);");
code("trQuestVarSet(\"cloudDeployLanding\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"0,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),0,true);");
code("trArmySelect(\"0,0\");");
code("trUnitChangeProtoUnit(\"Vortex Landing\");");
code("trQuestVarSet(\"cloudDeployNext\", trTimeMS() + 1500);");
code("trSoundPlayFN(\"vortexstart.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("}");
code("case 1:");
code("{");
code("if (trTimeMS() > trQuestVarGet(\"cloudDeployNext\")) {");
code("trQuestVarSetFromRand(\"cloudDeployCount\", 3, 6, true);");
code("trQuestVarSetFromRand(\"cloudDeployProto\", 1, 6, true);");
code("trQuestVarSet(\"cloudDeployStep\", 2);");
code("}");
code("}");
code("case 2:");
code("{");
code("if (trTimeMS() > trQuestVarGet(\"cloudDeployNext\")) {");
code("trQuestVarSetFromRand(\"sound\", 1, 3, true);");
code("trSoundPlayFN(\"suckup\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("trVectorQuestVarSet(\"cloudDeployDir\", rotationMatrix(trVectorQuestVarGet(\"cloudDeployDir\"), -0.757323, 0.653041));");
code("trQuestVarSetFromRand(\"dist\", 2.0, 10.0, false);");
code("vector dir = trVectorQuestVarGet(\"cloudDeployDir\");");
code("pos = trVectorQuestVarGet(\"cloudDeployCenter\");");
code("pos = xsVectorSet(xsVectorGetX(pos) - trQuestVarGet(\"dist\") * xsVectorGetX(dir),0,");
code("xsVectorGetZ(pos) - trQuestVarGet(\"dist\") * xsVectorGetZ(dir));");
code("addGenericProj(dCloudDeployStars,pos,dir);");
code("trQuestVarSet(\"cloudDeployCount\",trQuestVarGet(\"cloudDeployCount\") - 1);");
code("if (trQuestVarGet(\"cloudDeployCount\") == 0) {");
code("trQuestVarSet(\"cloudDeployStep\", 3);");
code("} else {");
code("trQuestVarSet(\"cloudDeployNext\", trQuestVarGet(\"cloudDeployNext\") + 500);");
code("}");
code("}");
code("}");
code("case 3:");
code("{");
code("if (xGetDatabaseCount(dCloudDeployStars) == 0) {");
code("trQuestVarSet(\"cloudDeployStep\", 0);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"cloudDeployLanding\");");
code("trUnitDestroy();");
code("trQuestVarSetFromRand(\"rand\", 30, 90, true);");
code("trQuestVarSet(\"cloudDeployNext\", trTime() + trQuestVarGet(\"rand\"));");
code("}");
code("}");
code("}");
code("}");

code("void spChooseBoon(int eventID = -1) {");
code("xsSetContextPlayer(0);");
code("int proto = 0;");
code("if (xSetPointer(dPlayerData,1) == false) {");
code("debugLog(\"Cannot set pointer of dPlayerData to 1! Context: \" + xsGetContextPlayer());");
code("}");
code("if (xGetInt(dPlayerData,xPlayerGodBoon) == BOON_TWO_RELICS) {");
code("for(a=1; <= CLASS_COUNT) {");
code("proto = xGetInt(dClass, xClassProto, a);");
code("trModifyProtounit(kbGetProtoUnitName(proto), 1, 5, -2);");
code("}");
code("xUnitSelect(dPlayerData, xPlayerUnit);");
code("trUnitChangeProtoUnit(kbGetProtoUnitName(xGetInt(dClass, xClassProto, xGetInt(dPlayerData,xPlayerClass))));");
code("equipRelicsAgain(1);");
code("} else if (xGetInt(dPlayerData, xPlayerGodBoon) == BOON_DOUBLE_FAVOR) {");
code("trSetCivAndCulture(1, 1, 0);");
code("}");
code("xSetInt(dPlayerData, xPlayerGodBoon, trQuestVarGet(\"selectedBoon\"));");
code("trQuestVarSetFromRand(\"rand\", 1, 5, true);");
code("trSoundPlayFN(\"ui\thunder\"+1*trQuestVarGet(\"rand\")+\".wav\",\"1\",-1,\"\",\"\");");
code("vector pos = kbGetBlockPosition(\"\"+1*trQuestVarGet(\"selectedBoonUnit\"));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"boonSpotlight\", true);");
code("trUnitTeleport(xsVectorGetX(pos),0,xsVectorGetZ(pos));");

code("if (xGetInt(dPlayerData, xPlayerGodBoon) == BOON_TWO_RELICS) {");
code("for(a=1; <= CLASS_COUNT) {");
code("proto = xGetInt(dClass, xClassProto, a);");
code("trModifyProtounit(kbGetProtoUnitName(proto), 1, 5, 2);");
code("}");
code("} else if (xGetInt(dPlayerData, xPlayerGodBoon) == BOON_DOUBLE_FAVOR) {");
code("trSetCivAndCulture(1, 0, 0);");
code("} else if (xGetInt(dPlayerData, xPlayerGodBoon) == BOON_MONSTER_COMPANION) {");
code("uiMessageBox(\"Select a monster in the Monsterpedia to be your pet.\");");
code("}");
code("}");

code("void spSwitchToClass(int class = -1) {");
code("xsSetContextPlayer(0);");
code("chooseClass(1, class - 3000);");
code("}");

code("void spExplainClass(int class = -1) {");
code("xsSetContextPlayer(0);");
code("class = class - 4000;");
code("explainClass(class);");
code("}");

code("void spAscendClass(int class = -1) {");
code("xsSetContextPlayer(0);");
code("class = class - 7000;");
code("xSetPointer(dClass, class);");
code("xSetPointer(dPlayerData, 1);");
code("int gemstone = xGetInt(dClass, xClassGemstone);");
code("vector pos = vector(0,0,0);");
code("vector loc = vector(0,0,0);");
code("if (trPlayerResourceCount(1, \"Gold\") < trQuestVarGet(\"goldCost\")) {");
code("trSoundPlayFN(\"cantdothat.wav\",\"1\",-1,\"\",\"\");");
code("uiMessageBox(\"You don't have enough gold! You need \" + 1*trQuestVarGet(\"goldCost\"));");
code("} else if (trQuestVarGet(\"gemstone\"+gemstone) < trQuestVarGet(\"gemstoneCost\")) {");
code("trSoundPlayFN(\"cantdothat.wav\",\"1\",-1,\"\",\"\");");
code("string noMessage = \"You don't have enough \" + gemstoneName(gemstone) + \"! (\";");
code("noMessage = noMessage + 1*trQuestVarGet(\"gemstone\"+gemstone)+\"/\"+1*trQuestVarGet(\"gemstoneCost\")+\")\";");
code("uiMessageBox(noMessage);");
code("} else {");
code("trPlayerGrantResources(1, \"Gold\", 0-trQuestVarGet(\"goldCost\"));");
code("trQuestVarSet(\"gemstone\"+gemstone, trQuestVarGet(\"gemstone\"+gemstone) - trQuestVarGet(\"gemstoneCost\"));");
code("trSoundPlayFN(\"ageadvance.wav\",\"1\",-1,\"\",\"\");");
code("xSetInt(dClass, xClassLevel, 1 + xGetInt(dClass, xClassLevel));");
code("xSetInt(dPlayerData, xPlayerLevel, 1 + xGetInt(dPlayerData, xPlayerLevel));");
code("uiMessageBox(className(class) + \" ascended to level \" + xGetInt(dClass, xClassLevel) + \"! +1 relic slot!\");");
code("trModifyProtounit(kbGetProtoUnitName(xGetInt(dClass, xClassProto)),1,5,1);");
code("trSetCivilizationNameOverride(1, \"Level \" + (1+xGetInt(dPlayerData, xPlayerLevel)));");
code("if (xGetInt(dClass, xClassLevel) >= 5) {");
code("if (xGetInt(dClass, xClassLevel, ALCHEMIST) == 0) {");
code("xSetInt(dClass, xClassLevel, ALCHEMIST);");
code("trModifyProtounit(kbGetProtoUnitName(xGetInt(dClass, xClassProto, ALCHEMIST)),1,5,1);");
code("trQuestVarSet(\"newClasses\", trQuestVarGet(\"newClasses\") + 1);");
code("trQuestVarSet(\"newClass\"+1*trQuestVarGet(\"newClasses\"), ALCHEMIST);");
code("xsEnableRule(\"singleplayer_unlocks\");");
code("pos = kbGetBlockPosition(\"\"+1*trQuestVarGet(\"class\"+ALCHEMIST+\"unit\"));");
code("loc = vectorToGrid(pos);");
code("trPaintTerrain(xsVectorGetX(loc),xsVectorGetZ(loc),xsVectorGetX(loc),xsVectorGetZ(loc),4,15,false);");
code("}");
code("}");
code("if (xGetInt(dClass, xClassLevel) >= 7) {");
code("if (xGetInt(dClass, xClassLevel, STARSEER) == 0) {");
code("xSetInt(dClass, xClassLevel, STARSEER);");
code("trModifyProtounit(kbGetProtoUnitName(xGetInt(dClass, xClassProto, STARSEER)),1,5,1);");
code("trQuestVarSet(\"newClasses\", trQuestVarGet(\"newClasses\") + 1);");
code("trQuestVarSet(\"newClass\"+1*trQuestVarGet(\"newClasses\"), STARSEER);");
code("xsEnableRule(\"singleplayer_unlocks\");");
code("pos = kbGetBlockPosition(\"\"+1*trQuestVarGet(\"class\"+STARSEER+\"unit\"));");
code("loc = vectorToGrid(pos);");
code("trPaintTerrain(xsVectorGetX(loc),xsVectorGetZ(loc),xsVectorGetX(loc),xsVectorGetZ(loc),4,15,false);");
code("}");
code("}");
code("if (xGetInt(dClass, xClassLevel) >= 9) {");
code("if (xGetInt(dClass, xClassLevel, SAVIOR) == 0) {");
code("xSetInt(dClass, xClassLevel, SAVIOR);");
code("trModifyProtounit(kbGetProtoUnitName(xGetInt(dClass, xClassProto, SAVIOR)),1,5,1);");
code("trQuestVarSet(\"newClasses\", trQuestVarGet(\"newClasses\") + 1);");
code("trQuestVarSet(\"newClass\"+1*trQuestVarGet(\"newClasses\"), SAVIOR);");
code("xsEnableRule(\"singleplayer_unlocks\");");
code("pos = kbGetBlockPosition(\"\"+1*trQuestVarGet(\"class\"+SAVIOR+\"unit\"));");
code("loc = vectorToGrid(pos);");
code("trPaintTerrain(xsVectorGetX(loc),xsVectorGetZ(loc),xsVectorGetX(loc),xsVectorGetZ(loc),4,15,false);");
code("}");
code("}");
code("trChatHistoryClear();");
code("trChatSend(0, \"<u><color=1,1,1>Gemstones</color></u>\");");
code("for(x=0; <3) {");
code("trChatSend(0, gemstoneName(x) + \" x\" + 1*trQuestVarGet(\"gemstone\"+x));");
code("}");
code("}");
code("}");

code("void spinQuantumSlotMachine(int eventID = -1) {");
code("xsSetContextPlayer(0);");
code("trQuestVarSet(\"quantumRelic\", 0);");
code("for(x=xGetDatabaseCount(dSlotRelics); >0) {");
code("xDatabaseNext(dSlotRelics);");
code("trQuestVarSet(\"ownedRelics\"+xGetInt(dSlotRelics, xRelicType),");
code("trQuestVarGet(\"ownedRelics\"+xGetInt(dSlotRelics, xRelicType)) - 1);");
code("trQuestVarSet(\"quantumRelic\", trQuestVarGet(\"quantumRelic\") + xGetInt(dSlotRelics, xRelicType));");
code("}");
code("trQuestVarSetFromRand(\"quantumRelic\", 1, xsMin(25, trQuestVarGet(\"quantumRelic\")), true);");
code("for(x=xGetDatabaseCount(dSlotRelics); >0) {");
code("xDatabaseNext(dSlotRelics);");
code("if (trQuestVarGet(\"quantumRelic\") == xGetInt(dSlotRelics, xRelicType)) {");
code("trQuestVarSet(\"quantumRelic\", RELIC_NICKONHAWK_TICKET);");
code("trQuestVarSet(\"dreamGogglesCount\", 1 + trQuestVarGet(\"dreamGogglesCount\"));");
code("}");
code("}");
code("trQuestVarSet(\"ownedRelics\"+1*trQuestVarGet(\"quantumRelic\"),");
code("1 + trQuestVarGet(\"ownedRelics\"+1*trQuestVarGet(\"quantumRelic\")));");
code("trQuestVarSet(\"quantumSlotMachine\", 2);");
code("trQuestVarSet(\"quantumSlotMachineNext\", trTimeMS() + 3000);");
code("trSoundPlayFN(\"plentybirth.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"skypassageout.wav\",\"1\",-1,\"\",\"\");");
code("}");

code("void monsterpedia(int stage = 0, int x = 0) {");
code("int tPrimary = 0;");
code("int tSubPrimary = 34;");
code("switch(stage)");
code("{");
code("case 1:");
code("{");
code("tPrimary = 0;");
code("tSubPrimary = 34;");
code("trStringQuestVarSet(\"enemyProto1\", \"Golden Lion\");");
code("trStringQuestVarSet(\"enemyProto2\", \"Anubite\");");
code("trStringQuestVarSet(\"enemyProto3\", \"Sphinx\");");
code("trStringQuestVarSet(\"enemyProto4\", \"Petsuchos\");");
code("trStringQuestVarSet(\"enemyProto5\", \"Nemean Lion\");");
code("bossScale = 2;");
code("}");
code("case 2:");
code("{");
code("tPrimary = 0;");
code("tSubPrimary = 58;");
code("trStringQuestVarSet(\"enemyProto1\", \"Centaur\");");
code("trStringQuestVarSet(\"enemyProto2\", \"Dryad\");");
code("trStringQuestVarSet(\"enemyProto3\", \"Medusa\");");
code("trStringQuestVarSet(\"enemyProto4\", \"Mountain Giant\");");
code("trStringQuestVarSet(\"enemyProto5\", \"Tamarisk Tree\");");
code("bossScale = 0.8;");
code("}");
code("case 3:");
code("{");
code("tPrimary = 0;");
code("tSubPrimary = 41;");
code("trStringQuestVarSet(\"enemyProto1\", \"Fenris Wolf\");");
code("trStringQuestVarSet(\"enemyProto2\", \"Valkyrie\");");
code("trStringQuestVarSet(\"enemyProto3\", \"Ballista\");");
code("trStringQuestVarSet(\"enemyProto4\", \"Frost Giant\");");
code("trStringQuestVarSet(\"enemyProto5\", \"King Folstag\");");
code("bossScale = 1.25;");
code("}");
code("case 4:");
code("{");
code("tPrimary = 0;");
code("tSubPrimary = 25;");
code("trStringQuestVarSet(\"enemyProto1\", \"Cyclops\");");
code("trStringQuestVarSet(\"enemyProto2\", \"Satyr\");");
code("trStringQuestVarSet(\"enemyProto3\", \"Behemoth\");");
code("trStringQuestVarSet(\"enemyProto4\", \"Avenger\");");
code("trStringQuestVarSet(\"enemyProto5\", \"Chimera\");");
code("bossScale = 1.5;");
code("}");
code("case 5:");
code("{");
code("tPrimary = 5;");
code("tSubPrimary = 5;");
code("trStringQuestVarSet(\"enemyProto1\", \"Wadjet\");");
code("trStringQuestVarSet(\"enemyProto2\", \"Scorpion Man\");");
code("trStringQuestVarSet(\"enemyProto3\", \"Scarab\");");
code("trStringQuestVarSet(\"enemyProto4\", \"Mummy\");");
code("trStringQuestVarSet(\"enemyProto5\", \"Shade of Hades\");");
code("bossScale = 1.5;");
code("}");
code("case 6:");
code("{");
code("tPrimary = 0;");
code("tSubPrimary = 70;");
code("trStringQuestVarSet(\"enemyProto1\", \"Automaton SPC\");");
code("trStringQuestVarSet(\"enemyProto2\", \"Fire Siphon\");");
code("trStringQuestVarSet(\"enemyProto3\", \"Battle Boar\");");
code("trStringQuestVarSet(\"enemyProto4\", \"Colossus\");");
code("trStringQuestVarSet(\"enemyProto5\", \"Helepolis\");");
code("bossScale = 0;");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,2*x+3,0,201,180,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\");");
code("trUnitConvert(0);");
code("trMutateSelected(kbGetProtoUnitID(\"Helepolis\"));");
code("trSetSelectedScale(1.2,0.25,2.0);");
code("xAddDatabaseBlock(dMonsterpedia, true);");
code("xSetInt(dMonsterpedia, xUnitName, 1*trQuestVarGet(\"next\"));");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,2*x+3,0,201,180,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\");");
code("trUnitConvert(0);");
code("trMutateSelected(kbGetProtoUnitID(\"Barracks Atlantean\"));");
code("trSetSelectedScale(0.7,0.5,0.5);");
code("}");
code("case 7:");
code("{");
code("tPrimary = 3;");
code("tSubPrimary = 9;");
code("trStringQuestVarSet(\"enemyProto1\", \"Servant\");");
code("trStringQuestVarSet(\"enemyProto2\", \"Nereid\");");
code("trStringQuestVarSet(\"enemyProto3\", \"Kraken\");");
code("trStringQuestVarSet(\"enemyProto4\", \"Hydra\");");
code("trStringQuestVarSet(\"enemyProto5\", \"Scylla\");");
code("bossScale = 1.3;");
code("}");
code("case 8:");
code("{");
code("tPrimary = 0;");
code("tSubPrimary = 50;");
code("trStringQuestVarSet(\"enemyProto1\", \"Griffon\");");
code("trStringQuestVarSet(\"enemyProto2\", \"Einheriar\");");
code("trStringQuestVarSet(\"enemyProto3\", \"Statue of Lightning\");");
code("trStringQuestVarSet(\"enemyProto4\", \"Lampades\");");
code("trStringQuestVarSet(\"enemyProto5\", \"Nidhogg\");");
code("bossScale = 1.0;");
code("}");
code("}");
code("trPaintTerrain(x, 90, x+3, 101, tPrimary, tSubPrimary, false);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Flag Numbered\",1,2*x+3,0,181,0,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitSetAnimationPath(\"\"+(stage-1)+\",0,0,0,0,0,0\");");
code("for(i=1; < 6) {");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,2*x+3,0,181+4*i,180,true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(0);");
code("trUnitChangeProtoUnit(trStringQuestVarGet(\"enemyProto\"+i));");
code("xAddDatabaseBlock(dMonsterpedia, true);");
code("xSetInt(dMonsterpedia, xUnitName, 1*trQuestVarGet(\"next\"));");
code("if (i < 5) {");
code("xSetInt(dMonsterpedia,xMonsterIndex, 4 * (stage - 1) + i - 1);");
code("} else {");
code("xSetInt(dMonsterpedia, xMonsterIndex, -1);");
code("}");
code("}");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\");");
code("trSetSelectedScale(bossScale,bossScale,bossScale);");
code("}");

code("void answerQuestion(int eventID = -1) {");
code("xsSetContextPlayer(0);");
code("int answer = eventID - 6000;");
code("int question = trQuestVarGet(\"currentQuestion\");");
code("string result = \"Incorrect! \";");

code("if (answer == 1*trQuestVarGet(\"question\"+question+\"answer\")) {");
code("result = \"Correct! \";");
code("trQuestVarSet(\"gemstone\"+1*trQuestVarGet(\"zenoReward\"), 1 + trQuestVarGet(\"gemstone\"+1*trQuestVarGet(\"zenoReward\")));");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"\",\"\");");
code("} else {");
code("trSoundPlayFN(\"cantdothat.wav\",\"1\",-1,\"\",\"\");");
code("}");
code("question = question + 1;");
code("trQuestVarSet(\"currentQuestion\", question);");
code("trStringQuestVarSet(\"question\"+question+\"explain1\", result + trStringQuestVarGet(\"question\"+question+\"explain1\"));");
code("if (trQuestVarGet(\"currentQuestion\") <= trQuestVarGet(\"zenoQuestions\")) {");
code("startNPCDialog(NPC_ZENO_NEXT_QUESTION);");
code("} else {");
code("startNPCDialog(NPC_ZENO_QUIZ_END);");
code("trQuestVarSet(\"zenoQuiz\", 1 + trQuestVarGet(\"zenoQuiz\"));");
code("}");
code("}");

code("void classNewUnlock(int class = 0) {");
code("bool unlocked = false;");
code("int db = trQuestVarGet(\"p1relics\");");
code("if (xGetInt(dClass, xClassLevel, class) == 0) {");
code("switch(class)");
code("{");
code("case FIREKNIGHT:");
code("{");
code("if (trQuestVarGet(\"playerHasHosted\") == 1) {");
code("unlocked = true;");
code("}");
code("}");
code("case THRONESHIELD:");
code("{");
code("if (trQuestVarGet(\"bossKills\") >= 5) {");
code("unlocked = true;");
code("}");
code("}");
code("case STORMCUTTER:");
code("{");
code("unlocked = true;");
code("}");
code("case GARDENER:");
code("{");
code("unlocked = true;");
code("}");
code("case NIGHTRIDER:");
code("{");
code("unlocked = true;");
code("}");
code("case BLASTMAGE:");
code("{");
code("if (trQuestVarGet(\"questCount\") >= 5) {");
code("unlocked = true;");
code("}");
code("}");
code("case SPARKWITCH:");
code("{");
code("trQuestVarSet(\"relicCount\", xGetDatabaseCount(db) + xGetDatabaseCount(dFreeRelics));");
code("if (trQuestVarGet(\"relicCount\") >= 100) {");
code("unlocked = true;");
code("}");
code("}");
code("case COMMANDO:");
code("{");
code("trQuestVarSet(\"relicCount\", xGetDatabaseCount(db) + xGetDatabaseCount(dFreeRelics));");
code("if (trQuestVarGet(\"relicCount\") >= 50) {");
code("unlocked = true;");
code("}");
code("}");
code("case SPELLSTEALER:");
code("{");
code("if (trQuestVarGet(\"chestCount\") == 10) {");
code("unlocked = true;");
code("}");
code("}");
code("case THUNDERRIDER:");
code("{");
code("if (trQuestVarGet(\"giantKills\") >= 100) {");
code("unlocked = true;");
code("}");
code("}");
code("case GAMBLER:");
code("{");
code("if (trPlayerResourceCount(1, \"Gold\") >= 3000) {");
code("unlocked = true;");
code("}");
code("}");
code("}");
code("}");
code("if (unlocked) {");
code("xSetInt(dClass, xClassLevel, 1, class);");
code("trQuestVarSet(\"newClasses\", 1 + trQuestVarGet(\"newClasses\"));");
code("trQuestVarSet(\"newClass\"+1*trQuestVarGet(\"newClasses\"), class);");
code("}");
code("}");

code("rule singleplayer_unlocks");
code("inactive");
code("highFrequency");
code("{");
code("xsDisableSelf();");
code("if (trQuestVarGet(\"newClasses\") > 0) {");
code("trQuestVarSetFromRand(\"sound\", 1, 5, true);");
code("int class = trQuestVarGet(\"newClass\"+1*trQuestVarGet(\"newClasses\"));");
code("trShowImageDialog(classIcon(class), \"New class unlocked! \" + className(class));");
code("trSoundPlayFN(\"ui\thunder\"+1*trQuestVarGet(\"sound\")+\".wav\",\"1\",-1,\"\",\"\");");
code("trDelayedRuleActivation(\"singleplayer_unlocks_2\");");
code("trQuestVarSet(\"newClasses\", trQuestVarGet(\"newClasses\") - 1);");
code("}");
code("}");

code("rule singleplayer_unlocks_2");
code("inactive");
code("highFrequency");
code("{");
code("if ((trIsGadgetVisible(\"ShowImageBox\") == false) &&");
code("(trIsGadgetVisible(\"ingame-messagedialog\") == false)) {");
code("trDelayedRuleActivation(\"singleplayer_unlocks\");");
code("xsDisableSelf();");
code("}");
code("}");

code("rule singleplayer_init");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > cActivationTime + 2) {");
code("xsSetContextPlayer(0);");
code("bool boons = false;");
code("int proto = 0;");
code("vector pos = vector(0,0,0);");
code("xsDisableSelf();");
code("trLetterBox(false);");
code("trUIFadeToColor(0,0,0,1000,0,false);");
code("trMusicPlayCurrent();");
code("trPlayNextMusicTrack();");

code("xSetPointer(dPlayerData, 1);");

code("trVectorQuestVarSet(\"startPosition\", vector(135,0,135));");

code("trPaintTerrain(0,0,145,145,2,13,false);");

code("TERRAIN_WALL = 2;");
code("TERRAIN_SUB_WALL = 13;");

code("trSetUnitIdleProcessing(false);");
code("trPlayerSetDiplomacy(1, 2, \"Enemy\");");
code("trPlayerSetDiplomacy(2, 1, \"Enemy\");");
code("trArmyDispatch(\"1,0\",\"Victory Marker\",1,1,0,1,0,true);");
code("trArmyDispatch(\"2,0\",\"Victory Marker\",1,1,0,1,0,true);");

code("int x = 0;");
code("int z = 15;");
code("for(x=0; <15) {");
code("for(b=0; < 15) {");
code("if (x*x + z*z <= 225) {");
code("trPaintTerrain(72-x,72-z,72+x,72+z,0,50,false);");
code("break;");
code("} else {");
code("z = z - 1;");
code("}");
code("}");
code("}");

code("trPaintTerrain(57,71,73,73,0,53,false);");
code("trPaintTerrain(71,57,73,73,0,53,false);");

code("trQuestVarSet(\"levelupObelisk\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,145,0,118,0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(0);");
code("trMutateSelected(kbGetProtoUnitID(\"Outpost\"));");

code("dRelicDescriptors = xInitDatabase(\"relicDescriptors\");");
code("xInitAddInt(dRelicDescriptors, \"name\");");
code("xInitAddInt(dRelicDescriptors, \"type\");");

code("trPaintTerrain(46,65, 57,78, 0,70, false);");
code("x = 115;");
code("for(a=1; <= 10) {");
code("z = 155;");
code("if (trQuestVarGet(\"ownedRelics\"+a) > 0) {");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"0,0\",\"Dwarf\",1,x,0,z+2,180,true);");
code("trArmySelect(\"0,0\");");
code("trMutateSelected(relicProto(a));");
code("trSetSelectedScale(0.5,0.5,0.5);");
code("xAddDatabaseBlock(dRelicDescriptors, true);");
code("xSetInt(dRelicDescriptors, xUnitName, 1*trQuestVarGet(\"next\"));");
code("xSetInt(dRelicDescriptors, xRelicType, a);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\", \"Dwarf\",trQuestVarGet(\"ownedRelics\"+a),x,0,z,0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Relic\");");
code("for(b=0; <trQuestVarGet(\"ownedRelics\"+a)) {");
code("xAddDatabaseBlock(dFreeRelics, true);");
code("xSetInt(dFreeRelics,xUnitName,1*trQuestVarGet(\"next\"));");
code("xSetInt(dFreeRelics,xRelicType, a);");
code("trQuestVarSet(\"next\", 1 + trQuestVarGet(\"next\"));");
code("}");
code("}");

code("z = 133;");
code("if (trQuestVarGet(\"ownedRelics\"+(a+10)) > 0) {");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"0,0\",\"Dwarf\",1,x,0,z-2,0,true);");
code("trArmySelect(\"0,0\");");
code("trMutateSelected(relicProto(a+10));");
code("trSetSelectedScale(0.5,0.5,0.5);");
code("xAddDatabaseBlock(dRelicDescriptors, true);");
code("xSetInt(dRelicDescriptors, xUnitName, 1*trQuestVarGet(\"next\"));");
code("xSetInt(dRelicDescriptors, xRelicType, a + 10);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\", \"Dwarf\",trQuestVarGet(\"ownedRelics\"+(a+10)),x,0,z,0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Relic\");");
code("for(b=0; <trQuestVarGet(\"ownedRelics\"+(a+10))) {");
code("xAddDatabaseBlock(dFreeRelics, true);");
code("xSetInt(dFreeRelics,xUnitName,1*trQuestVarGet(\"next\"));");
code("xSetInt(dFreeRelics,xRelicType, a + 10);");
code("trQuestVarSet(\"next\", 1 + trQuestVarGet(\"next\"));");
code("}");
code("}");

code("x = x - 2;");
code("}");

code("x = 95;");
code("z = 153;");
code("for(a=21; <= 30) {");
code("if (trQuestVarGet(\"ownedRelics\"+a) > 0) {");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"0,0\",\"Dwarf\",1,x-2,0,z,90,true);");
code("trArmySelect(\"0,0\");");
code("trUnitChangeProtoUnit(kbGetProtoUnitName(relicProto(a)));");
code("trSetSelectedScale(0.5,0.5,0.5);");
code("xAddDatabaseBlock(dRelicDescriptors, true);");
code("xSetInt(dRelicDescriptors, xUnitName, 1*trQuestVarGet(\"next\"));");
code("xSetInt(dRelicDescriptors, xRelicType, a);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\", \"Dwarf\",trQuestVarGet(\"ownedRelics\"+a),x,0,z,0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Relic\");");
code("for(b=0; <trQuestVarGet(\"ownedRelics\"+a)) {");
code("xAddDatabaseBlock(dFreeRelics, true);");
code("xSetInt(dFreeRelics,xUnitName,1*trQuestVarGet(\"next\"));");
code("xSetInt(dFreeRelics,xRelicType, a);");
code("trQuestVarSet(\"next\", 1 + trQuestVarGet(\"next\"));");
code("}");
code("}");
code("z = z - 2;");
code("}");

code("if (xGetInt(dPlayerData, xPlayerProgress) >= 3) {");
code("dMonsterpedia = xInitDatabase(\"monsterpedia\");");
code("xInitAddInt(dMonsterpedia, \"name\");");
code("xMonsterIndex = xInitAddInt(dMonsterpedia, \"index\");");
code("for(x=0; < xGetInt(dPlayerData, xPlayerProgress)) {");
code("monsterpedia(x+1, 57 + 3 * x);");
code("}");
code("trPaintTerrain(71,71,73,87,0,53,false);");
code("trQuestVarSet(\"monsterpediaSpotlight\", -1);");
code("if (xGetInt(dPlayerData, xPlayerGodBoon) == BOON_MONSTER_COMPANION) {");
code("trQuestVarSet(\"monsterpediaSpotlight\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"0,0\",\"Dwarf\",1,1,0,1,0,true);");
code("trArmySelect(\"0,0\");");
code("trUnitChangeProtoUnit(\"Garrison Flag Sky Passage\");");
code("for(x=xGetDatabaseCount(dMonsterpedia); >0) {");
code("xDatabaseNext(dMonsterpedia);");
code("if (xGetInt(dMonsterpedia, xMonsterIndex) == xGetInt(dPlayerData, xPlayerMonsterIndex)) {");
code("pos = kbGetBlockPosition(\"\"+xGetInt(dMonsterpedia, xUnitName));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"monsterpediaSpotlight\");");
code("trUnitTeleport(xsVectorGetX(pos),0,xsVectorGetZ(pos));");
code("break;");
code("}");
code("}");
code("}");
code("xsEnableRule(\"monsterpedia_always\");");
code("}");

code("dBoons = xInitDatabase(\"boonStatues\",12);");
code("xInitAddInt(dBoons,\"name\");");
code("xBoonType = xInitAddInt(dBoons, \"type\");");
code("for(a=1; <=12) {");
code("if (trQuestVarGet(\"boonUnlocked\"+a) == 1) {");
code("if (boons == false) {");
code("trQuestVarSet(\"boonSpotlight\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,1,0,1,0,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Garrison Flag Sky Passage\");");
code("xsEnableRule(\"select_boon\");");
code("trEventSetHandler(8000, \"spChooseBoon\");");
code("trPaintTerrain(71,71,87,73,0,53,false);");
code("trPaintTerrain(88,69, 92,75, 4,15, false);");
code("boons = true;");
code("}");
code("x = 177 + 4 * iModulo(3, a-1);");
code("z = 139 + 4 * ((a-1) / 3);");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Statue of Lightning\",1,x,0,z,180,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\");");
code("trUnitConvert(0);");
code("overrideStatue(a);");
code("xAddDatabaseBlock(dBoons, true);");
code("xSetInt(dBoons, xUnitName, 1*trQuestVarGet(\"next\"));");
code("xSetInt(dBoons, xBoonType, a);");
code("if (xGetInt(dPlayerData, xPlayerGodBoon) == a) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"boonSpotlight\", true);");
code("trUnitTeleport(x,0,z);");
code("}");
code("}");
code("}");

code("if (xGetInt(dClass, xClassLevel, 1) == 0) {");
code("xsEnableRule(\"singleplayer_cin\");");
code("xSetInt(dClass, xClassLevel, 1, 1);");
code("xSetInt(dClass, xClassLevel, 1, 2);");
code("trQuestVarSet(\"gemstone\"+STARSTONE, 1 + trQuestVarGet(\"gemstone\"+STARSTONE));");
code("startNPCDialog(NPC_EXPLAIN_SINGLEPLAYER);");
code("} else {");
code("xsEnableRule(\"gameplay_start_2\");");
code("xsEnableRule(\"singleplayer_unlocks\");");
code("trEventSetHandler(6001, \"answerQuestion\");");
code("trEventSetHandler(6002, \"answerQuestion\");");
code("for(a=4 * (1 + xsFloor(xGetInt(dPlayerData, xPlayerProgress) / 2)); >2) {");
code("classNewUnlock(a);");
code("}");
code("if (boons && (trQuestVarGet(\"boonUnlocked0\") == 0)) {");
code("startNPCDialog(NPC_EXPLAIN_BOONS);");
code("}");
code("if (xGetInt(dPlayerData, xPlayerProgress) > trQuestVarGet(\"zenoQuiz\")) {");
code("trQuestVarSet(\"zenoUnit\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\", \"Hoplite\", 1, 131, 0, 161, 225, true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"zenoUnit\", true);");
code("trUnitConvert(0);");
code("xsEnableRule(\"zeno_quiz_start\");");
code("if (trQuestVarGet(\"zenoQuiz\") == 2) {");
code("uiLookAtUnitByName(\"\"+xGetInt(dMonsterpedia, xUnitName));");
code("startNPCDialog(NPC_MONSTERPEDIA);");
code("}");
code("}");
code("if (trQuestVarGet(\"p1nickQuestProgress\") > 0) {");
code("if (trQuestVarGet(\"p1nickQuestProgress\") == 6) {");
code("trQuestVarSet(\"p1nickQuestProgress\", 5);");
code("}");
code("dSlotRelics = xInitDatabase(\"slotRelics\");");
code("xInitAddInt(dSlotRelics, \"name\");");
code("xInitAddInt(dSlotRelics, \"type\");");
code("dSlotUnits = xInitDatabase(\"slotUnits\");");
code("xInitAddInt(dSlotUnits, \"name\");");
code("xSlotRelicPad = xInitAddInt(dSlotRelics, \"pad\");");
code("trQuestVarSet(\"nextPad\", 0);");
code("trEventSetHandler(9000, \"spinQuantumSlotMachine\");");
code("trVectorQuestVarSet(\"nickPos\", vector(161,0,161));");
code("if (trQuestVarGet(\"p1nickEquipped\") == 0) {");
code("trQuestVarSet(\"nickonhawk\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\", \"Dwarf\", 1, 161, 0, 161, 225, true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"nickonhawk\");");
code("trUnitConvert(0);");
code("if (trQuestVarGet(\"p1nickQuestProgress\") < 5) {");
code("trUnitChangeProtoUnit(\"Relic\");");
code("xAddDatabaseBlock(dFreeRelics, true);");
code("xSetInt(dFreeRelics, xUnitName, 1*trQuestVarGet(\"nickonhawk\"));");
code("xSetInt(dFreeRelics, xRelicType, RELIC_NICKONHAWK);");
code("} else {");
code("xsEnableRule(\"quantum_slot_machine\");");
code("trQuestVarSet(\"quantumSlotMachine\", 1);");
code("trUnitChangeProtoUnit(\"Hero Greek Odysseus\");");
code("pos = vector(161,0,165);");
code("for(x=1; <= 3) {");
code("trQuestVarSet(\"pad\"+x, trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),225,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"pad\"+x, true);");
code("trUnitConvert(0);");
code("trMutateSelected(kbGetProtoUnitID(\"Statue of Automaton Base\"));");
code("trSetSelectedScale(1.5,1,1.5);");
code("pos = xsVectorSet(xsVectorGetX(pos) + 2, 0, xsVectorGetZ(pos) - 2);");
code("}");
code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",trQuestVarGet(\"dreamGogglesCount\"),163,0,159,225,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Relic\");");
code("for(x=trQuestVarGet(\"dreamGogglesCount\"); >0) {");
code("xAddDatabaseBlock(dFreeRelics, true);");
code("xSetInt(dFreeRelics, xUnitName, 1*trQuestVarGet(\"next\"));");
code("xSetInt(dFreeRelics, xRelicType, RELIC_NICKONHAWK_TICKET);");
code("trQuestVarSet(\"next\", 1 + trQuestVarGet(\"next\"));");
code("}");
code("}");
code("} else if (trQuestVarGet(\"p1nickQuestProgress\") == 4) {");
code("startNPCDialog(NPC_NICK_START + 4);");
code("trQuestVarSet(\"nickspotlight\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,161,0,161,225,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Relic\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"nickSpotlight\", true);");
code("trMutateSelected(kbGetProtoUnitID(\"Hero Birth\"));");
code("}");
code("}");
code("}");

code("if (xGetInt(dPlayerData, xPlayerClass) == 0) {");
code("xSetInt(dPlayerData, xPlayerClass, MOONBLADE);");
code("}");
code("chooseClass(1, xGetInt(dPlayerData, xPlayerClass));");

code("trPaintTerrain(69,49, 75,56, 4,15, false);");
code("x = 138;");
code("z = 98;");
code("for(a=1; <= CLASS_COUNT) {");
code("proto = xGetInt(dClass, xClassProto, a);");
code("trModifyProtounit(kbGetProtoUnitName(proto),1,5,xGetInt(dClass, xClassLevel, a)-1);");
code("if (xGetInt(dPlayerData, xPlayerGodBoon) == BOON_TWO_RELICS) {");
code("trModifyProtounit(kbGetProtoUnitName(proto), 1, 5, 2);");
code("}");
code("trQuestVarSet(\"class\"+a+\"unit\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,x,0,z,180,true);");
code("trArmySelect(\"1,0\");");
code("trUnitConvert(0);");
code("if (a <= 4 * (1 + xsFloor(xGetInt(dPlayerData, xPlayerProgress) / 2))) {");
code("trMutateSelected(xGetInt(dClass, xClassProto, a));");
code("} else {");
code("trUnitChangeProtoUnit(\"Atlantis Wall Connector\");");
code("}");
code("if (xGetInt(dClass, xClassLevel, a) == 0) {");
code("trPaintTerrain(x/2,z/2,x/2,z/2,2,12,false);");
code("}");
code("x = x + 4;");
code("if (x > 150) {");
code("x = 138;");
code("z = z + 4;");
code("}");
code("trEventSetHandler(3000+a, \"spSwitchToClass\");");
code("trEventSetHandler(4000+a, \"spExplainClass\");");
code("trEventSetHandler(7000+a, \"spAscendClass\");");
code("}");

code("trSetCounterDisplay(\"To save and exit, enter the Sky Passage.\");");

code("trSetFogAndBlackmap(false, false);");
code("trSetLighting(\"default\", 0);");

code("trQuestVarSet(\"skyPassage\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,145,0,145,0,true);");
code("trArmySelect(\"1,0\");");
code("trMutateSelected(kbGetProtoUnitID(\"Sky Passage\"));");

code("trPaintTerrain(0,0,5,5,0,70,true);");
code("trPaintTerrain(0,0,5,5,2,13,false);");

code("xsEnableRule(\"singleplayer_always\");");
code("}");
code("}");

code("rule singleplayer_always");
code("inactive");
code("highFrequency");
code("{");
code("xsSetContextPlayer(0);");
code("int class = 0;");
code("int gem = 0;");
code("xSetPointer(dPlayerData, 1);");
code("xUnitSelect(dPlayerData, xPlayerUnit);");
code("if (trUnitGetIsContained(\"Sky Passage\")) {");
code("xsDisableSelf();");
code("xsDisableRule(\"gameplay_always\");");

code("for(x=30; >0) {");
code("trQuestVarSet(\"ownedRelics\"+x, 0);");
code("}");
code("for(x=xGetDatabaseCount(dFreeRelics); >0) {");
code("xDatabaseNext(dFreeRelics);");
code("class = xGetInt(dFreeRelics, xRelicType);");
code("trQuestVarSet(\"ownedRelics\"+class, 1 + trQuestVarGet(\"ownedRelics\"+class));");
code("}");
code("saveAllData();");

code("trUIFadeToColor(255,255,255,1000,0,true);");
code("xsEnableRule(\"singleplayer_end\");");

code("}");

code("for(x=CLASS_COUNT; >0) {");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"class\"+x+\"unit\");");
code("if (trUnitIsSelected()) {");
code("reselectMyself();");
code("if (x > 4 * (1 + xsFloor(xGetInt(dPlayerData, xPlayerProgress) / 2))) {");
code("explainClass(x + 16);");
code("} else if (xGetInt(dPlayerData, xPlayerClass) == x || xGetInt(dClass, xClassLevel, x) == 0) {");
code("explainClass(x);");
code("if (xGetInt(dClass, xClassLevel, x) == 0) {");
code("trDelayedRuleActivation(\"singleplayer_explain_class\");");
code("}");
code("} else if (xGetInt(dClass, xClassLevel, x) > 0) {");
code("gem = xGetInt(dClass, xClassGemstone, x);");
code("trShowChoiceDialog(className(x) + \" (Level \" + xGetInt(dClass, xClassLevel, x)+\") [\" + gemstoneName(gem) + \"]\",");
code("\"Switch to this class\", 3000 + x, \"View class details\", 4000 + x);");
code("}");
code("}");
code("}");

code("trUnitSelectClear();");
code("trUnitSelectByQV(\"levelupObelisk\");");
code("if (trUnitIsSelected()) {");
code("reselectMyself();");
code("class = xGetInt(dPlayerData, xPlayerClass);");
code("xSetPointer(dClass, class);");
code("trQuestVarSet(\"goldCost\", 100 * xGetInt(dClass, xClassLevel));");
code("trQuestVarSet(\"gemstoneCost\", (1 + xGetInt(dClass, xClassLevel)) / 2);");
code("string yesPrompt = \"Yes (\" + 1*trQuestVarGet(\"goldCost\") + \" gold + \" + 1*trQuestVarGet(\"gemstoneCost\") + \" \";");
code("yesPrompt = yesPrompt + gemstoneName(xGetInt(dClass, xClassGemstone)) + \")\";");
code("if (xGetInt(dPlayerData, xPlayerLevel) < 9) {");
code("trShowChoiceDialog(\"Ascend \" + className(class) + \"? (Increases relic capacity by 1)\",");
code("yesPrompt, 7000+class, \"No\", -1);");
code("trChatHistoryClear();");
code("trChatSend(0, \"<u><color=1,1,1>Gemstones</color></u>\");");
code("for(x=0; <3) {");
code("trChatSend(0, gemstoneName(x) + \" x\" + 1*trQuestVarGet(\"gemstone\"+x));");
code("}");
code("} else {");
code("uiMessageBox(\"You have reached the max level for \" + className(class) + \"!\");");
code("}");
code("}");

code("if (xGetDatabaseCount(dRelicDescriptors) > 0) {");
code("xDatabaseNext(dRelicDescriptors);");
code("xUnitSelect(dRelicDescriptors, xUnitName);");
code("if (trUnitIsSelected()) {");
code("if (trQuestVarGet(\"selectedDescriptor\") != xGetInt(dRelicDescriptors, xUnitName)) {");
code("trStringQuestVarSet(\"description\", relicName(xGetInt(dRelicDescriptors, xRelicType)) + \":Count: \");");
code("trSoundPlayFN(\"\",\"1\",-1,");
code("trStringQuestVarGet(\"description\") + 1*trQuestVarGet(\"ownedRelics\"+xGetInt(dRelicDescriptors, xRelicType)),\"\");");
code("trQuestVarSet(\"selectedDescriptor\", xGetInt(dRelicDescriptors, xUnitName));");
code("}");
code("} else if (trQuestVarGet(\"selectedDescriptor\") == xGetInt(dRelicDescriptors, xUnitName)) {");
code("trQuestVarSet(\"selectedDescriptor\",0);");
code("trLetterBox(false);");
code("}");
code("}");
code("}");

code("rule singleplayer_end");
code("inactive");
code("highFrequency");
code("{");
code("if (trTime() > 1 + cActivationTime) {");
code("trModeEnter(\"Pregame\");");
code("}");
code("}");


code("rule singleplayer_explain_class");
code("inactive");
code("highFrequency");
code("{");
code("if (trQuestVarGet(\"explain\") == 0 && trIsGadgetVisible(\"ShowImageBox\") == false) {");
code("xsDisableSelf();");
code("int class = trQuestVarGet(\"pleaseExplain\");");
code("switch(class)");
code("{");
code("case THUNDERRIDER:");
code("{");
code("uiMessageBox(\"To unlock this class, kill 100 Giants. Current: \" + 1*trQuestVarGet(\"giantKills\"));");
code("}");
code("case FIREKNIGHT:");
code("{");
code("uiMessageBox(\"To unlock this class, host this map in multiplayer once.\");");
code("}");
code("case THRONESHIELD:");
code("{");
code("uiMessageBox(\"To unlock this class, defeat five bosses. Current: \" + 1*trQuestVarGet(\"bossKills\"));");
code("}");
code("case ALCHEMIST:");
code("{");
code("uiMessageBox(\"To unlock this class, ascend a character to level 5.\");");
code("}");
code("case BLASTMAGE:");
code("{");
code("uiMessageBox(\"To unlock this class, complete five quests. Current: \" + 1*trQuestVarGet(\"questCount\"));");
code("}");
code("case SPARKWITCH:");
code("{");
code("uiMessageBox(\"To unlock this class, collect 100 relics. Current: \" + 1*trQuestVarGet(\"relicCount\"));");
code("}");
code("case STORMCUTTER:");
code("{");
code("uiMessageBox(\"To unlock this class, clear stage 2.\");");
code("}");
code("case SPELLSTEALER:");
code("{");
code("uiMessageBox(\"To unlock this class, open ten chests. Current: \" + 1*trQuestVarGet(\"chestCount\"));");
code("}");
code("case COMMANDO:");
code("{");
code("uiMessageBox(\"To unlock this class, collect 50 relics. Current: \" + 1*trQuestVarGet(\"relicCount\"));");
code("}");
code("case SAVIOR:");
code("{");
code("uiMessageBox(\"To unlock this class, ascend a character to level 9\");");
code("}");
code("case STARSEER:");
code("{");
code("uiMessageBox(\"To unlock this class, ascend a character to level 7\");");
code("}");
code("case GAMBLER:");
code("{");
code("uiMessageBox(\"To unlock this class, acquire 3000 gold.\");");
code("}");
code("}");
code("}");
code("}");

code("void setupQuestion(string question = \"\", string first = \"\", string second = \"\", int answer = 1) {");
code("int count = 1 + trQuestVarGet(\"zenoQuestions\");");
code("trQuestVarSet(\"zenoQuestions\", count);");
code("trStringQuestVarSet(\"question\"+count, question);");
code("trStringQuestVarSet(\"question\"+count+\"first\", first);");
code("trStringQuestVarSet(\"question\"+count+\"second\", second);");
code("trQuestVarSet(\"question\"+count+\"answer\", answer);");
code("}");

code("void setupExplain(string explain = \"\", int question = -1) {");
code("if (question < 0) {");
code("question = 1 + trQuestVarGet(\"zenoQuestions\");");
code("}");
code("int count = 1 + trQuestVarGet(\"question\"+question+\"explainations\");");
code("trQuestVarSet(\"question\"+question+\"explainations\", count);");
code("trStringQuestVarSet(\"question\"+question+\"explain\"+count, explain);");
code("}");


code("rule zeno_quiz_start");
code("inactive");
code("highFrequency");
code("{");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"zenoUnit\", true);");
code("if (trUnitIsSelected()) {");
code("xsDisableSelf();");
code("reselectMyself();");
code("trQuestVarSet(\"currentQuestion\", 1);");
code("for(x=trQuestVarGet(\"zenoQuestions\"); >0) {");
code("trQuestVarSet(\"question\"+x+\"explainations\", 0);");
code("}");
code("trQuestVarSet(\"zenoQuestions\", 0);");

code("if (trQuestVarGet(\"zenoQuiz\") == 0) {");
code("trQuestVarSet(\"zenoReward\", STARSTONE);");

code("setupExplain(\"Hey it's me, Zenophobia! I've got a fun little quiz for you!\");");
code("setupExplain(\"For each question you answer correctly, I'll give you a Starstone! Ready?\");");
code("setupQuestion(\"What buttons do you press to cast a spell?\", \"Q, W, and E\", \"Click on the god power\", 1);");
code("setupExplain(\"In this game, you can cast your spells by casting Q, W, and E on your keyboard.\");");

code("setupQuestion(\"Which spells cost favor to cast?\", \"All spells cost favor.\", \"Only my ultimate spell costs favor.\",2);");
code("setupExplain(\"Only your ultimate costs favor! The other spells are free!\");");
code("setupExplain(\"In fact, your basic spells generate favor when they hit enemies.\");");

code("setupQuestion(\"The Spell Power stat affects both spell damage and healing.\", \"True\", \"False\", 1);");
code("setupExplain(\"Spell Power affects the healing and damage of your spells.\");");
code("} else {");
code("int gem = 0;");
code("switch(1*trQuestVarGet(\"zenoQuiz\"))");
code("{");
code("case 1:");
code("{");
code("gem = MANASTONE;");

code("setupQuestion(\"You cannot cast spells when stunned.\", \"True\", \"False\", 2);");
code("setupExplain(\"You can still cast spells when stunned.\");");

code("setupQuestion(\"Enemies cannot cast spells when stunned.\", \"True\", \"False\", 1);");
code("setupExplain(\"Enemies cannot cast spells when stunned. In fact, you can interrupt an enemy's spell with a stun!\");");

code("setupQuestion(\"What does the Stun Resistance stat give you?\", \"Grants a percentage chance to ignore a stun.\",");
code("\"Reduces the duration of stuns on you by a percentage\", 2);");
code("setupExplain(\"Stun Resistance will reduce the duration of stuns on you. It stacks multiplicatively.\");");
code("}");
code("case 2:");
code("{");
code("gem = SOULSTONE;");
code("setupQuestion(\"Being poisoned prevents you from healing.\", \"True\", \"False\", 1);");
code("setupExplain(\"In addition to dealing damage over time, the poison status effect prevents you from healing.\");");

code("setupQuestion(\"Spell Duration affects the duration of Stuns and Poisons that you inflict on enemies.\",");
code("\"True\", \"False\", 1);");
code("setupExplain(\"Spell Duration does increase the duration of your Stuns and Poisons.\");");

code("setupQuestion(\"Spell Power affects the damage of Poisons that you inflict on enemies.\",");
code("\"True\", \"False\", 1);");
code("setupExplain(\"Your poison damage is increased by Spell Power.\");");
code("}");
code("case 3:");
code("{");
code("gem = MANASTONE;");
code("setupQuestion(\"Inflicting Silence on an enemy will prevent them from using their special attack.\",");
code("\"True\", \"False\", 1);");
code("setupExplain(\"Not only will Silence prevent an enemy's special attacks, their passive abilities are disabled!\");");
code("setupExplain(\"For example, silencing a Dryad will prevent them from bleeding poison on death!\");");

code("setupQuestion(\"Inflicting Silence on a boss will prevent it from casting spells.\", \"True\", \"False\", 2);");
code("setupExplain(\"Silences will only extend the duration of a boss's cooldowns.\");");

code("setupExplain(\"Next Question: Each cooldown reduction relic grants 0.15x cooldown reduction.\");");
code("setupQuestion(\"If I have 10 cooldown reduction relics, how long are my cooldowns?\",");
code("\"Cooldowns are 0\", \"Cooldowns are 0.2x as long\", 2);");
code("setupExplain(\"Cooldown reduction stacks multiplicatively, not additively. You cannot reach 0 cooldowns.\");");
code("}");
code("case 4:");
code("{");
code("gem = SOULSTONE;");
code("setupQuestion(\"All players must be present to start the boss battle.\",\"True\",\"False\",2);");
code("setupExplain(\"Only the living players need to be present. Dead players will be automatically revived.\");");

code("setupQuestion(\"If a unit is afflicted with two different poisons, how is the damage calculated?\",");
code("\"The poison damage adds up.\",\"Only the strongest poison deals damage.\",2);");
code("setupExplain(\"Only the strongest poison deals damage. Poison damage does not stack.\");");

code("setupQuestion(\"Launching an enemy into a wall will stun them.\", \"True\", \"False\",1);");
code("setupExplain(\"Some abilities will launch enemies. Launching an enemy into a wall will stun them!\");");
code("}");
code("case 5:");
code("{");
code("gem = STARSTONE;");
code("setupQuestion(\"Ultimate Cost Reduction does not work on toggled Ultimates\",\"True\",\"False\",2);");
code("setupExplain(\"Ultimate Cost Reduction will decrease the favor drain of toggled Ultimates.\");");

code("setupQuestion(\"Only melee characters have Special Attacks.\",\"True\",\"False\",1);");
code("setupExplain(\"Melee characters have Special Attacks, while ranged characters have Projectiles.\");");

code("setupExplain(\"Congratulations on beating floor 6! The real challenge begins now!\");");
code("setupExplain(\"Each of the remaining floors is extremely difficult. You will need to coordinate with your friends!\");");
code("}");
code("case 6:");
code("{");
code("setupQuestion(\"You can press Escape to close a relic image box.\",\"True\",\"False\",1);");
code("setupExplain(\"I painstakingly coded this myself. It's not a default AoM feature. So use it you bastards.\");");
code("setupExplain(\"No one appreciates the work I put into this... *sniffle*\");");
code("}");
code("}");
code("trQuestVarSet(\"zenoReward\", gem);");
code("setupExplain(\"Hey it's me again! Here comes another quiz!\", 1);");
code("setupExplain(\"This time, I'll give you a \"+gemstoneName(gem)+\" for each correct answer!\", 1);");
code("}");
code("startNPCDialog(NPC_ZENO_NEXT_QUESTION);");
code("}");
code("}");

code("void desc(string description = \"\") {");
code("trQuestVarSet(\"descriptionCount\", 1 + trQuestVarGet(\"descriptionCount\"));");
code("trStringQuestVarSet(\"description\"+1*trQuestVarGet(\"descriptionCount\"), description);");
code("}");

code("rule monsterpedia_always");
code("inactive");
code("highFrequency");
code("{");
code("xDatabaseNext(dMonsterpedia);");
code("int id = kbGetBlockID(\"\"+xGetInt(dMonsterpedia, xUnitName));");
code("trUnitSelectClear();");
code("trUnitSelectByID(id);");
code("string name = \"N/A\";");
code("if (trUnitIsSelected()) {");
code("name = kbGetProtoUnitName(kbGetUnitBaseTypeID(id));");
code("trQuestVarSet(\"descriptionCount\", 0);");
code("trStringQuestVarSet(\"description1\", \"No abilities\");");
code("switch(kbGetUnitBaseTypeID(id))");
code("{");
code("case kbGetProtoUnitID(\"Sphinx\"):");
code("{");
code("desc(\"Its whirlwind attack will silence nearby players.\");");
code("}");
code("case kbGetProtoUnitID(\"Dryad\"):");
code("{");
code("desc(\"On death, it will spill poisonous blood and poison nearby units.\");");
code("}");
code("case kbGetProtoUnitID(\"Medusa\"):");
code("{");
code("desc(\"Launches a ball of light that chases a player and stuns if it hits.\");");
code("}");
code("case kbGetProtoUnitID(\"Mountain Giant\"):");
code("{");
code("desc(\"Slams the ground with its club, dealing high damage in a small area.\");");
code("}");
code("case kbGetProtoUnitID(\"Valkyrie\"):");
code("{");
code("desc(\"Immune to spell damage. (A silence will temporarily disable this effect)\");");
code("}");
code("case kbGetProtoUnitID(\"Ballista\"):");
code("{");
code("desc(\"Fires slow-moving rockets in a straight line with its attacks.\");");
code("}");
code("case kbGetProtoUnitID(\"Frost Giant\"):");
code("{");
code("desc(\"Breath attack will stun its target.\");");
code("}");
code("case kbGetProtoUnitID(\"Satyr\"):");
code("{");
code("desc(\"Calls down a barrage of arrows in a line.\");");
code("}");
code("case kbGetProtoUnitID(\"Behemoth\"):");
code("{");
code("desc(\"Immune to physical damage. Takes double damage from spells.\");");
code("}");
code("case kbGetProtoUnitID(\"Avenger\"):");
code("{");
code("desc(\"Has a spin attack that silences all targets hit.\");");
code("}");
code("case kbGetProtoUnitID(\"Wadjet\"):");
code("{");
code("desc(\"On death, spills poisonous blood and poisons nearby units.\");");
code("}");
code("case kbGetProtoUnitID(\"Scorpion Man\"):");
code("{");
code("desc(\"It will sting its target and poison them.\");");
code("}");
code("case kbGetProtoUnitID(\"Scarab\"):");
code("{");
code("desc(\"Immune to physical damage. Takes double damage from spells.\");");
code("desc(\"On death, releases a permanent cloud of miasma that poisons units in it.\");");
code("}");
code("case kbGetProtoUnitID(\"Mummy\"):");
code("{");
code("desc(\"Launches dark clouds that damage and silence players.\");");
code("desc(\"For its special attack, it launches a cloud of poison in a line.\");");
code("}");
code("case kbGetProtoUnitID(\"Automaton SPC\"):");
code("{");
code("name = \"Automaton\";");
code("desc(\"On death, turns into a time bomb that explodes after three seconds.\");");
code("}");
code("case kbGetProtoUnitID(\"Colossus\"):");
code("{");
code("desc(\"Immune to spell damage. (A silence will temporarily disable this effect)\");");
code("}");
code("case kbGetProtoUnitID(\"Battle Boar\"):");
code("{");
code("desc(\"Its special attack will launch its target and nearby units.\");");
code("}");
code("case kbGetProtoUnitID(\"Fire Siphon\"):");
code("{");
code("desc(\"It fires a high-powered laser\");");
code("}");
code("case kbGetProtoUnitID(\"Nereid\"):");
code("{");
code("desc(\"Its special attack will launch players a great distance and deal damage.\");");
code("}");
code("case kbGetProtoUnitID(\"Kraken\"):");
code("{");
code("desc(\"Its tentacle attack will stun and damage all units in a line.\");");
code("}");
code("case kbGetProtoUnitID(\"Hydra\"):");
code("{");
code("desc(\"Regenerates 1 percent health each second. (interrupted by Poison)\");");
code("}");
code("case kbGetProtoUnitID(\"Nemean Lion\"):");
code("{");
code("name = \"The King of Beasts\";");
code("desc(\"Drops: Starstone\");");
code("desc(\"Common Relic: \" + relicName(11));");
code("desc(\"His roar deals high damage but it can be blocked by the terrain.\");");
code("}");
code("case kbGetProtoUnitID(\"Tamarisk Tree\"):");
code("{");
code("name = \"The Wraithwood\";");
code("desc(\"Drops: Soulstone\");");
code("desc(\"Common Relic: \" + relicName(12));");
code("desc(\"It summons animate trees to attack players. The trees must be destroyed to damage it.\");");
code("desc(\"It will also try to heal by absorbing lights. Players can intercept the lights to prevent this.\");");
code("}");
code("case kbGetProtoUnitID(\"King Folstag\"):");
code("{");
code("name = \"The King of Ice\";");
code("desc(\"Drops: Manastone\");");
code("desc(\"Common Relic: \" + relicName(13));");
code("desc(\"His breath attack will continuously stun and deal high damage.\");");
code("desc(\"Whenever a unit is stunned near one of his icicles, it will grow in size.\");");
code("desc(\"An icicle at max size will turn into a Frost Giant.\");");
code("}");
code("case kbGetProtoUnitID(\"Chimera\"):");
code("{");
code("name = \"Escaped Amalgam\";");
code("desc(\"Drops: Starstone\");");
code("desc(\"Common Relic: \" + relicName(14));");
code("desc(\"It has various breath attacks and can also spew rotating flames.\");");
code("}");
code("case kbGetProtoUnitID(\"Shade of Hades\"):");
code("{");
code("name = \"The Lonely Ghost\";");
code("desc(\"Drops: Soulstone\");");
code("desc(\"Common Relic: \" + relicName(15));");
code("desc(\"It launches itself at walls, releasing projectiles in all directions.\");");
code("desc(\"The battle area will also shrink as it loses health.\");");
code("}");
code("case kbGetProtoUnitID(\"Helepolis\"):");
code("{");
code("name = \"The Exterminator\";");
code("desc(\"Drops: Manastone\");");
code("desc(\"Common Relic: \" + relicName(16));");
code("desc(\"It has a large arsenal of explosive weaponry and can also run over players.\");");
code("}");
code("case kbGetProtoUnitID(\"Scylla\"):");
code("{");
code("name = \"Mother of the Depths\";");
code("desc(\"Drops: Soulstone\");");
code("desc(\"Common Relic: \" + relicName(17));");
code("desc(\"She has powerful area attacks using her massive body.\");");
code("desc(\"She can also eat a player, incapacitating them for ten seconds.\");");
code("desc(\"During this time, she heals for 1 percent of her health each second.\");");
code("desc(\"If she is poisoned, the eating time is halved and her healing is prevented.\");");
code("}");
code("}");
code("uiClearSelection();");
code("trChatHistoryClear();");
code("trChatSend(0, \"<color=1,1,1><u>\"+name+\"</u></color>\");");
code("trChatSend(0, trStringQuestVarGet(\"description1\"));");
code("for(x=2; <= trQuestVarGet(\"descriptionCount\")) {");
code("trChatSend(0, trStringQuestVarGet(\"description\"+x));");
code("}");
code("if (xGetInt(dPlayerData, xPlayerGodBoon, 1) == BOON_MONSTER_COMPANION) {");
code("if (xGetInt(dMonsterpedia,xMonsterIndex) > 0) {");
code("xSetInt(dPlayerData, xPlayerMonsterIndex, xGetInt(dMonsterpedia, xMonsterIndex), 1);");
code("xSetInt(dPlayerData, xPlayerMonsterProto, kbGetUnitBaseTypeID(id), 1);");
code("vector pos = kbGetBlockPosition(\"\"+xGetInt(dMonsterpedia, xUnitName));");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"monsterpediaSpotlight\");");
code("if (trUnitAlive() == false) {");
code("trQuestVarSet(\"monsterpediaSpotlight\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"0,0\",\"Dwarf\",1,1,0,1,0,true);");
code("trArmySelect(\"0,0\");");
code("trUnitChangeProtoUnit(\"Garrison Flag Sky Passage\");");
code("}");
code("trUnitTeleport(xsVectorGetX(pos),0,xsVectorGetZ(pos));");
code("}");
code("}");
code("}");
code("}");

code("rule choose_boon");
code("inactive");
code("highFrequency");
code("{");
code("if (trIsGadgetVisible(\"ShowImageBox\") == false) {");
code("xsEnableRule(\"select_boon\");");
code("xsDisableSelf();");
code("trShowChoiceDialog(\"Choose this Blessing?\",\"Yes\", 8000, \"No\", -1);");
code("}");
code("}");

code("rule select_boon");
code("inactive");
code("highFrequency");
code("{");
code("xDatabaseNext(dBoons);");
code("xUnitSelect(dBoons, xUnitName);");
code("int boon = xGetInt(dBoons, xBoonType);");
code("if (trUnitIsSelected()) {");
code("reselectMyself();");
code("trShowImageDialog(boonIcon(boon), boonName(boon));");
code("if (xGetInt(dPlayerData, xPlayerGodBoon, 1) != boon) {");
code("trQuestVarSet(\"selectedBoon\", boon);");
code("trQuestVarSet(\"selectedBoonUnit\", xGetInt(dBoons, xUnitName));");
code("xsEnableRule(\"choose_boon\");");
code("xsDisableSelf();");
code("}");
code("}");
code("}");

code("rule nick_transform");
code("inactive");
code("highFrequency");
code("{");
code("if (trTimeMS() > trQuestVarGet(\"cinTime\")) {");
code("trQuestVarSet(\"cinStep\", 1 + trQuestVarGet(\"cinStep\"));");
code("switch(1*trQuestVarGet(\"cinStep\"))");
code("{");
code("case 1:");
code("{");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"nickonhawk\", true);");
code("trUnitTeleport(161,0,161);");
code("trUnitChangeProtoUnit(\"Hero Greek Odysseus\");");
code("trUnitSetHeading(225);");
code("trSoundPlayFN(\"sentinelbirth.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"lightthunder.wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSet(\"cinTime\", trTimeMS() + 2000);");
code("}");
code("case 2:");
code("{");
code("startNPCDialog(NPC_NICK_QUEST_COMPLETE);");
code("xsDisableSelf();");

code("vector pos = vector(161,0,165);");
code("for(x=1; <= 3) {");
code("trQuestVarSet(\"pad\"+x, trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),225,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"pad\"+x, true);");
code("trUnitConvert(0);");
code("trMutateSelected(kbGetProtoUnitID(\"Statue of Automaton Base\"));");
code("trSetSelectedScale(1.5,1,1.5);");

code("trQuestVarSet(\"next\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,xsVectorGetX(pos),0,xsVectorGetZ(pos),225,true);");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"next\", true);");
code("trUnitConvert(0);");
code("trMutateSelected(kbGetProtoUnitID(\"Cinematic Block\"));");
code("xAddDatabaseBlock(dSlotRelics, true);");
code("xSetInt(dSlotRelics, xUnitName, 1*trQuestVarGet(\"next\"));");

code("pos = xsVectorSet(xsVectorGetX(pos) + 2, 0, xsVectorGetZ(pos) - 2);");
code("}");
code("}");
code("}");
code("}");
code("}");

code("rule quantum_slot_machine");
code("inactive");
code("highFrequency");
code("{");
code("int id = 0;");
code("switch(1*trQuestVarGet(\"quantumSlotMachine\"))");
code("{");
code("case 1:");
code("{");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"nickonhawk\", true);");
code("if (trUnitIsSelected()) {");
code("if (xGetDatabaseCount(dSlotRelics) < 3) {");
code("startNPCDialog(NPC_NICK_SLOT_MACHINE);");
code("} else {");
code("trShowChoiceDialog(\"Sacrifice these relics to get a random new one?\",\"Yes\",9000,\"No\",-1);");
code("}");
code("reselectMyself();");
code("}");
code("if (xGetDatabaseCount(dSlotRelics) > 0) {");
code("xDatabaseNext(dSlotRelics);");
code("xUnitSelect(dSlotRelics, xUnitName);");
code("if (trUnitIsOwnedBy(1)) {");
code("xFreeDatabaseBlock(dSlotRelics);");
code("} else if (trUnitIsSelected()) {");
code("relicDescription(xGetInt(dSlotRelics, xRelicType));");
code("reselectMyself();");
code("}");
code("}");
code("}");
code("case 2:");
code("{");
code("trQuestVarSetFromRand(\"type\", 1, 26, true);");
code("xDatabaseNext(dSlotRelics);");
code("xUnitSelect(dSlotRelics, xUnitName);");
code("trMutateSelected(relicProto(1*trQuestVarGet(\"type\")));");
code("if (trTimeMS() > trQuestVarGet(\"quantumSlotMachineNext\")) {");
code("trQuestVarSet(\"quantumSlotMachineNext\", trTimeMS() + 1000);");
code("trSoundPlayFN(\"plentyvaultstolen.wav\",\"1\",-1,\"\",\"\");");
code("trSoundPlayFN(\"skypassagein.wav\",\"1\",-1,\"\",\"\");");
code("trUnitChangeProtoUnit(kbGetProtoUnitName(relicProto(1*trQuestVarGet(\"quantumRelic\"))));");
code("xAddDatabaseBlock(dSlotUnits, true);");
code("xSetInt(dSlotUnits, xUnitName, xGetInt(dSlotRelics, xUnitName));");
code("xFreeDatabaseBlock(dSlotRelics);");
code("if (xGetDatabaseCount(dSlotRelics) == 0) {");
code("trQuestVarSet(\"quantumSlotMachine\", 3);");
code("}");
code("}");
code("}");
code("case 3:");
code("{");
code("if (trTimeMS() > trQuestVarGet(\"quantumSlotMachineNext\")) {");
code("trSoundPlayFN(\"sentinelbirth.wav\",\"1\",-1,\"\",\"\");");
code("trQuestVarSet(\"newRelic\", trGetNextUnitScenarioNameNumber());");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,159,0,159,225,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Cinematic Block\");");
code("trArmyDispatch(\"1,0\",\"Dwarf\",1,159,0,159,225,true);");
code("trArmySelect(\"1,0\");");
code("trUnitChangeProtoUnit(\"Traitors effect\");");
code("trQuestVarSet(\"quantumSlotMachine\", 4);");
code("trQuestVarSet(\"quantumSlotMachineNext\", trTimeMS() + 2000);");
code("}");
code("}");
code("case 4:");
code("{");
code("if (trTimeMS() > trQuestVarGet(\"quantumSlotMachineNext\")) {");
code("for(x=xGetDatabaseCount(dSlotUnits); >0) {");
code("xDatabaseNext(dSlotUnits);");
code("xUnitSelect(dSlotUnits, xUnitName);");
code("trUnitChangeProtoUnit(\"Hero Death\");");
code("}");
code("xClearDatabase(dSlotUnits);");
code("trSoundPlayFN(\"favordump.wav\",\"1\",-1,\"\",\"\");");
code("trUnitSelectClear();");
code("trUnitSelectByQV(\"newRelic\", true);");
code("trUnitChangeProtoUnit(\"Relic\");");
code("xAddDatabaseBlock(dFreeRelics, true);");
code("xSetInt(dFreeRelics, xUnitName, 1*trQuestVarGet(\"newRelic\"));");
code("xSetInt(dFreeRelics, xRelicType, 1*trQuestVarGet(\"quantumRelic\"));");
code("trQuestVarSet(\"quantumSlotMachine\", 1);");
code("}");
code("}");
code("}");
code("}");
rmAddTriggerEffect("SetIdleProcessing");
rmSetTriggerEffectParam("IdleProc",");*/rule _zenowashereagain inactive {if(true){xsDisableSelf();//");
rmSetStatusText("", 0.99);}